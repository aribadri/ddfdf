import {
  GLTFLoader_exports,
  init_GLTFLoader
} from "./chunk-GTMK6LXJ.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  AmbientLight,
  AnimationClip,
  Bone,
  BufferGeometry,
  ClampToEdgeWrapping,
  Color,
  Curve,
  DataTextureLoader,
  DirectionalLight,
  DoubleSide,
  EquirectangularReflectionMapping,
  Euler,
  EventDispatcher,
  FileLoader,
  Float32BufferAttribute,
  FrontSide,
  Group,
  Line,
  LineBasicMaterial,
  LineSegments,
  LinearMipmapLinearFilter,
  Loader,
  LoaderUtils,
  MOUSE,
  Material,
  MathUtils,
  Matrix3,
  Matrix4,
  Mesh,
  MeshBasicMaterial,
  MeshLambertMaterial,
  MeshPhongMaterial,
  NumberKeyframeTrack,
  Object3D,
  OrthographicCamera,
  PerspectiveCamera,
  PointLight,
  Points,
  PointsMaterial,
  PropertyBinding,
  Quaternion,
  QuaternionKeyframeTrack,
  RepeatWrapping,
  Scene,
  Skeleton,
  SkinnedMesh,
  Spherical,
  SpotLight,
  TOUCH,
  Texture,
  TextureLoader,
  Uint16BufferAttribute,
  Vector2,
  Vector3,
  Vector4,
  VectorKeyframeTrack,
  init_three_module,
  sRGBEncoding
} from "./chunk-EOQWBWMA.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-AC2VUBZ6.js";

// node_modules/three/build/three.cjs
var require_three = __commonJS({
  "node_modules/three/build/three.cjs"(exports) {
    "use strict";
    var REVISION = "151";
    var MOUSE2 = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
    var TOUCH2 = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
    var CullFaceNone = 0;
    var CullFaceBack = 1;
    var CullFaceFront = 2;
    var CullFaceFrontBack = 3;
    var BasicShadowMap = 0;
    var PCFShadowMap = 1;
    var PCFSoftShadowMap = 2;
    var VSMShadowMap = 3;
    var FrontSide2 = 0;
    var BackSide = 1;
    var DoubleSide2 = 2;
    var TwoPassDoubleSide = 2;
    var NoBlending = 0;
    var NormalBlending = 1;
    var AdditiveBlending = 2;
    var SubtractiveBlending = 3;
    var MultiplyBlending = 4;
    var CustomBlending = 5;
    var AddEquation = 100;
    var SubtractEquation = 101;
    var ReverseSubtractEquation = 102;
    var MinEquation = 103;
    var MaxEquation = 104;
    var ZeroFactor = 200;
    var OneFactor = 201;
    var SrcColorFactor = 202;
    var OneMinusSrcColorFactor = 203;
    var SrcAlphaFactor = 204;
    var OneMinusSrcAlphaFactor = 205;
    var DstAlphaFactor = 206;
    var OneMinusDstAlphaFactor = 207;
    var DstColorFactor = 208;
    var OneMinusDstColorFactor = 209;
    var SrcAlphaSaturateFactor = 210;
    var NeverDepth = 0;
    var AlwaysDepth = 1;
    var LessDepth = 2;
    var LessEqualDepth = 3;
    var EqualDepth = 4;
    var GreaterEqualDepth = 5;
    var GreaterDepth = 6;
    var NotEqualDepth = 7;
    var MultiplyOperation = 0;
    var MixOperation = 1;
    var AddOperation = 2;
    var NoToneMapping = 0;
    var LinearToneMapping = 1;
    var ReinhardToneMapping = 2;
    var CineonToneMapping = 3;
    var ACESFilmicToneMapping = 4;
    var CustomToneMapping = 5;
    var UVMapping = 300;
    var CubeReflectionMapping = 301;
    var CubeRefractionMapping = 302;
    var EquirectangularReflectionMapping2 = 303;
    var EquirectangularRefractionMapping = 304;
    var CubeUVReflectionMapping = 306;
    var RepeatWrapping2 = 1e3;
    var ClampToEdgeWrapping2 = 1001;
    var MirroredRepeatWrapping = 1002;
    var NearestFilter = 1003;
    var NearestMipmapNearestFilter = 1004;
    var NearestMipMapNearestFilter = 1004;
    var NearestMipmapLinearFilter = 1005;
    var NearestMipMapLinearFilter = 1005;
    var LinearFilter = 1006;
    var LinearMipmapNearestFilter = 1007;
    var LinearMipMapNearestFilter = 1007;
    var LinearMipmapLinearFilter2 = 1008;
    var LinearMipMapLinearFilter = 1008;
    var UnsignedByteType = 1009;
    var ByteType = 1010;
    var ShortType = 1011;
    var UnsignedShortType = 1012;
    var IntType = 1013;
    var UnsignedIntType = 1014;
    var FloatType = 1015;
    var HalfFloatType = 1016;
    var UnsignedShort4444Type = 1017;
    var UnsignedShort5551Type = 1018;
    var UnsignedInt248Type = 1020;
    var AlphaFormat = 1021;
    var RGBAFormat = 1023;
    var LuminanceFormat = 1024;
    var LuminanceAlphaFormat = 1025;
    var DepthFormat = 1026;
    var DepthStencilFormat = 1027;
    var RedFormat = 1028;
    var RedIntegerFormat = 1029;
    var RGFormat = 1030;
    var RGIntegerFormat = 1031;
    var RGBAIntegerFormat = 1033;
    var RGB_S3TC_DXT1_Format = 33776;
    var RGBA_S3TC_DXT1_Format = 33777;
    var RGBA_S3TC_DXT3_Format = 33778;
    var RGBA_S3TC_DXT5_Format = 33779;
    var RGB_PVRTC_4BPPV1_Format = 35840;
    var RGB_PVRTC_2BPPV1_Format = 35841;
    var RGBA_PVRTC_4BPPV1_Format = 35842;
    var RGBA_PVRTC_2BPPV1_Format = 35843;
    var RGB_ETC1_Format = 36196;
    var RGB_ETC2_Format = 37492;
    var RGBA_ETC2_EAC_Format = 37496;
    var RGBA_ASTC_4x4_Format = 37808;
    var RGBA_ASTC_5x4_Format = 37809;
    var RGBA_ASTC_5x5_Format = 37810;
    var RGBA_ASTC_6x5_Format = 37811;
    var RGBA_ASTC_6x6_Format = 37812;
    var RGBA_ASTC_8x5_Format = 37813;
    var RGBA_ASTC_8x6_Format = 37814;
    var RGBA_ASTC_8x8_Format = 37815;
    var RGBA_ASTC_10x5_Format = 37816;
    var RGBA_ASTC_10x6_Format = 37817;
    var RGBA_ASTC_10x8_Format = 37818;
    var RGBA_ASTC_10x10_Format = 37819;
    var RGBA_ASTC_12x10_Format = 37820;
    var RGBA_ASTC_12x12_Format = 37821;
    var RGBA_BPTC_Format = 36492;
    var RED_RGTC1_Format = 36283;
    var SIGNED_RED_RGTC1_Format = 36284;
    var RED_GREEN_RGTC2_Format = 36285;
    var SIGNED_RED_GREEN_RGTC2_Format = 36286;
    var LoopOnce = 2200;
    var LoopRepeat = 2201;
    var LoopPingPong = 2202;
    var InterpolateDiscrete = 2300;
    var InterpolateLinear = 2301;
    var InterpolateSmooth = 2302;
    var ZeroCurvatureEnding = 2400;
    var ZeroSlopeEnding = 2401;
    var WrapAroundEnding = 2402;
    var NormalAnimationBlendMode = 2500;
    var AdditiveAnimationBlendMode = 2501;
    var TrianglesDrawMode = 0;
    var TriangleStripDrawMode = 1;
    var TriangleFanDrawMode = 2;
    var LinearEncoding = 3e3;
    var sRGBEncoding2 = 3001;
    var BasicDepthPacking = 3200;
    var RGBADepthPacking = 3201;
    var TangentSpaceNormalMap = 0;
    var ObjectSpaceNormalMap = 1;
    var NoColorSpace = "";
    var SRGBColorSpace = "srgb";
    var LinearSRGBColorSpace = "srgb-linear";
    var DisplayP3ColorSpace = "display-p3";
    var ZeroStencilOp = 0;
    var KeepStencilOp = 7680;
    var ReplaceStencilOp = 7681;
    var IncrementStencilOp = 7682;
    var DecrementStencilOp = 7683;
    var IncrementWrapStencilOp = 34055;
    var DecrementWrapStencilOp = 34056;
    var InvertStencilOp = 5386;
    var NeverStencilFunc = 512;
    var LessStencilFunc = 513;
    var EqualStencilFunc = 514;
    var LessEqualStencilFunc = 515;
    var GreaterStencilFunc = 516;
    var NotEqualStencilFunc = 517;
    var GreaterEqualStencilFunc = 518;
    var AlwaysStencilFunc = 519;
    var StaticDrawUsage = 35044;
    var DynamicDrawUsage = 35048;
    var StreamDrawUsage = 35040;
    var StaticReadUsage = 35045;
    var DynamicReadUsage = 35049;
    var StreamReadUsage = 35041;
    var StaticCopyUsage = 35046;
    var DynamicCopyUsage = 35050;
    var StreamCopyUsage = 35042;
    var GLSL1 = "100";
    var GLSL3 = "300 es";
    var _SRGBAFormat = 1035;
    var EventDispatcher2 = class {
      addEventListener(type, listener) {
        if (this._listeners === void 0)
          this._listeners = {};
        const listeners = this._listeners;
        if (listeners[type] === void 0) {
          listeners[type] = [];
        }
        if (listeners[type].indexOf(listener) === -1) {
          listeners[type].push(listener);
        }
      }
      hasEventListener(type, listener) {
        if (this._listeners === void 0)
          return false;
        const listeners = this._listeners;
        return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
      }
      removeEventListener(type, listener) {
        if (this._listeners === void 0)
          return;
        const listeners = this._listeners;
        const listenerArray = listeners[type];
        if (listenerArray !== void 0) {
          const index = listenerArray.indexOf(listener);
          if (index !== -1) {
            listenerArray.splice(index, 1);
          }
        }
      }
      dispatchEvent(event) {
        if (this._listeners === void 0)
          return;
        const listeners = this._listeners;
        const listenerArray = listeners[event.type];
        if (listenerArray !== void 0) {
          event.target = this;
          const array = listenerArray.slice(0);
          for (let i = 0, l = array.length; i < l; i++) {
            array[i].call(this, event);
          }
          event.target = null;
        }
      }
    };
    var _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
    var _seed = 1234567;
    var DEG2RAD = Math.PI / 180;
    var RAD2DEG = 180 / Math.PI;
    function generateUUID() {
      const d0 = Math.random() * 4294967295 | 0;
      const d1 = Math.random() * 4294967295 | 0;
      const d2 = Math.random() * 4294967295 | 0;
      const d3 = Math.random() * 4294967295 | 0;
      const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
      return uuid.toLowerCase();
    }
    function clamp(value, min, max2) {
      return Math.max(min, Math.min(max2, value));
    }
    function euclideanModulo(n, m) {
      return (n % m + m) % m;
    }
    function mapLinear(x, a1, a2, b1, b22) {
      return b1 + (x - a1) * (b22 - b1) / (a2 - a1);
    }
    function inverseLerp(x, y, value) {
      if (x !== y) {
        return (value - x) / (y - x);
      } else {
        return 0;
      }
    }
    function lerp(x, y, t) {
      return (1 - t) * x + t * y;
    }
    function damp(x, y, lambda, dt) {
      return lerp(x, y, 1 - Math.exp(-lambda * dt));
    }
    function pingpong(x, length = 1) {
      return length - Math.abs(euclideanModulo(x, length * 2) - length);
    }
    function smoothstep(x, min, max2) {
      if (x <= min)
        return 0;
      if (x >= max2)
        return 1;
      x = (x - min) / (max2 - min);
      return x * x * (3 - 2 * x);
    }
    function smootherstep(x, min, max2) {
      if (x <= min)
        return 0;
      if (x >= max2)
        return 1;
      x = (x - min) / (max2 - min);
      return x * x * x * (x * (x * 6 - 15) + 10);
    }
    function randInt(low, high) {
      return low + Math.floor(Math.random() * (high - low + 1));
    }
    function randFloat(low, high) {
      return low + Math.random() * (high - low);
    }
    function randFloatSpread(range) {
      return range * (0.5 - Math.random());
    }
    function seededRandom(s) {
      if (s !== void 0)
        _seed = s;
      let t = _seed += 1831565813;
      t = Math.imul(t ^ t >>> 15, t | 1);
      t ^= t + Math.imul(t ^ t >>> 7, t | 61);
      return ((t ^ t >>> 14) >>> 0) / 4294967296;
    }
    function degToRad(degrees) {
      return degrees * DEG2RAD;
    }
    function radToDeg(radians) {
      return radians * RAD2DEG;
    }
    function isPowerOfTwo(value) {
      return (value & value - 1) === 0 && value !== 0;
    }
    function ceilPowerOfTwo(value) {
      return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
    }
    function floorPowerOfTwo(value) {
      return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
    }
    function setQuaternionFromProperEuler(q, a, b, c, order) {
      const cos = Math.cos;
      const sin = Math.sin;
      const c2 = cos(b / 2);
      const s2 = sin(b / 2);
      const c13 = cos((a + c) / 2);
      const s13 = sin((a + c) / 2);
      const c1_3 = cos((a - c) / 2);
      const s1_3 = sin((a - c) / 2);
      const c3_1 = cos((c - a) / 2);
      const s3_1 = sin((c - a) / 2);
      switch (order) {
        case "XYX":
          q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
          break;
        case "YZY":
          q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
          break;
        case "ZXZ":
          q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
          break;
        case "XZX":
          q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
          break;
        case "YXY":
          q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
          break;
        case "ZYZ":
          q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
          break;
        default:
          console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
      }
    }
    function denormalize(value, array) {
      switch (array.constructor) {
        case Float32Array:
          return value;
        case Uint16Array:
          return value / 65535;
        case Uint8Array:
          return value / 255;
        case Int16Array:
          return Math.max(value / 32767, -1);
        case Int8Array:
          return Math.max(value / 127, -1);
        default:
          throw new Error("Invalid component type.");
      }
    }
    function normalize(value, array) {
      switch (array.constructor) {
        case Float32Array:
          return value;
        case Uint16Array:
          return Math.round(value * 65535);
        case Uint8Array:
          return Math.round(value * 255);
        case Int16Array:
          return Math.round(value * 32767);
        case Int8Array:
          return Math.round(value * 127);
        default:
          throw new Error("Invalid component type.");
      }
    }
    var MathUtils2 = {
      DEG2RAD,
      RAD2DEG,
      generateUUID,
      clamp,
      euclideanModulo,
      mapLinear,
      inverseLerp,
      lerp,
      damp,
      pingpong,
      smoothstep,
      smootherstep,
      randInt,
      randFloat,
      randFloatSpread,
      seededRandom,
      degToRad,
      radToDeg,
      isPowerOfTwo,
      ceilPowerOfTwo,
      floorPowerOfTwo,
      setQuaternionFromProperEuler,
      normalize,
      denormalize
    };
    var Vector22 = class {
      constructor(x = 0, y = 0) {
        Vector22.prototype.isVector2 = true;
        this.x = x;
        this.y = y;
      }
      get width() {
        return this.x;
      }
      set width(value) {
        this.x = value;
      }
      get height() {
        return this.y;
      }
      set height(value) {
        this.y = value;
      }
      set(x, y) {
        this.x = x;
        this.y = y;
        return this;
      }
      setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        return this;
      }
      setX(x) {
        this.x = x;
        return this;
      }
      setY(y) {
        this.y = y;
        return this;
      }
      setComponent(index, value) {
        switch (index) {
          case 0:
            this.x = value;
            break;
          case 1:
            this.y = value;
            break;
          default:
            throw new Error("index is out of range: " + index);
        }
        return this;
      }
      getComponent(index) {
        switch (index) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          default:
            throw new Error("index is out of range: " + index);
        }
      }
      clone() {
        return new this.constructor(this.x, this.y);
      }
      copy(v) {
        this.x = v.x;
        this.y = v.y;
        return this;
      }
      add(v) {
        this.x += v.x;
        this.y += v.y;
        return this;
      }
      addScalar(s) {
        this.x += s;
        this.y += s;
        return this;
      }
      addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this;
      }
      addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        return this;
      }
      sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        return this;
      }
      subScalar(s) {
        this.x -= s;
        this.y -= s;
        return this;
      }
      subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this;
      }
      multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        return this;
      }
      multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        return this;
      }
      divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        return this;
      }
      divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
      }
      applyMatrix3(m) {
        const x = this.x, y = this.y;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6];
        this.y = e[1] * x + e[4] * y + e[7];
        return this;
      }
      min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        return this;
      }
      max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        return this;
      }
      clamp(min, max2) {
        this.x = Math.max(min.x, Math.min(max2.x, this.x));
        this.y = Math.max(min.y, Math.min(max2.y, this.y));
        return this;
      }
      clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        return this;
      }
      clampLength(min, max2) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max2, length)));
      }
      floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
      }
      ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
      }
      round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
      }
      roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        return this;
      }
      negate() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
      }
      dot(v) {
        return this.x * v.x + this.y * v.y;
      }
      cross(v) {
        return this.x * v.y - this.y * v.x;
      }
      lengthSq() {
        return this.x * this.x + this.y * this.y;
      }
      length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
      }
      manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
      }
      normalize() {
        return this.divideScalar(this.length() || 1);
      }
      angle() {
        const angle = Math.atan2(-this.y, -this.x) + Math.PI;
        return angle;
      }
      angleTo(v) {
        const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
        if (denominator === 0)
          return Math.PI / 2;
        const theta = this.dot(v) / denominator;
        return Math.acos(clamp(theta, -1, 1));
      }
      distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
      }
      distanceToSquared(v) {
        const dx = this.x - v.x, dy = this.y - v.y;
        return dx * dx + dy * dy;
      }
      manhattanDistanceTo(v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
      }
      setLength(length) {
        return this.normalize().multiplyScalar(length);
      }
      lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        return this;
      }
      lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        return this;
      }
      equals(v) {
        return v.x === this.x && v.y === this.y;
      }
      fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        return this;
      }
      rotateAround(center, angle) {
        const c = Math.cos(angle), s = Math.sin(angle);
        const x = this.x - center.x;
        const y = this.y - center.y;
        this.x = x * c - y * s + center.x;
        this.y = x * s + y * c + center.y;
        return this;
      }
      random() {
        this.x = Math.random();
        this.y = Math.random();
        return this;
      }
      *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
      }
    };
    var Matrix32 = class {
      constructor() {
        Matrix32.prototype.isMatrix3 = true;
        this.elements = [
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1
        ];
      }
      set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
        const te2 = this.elements;
        te2[0] = n11;
        te2[1] = n21;
        te2[2] = n31;
        te2[3] = n12;
        te2[4] = n22;
        te2[5] = n32;
        te2[6] = n13;
        te2[7] = n23;
        te2[8] = n33;
        return this;
      }
      identity() {
        this.set(
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1
        );
        return this;
      }
      copy(m) {
        const te2 = this.elements;
        const me = m.elements;
        te2[0] = me[0];
        te2[1] = me[1];
        te2[2] = me[2];
        te2[3] = me[3];
        te2[4] = me[4];
        te2[5] = me[5];
        te2[6] = me[6];
        te2[7] = me[7];
        te2[8] = me[8];
        return this;
      }
      extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrix3Column(this, 0);
        yAxis.setFromMatrix3Column(this, 1);
        zAxis.setFromMatrix3Column(this, 2);
        return this;
      }
      setFromMatrix4(m) {
        const me = m.elements;
        this.set(
          me[0],
          me[4],
          me[8],
          me[1],
          me[5],
          me[9],
          me[2],
          me[6],
          me[10]
        );
        return this;
      }
      multiply(m) {
        return this.multiplyMatrices(this, m);
      }
      premultiply(m) {
        return this.multiplyMatrices(m, this);
      }
      multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te2 = this.elements;
        const a11 = ae[0], a12 = ae[3], a13 = ae[6];
        const a21 = ae[1], a22 = ae[4], a23 = ae[7];
        const a31 = ae[2], a32 = ae[5], a33 = ae[8];
        const b11 = be[0], b12 = be[3], b13 = be[6];
        const b21 = be[1], b22 = be[4], b23 = be[7];
        const b31 = be[2], b32 = be[5], b33 = be[8];
        te2[0] = a11 * b11 + a12 * b21 + a13 * b31;
        te2[3] = a11 * b12 + a12 * b22 + a13 * b32;
        te2[6] = a11 * b13 + a12 * b23 + a13 * b33;
        te2[1] = a21 * b11 + a22 * b21 + a23 * b31;
        te2[4] = a21 * b12 + a22 * b22 + a23 * b32;
        te2[7] = a21 * b13 + a22 * b23 + a23 * b33;
        te2[2] = a31 * b11 + a32 * b21 + a33 * b31;
        te2[5] = a31 * b12 + a32 * b22 + a33 * b32;
        te2[8] = a31 * b13 + a32 * b23 + a33 * b33;
        return this;
      }
      multiplyScalar(s) {
        const te2 = this.elements;
        te2[0] *= s;
        te2[3] *= s;
        te2[6] *= s;
        te2[1] *= s;
        te2[4] *= s;
        te2[7] *= s;
        te2[2] *= s;
        te2[5] *= s;
        te2[8] *= s;
        return this;
      }
      determinant() {
        const te2 = this.elements;
        const a = te2[0], b = te2[1], c = te2[2], d = te2[3], e = te2[4], f = te2[5], g = te2[6], h = te2[7], i = te2[8];
        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
      }
      invert() {
        const te2 = this.elements, n11 = te2[0], n21 = te2[1], n31 = te2[2], n12 = te2[3], n22 = te2[4], n32 = te2[5], n13 = te2[6], n23 = te2[7], n33 = te2[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
        if (det === 0)
          return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te2[0] = t11 * detInv;
        te2[1] = (n31 * n23 - n33 * n21) * detInv;
        te2[2] = (n32 * n21 - n31 * n22) * detInv;
        te2[3] = t12 * detInv;
        te2[4] = (n33 * n11 - n31 * n13) * detInv;
        te2[5] = (n31 * n12 - n32 * n11) * detInv;
        te2[6] = t13 * detInv;
        te2[7] = (n21 * n13 - n23 * n11) * detInv;
        te2[8] = (n22 * n11 - n21 * n12) * detInv;
        return this;
      }
      transpose() {
        let tmp2;
        const m = this.elements;
        tmp2 = m[1];
        m[1] = m[3];
        m[3] = tmp2;
        tmp2 = m[2];
        m[2] = m[6];
        m[6] = tmp2;
        tmp2 = m[5];
        m[5] = m[7];
        m[7] = tmp2;
        return this;
      }
      getNormalMatrix(matrix4) {
        return this.setFromMatrix4(matrix4).invert().transpose();
      }
      transposeIntoArray(r) {
        const m = this.elements;
        r[0] = m[0];
        r[1] = m[3];
        r[2] = m[6];
        r[3] = m[1];
        r[4] = m[4];
        r[5] = m[7];
        r[6] = m[2];
        r[7] = m[5];
        r[8] = m[8];
        return this;
      }
      setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
        const c = Math.cos(rotation);
        const s = Math.sin(rotation);
        this.set(
          sx * c,
          sx * s,
          -sx * (c * cx + s * cy) + cx + tx,
          -sy * s,
          sy * c,
          -sy * (-s * cx + c * cy) + cy + ty,
          0,
          0,
          1
        );
        return this;
      }
      //
      scale(sx, sy) {
        this.premultiply(_m3.makeScale(sx, sy));
        return this;
      }
      rotate(theta) {
        this.premultiply(_m3.makeRotation(-theta));
        return this;
      }
      translate(tx, ty) {
        this.premultiply(_m3.makeTranslation(tx, ty));
        return this;
      }
      // for 2D Transforms
      makeTranslation(x, y) {
        this.set(
          1,
          0,
          x,
          0,
          1,
          y,
          0,
          0,
          1
        );
        return this;
      }
      makeRotation(theta) {
        const c = Math.cos(theta);
        const s = Math.sin(theta);
        this.set(
          c,
          -s,
          0,
          s,
          c,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeScale(x, y) {
        this.set(
          x,
          0,
          0,
          0,
          y,
          0,
          0,
          0,
          1
        );
        return this;
      }
      //
      equals(matrix) {
        const te2 = this.elements;
        const me = matrix.elements;
        for (let i = 0; i < 9; i++) {
          if (te2[i] !== me[i])
            return false;
        }
        return true;
      }
      fromArray(array, offset = 0) {
        for (let i = 0; i < 9; i++) {
          this.elements[i] = array[i + offset];
        }
        return this;
      }
      toArray(array = [], offset = 0) {
        const te2 = this.elements;
        array[offset] = te2[0];
        array[offset + 1] = te2[1];
        array[offset + 2] = te2[2];
        array[offset + 3] = te2[3];
        array[offset + 4] = te2[4];
        array[offset + 5] = te2[5];
        array[offset + 6] = te2[6];
        array[offset + 7] = te2[7];
        array[offset + 8] = te2[8];
        return array;
      }
      clone() {
        return new this.constructor().fromArray(this.elements);
      }
    };
    var _m3 = new Matrix32();
    function arrayNeedsUint32(array) {
      for (let i = array.length - 1; i >= 0; --i) {
        if (array[i] >= 65535)
          return true;
      }
      return false;
    }
    var TYPED_ARRAYS = {
      Int8Array,
      Uint8Array,
      Uint8ClampedArray,
      Int16Array,
      Uint16Array,
      Int32Array,
      Uint32Array,
      Float32Array,
      Float64Array
    };
    function getTypedArray(type, buffer) {
      return new TYPED_ARRAYS[type](buffer);
    }
    function createElementNS(name) {
      return document.createElementNS("http://www.w3.org/1999/xhtml", name);
    }
    function SRGBToLinear(c) {
      return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
    }
    function LinearToSRGB(c) {
      return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
    }
    var LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = new Matrix32().fromArray([
      0.8224621,
      0.0331941,
      0.0170827,
      0.177538,
      0.9668058,
      0.0723974,
      -1e-7,
      1e-7,
      0.9105199
    ]);
    var LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = new Matrix32().fromArray([
      1.2249401,
      -0.0420569,
      -0.0196376,
      -0.2249404,
      1.0420571,
      -0.0786361,
      1e-7,
      0,
      1.0982735
    ]);
    function DisplayP3ToLinearSRGB(color) {
      return color.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB);
    }
    function LinearSRGBToDisplayP3(color) {
      return color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB();
    }
    var TO_LINEAR = {
      [LinearSRGBColorSpace]: (color) => color,
      [SRGBColorSpace]: (color) => color.convertSRGBToLinear(),
      [DisplayP3ColorSpace]: DisplayP3ToLinearSRGB
    };
    var FROM_LINEAR = {
      [LinearSRGBColorSpace]: (color) => color,
      [SRGBColorSpace]: (color) => color.convertLinearToSRGB(),
      [DisplayP3ColorSpace]: LinearSRGBToDisplayP3
    };
    var ColorManagement = {
      enabled: false,
      get legacyMode() {
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
        return !this.enabled;
      },
      set legacyMode(legacyMode) {
        console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
        this.enabled = !legacyMode;
      },
      get workingColorSpace() {
        return LinearSRGBColorSpace;
      },
      set workingColorSpace(colorSpace) {
        console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");
      },
      convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color;
        }
        const sourceToLinear = TO_LINEAR[sourceColorSpace];
        const targetFromLinear = FROM_LINEAR[targetColorSpace];
        if (sourceToLinear === void 0 || targetFromLinear === void 0) {
          throw new Error(`Unsupported color space conversion, "${sourceColorSpace}" to "${targetColorSpace}".`);
        }
        return targetFromLinear(sourceToLinear(color));
      },
      fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this.workingColorSpace, targetColorSpace);
      },
      toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this.workingColorSpace);
      }
    };
    var _canvas;
    var ImageUtils = class {
      static getDataURL(image) {
        if (/^data:/i.test(image.src)) {
          return image.src;
        }
        if (typeof HTMLCanvasElement === "undefined") {
          return image.src;
        }
        let canvas;
        if (image instanceof HTMLCanvasElement) {
          canvas = image;
        } else {
          if (_canvas === void 0)
            _canvas = createElementNS("canvas");
          _canvas.width = image.width;
          _canvas.height = image.height;
          const context = _canvas.getContext("2d");
          if (image instanceof ImageData) {
            context.putImageData(image, 0, 0);
          } else {
            context.drawImage(image, 0, 0, image.width, image.height);
          }
          canvas = _canvas;
        }
        if (canvas.width > 2048 || canvas.height > 2048) {
          console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
          return canvas.toDataURL("image/jpeg", 0.6);
        } else {
          return canvas.toDataURL("image/png");
        }
      }
      static sRGBToLinear(image) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
          const canvas = createElementNS("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, image.width, image.height);
          const imageData = context.getImageData(0, 0, image.width, image.height);
          const data = imageData.data;
          for (let i = 0; i < data.length; i++) {
            data[i] = SRGBToLinear(data[i] / 255) * 255;
          }
          context.putImageData(imageData, 0, 0);
          return canvas;
        } else if (image.data) {
          const data = image.data.slice(0);
          for (let i = 0; i < data.length; i++) {
            if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
              data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
            } else {
              data[i] = SRGBToLinear(data[i]);
            }
          }
          return {
            data,
            width: image.width,
            height: image.height
          };
        } else {
          console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
          return image;
        }
      }
    };
    var Source = class {
      constructor(data = null) {
        this.isSource = true;
        this.uuid = generateUUID();
        this.data = data;
        this.version = 0;
      }
      set needsUpdate(value) {
        if (value === true)
          this.version++;
      }
      toJSON(meta) {
        const isRootObject = meta === void 0 || typeof meta === "string";
        if (!isRootObject && meta.images[this.uuid] !== void 0) {
          return meta.images[this.uuid];
        }
        const output = {
          uuid: this.uuid,
          url: ""
        };
        const data = this.data;
        if (data !== null) {
          let url;
          if (Array.isArray(data)) {
            url = [];
            for (let i = 0, l = data.length; i < l; i++) {
              if (data[i].isDataTexture) {
                url.push(serializeImage(data[i].image));
              } else {
                url.push(serializeImage(data[i]));
              }
            }
          } else {
            url = serializeImage(data);
          }
          output.url = url;
        }
        if (!isRootObject) {
          meta.images[this.uuid] = output;
        }
        return output;
      }
    };
    function serializeImage(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        return ImageUtils.getDataURL(image);
      } else {
        if (image.data) {
          return {
            data: Array.from(image.data),
            width: image.width,
            height: image.height,
            type: image.data.constructor.name
          };
        } else {
          console.warn("THREE.Texture: Unable to serialize Texture.");
          return {};
        }
      }
    }
    var textureId = 0;
    var Texture2 = class extends EventDispatcher2 {
      constructor(image = Texture2.DEFAULT_IMAGE, mapping = Texture2.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping2, wrapT = ClampToEdgeWrapping2, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter2, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture2.DEFAULT_ANISOTROPY, encoding = LinearEncoding) {
        super();
        this.isTexture = true;
        Object.defineProperty(this, "id", { value: textureId++ });
        this.uuid = generateUUID();
        this.name = "";
        this.source = new Source(image);
        this.mipmaps = [];
        this.mapping = mapping;
        this.channel = 0;
        this.wrapS = wrapS;
        this.wrapT = wrapT;
        this.magFilter = magFilter;
        this.minFilter = minFilter;
        this.anisotropy = anisotropy;
        this.format = format;
        this.internalFormat = null;
        this.type = type;
        this.offset = new Vector22(0, 0);
        this.repeat = new Vector22(1, 1);
        this.center = new Vector22(0, 0);
        this.rotation = 0;
        this.matrixAutoUpdate = true;
        this.matrix = new Matrix32();
        this.generateMipmaps = true;
        this.premultiplyAlpha = false;
        this.flipY = true;
        this.unpackAlignment = 4;
        this.encoding = encoding;
        this.userData = {};
        this.version = 0;
        this.onUpdate = null;
        this.isRenderTargetTexture = false;
        this.needsPMREMUpdate = false;
      }
      get image() {
        return this.source.data;
      }
      set image(value = null) {
        this.source.data = value;
      }
      updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.name = source.name;
        this.source = source.source;
        this.mipmaps = source.mipmaps.slice(0);
        this.mapping = source.mapping;
        this.channel = source.channel;
        this.wrapS = source.wrapS;
        this.wrapT = source.wrapT;
        this.magFilter = source.magFilter;
        this.minFilter = source.minFilter;
        this.anisotropy = source.anisotropy;
        this.format = source.format;
        this.internalFormat = source.internalFormat;
        this.type = source.type;
        this.offset.copy(source.offset);
        this.repeat.copy(source.repeat);
        this.center.copy(source.center);
        this.rotation = source.rotation;
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrix.copy(source.matrix);
        this.generateMipmaps = source.generateMipmaps;
        this.premultiplyAlpha = source.premultiplyAlpha;
        this.flipY = source.flipY;
        this.unpackAlignment = source.unpackAlignment;
        this.encoding = source.encoding;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        this.needsUpdate = true;
        return this;
      }
      toJSON(meta) {
        const isRootObject = meta === void 0 || typeof meta === "string";
        if (!isRootObject && meta.textures[this.uuid] !== void 0) {
          return meta.textures[this.uuid];
        }
        const output = {
          metadata: {
            version: 4.5,
            type: "Texture",
            generator: "Texture.toJSON"
          },
          uuid: this.uuid,
          name: this.name,
          image: this.source.toJSON(meta).uuid,
          mapping: this.mapping,
          channel: this.channel,
          repeat: [this.repeat.x, this.repeat.y],
          offset: [this.offset.x, this.offset.y],
          center: [this.center.x, this.center.y],
          rotation: this.rotation,
          wrap: [this.wrapS, this.wrapT],
          format: this.format,
          internalFormat: this.internalFormat,
          type: this.type,
          encoding: this.encoding,
          minFilter: this.minFilter,
          magFilter: this.magFilter,
          anisotropy: this.anisotropy,
          flipY: this.flipY,
          generateMipmaps: this.generateMipmaps,
          premultiplyAlpha: this.premultiplyAlpha,
          unpackAlignment: this.unpackAlignment
        };
        if (Object.keys(this.userData).length > 0)
          output.userData = this.userData;
        if (!isRootObject) {
          meta.textures[this.uuid] = output;
        }
        return output;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
      transformUv(uv) {
        if (this.mapping !== UVMapping)
          return uv;
        uv.applyMatrix3(this.matrix);
        if (uv.x < 0 || uv.x > 1) {
          switch (this.wrapS) {
            case RepeatWrapping2:
              uv.x = uv.x - Math.floor(uv.x);
              break;
            case ClampToEdgeWrapping2:
              uv.x = uv.x < 0 ? 0 : 1;
              break;
            case MirroredRepeatWrapping:
              if (Math.abs(Math.floor(uv.x) % 2) === 1) {
                uv.x = Math.ceil(uv.x) - uv.x;
              } else {
                uv.x = uv.x - Math.floor(uv.x);
              }
              break;
          }
        }
        if (uv.y < 0 || uv.y > 1) {
          switch (this.wrapT) {
            case RepeatWrapping2:
              uv.y = uv.y - Math.floor(uv.y);
              break;
            case ClampToEdgeWrapping2:
              uv.y = uv.y < 0 ? 0 : 1;
              break;
            case MirroredRepeatWrapping:
              if (Math.abs(Math.floor(uv.y) % 2) === 1) {
                uv.y = Math.ceil(uv.y) - uv.y;
              } else {
                uv.y = uv.y - Math.floor(uv.y);
              }
              break;
          }
        }
        if (this.flipY) {
          uv.y = 1 - uv.y;
        }
        return uv;
      }
      set needsUpdate(value) {
        if (value === true) {
          this.version++;
          this.source.needsUpdate = true;
        }
      }
    };
    Texture2.DEFAULT_IMAGE = null;
    Texture2.DEFAULT_MAPPING = UVMapping;
    Texture2.DEFAULT_ANISOTROPY = 1;
    var Vector42 = class {
      constructor(x = 0, y = 0, z = 0, w = 1) {
        Vector42.prototype.isVector4 = true;
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
      }
      get width() {
        return this.z;
      }
      set width(value) {
        this.z = value;
      }
      get height() {
        return this.w;
      }
      set height(value) {
        this.w = value;
      }
      set(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
      }
      setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        this.w = scalar;
        return this;
      }
      setX(x) {
        this.x = x;
        return this;
      }
      setY(y) {
        this.y = y;
        return this;
      }
      setZ(z) {
        this.z = z;
        return this;
      }
      setW(w) {
        this.w = w;
        return this;
      }
      setComponent(index, value) {
        switch (index) {
          case 0:
            this.x = value;
            break;
          case 1:
            this.y = value;
            break;
          case 2:
            this.z = value;
            break;
          case 3:
            this.w = value;
            break;
          default:
            throw new Error("index is out of range: " + index);
        }
        return this;
      }
      getComponent(index) {
        switch (index) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          case 2:
            return this.z;
          case 3:
            return this.w;
          default:
            throw new Error("index is out of range: " + index);
        }
      }
      clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
      }
      copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        this.w = v.w !== void 0 ? v.w : 1;
        return this;
      }
      add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        this.w += v.w;
        return this;
      }
      addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        this.w += s;
        return this;
      }
      addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        this.w = a.w + b.w;
        return this;
      }
      addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        this.z += v.z * s;
        this.w += v.w * s;
        return this;
      }
      sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        this.w -= v.w;
        return this;
      }
      subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        this.w -= s;
        return this;
      }
      subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        this.w = a.w - b.w;
        return this;
      }
      multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        this.w *= v.w;
        return this;
      }
      multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        this.w *= scalar;
        return this;
      }
      applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z, w = this.w;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
        return this;
      }
      divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
      }
      setAxisAngleFromQuaternion(q) {
        this.w = 2 * Math.acos(q.w);
        const s = Math.sqrt(1 - q.w * q.w);
        if (s < 1e-4) {
          this.x = 1;
          this.y = 0;
          this.z = 0;
        } else {
          this.x = q.x / s;
          this.y = q.y / s;
          this.z = q.z / s;
        }
        return this;
      }
      setAxisAngleFromRotationMatrix(m) {
        let angle, x, y, z;
        const epsilon = 0.01, epsilon2 = 0.1, te2 = m.elements, m11 = te2[0], m12 = te2[4], m13 = te2[8], m21 = te2[1], m22 = te2[5], m23 = te2[9], m31 = te2[2], m32 = te2[6], m33 = te2[10];
        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
          if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
            this.set(1, 0, 0, 0);
            return this;
          }
          angle = Math.PI;
          const xx = (m11 + 1) / 2;
          const yy = (m22 + 1) / 2;
          const zz = (m33 + 1) / 2;
          const xy = (m12 + m21) / 4;
          const xz = (m13 + m31) / 4;
          const yz = (m23 + m32) / 4;
          if (xx > yy && xx > zz) {
            if (xx < epsilon) {
              x = 0;
              y = 0.707106781;
              z = 0.707106781;
            } else {
              x = Math.sqrt(xx);
              y = xy / x;
              z = xz / x;
            }
          } else if (yy > zz) {
            if (yy < epsilon) {
              x = 0.707106781;
              y = 0;
              z = 0.707106781;
            } else {
              y = Math.sqrt(yy);
              x = xy / y;
              z = yz / y;
            }
          } else {
            if (zz < epsilon) {
              x = 0.707106781;
              y = 0.707106781;
              z = 0;
            } else {
              z = Math.sqrt(zz);
              x = xz / z;
              y = yz / z;
            }
          }
          this.set(x, y, z, angle);
          return this;
        }
        let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
        if (Math.abs(s) < 1e-3)
          s = 1;
        this.x = (m32 - m23) / s;
        this.y = (m13 - m31) / s;
        this.z = (m21 - m12) / s;
        this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
        return this;
      }
      min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        this.z = Math.min(this.z, v.z);
        this.w = Math.min(this.w, v.w);
        return this;
      }
      max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        this.z = Math.max(this.z, v.z);
        this.w = Math.max(this.w, v.w);
        return this;
      }
      clamp(min, max2) {
        this.x = Math.max(min.x, Math.min(max2.x, this.x));
        this.y = Math.max(min.y, Math.min(max2.y, this.y));
        this.z = Math.max(min.z, Math.min(max2.z, this.z));
        this.w = Math.max(min.w, Math.min(max2.w, this.w));
        return this;
      }
      clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        this.w = Math.max(minVal, Math.min(maxVal, this.w));
        return this;
      }
      clampLength(min, max2) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max2, length)));
      }
      floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        this.w = Math.floor(this.w);
        return this;
      }
      ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        this.w = Math.ceil(this.w);
        return this;
      }
      round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        this.w = Math.round(this.w);
        return this;
      }
      roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
        this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
        return this;
      }
      negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
      }
      dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
      }
      lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
      }
      length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      }
      manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
      }
      normalize() {
        return this.divideScalar(this.length() || 1);
      }
      setLength(length) {
        return this.normalize().multiplyScalar(length);
      }
      lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        this.w += (v.w - this.w) * alpha;
        return this;
      }
      lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        this.w = v1.w + (v2.w - v1.w) * alpha;
        return this;
      }
      equals(v) {
        return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
      }
      fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        this.w = array[offset + 3];
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        array[offset + 3] = this.w;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        this.w = attribute.getW(index);
        return this;
      }
      random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        this.w = Math.random();
        return this;
      }
      *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
        yield this.w;
      }
    };
    var WebGLRenderTarget = class extends EventDispatcher2 {
      constructor(width = 1, height = 1, options = {}) {
        super();
        this.isWebGLRenderTarget = true;
        this.width = width;
        this.height = height;
        this.depth = 1;
        this.scissor = new Vector42(0, 0, width, height);
        this.scissorTest = false;
        this.viewport = new Vector42(0, 0, width, height);
        const image = { width, height, depth: 1 };
        this.texture = new Texture2(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
        this.texture.isRenderTargetTexture = true;
        this.texture.flipY = false;
        this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
        this.texture.internalFormat = options.internalFormat !== void 0 ? options.internalFormat : null;
        this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
        this.depthBuffer = options.depthBuffer !== void 0 ? options.depthBuffer : true;
        this.stencilBuffer = options.stencilBuffer !== void 0 ? options.stencilBuffer : false;
        this.depthTexture = options.depthTexture !== void 0 ? options.depthTexture : null;
        this.samples = options.samples !== void 0 ? options.samples : 0;
      }
      setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
          this.width = width;
          this.height = height;
          this.depth = depth;
          this.texture.image.width = width;
          this.texture.image.height = height;
          this.texture.image.depth = depth;
          this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.viewport.copy(source.viewport);
        this.texture = source.texture.clone();
        this.texture.isRenderTargetTexture = true;
        const image = Object.assign({}, source.texture.image);
        this.texture.source = new Source(image);
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        if (source.depthTexture !== null)
          this.depthTexture = source.depthTexture.clone();
        this.samples = source.samples;
        return this;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
    };
    var DataArrayTexture = class extends Texture2 {
      constructor(data = null, width = 1, height = 1, depth = 1) {
        super(null);
        this.isDataArrayTexture = true;
        this.image = { data, width, height, depth };
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.wrapR = ClampToEdgeWrapping2;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
      }
    };
    var WebGLArrayRenderTarget = class extends WebGLRenderTarget {
      constructor(width = 1, height = 1, depth = 1) {
        super(width, height);
        this.isWebGLArrayRenderTarget = true;
        this.depth = depth;
        this.texture = new DataArrayTexture(null, width, height, depth);
        this.texture.isRenderTargetTexture = true;
      }
    };
    var Data3DTexture = class extends Texture2 {
      constructor(data = null, width = 1, height = 1, depth = 1) {
        super(null);
        this.isData3DTexture = true;
        this.image = { data, width, height, depth };
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.wrapR = ClampToEdgeWrapping2;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
      }
    };
    var WebGL3DRenderTarget = class extends WebGLRenderTarget {
      constructor(width = 1, height = 1, depth = 1) {
        super(width, height);
        this.isWebGL3DRenderTarget = true;
        this.depth = depth;
        this.texture = new Data3DTexture(null, width, height, depth);
        this.texture.isRenderTargetTexture = true;
      }
    };
    var WebGLMultipleRenderTargets = class extends WebGLRenderTarget {
      constructor(width = 1, height = 1, count = 1, options = {}) {
        super(width, height, options);
        this.isWebGLMultipleRenderTargets = true;
        const texture = this.texture;
        this.texture = [];
        for (let i = 0; i < count; i++) {
          this.texture[i] = texture.clone();
          this.texture[i].isRenderTargetTexture = true;
        }
      }
      setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
          this.width = width;
          this.height = height;
          this.depth = depth;
          for (let i = 0, il = this.texture.length; i < il; i++) {
            this.texture[i].image.width = width;
            this.texture[i].image.height = height;
            this.texture[i].image.depth = depth;
          }
          this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
        return this;
      }
      copy(source) {
        this.dispose();
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.viewport.set(0, 0, this.width, this.height);
        this.scissor.set(0, 0, this.width, this.height);
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        if (source.depthTexture !== null)
          this.depthTexture = source.depthTexture.clone();
        this.texture.length = 0;
        for (let i = 0, il = source.texture.length; i < il; i++) {
          this.texture[i] = source.texture[i].clone();
          this.texture[i].isRenderTargetTexture = true;
        }
        return this;
      }
    };
    var Quaternion2 = class {
      constructor(x = 0, y = 0, z = 0, w = 1) {
        this.isQuaternion = true;
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
      }
      static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
        let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
        if (t === 0) {
          dst[dstOffset + 0] = x0;
          dst[dstOffset + 1] = y0;
          dst[dstOffset + 2] = z0;
          dst[dstOffset + 3] = w0;
          return;
        }
        if (t === 1) {
          dst[dstOffset + 0] = x1;
          dst[dstOffset + 1] = y1;
          dst[dstOffset + 2] = z1;
          dst[dstOffset + 3] = w1;
          return;
        }
        if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
          let s = 1 - t;
          const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
          if (sqrSin > Number.EPSILON) {
            const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
            s = Math.sin(s * len) / sin;
            t = Math.sin(t * len) / sin;
          }
          const tDir = t * dir;
          x0 = x0 * s + x1 * tDir;
          y0 = y0 * s + y1 * tDir;
          z0 = z0 * s + z1 * tDir;
          w0 = w0 * s + w1 * tDir;
          if (s === 1 - t) {
            const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
            x0 *= f;
            y0 *= f;
            z0 *= f;
            w0 *= f;
          }
        }
        dst[dstOffset] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
      }
      static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
        const x0 = src0[srcOffset0];
        const y0 = src0[srcOffset0 + 1];
        const z0 = src0[srcOffset0 + 2];
        const w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1];
        const y1 = src1[srcOffset1 + 1];
        const z1 = src1[srcOffset1 + 2];
        const w1 = src1[srcOffset1 + 3];
        dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
        dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
        dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
        dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
        return dst;
      }
      get x() {
        return this._x;
      }
      set x(value) {
        this._x = value;
        this._onChangeCallback();
      }
      get y() {
        return this._y;
      }
      set y(value) {
        this._y = value;
        this._onChangeCallback();
      }
      get z() {
        return this._z;
      }
      set z(value) {
        this._z = value;
        this._onChangeCallback();
      }
      get w() {
        return this._w;
      }
      set w(value) {
        this._w = value;
        this._onChangeCallback();
      }
      set(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onChangeCallback();
        return this;
      }
      clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
      }
      copy(quaternion) {
        this._x = quaternion.x;
        this._y = quaternion.y;
        this._z = quaternion.z;
        this._w = quaternion.w;
        this._onChangeCallback();
        return this;
      }
      setFromEuler(euler, update) {
        const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
        const cos = Math.cos;
        const sin = Math.sin;
        const c1 = cos(x / 2);
        const c2 = cos(y / 2);
        const c3 = cos(z / 2);
        const s1 = sin(x / 2);
        const s2 = sin(y / 2);
        const s3 = sin(z / 2);
        switch (order) {
          case "XYZ":
            this._x = s1 * c2 * c3 + c1 * s2 * s3;
            this._y = c1 * s2 * c3 - s1 * c2 * s3;
            this._z = c1 * c2 * s3 + s1 * s2 * c3;
            this._w = c1 * c2 * c3 - s1 * s2 * s3;
            break;
          case "YXZ":
            this._x = s1 * c2 * c3 + c1 * s2 * s3;
            this._y = c1 * s2 * c3 - s1 * c2 * s3;
            this._z = c1 * c2 * s3 - s1 * s2 * c3;
            this._w = c1 * c2 * c3 + s1 * s2 * s3;
            break;
          case "ZXY":
            this._x = s1 * c2 * c3 - c1 * s2 * s3;
            this._y = c1 * s2 * c3 + s1 * c2 * s3;
            this._z = c1 * c2 * s3 + s1 * s2 * c3;
            this._w = c1 * c2 * c3 - s1 * s2 * s3;
            break;
          case "ZYX":
            this._x = s1 * c2 * c3 - c1 * s2 * s3;
            this._y = c1 * s2 * c3 + s1 * c2 * s3;
            this._z = c1 * c2 * s3 - s1 * s2 * c3;
            this._w = c1 * c2 * c3 + s1 * s2 * s3;
            break;
          case "YZX":
            this._x = s1 * c2 * c3 + c1 * s2 * s3;
            this._y = c1 * s2 * c3 + s1 * c2 * s3;
            this._z = c1 * c2 * s3 - s1 * s2 * c3;
            this._w = c1 * c2 * c3 - s1 * s2 * s3;
            break;
          case "XZY":
            this._x = s1 * c2 * c3 - c1 * s2 * s3;
            this._y = c1 * s2 * c3 - s1 * c2 * s3;
            this._z = c1 * c2 * s3 + s1 * s2 * c3;
            this._w = c1 * c2 * c3 + s1 * s2 * s3;
            break;
          default:
            console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
        }
        if (update !== false)
          this._onChangeCallback();
        return this;
      }
      setFromAxisAngle(axis, angle) {
        const halfAngle = angle / 2, s = Math.sin(halfAngle);
        this._x = axis.x * s;
        this._y = axis.y * s;
        this._z = axis.z * s;
        this._w = Math.cos(halfAngle);
        this._onChangeCallback();
        return this;
      }
      setFromRotationMatrix(m) {
        const te2 = m.elements, m11 = te2[0], m12 = te2[4], m13 = te2[8], m21 = te2[1], m22 = te2[5], m23 = te2[9], m31 = te2[2], m32 = te2[6], m33 = te2[10], trace = m11 + m22 + m33;
        if (trace > 0) {
          const s = 0.5 / Math.sqrt(trace + 1);
          this._w = 0.25 / s;
          this._x = (m32 - m23) * s;
          this._y = (m13 - m31) * s;
          this._z = (m21 - m12) * s;
        } else if (m11 > m22 && m11 > m33) {
          const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
          this._w = (m32 - m23) / s;
          this._x = 0.25 * s;
          this._y = (m12 + m21) / s;
          this._z = (m13 + m31) / s;
        } else if (m22 > m33) {
          const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
          this._w = (m13 - m31) / s;
          this._x = (m12 + m21) / s;
          this._y = 0.25 * s;
          this._z = (m23 + m32) / s;
        } else {
          const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
          this._w = (m21 - m12) / s;
          this._x = (m13 + m31) / s;
          this._y = (m23 + m32) / s;
          this._z = 0.25 * s;
        }
        this._onChangeCallback();
        return this;
      }
      setFromUnitVectors(vFrom, vTo) {
        let r = vFrom.dot(vTo) + 1;
        if (r < Number.EPSILON) {
          r = 0;
          if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
            this._x = -vFrom.y;
            this._y = vFrom.x;
            this._z = 0;
            this._w = r;
          } else {
            this._x = 0;
            this._y = -vFrom.z;
            this._z = vFrom.y;
            this._w = r;
          }
        } else {
          this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
          this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
          this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
          this._w = r;
        }
        return this.normalize();
      }
      angleTo(q) {
        return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
      }
      rotateTowards(q, step) {
        const angle = this.angleTo(q);
        if (angle === 0)
          return this;
        const t = Math.min(1, step / angle);
        this.slerp(q, t);
        return this;
      }
      identity() {
        return this.set(0, 0, 0, 1);
      }
      invert() {
        return this.conjugate();
      }
      conjugate() {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this._onChangeCallback();
        return this;
      }
      dot(v) {
        return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
      }
      lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
      }
      length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
      }
      normalize() {
        let l = this.length();
        if (l === 0) {
          this._x = 0;
          this._y = 0;
          this._z = 0;
          this._w = 1;
        } else {
          l = 1 / l;
          this._x = this._x * l;
          this._y = this._y * l;
          this._z = this._z * l;
          this._w = this._w * l;
        }
        this._onChangeCallback();
        return this;
      }
      multiply(q) {
        return this.multiplyQuaternions(this, q);
      }
      premultiply(q) {
        return this.multiplyQuaternions(q, this);
      }
      multiplyQuaternions(a, b) {
        const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
        const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
        this._onChangeCallback();
        return this;
      }
      slerp(qb, t) {
        if (t === 0)
          return this;
        if (t === 1)
          return this.copy(qb);
        const x = this._x, y = this._y, z = this._z, w = this._w;
        let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
        if (cosHalfTheta < 0) {
          this._w = -qb._w;
          this._x = -qb._x;
          this._y = -qb._y;
          this._z = -qb._z;
          cosHalfTheta = -cosHalfTheta;
        } else {
          this.copy(qb);
        }
        if (cosHalfTheta >= 1) {
          this._w = w;
          this._x = x;
          this._y = y;
          this._z = z;
          return this;
        }
        const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
        if (sqrSinHalfTheta <= Number.EPSILON) {
          const s = 1 - t;
          this._w = s * w + t * this._w;
          this._x = s * x + t * this._x;
          this._y = s * y + t * this._y;
          this._z = s * z + t * this._z;
          this.normalize();
          this._onChangeCallback();
          return this;
        }
        const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
        const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
        this._w = w * ratioA + this._w * ratioB;
        this._x = x * ratioA + this._x * ratioB;
        this._y = y * ratioA + this._y * ratioB;
        this._z = z * ratioA + this._z * ratioB;
        this._onChangeCallback();
        return this;
      }
      slerpQuaternions(qa, qb, t) {
        return this.copy(qa).slerp(qb, t);
      }
      random() {
        const u1 = Math.random();
        const sqrt1u1 = Math.sqrt(1 - u1);
        const sqrtu1 = Math.sqrt(u1);
        const u2 = 2 * Math.PI * Math.random();
        const u3 = 2 * Math.PI * Math.random();
        return this.set(
          sqrt1u1 * Math.cos(u2),
          sqrtu1 * Math.sin(u3),
          sqrtu1 * Math.cos(u3),
          sqrt1u1 * Math.sin(u2)
        );
      }
      equals(quaternion) {
        return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
      }
      fromArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onChangeCallback();
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._w;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this._x = attribute.getX(index);
        this._y = attribute.getY(index);
        this._z = attribute.getZ(index);
        this._w = attribute.getW(index);
        return this;
      }
      toJSON() {
        return this.toArray();
      }
      _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
      }
      _onChangeCallback() {
      }
      *[Symbol.iterator]() {
        yield this._x;
        yield this._y;
        yield this._z;
        yield this._w;
      }
    };
    var Vector32 = class {
      constructor(x = 0, y = 0, z = 0) {
        Vector32.prototype.isVector3 = true;
        this.x = x;
        this.y = y;
        this.z = z;
      }
      set(x, y, z) {
        if (z === void 0)
          z = this.z;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
      }
      setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        return this;
      }
      setX(x) {
        this.x = x;
        return this;
      }
      setY(y) {
        this.y = y;
        return this;
      }
      setZ(z) {
        this.z = z;
        return this;
      }
      setComponent(index, value) {
        switch (index) {
          case 0:
            this.x = value;
            break;
          case 1:
            this.y = value;
            break;
          case 2:
            this.z = value;
            break;
          default:
            throw new Error("index is out of range: " + index);
        }
        return this;
      }
      getComponent(index) {
        switch (index) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          case 2:
            return this.z;
          default:
            throw new Error("index is out of range: " + index);
        }
      }
      clone() {
        return new this.constructor(this.x, this.y, this.z);
      }
      copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this;
      }
      add(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this;
      }
      addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        return this;
      }
      addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        return this;
      }
      addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        this.z += v.z * s;
        return this;
      }
      sub(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this;
      }
      subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        return this;
      }
      subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        return this;
      }
      multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        return this;
      }
      multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        return this;
      }
      multiplyVectors(a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        this.z = a.z * b.z;
        return this;
      }
      applyEuler(euler) {
        return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
      }
      applyAxisAngle(axis, angle) {
        return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
      }
      applyMatrix3(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6] * z;
        this.y = e[1] * x + e[4] * y + e[7] * z;
        this.z = e[2] * x + e[5] * y + e[8] * z;
        return this;
      }
      applyNormalMatrix(m) {
        return this.applyMatrix3(m).normalize();
      }
      applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
        return this;
      }
      applyQuaternion(q) {
        const x = this.x, y = this.y, z = this.z;
        const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
        const ix = qw * x + qy * z - qz * y;
        const iy = qw * y + qz * x - qx * z;
        const iz = qw * z + qx * y - qy * x;
        const iw = -qx * x - qy * y - qz * z;
        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        return this;
      }
      project(camera) {
        return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
      }
      unproject(camera) {
        return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
      }
      transformDirection(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z;
        this.y = e[1] * x + e[5] * y + e[9] * z;
        this.z = e[2] * x + e[6] * y + e[10] * z;
        return this.normalize();
      }
      divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        this.z /= v.z;
        return this;
      }
      divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
      }
      min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        this.z = Math.min(this.z, v.z);
        return this;
      }
      max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        this.z = Math.max(this.z, v.z);
        return this;
      }
      clamp(min, max2) {
        this.x = Math.max(min.x, Math.min(max2.x, this.x));
        this.y = Math.max(min.y, Math.min(max2.y, this.y));
        this.z = Math.max(min.z, Math.min(max2.z, this.z));
        return this;
      }
      clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        return this;
      }
      clampLength(min, max2) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max2, length)));
      }
      floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        return this;
      }
      ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        return this;
      }
      round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        return this;
      }
      roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
        return this;
      }
      negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
      }
      dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
      }
      // TODO lengthSquared?
      lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      }
      length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      }
      manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
      }
      normalize() {
        return this.divideScalar(this.length() || 1);
      }
      setLength(length) {
        return this.normalize().multiplyScalar(length);
      }
      lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        return this;
      }
      lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        return this;
      }
      cross(v) {
        return this.crossVectors(this, v);
      }
      crossVectors(a, b) {
        const ax = a.x, ay = a.y, az = a.z;
        const bx = b.x, by = b.y, bz = b.z;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
      }
      projectOnVector(v) {
        const denominator = v.lengthSq();
        if (denominator === 0)
          return this.set(0, 0, 0);
        const scalar = v.dot(this) / denominator;
        return this.copy(v).multiplyScalar(scalar);
      }
      projectOnPlane(planeNormal) {
        _vector$b.copy(this).projectOnVector(planeNormal);
        return this.sub(_vector$b);
      }
      reflect(normal) {
        return this.sub(_vector$b.copy(normal).multiplyScalar(2 * this.dot(normal)));
      }
      angleTo(v) {
        const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
        if (denominator === 0)
          return Math.PI / 2;
        const theta = this.dot(v) / denominator;
        return Math.acos(clamp(theta, -1, 1));
      }
      distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
      }
      distanceToSquared(v) {
        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
        return dx * dx + dy * dy + dz * dz;
      }
      manhattanDistanceTo(v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
      }
      setFromSpherical(s) {
        return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
      }
      setFromSphericalCoords(radius, phi, theta) {
        const sinPhiRadius = Math.sin(phi) * radius;
        this.x = sinPhiRadius * Math.sin(theta);
        this.y = Math.cos(phi) * radius;
        this.z = sinPhiRadius * Math.cos(theta);
        return this;
      }
      setFromCylindrical(c) {
        return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
      }
      setFromCylindricalCoords(radius, theta, y) {
        this.x = radius * Math.sin(theta);
        this.y = y;
        this.z = radius * Math.cos(theta);
        return this;
      }
      setFromMatrixPosition(m) {
        const e = m.elements;
        this.x = e[12];
        this.y = e[13];
        this.z = e[14];
        return this;
      }
      setFromMatrixScale(m) {
        const sx = this.setFromMatrixColumn(m, 0).length();
        const sy = this.setFromMatrixColumn(m, 1).length();
        const sz = this.setFromMatrixColumn(m, 2).length();
        this.x = sx;
        this.y = sy;
        this.z = sz;
        return this;
      }
      setFromMatrixColumn(m, index) {
        return this.fromArray(m.elements, index * 4);
      }
      setFromMatrix3Column(m, index) {
        return this.fromArray(m.elements, index * 3);
      }
      setFromEuler(e) {
        this.x = e._x;
        this.y = e._y;
        this.z = e._z;
        return this;
      }
      setFromColor(c) {
        this.x = c.r;
        this.y = c.g;
        this.z = c.b;
        return this;
      }
      equals(v) {
        return v.x === this.x && v.y === this.y && v.z === this.z;
      }
      fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        return this;
      }
      random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        return this;
      }
      randomDirection() {
        const u = (Math.random() - 0.5) * 2;
        const t = Math.random() * Math.PI * 2;
        const f = Math.sqrt(1 - u ** 2);
        this.x = f * Math.cos(t);
        this.y = f * Math.sin(t);
        this.z = u;
        return this;
      }
      *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
      }
    };
    var _vector$b = new Vector32();
    var _quaternion$4 = new Quaternion2();
    var Box3 = class {
      constructor(min = new Vector32(Infinity, Infinity, Infinity), max2 = new Vector32(-Infinity, -Infinity, -Infinity)) {
        this.isBox3 = true;
        this.min = min;
        this.max = max2;
      }
      set(min, max2) {
        this.min.copy(min);
        this.max.copy(max2);
        return this;
      }
      setFromArray(array) {
        this.makeEmpty();
        for (let i = 0, il = array.length; i < il; i += 3) {
          this.expandByPoint(_vector$a.fromArray(array, i));
        }
        return this;
      }
      setFromBufferAttribute(attribute) {
        this.makeEmpty();
        for (let i = 0, il = attribute.count; i < il; i++) {
          this.expandByPoint(_vector$a.fromBufferAttribute(attribute, i));
        }
        return this;
      }
      setFromPoints(points) {
        this.makeEmpty();
        for (let i = 0, il = points.length; i < il; i++) {
          this.expandByPoint(points[i]);
        }
        return this;
      }
      setFromCenterAndSize(center, size) {
        const halfSize = _vector$a.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
      }
      setFromObject(object, precise = false) {
        this.makeEmpty();
        return this.expandByObject(object, precise);
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
      }
      makeEmpty() {
        this.min.x = this.min.y = this.min.z = Infinity;
        this.max.x = this.max.y = this.max.z = -Infinity;
        return this;
      }
      isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
      }
      getCenter(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
      }
      getSize(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
      }
      expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
      }
      expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
      }
      expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
      }
      expandByObject(object, precise = false) {
        object.updateWorldMatrix(false, false);
        if (object.boundingBox !== void 0) {
          if (object.boundingBox === null) {
            object.computeBoundingBox();
          }
          _box$3.copy(object.boundingBox);
          _box$3.applyMatrix4(object.matrixWorld);
          this.union(_box$3);
        } else {
          const geometry = object.geometry;
          if (geometry !== void 0) {
            if (precise && geometry.attributes !== void 0 && geometry.attributes.position !== void 0) {
              const position = geometry.attributes.position;
              for (let i = 0, l = position.count; i < l; i++) {
                _vector$a.fromBufferAttribute(position, i).applyMatrix4(object.matrixWorld);
                this.expandByPoint(_vector$a);
              }
            } else {
              if (geometry.boundingBox === null) {
                geometry.computeBoundingBox();
              }
              _box$3.copy(geometry.boundingBox);
              _box$3.applyMatrix4(object.matrixWorld);
              this.union(_box$3);
            }
          }
        }
        const children = object.children;
        for (let i = 0, l = children.length; i < l; i++) {
          this.expandByObject(children[i], precise);
        }
        return this;
      }
      containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
      }
      containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
      }
      getParameter(point, target) {
        return target.set(
          (point.x - this.min.x) / (this.max.x - this.min.x),
          (point.y - this.min.y) / (this.max.y - this.min.y),
          (point.z - this.min.z) / (this.max.z - this.min.z)
        );
      }
      intersectsBox(box) {
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
      }
      intersectsSphere(sphere) {
        this.clampPoint(sphere.center, _vector$a);
        return _vector$a.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
      }
      intersectsPlane(plane) {
        let min, max2;
        if (plane.normal.x > 0) {
          min = plane.normal.x * this.min.x;
          max2 = plane.normal.x * this.max.x;
        } else {
          min = plane.normal.x * this.max.x;
          max2 = plane.normal.x * this.min.x;
        }
        if (plane.normal.y > 0) {
          min += plane.normal.y * this.min.y;
          max2 += plane.normal.y * this.max.y;
        } else {
          min += plane.normal.y * this.max.y;
          max2 += plane.normal.y * this.min.y;
        }
        if (plane.normal.z > 0) {
          min += plane.normal.z * this.min.z;
          max2 += plane.normal.z * this.max.z;
        } else {
          min += plane.normal.z * this.max.z;
          max2 += plane.normal.z * this.min.z;
        }
        return min <= -plane.constant && max2 >= -plane.constant;
      }
      intersectsTriangle(triangle) {
        if (this.isEmpty()) {
          return false;
        }
        this.getCenter(_center);
        _extents.subVectors(this.max, _center);
        _v0$2.subVectors(triangle.a, _center);
        _v1$7.subVectors(triangle.b, _center);
        _v2$4.subVectors(triangle.c, _center);
        _f0.subVectors(_v1$7, _v0$2);
        _f1.subVectors(_v2$4, _v1$7);
        _f2.subVectors(_v0$2, _v2$4);
        let axes = [
          0,
          -_f0.z,
          _f0.y,
          0,
          -_f1.z,
          _f1.y,
          0,
          -_f2.z,
          _f2.y,
          _f0.z,
          0,
          -_f0.x,
          _f1.z,
          0,
          -_f1.x,
          _f2.z,
          0,
          -_f2.x,
          -_f0.y,
          _f0.x,
          0,
          -_f1.y,
          _f1.x,
          0,
          -_f2.y,
          _f2.x,
          0
        ];
        if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
          return false;
        }
        axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
        if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
          return false;
        }
        _triangleNormal.crossVectors(_f0, _f1);
        axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
        return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
      }
      clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
      }
      distanceToPoint(point) {
        return this.clampPoint(point, _vector$a).distanceTo(point);
      }
      getBoundingSphere(target) {
        if (this.isEmpty()) {
          target.makeEmpty();
        } else {
          this.getCenter(target.center);
          target.radius = this.getSize(_vector$a).length() * 0.5;
        }
        return target;
      }
      intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        if (this.isEmpty())
          this.makeEmpty();
        return this;
      }
      union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
      }
      applyMatrix4(matrix) {
        if (this.isEmpty())
          return this;
        _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
        _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
        _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
        _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
        _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
        _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
        _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
        _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
        this.setFromPoints(_points);
        return this;
      }
      translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
      }
      equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
      }
    };
    var _points = [
      new Vector32(),
      new Vector32(),
      new Vector32(),
      new Vector32(),
      new Vector32(),
      new Vector32(),
      new Vector32(),
      new Vector32()
    ];
    var _vector$a = new Vector32();
    var _box$3 = new Box3();
    var _v0$2 = new Vector32();
    var _v1$7 = new Vector32();
    var _v2$4 = new Vector32();
    var _f0 = new Vector32();
    var _f1 = new Vector32();
    var _f2 = new Vector32();
    var _center = new Vector32();
    var _extents = new Vector32();
    var _triangleNormal = new Vector32();
    var _testAxis = new Vector32();
    function satForAxes(axes, v0, v1, v2, extents) {
      for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
        _testAxis.fromArray(axes, i);
        const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
        const p0 = v0.dot(_testAxis);
        const p1 = v1.dot(_testAxis);
        const p2 = v2.dot(_testAxis);
        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
          return false;
        }
      }
      return true;
    }
    var _box$2 = new Box3();
    var _v1$6 = new Vector32();
    var _v2$3 = new Vector32();
    var Sphere = class {
      constructor(center = new Vector32(), radius = -1) {
        this.center = center;
        this.radius = radius;
      }
      set(center, radius) {
        this.center.copy(center);
        this.radius = radius;
        return this;
      }
      setFromPoints(points, optionalCenter) {
        const center = this.center;
        if (optionalCenter !== void 0) {
          center.copy(optionalCenter);
        } else {
          _box$2.setFromPoints(points).getCenter(center);
        }
        let maxRadiusSq = 0;
        for (let i = 0, il = points.length; i < il; i++) {
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
        }
        this.radius = Math.sqrt(maxRadiusSq);
        return this;
      }
      copy(sphere) {
        this.center.copy(sphere.center);
        this.radius = sphere.radius;
        return this;
      }
      isEmpty() {
        return this.radius < 0;
      }
      makeEmpty() {
        this.center.set(0, 0, 0);
        this.radius = -1;
        return this;
      }
      containsPoint(point) {
        return point.distanceToSquared(this.center) <= this.radius * this.radius;
      }
      distanceToPoint(point) {
        return point.distanceTo(this.center) - this.radius;
      }
      intersectsSphere(sphere) {
        const radiusSum = this.radius + sphere.radius;
        return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
      }
      intersectsBox(box) {
        return box.intersectsSphere(this);
      }
      intersectsPlane(plane) {
        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
      }
      clampPoint(point, target) {
        const deltaLengthSq = this.center.distanceToSquared(point);
        target.copy(point);
        if (deltaLengthSq > this.radius * this.radius) {
          target.sub(this.center).normalize();
          target.multiplyScalar(this.radius).add(this.center);
        }
        return target;
      }
      getBoundingBox(target) {
        if (this.isEmpty()) {
          target.makeEmpty();
          return target;
        }
        target.set(this.center, this.center);
        target.expandByScalar(this.radius);
        return target;
      }
      applyMatrix4(matrix) {
        this.center.applyMatrix4(matrix);
        this.radius = this.radius * matrix.getMaxScaleOnAxis();
        return this;
      }
      translate(offset) {
        this.center.add(offset);
        return this;
      }
      expandByPoint(point) {
        if (this.isEmpty()) {
          this.center.copy(point);
          this.radius = 0;
          return this;
        }
        _v1$6.subVectors(point, this.center);
        const lengthSq = _v1$6.lengthSq();
        if (lengthSq > this.radius * this.radius) {
          const length = Math.sqrt(lengthSq);
          const delta = (length - this.radius) * 0.5;
          this.center.addScaledVector(_v1$6, delta / length);
          this.radius += delta;
        }
        return this;
      }
      union(sphere) {
        if (sphere.isEmpty()) {
          return this;
        }
        if (this.isEmpty()) {
          this.copy(sphere);
          return this;
        }
        if (this.center.equals(sphere.center) === true) {
          this.radius = Math.max(this.radius, sphere.radius);
        } else {
          _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
          this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
          this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
        }
        return this;
      }
      equals(sphere) {
        return sphere.center.equals(this.center) && sphere.radius === this.radius;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    var _vector$9 = new Vector32();
    var _segCenter = new Vector32();
    var _segDir = new Vector32();
    var _diff = new Vector32();
    var _edge1 = new Vector32();
    var _edge2 = new Vector32();
    var _normal$1 = new Vector32();
    var Ray = class {
      constructor(origin = new Vector32(), direction = new Vector32(0, 0, -1)) {
        this.origin = origin;
        this.direction = direction;
      }
      set(origin, direction) {
        this.origin.copy(origin);
        this.direction.copy(direction);
        return this;
      }
      copy(ray) {
        this.origin.copy(ray.origin);
        this.direction.copy(ray.direction);
        return this;
      }
      at(t, target) {
        return target.copy(this.origin).addScaledVector(this.direction, t);
      }
      lookAt(v) {
        this.direction.copy(v).sub(this.origin).normalize();
        return this;
      }
      recast(t) {
        this.origin.copy(this.at(t, _vector$9));
        return this;
      }
      closestPointToPoint(point, target) {
        target.subVectors(point, this.origin);
        const directionDistance = target.dot(this.direction);
        if (directionDistance < 0) {
          return target.copy(this.origin);
        }
        return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
      }
      distanceToPoint(point) {
        return Math.sqrt(this.distanceSqToPoint(point));
      }
      distanceSqToPoint(point) {
        const directionDistance = _vector$9.subVectors(point, this.origin).dot(this.direction);
        if (directionDistance < 0) {
          return this.origin.distanceToSquared(point);
        }
        _vector$9.copy(this.origin).addScaledVector(this.direction, directionDistance);
        return _vector$9.distanceToSquared(point);
      }
      distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
        _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
        _segDir.copy(v1).sub(v0).normalize();
        _diff.copy(this.origin).sub(_segCenter);
        const segExtent = v0.distanceTo(v1) * 0.5;
        const a01 = -this.direction.dot(_segDir);
        const b0 = _diff.dot(this.direction);
        const b1 = -_diff.dot(_segDir);
        const c = _diff.lengthSq();
        const det = Math.abs(1 - a01 * a01);
        let s0, s1, sqrDist, extDet;
        if (det > 0) {
          s0 = a01 * b1 - b0;
          s1 = a01 * b0 - b1;
          extDet = segExtent * det;
          if (s0 >= 0) {
            if (s1 >= -extDet) {
              if (s1 <= extDet) {
                const invDet = 1 / det;
                s0 *= invDet;
                s1 *= invDet;
                sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
              } else {
                s1 = segExtent;
                s0 = Math.max(0, -(a01 * s1 + b0));
                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
              }
            } else {
              s1 = -segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            if (s1 <= -extDet) {
              s0 = Math.max(0, -(-a01 * segExtent + b0));
              s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            } else if (s1 <= extDet) {
              s0 = 0;
              s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
              sqrDist = s1 * (s1 + 2 * b1) + c;
            } else {
              s0 = Math.max(0, -(a01 * segExtent + b0));
              s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          }
        } else {
          s1 = a01 > 0 ? -segExtent : segExtent;
          s0 = Math.max(0, -(a01 * s1 + b0));
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
        if (optionalPointOnRay) {
          optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
        }
        if (optionalPointOnSegment) {
          optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
        }
        return sqrDist;
      }
      intersectSphere(sphere, target) {
        _vector$9.subVectors(sphere.center, this.origin);
        const tca = _vector$9.dot(this.direction);
        const d2 = _vector$9.dot(_vector$9) - tca * tca;
        const radius2 = sphere.radius * sphere.radius;
        if (d2 > radius2)
          return null;
        const thc = Math.sqrt(radius2 - d2);
        const t0 = tca - thc;
        const t1 = tca + thc;
        if (t1 < 0)
          return null;
        if (t0 < 0)
          return this.at(t1, target);
        return this.at(t0, target);
      }
      intersectsSphere(sphere) {
        return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
      }
      distanceToPlane(plane) {
        const denominator = plane.normal.dot(this.direction);
        if (denominator === 0) {
          if (plane.distanceToPoint(this.origin) === 0) {
            return 0;
          }
          return null;
        }
        const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
        return t >= 0 ? t : null;
      }
      intersectPlane(plane, target) {
        const t = this.distanceToPlane(plane);
        if (t === null) {
          return null;
        }
        return this.at(t, target);
      }
      intersectsPlane(plane) {
        const distToPoint = plane.distanceToPoint(this.origin);
        if (distToPoint === 0) {
          return true;
        }
        const denominator = plane.normal.dot(this.direction);
        if (denominator * distToPoint < 0) {
          return true;
        }
        return false;
      }
      intersectBox(box, target) {
        let tmin, tmax, tymin, tymax, tzmin, tzmax;
        const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
        const origin = this.origin;
        if (invdirx >= 0) {
          tmin = (box.min.x - origin.x) * invdirx;
          tmax = (box.max.x - origin.x) * invdirx;
        } else {
          tmin = (box.max.x - origin.x) * invdirx;
          tmax = (box.min.x - origin.x) * invdirx;
        }
        if (invdiry >= 0) {
          tymin = (box.min.y - origin.y) * invdiry;
          tymax = (box.max.y - origin.y) * invdiry;
        } else {
          tymin = (box.max.y - origin.y) * invdiry;
          tymax = (box.min.y - origin.y) * invdiry;
        }
        if (tmin > tymax || tymin > tmax)
          return null;
        if (tymin > tmin || isNaN(tmin))
          tmin = tymin;
        if (tymax < tmax || isNaN(tmax))
          tmax = tymax;
        if (invdirz >= 0) {
          tzmin = (box.min.z - origin.z) * invdirz;
          tzmax = (box.max.z - origin.z) * invdirz;
        } else {
          tzmin = (box.max.z - origin.z) * invdirz;
          tzmax = (box.min.z - origin.z) * invdirz;
        }
        if (tmin > tzmax || tzmin > tmax)
          return null;
        if (tzmin > tmin || tmin !== tmin)
          tmin = tzmin;
        if (tzmax < tmax || tmax !== tmax)
          tmax = tzmax;
        if (tmax < 0)
          return null;
        return this.at(tmin >= 0 ? tmin : tmax, target);
      }
      intersectsBox(box) {
        return this.intersectBox(box, _vector$9) !== null;
      }
      intersectTriangle(a, b, c, backfaceCulling, target) {
        _edge1.subVectors(b, a);
        _edge2.subVectors(c, a);
        _normal$1.crossVectors(_edge1, _edge2);
        let DdN = this.direction.dot(_normal$1);
        let sign2;
        if (DdN > 0) {
          if (backfaceCulling)
            return null;
          sign2 = 1;
        } else if (DdN < 0) {
          sign2 = -1;
          DdN = -DdN;
        } else {
          return null;
        }
        _diff.subVectors(this.origin, a);
        const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
        if (DdQxE2 < 0) {
          return null;
        }
        const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
        if (DdE1xQ < 0) {
          return null;
        }
        if (DdQxE2 + DdE1xQ > DdN) {
          return null;
        }
        const QdN = -sign2 * _diff.dot(_normal$1);
        if (QdN < 0) {
          return null;
        }
        return this.at(QdN / DdN, target);
      }
      applyMatrix4(matrix4) {
        this.origin.applyMatrix4(matrix4);
        this.direction.transformDirection(matrix4);
        return this;
      }
      equals(ray) {
        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    var Matrix42 = class {
      constructor() {
        Matrix42.prototype.isMatrix4 = true;
        this.elements = [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ];
      }
      set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
        const te2 = this.elements;
        te2[0] = n11;
        te2[4] = n12;
        te2[8] = n13;
        te2[12] = n14;
        te2[1] = n21;
        te2[5] = n22;
        te2[9] = n23;
        te2[13] = n24;
        te2[2] = n31;
        te2[6] = n32;
        te2[10] = n33;
        te2[14] = n34;
        te2[3] = n41;
        te2[7] = n42;
        te2[11] = n43;
        te2[15] = n44;
        return this;
      }
      identity() {
        this.set(
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      clone() {
        return new Matrix42().fromArray(this.elements);
      }
      copy(m) {
        const te2 = this.elements;
        const me = m.elements;
        te2[0] = me[0];
        te2[1] = me[1];
        te2[2] = me[2];
        te2[3] = me[3];
        te2[4] = me[4];
        te2[5] = me[5];
        te2[6] = me[6];
        te2[7] = me[7];
        te2[8] = me[8];
        te2[9] = me[9];
        te2[10] = me[10];
        te2[11] = me[11];
        te2[12] = me[12];
        te2[13] = me[13];
        te2[14] = me[14];
        te2[15] = me[15];
        return this;
      }
      copyPosition(m) {
        const te2 = this.elements, me = m.elements;
        te2[12] = me[12];
        te2[13] = me[13];
        te2[14] = me[14];
        return this;
      }
      setFromMatrix3(m) {
        const me = m.elements;
        this.set(
          me[0],
          me[3],
          me[6],
          0,
          me[1],
          me[4],
          me[7],
          0,
          me[2],
          me[5],
          me[8],
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrixColumn(this, 0);
        yAxis.setFromMatrixColumn(this, 1);
        zAxis.setFromMatrixColumn(this, 2);
        return this;
      }
      makeBasis(xAxis, yAxis, zAxis) {
        this.set(
          xAxis.x,
          yAxis.x,
          zAxis.x,
          0,
          xAxis.y,
          yAxis.y,
          zAxis.y,
          0,
          xAxis.z,
          yAxis.z,
          zAxis.z,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      extractRotation(m) {
        const te2 = this.elements;
        const me = m.elements;
        const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
        const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
        const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
        te2[0] = me[0] * scaleX;
        te2[1] = me[1] * scaleX;
        te2[2] = me[2] * scaleX;
        te2[3] = 0;
        te2[4] = me[4] * scaleY;
        te2[5] = me[5] * scaleY;
        te2[6] = me[6] * scaleY;
        te2[7] = 0;
        te2[8] = me[8] * scaleZ;
        te2[9] = me[9] * scaleZ;
        te2[10] = me[10] * scaleZ;
        te2[11] = 0;
        te2[12] = 0;
        te2[13] = 0;
        te2[14] = 0;
        te2[15] = 1;
        return this;
      }
      makeRotationFromEuler(euler) {
        const te2 = this.elements;
        const x = euler.x, y = euler.y, z = euler.z;
        const a = Math.cos(x), b = Math.sin(x);
        const c = Math.cos(y), d = Math.sin(y);
        const e = Math.cos(z), f = Math.sin(z);
        if (euler.order === "XYZ") {
          const ae = a * e, af = a * f, be = b * e, bf = b * f;
          te2[0] = c * e;
          te2[4] = -c * f;
          te2[8] = d;
          te2[1] = af + be * d;
          te2[5] = ae - bf * d;
          te2[9] = -b * c;
          te2[2] = bf - ae * d;
          te2[6] = be + af * d;
          te2[10] = a * c;
        } else if (euler.order === "YXZ") {
          const ce = c * e, cf = c * f, de = d * e, df = d * f;
          te2[0] = ce + df * b;
          te2[4] = de * b - cf;
          te2[8] = a * d;
          te2[1] = a * f;
          te2[5] = a * e;
          te2[9] = -b;
          te2[2] = cf * b - de;
          te2[6] = df + ce * b;
          te2[10] = a * c;
        } else if (euler.order === "ZXY") {
          const ce = c * e, cf = c * f, de = d * e, df = d * f;
          te2[0] = ce - df * b;
          te2[4] = -a * f;
          te2[8] = de + cf * b;
          te2[1] = cf + de * b;
          te2[5] = a * e;
          te2[9] = df - ce * b;
          te2[2] = -a * d;
          te2[6] = b;
          te2[10] = a * c;
        } else if (euler.order === "ZYX") {
          const ae = a * e, af = a * f, be = b * e, bf = b * f;
          te2[0] = c * e;
          te2[4] = be * d - af;
          te2[8] = ae * d + bf;
          te2[1] = c * f;
          te2[5] = bf * d + ae;
          te2[9] = af * d - be;
          te2[2] = -d;
          te2[6] = b * c;
          te2[10] = a * c;
        } else if (euler.order === "YZX") {
          const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
          te2[0] = c * e;
          te2[4] = bd - ac * f;
          te2[8] = bc * f + ad;
          te2[1] = f;
          te2[5] = a * e;
          te2[9] = -b * e;
          te2[2] = -d * e;
          te2[6] = ad * f + bc;
          te2[10] = ac - bd * f;
        } else if (euler.order === "XZY") {
          const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
          te2[0] = c * e;
          te2[4] = -f;
          te2[8] = d * e;
          te2[1] = ac * f + bd;
          te2[5] = a * e;
          te2[9] = ad * f - bc;
          te2[2] = bc * f - ad;
          te2[6] = b * e;
          te2[10] = bd * f + ac;
        }
        te2[3] = 0;
        te2[7] = 0;
        te2[11] = 0;
        te2[12] = 0;
        te2[13] = 0;
        te2[14] = 0;
        te2[15] = 1;
        return this;
      }
      makeRotationFromQuaternion(q) {
        return this.compose(_zero, q, _one);
      }
      lookAt(eye, target, up) {
        const te2 = this.elements;
        _z.subVectors(eye, target);
        if (_z.lengthSq() === 0) {
          _z.z = 1;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
        if (_x.lengthSq() === 0) {
          if (Math.abs(up.z) === 1) {
            _z.x += 1e-4;
          } else {
            _z.z += 1e-4;
          }
          _z.normalize();
          _x.crossVectors(up, _z);
        }
        _x.normalize();
        _y.crossVectors(_z, _x);
        te2[0] = _x.x;
        te2[4] = _y.x;
        te2[8] = _z.x;
        te2[1] = _x.y;
        te2[5] = _y.y;
        te2[9] = _z.y;
        te2[2] = _x.z;
        te2[6] = _y.z;
        te2[10] = _z.z;
        return this;
      }
      multiply(m) {
        return this.multiplyMatrices(this, m);
      }
      premultiply(m) {
        return this.multiplyMatrices(m, this);
      }
      multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te2 = this.elements;
        const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
        const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
        const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
        const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
        const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
        const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
        const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
        const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
        te2[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
        te2[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
        te2[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
        te2[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
        te2[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
        te2[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
        te2[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
        te2[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
        te2[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
        te2[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
        te2[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
        te2[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
        te2[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
        te2[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
        te2[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
        te2[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
        return this;
      }
      multiplyScalar(s) {
        const te2 = this.elements;
        te2[0] *= s;
        te2[4] *= s;
        te2[8] *= s;
        te2[12] *= s;
        te2[1] *= s;
        te2[5] *= s;
        te2[9] *= s;
        te2[13] *= s;
        te2[2] *= s;
        te2[6] *= s;
        te2[10] *= s;
        te2[14] *= s;
        te2[3] *= s;
        te2[7] *= s;
        te2[11] *= s;
        te2[15] *= s;
        return this;
      }
      determinant() {
        const te2 = this.elements;
        const n11 = te2[0], n12 = te2[4], n13 = te2[8], n14 = te2[12];
        const n21 = te2[1], n22 = te2[5], n23 = te2[9], n24 = te2[13];
        const n31 = te2[2], n32 = te2[6], n33 = te2[10], n34 = te2[14];
        const n41 = te2[3], n42 = te2[7], n43 = te2[11], n44 = te2[15];
        return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
      }
      transpose() {
        const te2 = this.elements;
        let tmp2;
        tmp2 = te2[1];
        te2[1] = te2[4];
        te2[4] = tmp2;
        tmp2 = te2[2];
        te2[2] = te2[8];
        te2[8] = tmp2;
        tmp2 = te2[6];
        te2[6] = te2[9];
        te2[9] = tmp2;
        tmp2 = te2[3];
        te2[3] = te2[12];
        te2[12] = tmp2;
        tmp2 = te2[7];
        te2[7] = te2[13];
        te2[13] = tmp2;
        tmp2 = te2[11];
        te2[11] = te2[14];
        te2[14] = tmp2;
        return this;
      }
      setPosition(x, y, z) {
        const te2 = this.elements;
        if (x.isVector3) {
          te2[12] = x.x;
          te2[13] = x.y;
          te2[14] = x.z;
        } else {
          te2[12] = x;
          te2[13] = y;
          te2[14] = z;
        }
        return this;
      }
      invert() {
        const te2 = this.elements, n11 = te2[0], n21 = te2[1], n31 = te2[2], n41 = te2[3], n12 = te2[4], n22 = te2[5], n32 = te2[6], n42 = te2[7], n13 = te2[8], n23 = te2[9], n33 = te2[10], n43 = te2[11], n14 = te2[12], n24 = te2[13], n34 = te2[14], n44 = te2[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
        if (det === 0)
          return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te2[0] = t11 * detInv;
        te2[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
        te2[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
        te2[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
        te2[4] = t12 * detInv;
        te2[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
        te2[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
        te2[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
        te2[8] = t13 * detInv;
        te2[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
        te2[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
        te2[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
        te2[12] = t14 * detInv;
        te2[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
        te2[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
        te2[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
        return this;
      }
      scale(v) {
        const te2 = this.elements;
        const x = v.x, y = v.y, z = v.z;
        te2[0] *= x;
        te2[4] *= y;
        te2[8] *= z;
        te2[1] *= x;
        te2[5] *= y;
        te2[9] *= z;
        te2[2] *= x;
        te2[6] *= y;
        te2[10] *= z;
        te2[3] *= x;
        te2[7] *= y;
        te2[11] *= z;
        return this;
      }
      getMaxScaleOnAxis() {
        const te2 = this.elements;
        const scaleXSq = te2[0] * te2[0] + te2[1] * te2[1] + te2[2] * te2[2];
        const scaleYSq = te2[4] * te2[4] + te2[5] * te2[5] + te2[6] * te2[6];
        const scaleZSq = te2[8] * te2[8] + te2[9] * te2[9] + te2[10] * te2[10];
        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
      }
      makeTranslation(x, y, z) {
        this.set(
          1,
          0,
          0,
          x,
          0,
          1,
          0,
          y,
          0,
          0,
          1,
          z,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeRotationX(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(
          1,
          0,
          0,
          0,
          0,
          c,
          -s,
          0,
          0,
          s,
          c,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeRotationY(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(
          c,
          0,
          s,
          0,
          0,
          1,
          0,
          0,
          -s,
          0,
          c,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeRotationZ(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(
          c,
          -s,
          0,
          0,
          s,
          c,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeRotationAxis(axis, angle) {
        const c = Math.cos(angle);
        const s = Math.sin(angle);
        const t = 1 - c;
        const x = axis.x, y = axis.y, z = axis.z;
        const tx = t * x, ty = t * y;
        this.set(
          tx * x + c,
          tx * y - s * z,
          tx * z + s * y,
          0,
          tx * y + s * z,
          ty * y + c,
          ty * z - s * x,
          0,
          tx * z - s * y,
          ty * z + s * x,
          t * z * z + c,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeScale(x, y, z) {
        this.set(
          x,
          0,
          0,
          0,
          0,
          y,
          0,
          0,
          0,
          0,
          z,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeShear(xy, xz, yx, yz, zx, zy) {
        this.set(
          1,
          yx,
          zx,
          0,
          xy,
          1,
          zy,
          0,
          xz,
          yz,
          1,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      compose(position, quaternion, scale) {
        const te2 = this.elements;
        const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
        const x2 = x + x, y2 = y + y, z2 = z + z;
        const xx = x * x2, xy = x * y2, xz = x * z2;
        const yy = y * y2, yz = y * z2, zz = z * z2;
        const wx = w * x2, wy = w * y2, wz = w * z2;
        const sx = scale.x, sy = scale.y, sz = scale.z;
        te2[0] = (1 - (yy + zz)) * sx;
        te2[1] = (xy + wz) * sx;
        te2[2] = (xz - wy) * sx;
        te2[3] = 0;
        te2[4] = (xy - wz) * sy;
        te2[5] = (1 - (xx + zz)) * sy;
        te2[6] = (yz + wx) * sy;
        te2[7] = 0;
        te2[8] = (xz + wy) * sz;
        te2[9] = (yz - wx) * sz;
        te2[10] = (1 - (xx + yy)) * sz;
        te2[11] = 0;
        te2[12] = position.x;
        te2[13] = position.y;
        te2[14] = position.z;
        te2[15] = 1;
        return this;
      }
      decompose(position, quaternion, scale) {
        const te2 = this.elements;
        let sx = _v1$5.set(te2[0], te2[1], te2[2]).length();
        const sy = _v1$5.set(te2[4], te2[5], te2[6]).length();
        const sz = _v1$5.set(te2[8], te2[9], te2[10]).length();
        const det = this.determinant();
        if (det < 0)
          sx = -sx;
        position.x = te2[12];
        position.y = te2[13];
        position.z = te2[14];
        _m1$2.copy(this);
        const invSX = 1 / sx;
        const invSY = 1 / sy;
        const invSZ = 1 / sz;
        _m1$2.elements[0] *= invSX;
        _m1$2.elements[1] *= invSX;
        _m1$2.elements[2] *= invSX;
        _m1$2.elements[4] *= invSY;
        _m1$2.elements[5] *= invSY;
        _m1$2.elements[6] *= invSY;
        _m1$2.elements[8] *= invSZ;
        _m1$2.elements[9] *= invSZ;
        _m1$2.elements[10] *= invSZ;
        quaternion.setFromRotationMatrix(_m1$2);
        scale.x = sx;
        scale.y = sy;
        scale.z = sz;
        return this;
      }
      makePerspective(left, right, top, bottom, near, far) {
        const te2 = this.elements;
        const x = 2 * near / (right - left);
        const y = 2 * near / (top - bottom);
        const a = (right + left) / (right - left);
        const b = (top + bottom) / (top - bottom);
        const c = -(far + near) / (far - near);
        const d = -2 * far * near / (far - near);
        te2[0] = x;
        te2[4] = 0;
        te2[8] = a;
        te2[12] = 0;
        te2[1] = 0;
        te2[5] = y;
        te2[9] = b;
        te2[13] = 0;
        te2[2] = 0;
        te2[6] = 0;
        te2[10] = c;
        te2[14] = d;
        te2[3] = 0;
        te2[7] = 0;
        te2[11] = -1;
        te2[15] = 0;
        return this;
      }
      makeOrthographic(left, right, top, bottom, near, far) {
        const te2 = this.elements;
        const w = 1 / (right - left);
        const h = 1 / (top - bottom);
        const p = 1 / (far - near);
        const x = (right + left) * w;
        const y = (top + bottom) * h;
        const z = (far + near) * p;
        te2[0] = 2 * w;
        te2[4] = 0;
        te2[8] = 0;
        te2[12] = -x;
        te2[1] = 0;
        te2[5] = 2 * h;
        te2[9] = 0;
        te2[13] = -y;
        te2[2] = 0;
        te2[6] = 0;
        te2[10] = -2 * p;
        te2[14] = -z;
        te2[3] = 0;
        te2[7] = 0;
        te2[11] = 0;
        te2[15] = 1;
        return this;
      }
      equals(matrix) {
        const te2 = this.elements;
        const me = matrix.elements;
        for (let i = 0; i < 16; i++) {
          if (te2[i] !== me[i])
            return false;
        }
        return true;
      }
      fromArray(array, offset = 0) {
        for (let i = 0; i < 16; i++) {
          this.elements[i] = array[i + offset];
        }
        return this;
      }
      toArray(array = [], offset = 0) {
        const te2 = this.elements;
        array[offset] = te2[0];
        array[offset + 1] = te2[1];
        array[offset + 2] = te2[2];
        array[offset + 3] = te2[3];
        array[offset + 4] = te2[4];
        array[offset + 5] = te2[5];
        array[offset + 6] = te2[6];
        array[offset + 7] = te2[7];
        array[offset + 8] = te2[8];
        array[offset + 9] = te2[9];
        array[offset + 10] = te2[10];
        array[offset + 11] = te2[11];
        array[offset + 12] = te2[12];
        array[offset + 13] = te2[13];
        array[offset + 14] = te2[14];
        array[offset + 15] = te2[15];
        return array;
      }
    };
    var _v1$5 = new Vector32();
    var _m1$2 = new Matrix42();
    var _zero = new Vector32(0, 0, 0);
    var _one = new Vector32(1, 1, 1);
    var _x = new Vector32();
    var _y = new Vector32();
    var _z = new Vector32();
    var _matrix = new Matrix42();
    var _quaternion$3 = new Quaternion2();
    var Euler2 = class {
      constructor(x = 0, y = 0, z = 0, order = Euler2.DEFAULT_ORDER) {
        this.isEuler = true;
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
      }
      get x() {
        return this._x;
      }
      set x(value) {
        this._x = value;
        this._onChangeCallback();
      }
      get y() {
        return this._y;
      }
      set y(value) {
        this._y = value;
        this._onChangeCallback();
      }
      get z() {
        return this._z;
      }
      set z(value) {
        this._z = value;
        this._onChangeCallback();
      }
      get order() {
        return this._order;
      }
      set order(value) {
        this._order = value;
        this._onChangeCallback();
      }
      set(x, y, z, order = this._order) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
        this._onChangeCallback();
        return this;
      }
      clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
      }
      copy(euler) {
        this._x = euler._x;
        this._y = euler._y;
        this._z = euler._z;
        this._order = euler._order;
        this._onChangeCallback();
        return this;
      }
      setFromRotationMatrix(m, order = this._order, update = true) {
        const te2 = m.elements;
        const m11 = te2[0], m12 = te2[4], m13 = te2[8];
        const m21 = te2[1], m22 = te2[5], m23 = te2[9];
        const m31 = te2[2], m32 = te2[6], m33 = te2[10];
        switch (order) {
          case "XYZ":
            this._y = Math.asin(clamp(m13, -1, 1));
            if (Math.abs(m13) < 0.9999999) {
              this._x = Math.atan2(-m23, m33);
              this._z = Math.atan2(-m12, m11);
            } else {
              this._x = Math.atan2(m32, m22);
              this._z = 0;
            }
            break;
          case "YXZ":
            this._x = Math.asin(-clamp(m23, -1, 1));
            if (Math.abs(m23) < 0.9999999) {
              this._y = Math.atan2(m13, m33);
              this._z = Math.atan2(m21, m22);
            } else {
              this._y = Math.atan2(-m31, m11);
              this._z = 0;
            }
            break;
          case "ZXY":
            this._x = Math.asin(clamp(m32, -1, 1));
            if (Math.abs(m32) < 0.9999999) {
              this._y = Math.atan2(-m31, m33);
              this._z = Math.atan2(-m12, m22);
            } else {
              this._y = 0;
              this._z = Math.atan2(m21, m11);
            }
            break;
          case "ZYX":
            this._y = Math.asin(-clamp(m31, -1, 1));
            if (Math.abs(m31) < 0.9999999) {
              this._x = Math.atan2(m32, m33);
              this._z = Math.atan2(m21, m11);
            } else {
              this._x = 0;
              this._z = Math.atan2(-m12, m22);
            }
            break;
          case "YZX":
            this._z = Math.asin(clamp(m21, -1, 1));
            if (Math.abs(m21) < 0.9999999) {
              this._x = Math.atan2(-m23, m22);
              this._y = Math.atan2(-m31, m11);
            } else {
              this._x = 0;
              this._y = Math.atan2(m13, m33);
            }
            break;
          case "XZY":
            this._z = Math.asin(-clamp(m12, -1, 1));
            if (Math.abs(m12) < 0.9999999) {
              this._x = Math.atan2(m32, m22);
              this._y = Math.atan2(m13, m11);
            } else {
              this._x = Math.atan2(-m23, m33);
              this._y = 0;
            }
            break;
          default:
            console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
        }
        this._order = order;
        if (update === true)
          this._onChangeCallback();
        return this;
      }
      setFromQuaternion(q, order, update) {
        _matrix.makeRotationFromQuaternion(q);
        return this.setFromRotationMatrix(_matrix, order, update);
      }
      setFromVector3(v, order = this._order) {
        return this.set(v.x, v.y, v.z, order);
      }
      reorder(newOrder) {
        _quaternion$3.setFromEuler(this);
        return this.setFromQuaternion(_quaternion$3, newOrder);
      }
      equals(euler) {
        return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
      }
      fromArray(array) {
        this._x = array[0];
        this._y = array[1];
        this._z = array[2];
        if (array[3] !== void 0)
          this._order = array[3];
        this._onChangeCallback();
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._order;
        return array;
      }
      _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
      }
      _onChangeCallback() {
      }
      *[Symbol.iterator]() {
        yield this._x;
        yield this._y;
        yield this._z;
        yield this._order;
      }
    };
    Euler2.DEFAULT_ORDER = "XYZ";
    var Layers = class {
      constructor() {
        this.mask = 1 | 0;
      }
      set(channel) {
        this.mask = (1 << channel | 0) >>> 0;
      }
      enable(channel) {
        this.mask |= 1 << channel | 0;
      }
      enableAll() {
        this.mask = 4294967295 | 0;
      }
      toggle(channel) {
        this.mask ^= 1 << channel | 0;
      }
      disable(channel) {
        this.mask &= ~(1 << channel | 0);
      }
      disableAll() {
        this.mask = 0;
      }
      test(layers) {
        return (this.mask & layers.mask) !== 0;
      }
      isEnabled(channel) {
        return (this.mask & (1 << channel | 0)) !== 0;
      }
    };
    var _object3DId = 0;
    var _v1$4 = new Vector32();
    var _q1 = new Quaternion2();
    var _m1$1 = new Matrix42();
    var _target = new Vector32();
    var _position$3 = new Vector32();
    var _scale$2 = new Vector32();
    var _quaternion$2 = new Quaternion2();
    var _xAxis = new Vector32(1, 0, 0);
    var _yAxis = new Vector32(0, 1, 0);
    var _zAxis = new Vector32(0, 0, 1);
    var _addedEvent = { type: "added" };
    var _removedEvent = { type: "removed" };
    var Object3D2 = class extends EventDispatcher2 {
      constructor() {
        super();
        this.isObject3D = true;
        Object.defineProperty(this, "id", { value: _object3DId++ });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "Object3D";
        this.parent = null;
        this.children = [];
        this.up = Object3D2.DEFAULT_UP.clone();
        const position = new Vector32();
        const rotation = new Euler2();
        const quaternion = new Quaternion2();
        const scale = new Vector32(1, 1, 1);
        function onRotationChange() {
          quaternion.setFromEuler(rotation, false);
        }
        function onQuaternionChange() {
          rotation.setFromQuaternion(quaternion, void 0, false);
        }
        rotation._onChange(onRotationChange);
        quaternion._onChange(onQuaternionChange);
        Object.defineProperties(this, {
          position: {
            configurable: true,
            enumerable: true,
            value: position
          },
          rotation: {
            configurable: true,
            enumerable: true,
            value: rotation
          },
          quaternion: {
            configurable: true,
            enumerable: true,
            value: quaternion
          },
          scale: {
            configurable: true,
            enumerable: true,
            value: scale
          },
          modelViewMatrix: {
            value: new Matrix42()
          },
          normalMatrix: {
            value: new Matrix32()
          }
        });
        this.matrix = new Matrix42();
        this.matrixWorld = new Matrix42();
        this.matrixAutoUpdate = Object3D2.DEFAULT_MATRIX_AUTO_UPDATE;
        this.matrixWorldNeedsUpdate = false;
        this.matrixWorldAutoUpdate = Object3D2.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
        this.layers = new Layers();
        this.visible = true;
        this.castShadow = false;
        this.receiveShadow = false;
        this.frustumCulled = true;
        this.renderOrder = 0;
        this.animations = [];
        this.userData = {};
      }
      onBeforeRender() {
      }
      onAfterRender() {
      }
      applyMatrix4(matrix) {
        if (this.matrixAutoUpdate)
          this.updateMatrix();
        this.matrix.premultiply(matrix);
        this.matrix.decompose(this.position, this.quaternion, this.scale);
      }
      applyQuaternion(q) {
        this.quaternion.premultiply(q);
        return this;
      }
      setRotationFromAxisAngle(axis, angle) {
        this.quaternion.setFromAxisAngle(axis, angle);
      }
      setRotationFromEuler(euler) {
        this.quaternion.setFromEuler(euler, true);
      }
      setRotationFromMatrix(m) {
        this.quaternion.setFromRotationMatrix(m);
      }
      setRotationFromQuaternion(q) {
        this.quaternion.copy(q);
      }
      rotateOnAxis(axis, angle) {
        _q1.setFromAxisAngle(axis, angle);
        this.quaternion.multiply(_q1);
        return this;
      }
      rotateOnWorldAxis(axis, angle) {
        _q1.setFromAxisAngle(axis, angle);
        this.quaternion.premultiply(_q1);
        return this;
      }
      rotateX(angle) {
        return this.rotateOnAxis(_xAxis, angle);
      }
      rotateY(angle) {
        return this.rotateOnAxis(_yAxis, angle);
      }
      rotateZ(angle) {
        return this.rotateOnAxis(_zAxis, angle);
      }
      translateOnAxis(axis, distance) {
        _v1$4.copy(axis).applyQuaternion(this.quaternion);
        this.position.add(_v1$4.multiplyScalar(distance));
        return this;
      }
      translateX(distance) {
        return this.translateOnAxis(_xAxis, distance);
      }
      translateY(distance) {
        return this.translateOnAxis(_yAxis, distance);
      }
      translateZ(distance) {
        return this.translateOnAxis(_zAxis, distance);
      }
      localToWorld(vector) {
        this.updateWorldMatrix(true, false);
        return vector.applyMatrix4(this.matrixWorld);
      }
      worldToLocal(vector) {
        this.updateWorldMatrix(true, false);
        return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
      }
      lookAt(x, y, z) {
        if (x.isVector3) {
          _target.copy(x);
        } else {
          _target.set(x, y, z);
        }
        const parent = this.parent;
        this.updateWorldMatrix(true, false);
        _position$3.setFromMatrixPosition(this.matrixWorld);
        if (this.isCamera || this.isLight) {
          _m1$1.lookAt(_position$3, _target, this.up);
        } else {
          _m1$1.lookAt(_target, _position$3, this.up);
        }
        this.quaternion.setFromRotationMatrix(_m1$1);
        if (parent) {
          _m1$1.extractRotation(parent.matrixWorld);
          _q1.setFromRotationMatrix(_m1$1);
          this.quaternion.premultiply(_q1.invert());
        }
      }
      add(object) {
        if (arguments.length > 1) {
          for (let i = 0; i < arguments.length; i++) {
            this.add(arguments[i]);
          }
          return this;
        }
        if (object === this) {
          console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
          return this;
        }
        if (object && object.isObject3D) {
          if (object.parent !== null) {
            object.parent.remove(object);
          }
          object.parent = this;
          this.children.push(object);
          object.dispatchEvent(_addedEvent);
        } else {
          console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
        }
        return this;
      }
      remove(object) {
        if (arguments.length > 1) {
          for (let i = 0; i < arguments.length; i++) {
            this.remove(arguments[i]);
          }
          return this;
        }
        const index = this.children.indexOf(object);
        if (index !== -1) {
          object.parent = null;
          this.children.splice(index, 1);
          object.dispatchEvent(_removedEvent);
        }
        return this;
      }
      removeFromParent() {
        const parent = this.parent;
        if (parent !== null) {
          parent.remove(this);
        }
        return this;
      }
      clear() {
        for (let i = 0; i < this.children.length; i++) {
          const object = this.children[i];
          object.parent = null;
          object.dispatchEvent(_removedEvent);
        }
        this.children.length = 0;
        return this;
      }
      attach(object) {
        this.updateWorldMatrix(true, false);
        _m1$1.copy(this.matrixWorld).invert();
        if (object.parent !== null) {
          object.parent.updateWorldMatrix(true, false);
          _m1$1.multiply(object.parent.matrixWorld);
        }
        object.applyMatrix4(_m1$1);
        this.add(object);
        object.updateWorldMatrix(false, true);
        return this;
      }
      getObjectById(id2) {
        return this.getObjectByProperty("id", id2);
      }
      getObjectByName(name) {
        return this.getObjectByProperty("name", name);
      }
      getObjectByProperty(name, value) {
        if (this[name] === value)
          return this;
        for (let i = 0, l = this.children.length; i < l; i++) {
          const child = this.children[i];
          const object = child.getObjectByProperty(name, value);
          if (object !== void 0) {
            return object;
          }
        }
        return void 0;
      }
      getObjectsByProperty(name, value) {
        let result = [];
        if (this[name] === value)
          result.push(this);
        for (let i = 0, l = this.children.length; i < l; i++) {
          const childResult = this.children[i].getObjectsByProperty(name, value);
          if (childResult.length > 0) {
            result = result.concat(childResult);
          }
        }
        return result;
      }
      getWorldPosition(target) {
        this.updateWorldMatrix(true, false);
        return target.setFromMatrixPosition(this.matrixWorld);
      }
      getWorldQuaternion(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose(_position$3, target, _scale$2);
        return target;
      }
      getWorldScale(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose(_position$3, _quaternion$2, target);
        return target;
      }
      getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(e[8], e[9], e[10]).normalize();
      }
      raycast() {
      }
      traverse(callback) {
        callback(this);
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          children[i].traverse(callback);
        }
      }
      traverseVisible(callback) {
        if (this.visible === false)
          return;
        callback(this);
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          children[i].traverseVisible(callback);
        }
      }
      traverseAncestors(callback) {
        const parent = this.parent;
        if (parent !== null) {
          callback(parent);
          parent.traverseAncestors(callback);
        }
      }
      updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale);
        this.matrixWorldNeedsUpdate = true;
      }
      updateMatrixWorld(force) {
        if (this.matrixAutoUpdate)
          this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || force) {
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
          this.matrixWorldNeedsUpdate = false;
          force = true;
        }
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          const child = children[i];
          if (child.matrixWorldAutoUpdate === true || force === true) {
            child.updateMatrixWorld(force);
          }
        }
      }
      updateWorldMatrix(updateParents, updateChildren) {
        const parent = this.parent;
        if (updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true) {
          parent.updateWorldMatrix(true, false);
        }
        if (this.matrixAutoUpdate)
          this.updateMatrix();
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
        if (updateChildren === true) {
          const children = this.children;
          for (let i = 0, l = children.length; i < l; i++) {
            const child = children[i];
            if (child.matrixWorldAutoUpdate === true) {
              child.updateWorldMatrix(false, true);
            }
          }
        }
      }
      toJSON(meta) {
        const isRootObject = meta === void 0 || typeof meta === "string";
        const output = {};
        if (isRootObject) {
          meta = {
            geometries: {},
            materials: {},
            textures: {},
            images: {},
            shapes: {},
            skeletons: {},
            animations: {},
            nodes: {}
          };
          output.metadata = {
            version: 4.5,
            type: "Object",
            generator: "Object3D.toJSON"
          };
        }
        const object = {};
        object.uuid = this.uuid;
        object.type = this.type;
        if (this.name !== "")
          object.name = this.name;
        if (this.castShadow === true)
          object.castShadow = true;
        if (this.receiveShadow === true)
          object.receiveShadow = true;
        if (this.visible === false)
          object.visible = false;
        if (this.frustumCulled === false)
          object.frustumCulled = false;
        if (this.renderOrder !== 0)
          object.renderOrder = this.renderOrder;
        if (Object.keys(this.userData).length > 0)
          object.userData = this.userData;
        object.layers = this.layers.mask;
        object.matrix = this.matrix.toArray();
        object.up = this.up.toArray();
        if (this.matrixAutoUpdate === false)
          object.matrixAutoUpdate = false;
        if (this.isInstancedMesh) {
          object.type = "InstancedMesh";
          object.count = this.count;
          object.instanceMatrix = this.instanceMatrix.toJSON();
          if (this.instanceColor !== null)
            object.instanceColor = this.instanceColor.toJSON();
        }
        function serialize(library, element) {
          if (library[element.uuid] === void 0) {
            library[element.uuid] = element.toJSON(meta);
          }
          return element.uuid;
        }
        if (this.isScene) {
          if (this.background) {
            if (this.background.isColor) {
              object.background = this.background.toJSON();
            } else if (this.background.isTexture) {
              object.background = this.background.toJSON(meta).uuid;
            }
          }
          if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
            object.environment = this.environment.toJSON(meta).uuid;
          }
        } else if (this.isMesh || this.isLine || this.isPoints) {
          object.geometry = serialize(meta.geometries, this.geometry);
          const parameters = this.geometry.parameters;
          if (parameters !== void 0 && parameters.shapes !== void 0) {
            const shapes = parameters.shapes;
            if (Array.isArray(shapes)) {
              for (let i = 0, l = shapes.length; i < l; i++) {
                const shape = shapes[i];
                serialize(meta.shapes, shape);
              }
            } else {
              serialize(meta.shapes, shapes);
            }
          }
        }
        if (this.isSkinnedMesh) {
          object.bindMode = this.bindMode;
          object.bindMatrix = this.bindMatrix.toArray();
          if (this.skeleton !== void 0) {
            serialize(meta.skeletons, this.skeleton);
            object.skeleton = this.skeleton.uuid;
          }
        }
        if (this.material !== void 0) {
          if (Array.isArray(this.material)) {
            const uuids = [];
            for (let i = 0, l = this.material.length; i < l; i++) {
              uuids.push(serialize(meta.materials, this.material[i]));
            }
            object.material = uuids;
          } else {
            object.material = serialize(meta.materials, this.material);
          }
        }
        if (this.children.length > 0) {
          object.children = [];
          for (let i = 0; i < this.children.length; i++) {
            object.children.push(this.children[i].toJSON(meta).object);
          }
        }
        if (this.animations.length > 0) {
          object.animations = [];
          for (let i = 0; i < this.animations.length; i++) {
            const animation = this.animations[i];
            object.animations.push(serialize(meta.animations, animation));
          }
        }
        if (isRootObject) {
          const geometries = extractFromCache(meta.geometries);
          const materials = extractFromCache(meta.materials);
          const textures = extractFromCache(meta.textures);
          const images = extractFromCache(meta.images);
          const shapes = extractFromCache(meta.shapes);
          const skeletons = extractFromCache(meta.skeletons);
          const animations = extractFromCache(meta.animations);
          const nodes = extractFromCache(meta.nodes);
          if (geometries.length > 0)
            output.geometries = geometries;
          if (materials.length > 0)
            output.materials = materials;
          if (textures.length > 0)
            output.textures = textures;
          if (images.length > 0)
            output.images = images;
          if (shapes.length > 0)
            output.shapes = shapes;
          if (skeletons.length > 0)
            output.skeletons = skeletons;
          if (animations.length > 0)
            output.animations = animations;
          if (nodes.length > 0)
            output.nodes = nodes;
        }
        output.object = object;
        return output;
        function extractFromCache(cache) {
          const values = [];
          for (const key in cache) {
            const data = cache[key];
            delete data.metadata;
            values.push(data);
          }
          return values;
        }
      }
      clone(recursive) {
        return new this.constructor().copy(this, recursive);
      }
      copy(source, recursive = true) {
        this.name = source.name;
        this.up.copy(source.up);
        this.position.copy(source.position);
        this.rotation.order = source.rotation.order;
        this.quaternion.copy(source.quaternion);
        this.scale.copy(source.scale);
        this.matrix.copy(source.matrix);
        this.matrixWorld.copy(source.matrixWorld);
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
        this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
        this.layers.mask = source.layers.mask;
        this.visible = source.visible;
        this.castShadow = source.castShadow;
        this.receiveShadow = source.receiveShadow;
        this.frustumCulled = source.frustumCulled;
        this.renderOrder = source.renderOrder;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        if (recursive === true) {
          for (let i = 0; i < source.children.length; i++) {
            const child = source.children[i];
            this.add(child.clone());
          }
        }
        return this;
      }
    };
    Object3D2.DEFAULT_UP = new Vector32(0, 1, 0);
    Object3D2.DEFAULT_MATRIX_AUTO_UPDATE = true;
    Object3D2.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
    var _v0$1 = new Vector32();
    var _v1$3 = new Vector32();
    var _v2$2 = new Vector32();
    var _v3$1 = new Vector32();
    var _vab = new Vector32();
    var _vac = new Vector32();
    var _vbc = new Vector32();
    var _vap = new Vector32();
    var _vbp = new Vector32();
    var _vcp = new Vector32();
    var warnedGetUV = false;
    var Triangle = class {
      constructor(a = new Vector32(), b = new Vector32(), c = new Vector32()) {
        this.a = a;
        this.b = b;
        this.c = c;
      }
      static getNormal(a, b, c, target) {
        target.subVectors(c, b);
        _v0$1.subVectors(a, b);
        target.cross(_v0$1);
        const targetLengthSq = target.lengthSq();
        if (targetLengthSq > 0) {
          return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
        }
        return target.set(0, 0, 0);
      }
      // static/instance method to calculate barycentric coordinates
      // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
      static getBarycoord(point, a, b, c, target) {
        _v0$1.subVectors(c, a);
        _v1$3.subVectors(b, a);
        _v2$2.subVectors(point, a);
        const dot00 = _v0$1.dot(_v0$1);
        const dot01 = _v0$1.dot(_v1$3);
        const dot02 = _v0$1.dot(_v2$2);
        const dot11 = _v1$3.dot(_v1$3);
        const dot12 = _v1$3.dot(_v2$2);
        const denom = dot00 * dot11 - dot01 * dot01;
        if (denom === 0) {
          return target.set(-2, -1, -1);
        }
        const invDenom = 1 / denom;
        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        return target.set(1 - u - v, v, u);
      }
      static containsPoint(point, a, b, c) {
        this.getBarycoord(point, a, b, c, _v3$1);
        return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
      }
      static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
        if (warnedGetUV === false) {
          console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
          warnedGetUV = true;
        }
        return this.getInterpolation(point, p1, p2, p3, uv1, uv2, uv3, target);
      }
      static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
        this.getBarycoord(point, p1, p2, p3, _v3$1);
        target.setScalar(0);
        target.addScaledVector(v1, _v3$1.x);
        target.addScaledVector(v2, _v3$1.y);
        target.addScaledVector(v3, _v3$1.z);
        return target;
      }
      static isFrontFacing(a, b, c, direction) {
        _v0$1.subVectors(c, b);
        _v1$3.subVectors(a, b);
        return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
      }
      set(a, b, c) {
        this.a.copy(a);
        this.b.copy(b);
        this.c.copy(c);
        return this;
      }
      setFromPointsAndIndices(points, i0, i1, i2) {
        this.a.copy(points[i0]);
        this.b.copy(points[i1]);
        this.c.copy(points[i2]);
        return this;
      }
      setFromAttributeAndIndices(attribute, i0, i1, i2) {
        this.a.fromBufferAttribute(attribute, i0);
        this.b.fromBufferAttribute(attribute, i1);
        this.c.fromBufferAttribute(attribute, i2);
        return this;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(triangle) {
        this.a.copy(triangle.a);
        this.b.copy(triangle.b);
        this.c.copy(triangle.c);
        return this;
      }
      getArea() {
        _v0$1.subVectors(this.c, this.b);
        _v1$3.subVectors(this.a, this.b);
        return _v0$1.cross(_v1$3).length() * 0.5;
      }
      getMidpoint(target) {
        return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
      }
      getNormal(target) {
        return Triangle.getNormal(this.a, this.b, this.c, target);
      }
      getPlane(target) {
        return target.setFromCoplanarPoints(this.a, this.b, this.c);
      }
      getBarycoord(point, target) {
        return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
      }
      getUV(point, uv1, uv2, uv3, target) {
        if (warnedGetUV === false) {
          console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
          warnedGetUV = true;
        }
        return Triangle.getInterpolation(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
      }
      getInterpolation(point, v1, v2, v3, target) {
        return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
      }
      containsPoint(point) {
        return Triangle.containsPoint(point, this.a, this.b, this.c);
      }
      isFrontFacing(direction) {
        return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
      }
      intersectsBox(box) {
        return box.intersectsTriangle(this);
      }
      closestPointToPoint(p, target) {
        const a = this.a, b = this.b, c = this.c;
        let v, w;
        _vab.subVectors(b, a);
        _vac.subVectors(c, a);
        _vap.subVectors(p, a);
        const d1 = _vab.dot(_vap);
        const d2 = _vac.dot(_vap);
        if (d1 <= 0 && d2 <= 0) {
          return target.copy(a);
        }
        _vbp.subVectors(p, b);
        const d3 = _vab.dot(_vbp);
        const d4 = _vac.dot(_vbp);
        if (d3 >= 0 && d4 <= d3) {
          return target.copy(b);
        }
        const vc = d1 * d4 - d3 * d2;
        if (vc <= 0 && d1 >= 0 && d3 <= 0) {
          v = d1 / (d1 - d3);
          return target.copy(a).addScaledVector(_vab, v);
        }
        _vcp.subVectors(p, c);
        const d5 = _vab.dot(_vcp);
        const d6 = _vac.dot(_vcp);
        if (d6 >= 0 && d5 <= d6) {
          return target.copy(c);
        }
        const vb = d5 * d2 - d1 * d6;
        if (vb <= 0 && d2 >= 0 && d6 <= 0) {
          w = d2 / (d2 - d6);
          return target.copy(a).addScaledVector(_vac, w);
        }
        const va = d3 * d6 - d5 * d4;
        if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
          _vbc.subVectors(c, b);
          w = (d4 - d3) / (d4 - d3 + (d5 - d6));
          return target.copy(b).addScaledVector(_vbc, w);
        }
        const denom = 1 / (va + vb + vc);
        v = vb * denom;
        w = vc * denom;
        return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
      }
      equals(triangle) {
        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
      }
    };
    var materialId = 0;
    var Material2 = class extends EventDispatcher2 {
      constructor() {
        super();
        this.isMaterial = true;
        Object.defineProperty(this, "id", { value: materialId++ });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "Material";
        this.blending = NormalBlending;
        this.side = FrontSide2;
        this.vertexColors = false;
        this.opacity = 1;
        this.transparent = false;
        this.blendSrc = SrcAlphaFactor;
        this.blendDst = OneMinusSrcAlphaFactor;
        this.blendEquation = AddEquation;
        this.blendSrcAlpha = null;
        this.blendDstAlpha = null;
        this.blendEquationAlpha = null;
        this.depthFunc = LessEqualDepth;
        this.depthTest = true;
        this.depthWrite = true;
        this.stencilWriteMask = 255;
        this.stencilFunc = AlwaysStencilFunc;
        this.stencilRef = 0;
        this.stencilFuncMask = 255;
        this.stencilFail = KeepStencilOp;
        this.stencilZFail = KeepStencilOp;
        this.stencilZPass = KeepStencilOp;
        this.stencilWrite = false;
        this.clippingPlanes = null;
        this.clipIntersection = false;
        this.clipShadows = false;
        this.shadowSide = null;
        this.colorWrite = true;
        this.precision = null;
        this.polygonOffset = false;
        this.polygonOffsetFactor = 0;
        this.polygonOffsetUnits = 0;
        this.dithering = false;
        this.alphaToCoverage = false;
        this.premultipliedAlpha = false;
        this.forceSinglePass = false;
        this.visible = true;
        this.toneMapped = true;
        this.userData = {};
        this.version = 0;
        this._alphaTest = 0;
      }
      get alphaTest() {
        return this._alphaTest;
      }
      set alphaTest(value) {
        if (this._alphaTest > 0 !== value > 0) {
          this.version++;
        }
        this._alphaTest = value;
      }
      onBuild() {
      }
      onBeforeRender() {
      }
      onBeforeCompile() {
      }
      customProgramCacheKey() {
        return this.onBeforeCompile.toString();
      }
      setValues(values) {
        if (values === void 0)
          return;
        for (const key in values) {
          const newValue = values[key];
          if (newValue === void 0) {
            console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
            continue;
          }
          const currentValue = this[key];
          if (currentValue === void 0) {
            console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
            continue;
          }
          if (currentValue && currentValue.isColor) {
            currentValue.set(newValue);
          } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
            currentValue.copy(newValue);
          } else {
            this[key] = newValue;
          }
        }
      }
      toJSON(meta) {
        const isRootObject = meta === void 0 || typeof meta === "string";
        if (isRootObject) {
          meta = {
            textures: {},
            images: {}
          };
        }
        const data = {
          metadata: {
            version: 4.5,
            type: "Material",
            generator: "Material.toJSON"
          }
        };
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== "")
          data.name = this.name;
        if (this.color && this.color.isColor)
          data.color = this.color.getHex();
        if (this.roughness !== void 0)
          data.roughness = this.roughness;
        if (this.metalness !== void 0)
          data.metalness = this.metalness;
        if (this.sheen !== void 0)
          data.sheen = this.sheen;
        if (this.sheenColor && this.sheenColor.isColor)
          data.sheenColor = this.sheenColor.getHex();
        if (this.sheenRoughness !== void 0)
          data.sheenRoughness = this.sheenRoughness;
        if (this.emissive && this.emissive.isColor)
          data.emissive = this.emissive.getHex();
        if (this.emissiveIntensity && this.emissiveIntensity !== 1)
          data.emissiveIntensity = this.emissiveIntensity;
        if (this.specular && this.specular.isColor)
          data.specular = this.specular.getHex();
        if (this.specularIntensity !== void 0)
          data.specularIntensity = this.specularIntensity;
        if (this.specularColor && this.specularColor.isColor)
          data.specularColor = this.specularColor.getHex();
        if (this.shininess !== void 0)
          data.shininess = this.shininess;
        if (this.clearcoat !== void 0)
          data.clearcoat = this.clearcoat;
        if (this.clearcoatRoughness !== void 0)
          data.clearcoatRoughness = this.clearcoatRoughness;
        if (this.clearcoatMap && this.clearcoatMap.isTexture) {
          data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
        }
        if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
          data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
        }
        if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
          data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
          data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
        }
        if (this.iridescence !== void 0)
          data.iridescence = this.iridescence;
        if (this.iridescenceIOR !== void 0)
          data.iridescenceIOR = this.iridescenceIOR;
        if (this.iridescenceThicknessRange !== void 0)
          data.iridescenceThicknessRange = this.iridescenceThicknessRange;
        if (this.iridescenceMap && this.iridescenceMap.isTexture) {
          data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
        }
        if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
          data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
        }
        if (this.map && this.map.isTexture)
          data.map = this.map.toJSON(meta).uuid;
        if (this.matcap && this.matcap.isTexture)
          data.matcap = this.matcap.toJSON(meta).uuid;
        if (this.alphaMap && this.alphaMap.isTexture)
          data.alphaMap = this.alphaMap.toJSON(meta).uuid;
        if (this.lightMap && this.lightMap.isTexture) {
          data.lightMap = this.lightMap.toJSON(meta).uuid;
          data.lightMapIntensity = this.lightMapIntensity;
        }
        if (this.aoMap && this.aoMap.isTexture) {
          data.aoMap = this.aoMap.toJSON(meta).uuid;
          data.aoMapIntensity = this.aoMapIntensity;
        }
        if (this.bumpMap && this.bumpMap.isTexture) {
          data.bumpMap = this.bumpMap.toJSON(meta).uuid;
          data.bumpScale = this.bumpScale;
        }
        if (this.normalMap && this.normalMap.isTexture) {
          data.normalMap = this.normalMap.toJSON(meta).uuid;
          data.normalMapType = this.normalMapType;
          data.normalScale = this.normalScale.toArray();
        }
        if (this.displacementMap && this.displacementMap.isTexture) {
          data.displacementMap = this.displacementMap.toJSON(meta).uuid;
          data.displacementScale = this.displacementScale;
          data.displacementBias = this.displacementBias;
        }
        if (this.roughnessMap && this.roughnessMap.isTexture)
          data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
        if (this.metalnessMap && this.metalnessMap.isTexture)
          data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
        if (this.emissiveMap && this.emissiveMap.isTexture)
          data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
        if (this.specularMap && this.specularMap.isTexture)
          data.specularMap = this.specularMap.toJSON(meta).uuid;
        if (this.specularIntensityMap && this.specularIntensityMap.isTexture)
          data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
        if (this.specularColorMap && this.specularColorMap.isTexture)
          data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
        if (this.envMap && this.envMap.isTexture) {
          data.envMap = this.envMap.toJSON(meta).uuid;
          if (this.combine !== void 0)
            data.combine = this.combine;
        }
        if (this.envMapIntensity !== void 0)
          data.envMapIntensity = this.envMapIntensity;
        if (this.reflectivity !== void 0)
          data.reflectivity = this.reflectivity;
        if (this.refractionRatio !== void 0)
          data.refractionRatio = this.refractionRatio;
        if (this.gradientMap && this.gradientMap.isTexture) {
          data.gradientMap = this.gradientMap.toJSON(meta).uuid;
        }
        if (this.transmission !== void 0)
          data.transmission = this.transmission;
        if (this.transmissionMap && this.transmissionMap.isTexture)
          data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
        if (this.thickness !== void 0)
          data.thickness = this.thickness;
        if (this.thicknessMap && this.thicknessMap.isTexture)
          data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
        if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity)
          data.attenuationDistance = this.attenuationDistance;
        if (this.attenuationColor !== void 0)
          data.attenuationColor = this.attenuationColor.getHex();
        if (this.size !== void 0)
          data.size = this.size;
        if (this.shadowSide !== null)
          data.shadowSide = this.shadowSide;
        if (this.sizeAttenuation !== void 0)
          data.sizeAttenuation = this.sizeAttenuation;
        if (this.blending !== NormalBlending)
          data.blending = this.blending;
        if (this.side !== FrontSide2)
          data.side = this.side;
        if (this.vertexColors)
          data.vertexColors = true;
        if (this.opacity < 1)
          data.opacity = this.opacity;
        if (this.transparent === true)
          data.transparent = this.transparent;
        data.depthFunc = this.depthFunc;
        data.depthTest = this.depthTest;
        data.depthWrite = this.depthWrite;
        data.colorWrite = this.colorWrite;
        data.stencilWrite = this.stencilWrite;
        data.stencilWriteMask = this.stencilWriteMask;
        data.stencilFunc = this.stencilFunc;
        data.stencilRef = this.stencilRef;
        data.stencilFuncMask = this.stencilFuncMask;
        data.stencilFail = this.stencilFail;
        data.stencilZFail = this.stencilZFail;
        data.stencilZPass = this.stencilZPass;
        if (this.rotation !== void 0 && this.rotation !== 0)
          data.rotation = this.rotation;
        if (this.polygonOffset === true)
          data.polygonOffset = true;
        if (this.polygonOffsetFactor !== 0)
          data.polygonOffsetFactor = this.polygonOffsetFactor;
        if (this.polygonOffsetUnits !== 0)
          data.polygonOffsetUnits = this.polygonOffsetUnits;
        if (this.linewidth !== void 0 && this.linewidth !== 1)
          data.linewidth = this.linewidth;
        if (this.dashSize !== void 0)
          data.dashSize = this.dashSize;
        if (this.gapSize !== void 0)
          data.gapSize = this.gapSize;
        if (this.scale !== void 0)
          data.scale = this.scale;
        if (this.dithering === true)
          data.dithering = true;
        if (this.alphaTest > 0)
          data.alphaTest = this.alphaTest;
        if (this.alphaToCoverage === true)
          data.alphaToCoverage = this.alphaToCoverage;
        if (this.premultipliedAlpha === true)
          data.premultipliedAlpha = this.premultipliedAlpha;
        if (this.forceSinglePass === true)
          data.forceSinglePass = this.forceSinglePass;
        if (this.wireframe === true)
          data.wireframe = this.wireframe;
        if (this.wireframeLinewidth > 1)
          data.wireframeLinewidth = this.wireframeLinewidth;
        if (this.wireframeLinecap !== "round")
          data.wireframeLinecap = this.wireframeLinecap;
        if (this.wireframeLinejoin !== "round")
          data.wireframeLinejoin = this.wireframeLinejoin;
        if (this.flatShading === true)
          data.flatShading = this.flatShading;
        if (this.visible === false)
          data.visible = false;
        if (this.toneMapped === false)
          data.toneMapped = false;
        if (this.fog === false)
          data.fog = false;
        if (Object.keys(this.userData).length > 0)
          data.userData = this.userData;
        function extractFromCache(cache) {
          const values = [];
          for (const key in cache) {
            const data2 = cache[key];
            delete data2.metadata;
            values.push(data2);
          }
          return values;
        }
        if (isRootObject) {
          const textures = extractFromCache(meta.textures);
          const images = extractFromCache(meta.images);
          if (textures.length > 0)
            data.textures = textures;
          if (images.length > 0)
            data.images = images;
        }
        return data;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.name = source.name;
        this.blending = source.blending;
        this.side = source.side;
        this.vertexColors = source.vertexColors;
        this.opacity = source.opacity;
        this.transparent = source.transparent;
        this.blendSrc = source.blendSrc;
        this.blendDst = source.blendDst;
        this.blendEquation = source.blendEquation;
        this.blendSrcAlpha = source.blendSrcAlpha;
        this.blendDstAlpha = source.blendDstAlpha;
        this.blendEquationAlpha = source.blendEquationAlpha;
        this.depthFunc = source.depthFunc;
        this.depthTest = source.depthTest;
        this.depthWrite = source.depthWrite;
        this.stencilWriteMask = source.stencilWriteMask;
        this.stencilFunc = source.stencilFunc;
        this.stencilRef = source.stencilRef;
        this.stencilFuncMask = source.stencilFuncMask;
        this.stencilFail = source.stencilFail;
        this.stencilZFail = source.stencilZFail;
        this.stencilZPass = source.stencilZPass;
        this.stencilWrite = source.stencilWrite;
        const srcPlanes = source.clippingPlanes;
        let dstPlanes = null;
        if (srcPlanes !== null) {
          const n = srcPlanes.length;
          dstPlanes = new Array(n);
          for (let i = 0; i !== n; ++i) {
            dstPlanes[i] = srcPlanes[i].clone();
          }
        }
        this.clippingPlanes = dstPlanes;
        this.clipIntersection = source.clipIntersection;
        this.clipShadows = source.clipShadows;
        this.shadowSide = source.shadowSide;
        this.colorWrite = source.colorWrite;
        this.precision = source.precision;
        this.polygonOffset = source.polygonOffset;
        this.polygonOffsetFactor = source.polygonOffsetFactor;
        this.polygonOffsetUnits = source.polygonOffsetUnits;
        this.dithering = source.dithering;
        this.alphaTest = source.alphaTest;
        this.alphaToCoverage = source.alphaToCoverage;
        this.premultipliedAlpha = source.premultipliedAlpha;
        this.forceSinglePass = source.forceSinglePass;
        this.visible = source.visible;
        this.toneMapped = source.toneMapped;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        return this;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
      set needsUpdate(value) {
        if (value === true)
          this.version++;
      }
    };
    var _colorKeywords = {
      "aliceblue": 15792383,
      "antiquewhite": 16444375,
      "aqua": 65535,
      "aquamarine": 8388564,
      "azure": 15794175,
      "beige": 16119260,
      "bisque": 16770244,
      "black": 0,
      "blanchedalmond": 16772045,
      "blue": 255,
      "blueviolet": 9055202,
      "brown": 10824234,
      "burlywood": 14596231,
      "cadetblue": 6266528,
      "chartreuse": 8388352,
      "chocolate": 13789470,
      "coral": 16744272,
      "cornflowerblue": 6591981,
      "cornsilk": 16775388,
      "crimson": 14423100,
      "cyan": 65535,
      "darkblue": 139,
      "darkcyan": 35723,
      "darkgoldenrod": 12092939,
      "darkgray": 11119017,
      "darkgreen": 25600,
      "darkgrey": 11119017,
      "darkkhaki": 12433259,
      "darkmagenta": 9109643,
      "darkolivegreen": 5597999,
      "darkorange": 16747520,
      "darkorchid": 10040012,
      "darkred": 9109504,
      "darksalmon": 15308410,
      "darkseagreen": 9419919,
      "darkslateblue": 4734347,
      "darkslategray": 3100495,
      "darkslategrey": 3100495,
      "darkturquoise": 52945,
      "darkviolet": 9699539,
      "deeppink": 16716947,
      "deepskyblue": 49151,
      "dimgray": 6908265,
      "dimgrey": 6908265,
      "dodgerblue": 2003199,
      "firebrick": 11674146,
      "floralwhite": 16775920,
      "forestgreen": 2263842,
      "fuchsia": 16711935,
      "gainsboro": 14474460,
      "ghostwhite": 16316671,
      "gold": 16766720,
      "goldenrod": 14329120,
      "gray": 8421504,
      "green": 32768,
      "greenyellow": 11403055,
      "grey": 8421504,
      "honeydew": 15794160,
      "hotpink": 16738740,
      "indianred": 13458524,
      "indigo": 4915330,
      "ivory": 16777200,
      "khaki": 15787660,
      "lavender": 15132410,
      "lavenderblush": 16773365,
      "lawngreen": 8190976,
      "lemonchiffon": 16775885,
      "lightblue": 11393254,
      "lightcoral": 15761536,
      "lightcyan": 14745599,
      "lightgoldenrodyellow": 16448210,
      "lightgray": 13882323,
      "lightgreen": 9498256,
      "lightgrey": 13882323,
      "lightpink": 16758465,
      "lightsalmon": 16752762,
      "lightseagreen": 2142890,
      "lightskyblue": 8900346,
      "lightslategray": 7833753,
      "lightslategrey": 7833753,
      "lightsteelblue": 11584734,
      "lightyellow": 16777184,
      "lime": 65280,
      "limegreen": 3329330,
      "linen": 16445670,
      "magenta": 16711935,
      "maroon": 8388608,
      "mediumaquamarine": 6737322,
      "mediumblue": 205,
      "mediumorchid": 12211667,
      "mediumpurple": 9662683,
      "mediumseagreen": 3978097,
      "mediumslateblue": 8087790,
      "mediumspringgreen": 64154,
      "mediumturquoise": 4772300,
      "mediumvioletred": 13047173,
      "midnightblue": 1644912,
      "mintcream": 16121850,
      "mistyrose": 16770273,
      "moccasin": 16770229,
      "navajowhite": 16768685,
      "navy": 128,
      "oldlace": 16643558,
      "olive": 8421376,
      "olivedrab": 7048739,
      "orange": 16753920,
      "orangered": 16729344,
      "orchid": 14315734,
      "palegoldenrod": 15657130,
      "palegreen": 10025880,
      "paleturquoise": 11529966,
      "palevioletred": 14381203,
      "papayawhip": 16773077,
      "peachpuff": 16767673,
      "peru": 13468991,
      "pink": 16761035,
      "plum": 14524637,
      "powderblue": 11591910,
      "purple": 8388736,
      "rebeccapurple": 6697881,
      "red": 16711680,
      "rosybrown": 12357519,
      "royalblue": 4286945,
      "saddlebrown": 9127187,
      "salmon": 16416882,
      "sandybrown": 16032864,
      "seagreen": 3050327,
      "seashell": 16774638,
      "sienna": 10506797,
      "silver": 12632256,
      "skyblue": 8900331,
      "slateblue": 6970061,
      "slategray": 7372944,
      "slategrey": 7372944,
      "snow": 16775930,
      "springgreen": 65407,
      "steelblue": 4620980,
      "tan": 13808780,
      "teal": 32896,
      "thistle": 14204888,
      "tomato": 16737095,
      "turquoise": 4251856,
      "violet": 15631086,
      "wheat": 16113331,
      "white": 16777215,
      "whitesmoke": 16119285,
      "yellow": 16776960,
      "yellowgreen": 10145074
    };
    var _hslA = { h: 0, s: 0, l: 0 };
    var _hslB = { h: 0, s: 0, l: 0 };
    function hue2rgb(p, q, t) {
      if (t < 0)
        t += 1;
      if (t > 1)
        t -= 1;
      if (t < 1 / 6)
        return p + (q - p) * 6 * t;
      if (t < 1 / 2)
        return q;
      if (t < 2 / 3)
        return p + (q - p) * 6 * (2 / 3 - t);
      return p;
    }
    var Color2 = class {
      constructor(r, g, b) {
        this.isColor = true;
        this.r = 1;
        this.g = 1;
        this.b = 1;
        if (g === void 0 && b === void 0) {
          return this.set(r);
        }
        return this.setRGB(r, g, b);
      }
      set(value) {
        if (value && value.isColor) {
          this.copy(value);
        } else if (typeof value === "number") {
          this.setHex(value);
        } else if (typeof value === "string") {
          this.setStyle(value);
        }
        return this;
      }
      setScalar(scalar) {
        this.r = scalar;
        this.g = scalar;
        this.b = scalar;
        return this;
      }
      setHex(hex, colorSpace = SRGBColorSpace) {
        hex = Math.floor(hex);
        this.r = (hex >> 16 & 255) / 255;
        this.g = (hex >> 8 & 255) / 255;
        this.b = (hex & 255) / 255;
        ColorManagement.toWorkingColorSpace(this, colorSpace);
        return this;
      }
      setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
        this.r = r;
        this.g = g;
        this.b = b;
        ColorManagement.toWorkingColorSpace(this, colorSpace);
        return this;
      }
      setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
        h = euclideanModulo(h, 1);
        s = clamp(s, 0, 1);
        l = clamp(l, 0, 1);
        if (s === 0) {
          this.r = this.g = this.b = l;
        } else {
          const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
          const q = 2 * l - p;
          this.r = hue2rgb(q, p, h + 1 / 3);
          this.g = hue2rgb(q, p, h);
          this.b = hue2rgb(q, p, h - 1 / 3);
        }
        ColorManagement.toWorkingColorSpace(this, colorSpace);
        return this;
      }
      setStyle(style, colorSpace = SRGBColorSpace) {
        function handleAlpha(string) {
          if (string === void 0)
            return;
          if (parseFloat(string) < 1) {
            console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
          }
        }
        let m;
        if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
          let color;
          const name = m[1];
          const components = m[2];
          switch (name) {
            case "rgb":
            case "rgba":
              if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                this.r = Math.min(255, parseInt(color[1], 10)) / 255;
                this.g = Math.min(255, parseInt(color[2], 10)) / 255;
                this.b = Math.min(255, parseInt(color[3], 10)) / 255;
                ColorManagement.toWorkingColorSpace(this, colorSpace);
                handleAlpha(color[4]);
                return this;
              }
              if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                this.r = Math.min(100, parseInt(color[1], 10)) / 100;
                this.g = Math.min(100, parseInt(color[2], 10)) / 100;
                this.b = Math.min(100, parseInt(color[3], 10)) / 100;
                ColorManagement.toWorkingColorSpace(this, colorSpace);
                handleAlpha(color[4]);
                return this;
              }
              break;
            case "hsl":
            case "hsla":
              if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                const h = parseFloat(color[1]) / 360;
                const s = parseFloat(color[2]) / 100;
                const l = parseFloat(color[3]) / 100;
                handleAlpha(color[4]);
                return this.setHSL(h, s, l, colorSpace);
              }
              break;
            default:
              console.warn("THREE.Color: Unknown color model " + style);
          }
        } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
          const hex = m[1];
          const size = hex.length;
          if (size === 3) {
            return this.setRGB(
              parseInt(hex.charAt(0), 16) / 15,
              parseInt(hex.charAt(1), 16) / 15,
              parseInt(hex.charAt(2), 16) / 15,
              colorSpace
            );
          } else if (size === 6) {
            return this.setHex(parseInt(hex, 16), colorSpace);
          } else {
            console.warn("THREE.Color: Invalid hex color " + style);
          }
        } else if (style && style.length > 0) {
          return this.setColorName(style, colorSpace);
        }
        return this;
      }
      setColorName(style, colorSpace = SRGBColorSpace) {
        const hex = _colorKeywords[style.toLowerCase()];
        if (hex !== void 0) {
          this.setHex(hex, colorSpace);
        } else {
          console.warn("THREE.Color: Unknown color " + style);
        }
        return this;
      }
      clone() {
        return new this.constructor(this.r, this.g, this.b);
      }
      copy(color) {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
        return this;
      }
      copySRGBToLinear(color) {
        this.r = SRGBToLinear(color.r);
        this.g = SRGBToLinear(color.g);
        this.b = SRGBToLinear(color.b);
        return this;
      }
      copyLinearToSRGB(color) {
        this.r = LinearToSRGB(color.r);
        this.g = LinearToSRGB(color.g);
        this.b = LinearToSRGB(color.b);
        return this;
      }
      convertSRGBToLinear() {
        this.copySRGBToLinear(this);
        return this;
      }
      convertLinearToSRGB() {
        this.copyLinearToSRGB(this);
        return this;
      }
      getHex(colorSpace = SRGBColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color2.copy(this), colorSpace);
        return clamp(_color2.r * 255, 0, 255) << 16 ^ clamp(_color2.g * 255, 0, 255) << 8 ^ clamp(_color2.b * 255, 0, 255) << 0;
      }
      getHexString(colorSpace = SRGBColorSpace) {
        return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
      }
      getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color2.copy(this), colorSpace);
        const r = _color2.r, g = _color2.g, b = _color2.b;
        const max2 = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let hue, saturation;
        const lightness = (min + max2) / 2;
        if (min === max2) {
          hue = 0;
          saturation = 0;
        } else {
          const delta = max2 - min;
          saturation = lightness <= 0.5 ? delta / (max2 + min) : delta / (2 - max2 - min);
          switch (max2) {
            case r:
              hue = (g - b) / delta + (g < b ? 6 : 0);
              break;
            case g:
              hue = (b - r) / delta + 2;
              break;
            case b:
              hue = (r - g) / delta + 4;
              break;
          }
          hue /= 6;
        }
        target.h = hue;
        target.s = saturation;
        target.l = lightness;
        return target;
      }
      getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color2.copy(this), colorSpace);
        target.r = _color2.r;
        target.g = _color2.g;
        target.b = _color2.b;
        return target;
      }
      getStyle(colorSpace = SRGBColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color2.copy(this), colorSpace);
        const r = _color2.r, g = _color2.g, b = _color2.b;
        if (colorSpace !== SRGBColorSpace) {
          return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
        }
        return `rgb(${r * 255 | 0},${g * 255 | 0},${b * 255 | 0})`;
      }
      offsetHSL(h, s, l) {
        this.getHSL(_hslA);
        _hslA.h += h;
        _hslA.s += s;
        _hslA.l += l;
        this.setHSL(_hslA.h, _hslA.s, _hslA.l);
        return this;
      }
      add(color) {
        this.r += color.r;
        this.g += color.g;
        this.b += color.b;
        return this;
      }
      addColors(color1, color2) {
        this.r = color1.r + color2.r;
        this.g = color1.g + color2.g;
        this.b = color1.b + color2.b;
        return this;
      }
      addScalar(s) {
        this.r += s;
        this.g += s;
        this.b += s;
        return this;
      }
      sub(color) {
        this.r = Math.max(0, this.r - color.r);
        this.g = Math.max(0, this.g - color.g);
        this.b = Math.max(0, this.b - color.b);
        return this;
      }
      multiply(color) {
        this.r *= color.r;
        this.g *= color.g;
        this.b *= color.b;
        return this;
      }
      multiplyScalar(s) {
        this.r *= s;
        this.g *= s;
        this.b *= s;
        return this;
      }
      lerp(color, alpha) {
        this.r += (color.r - this.r) * alpha;
        this.g += (color.g - this.g) * alpha;
        this.b += (color.b - this.b) * alpha;
        return this;
      }
      lerpColors(color1, color2, alpha) {
        this.r = color1.r + (color2.r - color1.r) * alpha;
        this.g = color1.g + (color2.g - color1.g) * alpha;
        this.b = color1.b + (color2.b - color1.b) * alpha;
        return this;
      }
      lerpHSL(color, alpha) {
        this.getHSL(_hslA);
        color.getHSL(_hslB);
        const h = lerp(_hslA.h, _hslB.h, alpha);
        const s = lerp(_hslA.s, _hslB.s, alpha);
        const l = lerp(_hslA.l, _hslB.l, alpha);
        this.setHSL(h, s, l);
        return this;
      }
      setFromVector3(v) {
        this.r = v.x;
        this.g = v.y;
        this.b = v.z;
        return this;
      }
      applyMatrix3(m) {
        const r = this.r, g = this.g, b = this.b;
        const e = m.elements;
        this.r = e[0] * r + e[3] * g + e[6] * b;
        this.g = e[1] * r + e[4] * g + e[7] * b;
        this.b = e[2] * r + e[5] * g + e[8] * b;
        return this;
      }
      equals(c) {
        return c.r === this.r && c.g === this.g && c.b === this.b;
      }
      fromArray(array, offset = 0) {
        this.r = array[offset];
        this.g = array[offset + 1];
        this.b = array[offset + 2];
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this.r;
        array[offset + 1] = this.g;
        array[offset + 2] = this.b;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this.r = attribute.getX(index);
        this.g = attribute.getY(index);
        this.b = attribute.getZ(index);
        return this;
      }
      toJSON() {
        return this.getHex();
      }
      *[Symbol.iterator]() {
        yield this.r;
        yield this.g;
        yield this.b;
      }
    };
    var _color2 = new Color2();
    Color2.NAMES = _colorKeywords;
    var MeshBasicMaterial2 = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshBasicMaterial = true;
        this.type = "MeshBasicMaterial";
        this.color = new Color2(16777215);
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.fog = source.fog;
        return this;
      }
    };
    var _tables = _generateTables();
    function _generateTables() {
      const buffer = new ArrayBuffer(4);
      const floatView = new Float32Array(buffer);
      const uint32View = new Uint32Array(buffer);
      const baseTable = new Uint32Array(512);
      const shiftTable = new Uint32Array(512);
      for (let i = 0; i < 256; ++i) {
        const e = i - 127;
        if (e < -27) {
          baseTable[i] = 0;
          baseTable[i | 256] = 32768;
          shiftTable[i] = 24;
          shiftTable[i | 256] = 24;
        } else if (e < -14) {
          baseTable[i] = 1024 >> -e - 14;
          baseTable[i | 256] = 1024 >> -e - 14 | 32768;
          shiftTable[i] = -e - 1;
          shiftTable[i | 256] = -e - 1;
        } else if (e <= 15) {
          baseTable[i] = e + 15 << 10;
          baseTable[i | 256] = e + 15 << 10 | 32768;
          shiftTable[i] = 13;
          shiftTable[i | 256] = 13;
        } else if (e < 128) {
          baseTable[i] = 31744;
          baseTable[i | 256] = 64512;
          shiftTable[i] = 24;
          shiftTable[i | 256] = 24;
        } else {
          baseTable[i] = 31744;
          baseTable[i | 256] = 64512;
          shiftTable[i] = 13;
          shiftTable[i | 256] = 13;
        }
      }
      const mantissaTable = new Uint32Array(2048);
      const exponentTable = new Uint32Array(64);
      const offsetTable = new Uint32Array(64);
      for (let i = 1; i < 1024; ++i) {
        let m = i << 13;
        let e = 0;
        while ((m & 8388608) === 0) {
          m <<= 1;
          e -= 8388608;
        }
        m &= ~8388608;
        e += 947912704;
        mantissaTable[i] = m | e;
      }
      for (let i = 1024; i < 2048; ++i) {
        mantissaTable[i] = 939524096 + (i - 1024 << 13);
      }
      for (let i = 1; i < 31; ++i) {
        exponentTable[i] = i << 23;
      }
      exponentTable[31] = 1199570944;
      exponentTable[32] = 2147483648;
      for (let i = 33; i < 63; ++i) {
        exponentTable[i] = 2147483648 + (i - 32 << 23);
      }
      exponentTable[63] = 3347054592;
      for (let i = 1; i < 64; ++i) {
        if (i !== 32) {
          offsetTable[i] = 1024;
        }
      }
      return {
        floatView,
        uint32View,
        baseTable,
        shiftTable,
        mantissaTable,
        exponentTable,
        offsetTable
      };
    }
    function toHalfFloat(val) {
      if (Math.abs(val) > 65504)
        console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");
      val = clamp(val, -65504, 65504);
      _tables.floatView[0] = val;
      const f = _tables.uint32View[0];
      const e = f >> 23 & 511;
      return _tables.baseTable[e] + ((f & 8388607) >> _tables.shiftTable[e]);
    }
    function fromHalfFloat(val) {
      const m = val >> 10;
      _tables.uint32View[0] = _tables.mantissaTable[_tables.offsetTable[m] + (val & 1023)] + _tables.exponentTable[m];
      return _tables.floatView[0];
    }
    var DataUtils = {
      toHalfFloat,
      fromHalfFloat
    };
    var _vector$8 = new Vector32();
    var _vector2$1 = new Vector22();
    var BufferAttribute = class {
      constructor(array, itemSize, normalized = false) {
        if (Array.isArray(array)) {
          throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        }
        this.isBufferAttribute = true;
        this.name = "";
        this.array = array;
        this.itemSize = itemSize;
        this.count = array !== void 0 ? array.length / itemSize : 0;
        this.normalized = normalized;
        this.usage = StaticDrawUsage;
        this.updateRange = { offset: 0, count: -1 };
        this.version = 0;
      }
      onUploadCallback() {
      }
      set needsUpdate(value) {
        if (value === true)
          this.version++;
      }
      setUsage(value) {
        this.usage = value;
        return this;
      }
      copy(source) {
        this.name = source.name;
        this.array = new source.array.constructor(source.array);
        this.itemSize = source.itemSize;
        this.count = source.count;
        this.normalized = source.normalized;
        this.usage = source.usage;
        return this;
      }
      copyAt(index1, attribute, index2) {
        index1 *= this.itemSize;
        index2 *= attribute.itemSize;
        for (let i = 0, l = this.itemSize; i < l; i++) {
          this.array[index1 + i] = attribute.array[index2 + i];
        }
        return this;
      }
      copyArray(array) {
        this.array.set(array);
        return this;
      }
      applyMatrix3(m) {
        if (this.itemSize === 2) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector2$1.fromBufferAttribute(this, i);
            _vector2$1.applyMatrix3(m);
            this.setXY(i, _vector2$1.x, _vector2$1.y);
          }
        } else if (this.itemSize === 3) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector$8.fromBufferAttribute(this, i);
            _vector$8.applyMatrix3(m);
            this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
          }
        }
        return this;
      }
      applyMatrix4(m) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$8.fromBufferAttribute(this, i);
          _vector$8.applyMatrix4(m);
          this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
        return this;
      }
      applyNormalMatrix(m) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$8.fromBufferAttribute(this, i);
          _vector$8.applyNormalMatrix(m);
          this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
        return this;
      }
      transformDirection(m) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$8.fromBufferAttribute(this, i);
          _vector$8.transformDirection(m);
          this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
        return this;
      }
      set(value, offset = 0) {
        this.array.set(value, offset);
        return this;
      }
      getX(index) {
        let x = this.array[index * this.itemSize];
        if (this.normalized)
          x = denormalize(x, this.array);
        return x;
      }
      setX(index, x) {
        if (this.normalized)
          x = normalize(x, this.array);
        this.array[index * this.itemSize] = x;
        return this;
      }
      getY(index) {
        let y = this.array[index * this.itemSize + 1];
        if (this.normalized)
          y = denormalize(y, this.array);
        return y;
      }
      setY(index, y) {
        if (this.normalized)
          y = normalize(y, this.array);
        this.array[index * this.itemSize + 1] = y;
        return this;
      }
      getZ(index) {
        let z = this.array[index * this.itemSize + 2];
        if (this.normalized)
          z = denormalize(z, this.array);
        return z;
      }
      setZ(index, z) {
        if (this.normalized)
          z = normalize(z, this.array);
        this.array[index * this.itemSize + 2] = z;
        return this;
      }
      getW(index) {
        let w = this.array[index * this.itemSize + 3];
        if (this.normalized)
          w = denormalize(w, this.array);
        return w;
      }
      setW(index, w) {
        if (this.normalized)
          w = normalize(w, this.array);
        this.array[index * this.itemSize + 3] = w;
        return this;
      }
      setXY(index, x, y) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        return this;
      }
      setXYZ(index, x, y, z) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
          z = normalize(z, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        return this;
      }
      setXYZW(index, x, y, z, w) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
          z = normalize(z, this.array);
          w = normalize(w, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        this.array[index + 3] = w;
        return this;
      }
      onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
      }
      clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
      }
      toJSON() {
        const data = {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array: Array.from(this.array),
          normalized: this.normalized
        };
        if (this.name !== "")
          data.name = this.name;
        if (this.usage !== StaticDrawUsage)
          data.usage = this.usage;
        if (this.updateRange.offset !== 0 || this.updateRange.count !== -1)
          data.updateRange = this.updateRange;
        return data;
      }
      copyColorsArray() {
        console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.");
      }
      copyVector2sArray() {
        console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.");
      }
      copyVector3sArray() {
        console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.");
      }
      copyVector4sArray() {
        console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.");
      }
    };
    var Int8BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Int8Array(array), itemSize, normalized);
      }
    };
    var Uint8BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Uint8Array(array), itemSize, normalized);
      }
    };
    var Uint8ClampedBufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Uint8ClampedArray(array), itemSize, normalized);
      }
    };
    var Int16BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Int16Array(array), itemSize, normalized);
      }
    };
    var Uint16BufferAttribute2 = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Uint16Array(array), itemSize, normalized);
      }
    };
    var Int32BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Int32Array(array), itemSize, normalized);
      }
    };
    var Uint32BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Uint32Array(array), itemSize, normalized);
      }
    };
    var Float16BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Uint16Array(array), itemSize, normalized);
        this.isFloat16BufferAttribute = true;
      }
      getX(index) {
        let x = fromHalfFloat(this.array[index * this.itemSize]);
        if (this.normalized)
          x = denormalize(x, this.array);
        return x;
      }
      setX(index, x) {
        if (this.normalized)
          x = normalize(x, this.array);
        this.array[index * this.itemSize] = toHalfFloat(x);
        return this;
      }
      getY(index) {
        let y = fromHalfFloat(this.array[index * this.itemSize + 1]);
        if (this.normalized)
          y = denormalize(y, this.array);
        return y;
      }
      setY(index, y) {
        if (this.normalized)
          y = normalize(y, this.array);
        this.array[index * this.itemSize + 1] = toHalfFloat(y);
        return this;
      }
      getZ(index) {
        let z = fromHalfFloat(this.array[index * this.itemSize + 2]);
        if (this.normalized)
          z = denormalize(z, this.array);
        return z;
      }
      setZ(index, z) {
        if (this.normalized)
          z = normalize(z, this.array);
        this.array[index * this.itemSize + 2] = toHalfFloat(z);
        return this;
      }
      getW(index) {
        let w = fromHalfFloat(this.array[index * this.itemSize + 3]);
        if (this.normalized)
          w = denormalize(w, this.array);
        return w;
      }
      setW(index, w) {
        if (this.normalized)
          w = normalize(w, this.array);
        this.array[index * this.itemSize + 3] = toHalfFloat(w);
        return this;
      }
      setXY(index, x, y) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
        }
        this.array[index + 0] = toHalfFloat(x);
        this.array[index + 1] = toHalfFloat(y);
        return this;
      }
      setXYZ(index, x, y, z) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
          z = normalize(z, this.array);
        }
        this.array[index + 0] = toHalfFloat(x);
        this.array[index + 1] = toHalfFloat(y);
        this.array[index + 2] = toHalfFloat(z);
        return this;
      }
      setXYZW(index, x, y, z, w) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
          z = normalize(z, this.array);
          w = normalize(w, this.array);
        }
        this.array[index + 0] = toHalfFloat(x);
        this.array[index + 1] = toHalfFloat(y);
        this.array[index + 2] = toHalfFloat(z);
        this.array[index + 3] = toHalfFloat(w);
        return this;
      }
    };
    var Float32BufferAttribute2 = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Float32Array(array), itemSize, normalized);
      }
    };
    var Float64BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Float64Array(array), itemSize, normalized);
      }
    };
    var _id$1 = 0;
    var _m1 = new Matrix42();
    var _obj = new Object3D2();
    var _offset = new Vector32();
    var _box$1 = new Box3();
    var _boxMorphTargets = new Box3();
    var _vector$7 = new Vector32();
    var BufferGeometry2 = class extends EventDispatcher2 {
      constructor() {
        super();
        this.isBufferGeometry = true;
        Object.defineProperty(this, "id", { value: _id$1++ });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "BufferGeometry";
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.morphTargetsRelative = false;
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        this.drawRange = { start: 0, count: Infinity };
        this.userData = {};
      }
      getIndex() {
        return this.index;
      }
      setIndex(index) {
        if (Array.isArray(index)) {
          this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute2)(index, 1);
        } else {
          this.index = index;
        }
        return this;
      }
      getAttribute(name) {
        return this.attributes[name];
      }
      setAttribute(name, attribute) {
        this.attributes[name] = attribute;
        return this;
      }
      deleteAttribute(name) {
        delete this.attributes[name];
        return this;
      }
      hasAttribute(name) {
        return this.attributes[name] !== void 0;
      }
      addGroup(start, count, materialIndex = 0) {
        this.groups.push({
          start,
          count,
          materialIndex
        });
      }
      clearGroups() {
        this.groups = [];
      }
      setDrawRange(start, count) {
        this.drawRange.start = start;
        this.drawRange.count = count;
      }
      applyMatrix4(matrix) {
        const position = this.attributes.position;
        if (position !== void 0) {
          position.applyMatrix4(matrix);
          position.needsUpdate = true;
        }
        const normal = this.attributes.normal;
        if (normal !== void 0) {
          const normalMatrix = new Matrix32().getNormalMatrix(matrix);
          normal.applyNormalMatrix(normalMatrix);
          normal.needsUpdate = true;
        }
        const tangent = this.attributes.tangent;
        if (tangent !== void 0) {
          tangent.transformDirection(matrix);
          tangent.needsUpdate = true;
        }
        if (this.boundingBox !== null) {
          this.computeBoundingBox();
        }
        if (this.boundingSphere !== null) {
          this.computeBoundingSphere();
        }
        return this;
      }
      applyQuaternion(q) {
        _m1.makeRotationFromQuaternion(q);
        this.applyMatrix4(_m1);
        return this;
      }
      rotateX(angle) {
        _m1.makeRotationX(angle);
        this.applyMatrix4(_m1);
        return this;
      }
      rotateY(angle) {
        _m1.makeRotationY(angle);
        this.applyMatrix4(_m1);
        return this;
      }
      rotateZ(angle) {
        _m1.makeRotationZ(angle);
        this.applyMatrix4(_m1);
        return this;
      }
      translate(x, y, z) {
        _m1.makeTranslation(x, y, z);
        this.applyMatrix4(_m1);
        return this;
      }
      scale(x, y, z) {
        _m1.makeScale(x, y, z);
        this.applyMatrix4(_m1);
        return this;
      }
      lookAt(vector) {
        _obj.lookAt(vector);
        _obj.updateMatrix();
        this.applyMatrix4(_obj.matrix);
        return this;
      }
      center() {
        this.computeBoundingBox();
        this.boundingBox.getCenter(_offset).negate();
        this.translate(_offset.x, _offset.y, _offset.z);
        return this;
      }
      setFromPoints(points) {
        const position = [];
        for (let i = 0, l = points.length; i < l; i++) {
          const point = points[i];
          position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute2(position, 3));
        return this;
      }
      computeBoundingBox() {
        if (this.boundingBox === null) {
          this.boundingBox = new Box3();
        }
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
          console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
          this.boundingBox.set(
            new Vector32(-Infinity, -Infinity, -Infinity),
            new Vector32(Infinity, Infinity, Infinity)
          );
          return;
        }
        if (position !== void 0) {
          this.boundingBox.setFromBufferAttribute(position);
          if (morphAttributesPosition) {
            for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
              const morphAttribute = morphAttributesPosition[i];
              _box$1.setFromBufferAttribute(morphAttribute);
              if (this.morphTargetsRelative) {
                _vector$7.addVectors(this.boundingBox.min, _box$1.min);
                this.boundingBox.expandByPoint(_vector$7);
                _vector$7.addVectors(this.boundingBox.max, _box$1.max);
                this.boundingBox.expandByPoint(_vector$7);
              } else {
                this.boundingBox.expandByPoint(_box$1.min);
                this.boundingBox.expandByPoint(_box$1.max);
              }
            }
          }
        } else {
          this.boundingBox.makeEmpty();
        }
        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
          console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
        }
      }
      computeBoundingSphere() {
        if (this.boundingSphere === null) {
          this.boundingSphere = new Sphere();
        }
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
          this.boundingSphere.set(new Vector32(), Infinity);
          return;
        }
        if (position) {
          const center = this.boundingSphere.center;
          _box$1.setFromBufferAttribute(position);
          if (morphAttributesPosition) {
            for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
              const morphAttribute = morphAttributesPosition[i];
              _boxMorphTargets.setFromBufferAttribute(morphAttribute);
              if (this.morphTargetsRelative) {
                _vector$7.addVectors(_box$1.min, _boxMorphTargets.min);
                _box$1.expandByPoint(_vector$7);
                _vector$7.addVectors(_box$1.max, _boxMorphTargets.max);
                _box$1.expandByPoint(_vector$7);
              } else {
                _box$1.expandByPoint(_boxMorphTargets.min);
                _box$1.expandByPoint(_boxMorphTargets.max);
              }
            }
          }
          _box$1.getCenter(center);
          let maxRadiusSq = 0;
          for (let i = 0, il = position.count; i < il; i++) {
            _vector$7.fromBufferAttribute(position, i);
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$7));
          }
          if (morphAttributesPosition) {
            for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
              const morphAttribute = morphAttributesPosition[i];
              const morphTargetsRelative = this.morphTargetsRelative;
              for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
                _vector$7.fromBufferAttribute(morphAttribute, j);
                if (morphTargetsRelative) {
                  _offset.fromBufferAttribute(position, j);
                  _vector$7.add(_offset);
                }
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$7));
              }
            }
          }
          this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
          if (isNaN(this.boundingSphere.radius)) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
          }
        }
      }
      computeTangents() {
        const index = this.index;
        const attributes = this.attributes;
        if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
          console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
          return;
        }
        const indices = index.array;
        const positions = attributes.position.array;
        const normals = attributes.normal.array;
        const uvs = attributes.uv.array;
        const nVertices = positions.length / 3;
        if (this.hasAttribute("tangent") === false) {
          this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * nVertices), 4));
        }
        const tangents = this.getAttribute("tangent").array;
        const tan1 = [], tan2 = [];
        for (let i = 0; i < nVertices; i++) {
          tan1[i] = new Vector32();
          tan2[i] = new Vector32();
        }
        const vA = new Vector32(), vB = new Vector32(), vC = new Vector32(), uvA = new Vector22(), uvB = new Vector22(), uvC = new Vector22(), sdir = new Vector32(), tdir = new Vector32();
        function handleTriangle(a, b, c) {
          vA.fromArray(positions, a * 3);
          vB.fromArray(positions, b * 3);
          vC.fromArray(positions, c * 3);
          uvA.fromArray(uvs, a * 2);
          uvB.fromArray(uvs, b * 2);
          uvC.fromArray(uvs, c * 2);
          vB.sub(vA);
          vC.sub(vA);
          uvB.sub(uvA);
          uvC.sub(uvA);
          const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
          if (!isFinite(r))
            return;
          sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
          tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
          tan1[a].add(sdir);
          tan1[b].add(sdir);
          tan1[c].add(sdir);
          tan2[a].add(tdir);
          tan2[b].add(tdir);
          tan2[c].add(tdir);
        }
        let groups = this.groups;
        if (groups.length === 0) {
          groups = [{
            start: 0,
            count: indices.length
          }];
        }
        for (let i = 0, il = groups.length; i < il; ++i) {
          const group = groups[i];
          const start = group.start;
          const count = group.count;
          for (let j = start, jl = start + count; j < jl; j += 3) {
            handleTriangle(
              indices[j + 0],
              indices[j + 1],
              indices[j + 2]
            );
          }
        }
        const tmp2 = new Vector32(), tmp22 = new Vector32();
        const n = new Vector32(), n2 = new Vector32();
        function handleVertex(v) {
          n.fromArray(normals, v * 3);
          n2.copy(n);
          const t = tan1[v];
          tmp2.copy(t);
          tmp2.sub(n.multiplyScalar(n.dot(t))).normalize();
          tmp22.crossVectors(n2, t);
          const test = tmp22.dot(tan2[v]);
          const w = test < 0 ? -1 : 1;
          tangents[v * 4] = tmp2.x;
          tangents[v * 4 + 1] = tmp2.y;
          tangents[v * 4 + 2] = tmp2.z;
          tangents[v * 4 + 3] = w;
        }
        for (let i = 0, il = groups.length; i < il; ++i) {
          const group = groups[i];
          const start = group.start;
          const count = group.count;
          for (let j = start, jl = start + count; j < jl; j += 3) {
            handleVertex(indices[j + 0]);
            handleVertex(indices[j + 1]);
            handleVertex(indices[j + 2]);
          }
        }
      }
      computeVertexNormals() {
        const index = this.index;
        const positionAttribute = this.getAttribute("position");
        if (positionAttribute !== void 0) {
          let normalAttribute = this.getAttribute("normal");
          if (normalAttribute === void 0) {
            normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
            this.setAttribute("normal", normalAttribute);
          } else {
            for (let i = 0, il = normalAttribute.count; i < il; i++) {
              normalAttribute.setXYZ(i, 0, 0, 0);
            }
          }
          const pA = new Vector32(), pB = new Vector32(), pC = new Vector32();
          const nA = new Vector32(), nB = new Vector32(), nC = new Vector32();
          const cb = new Vector32(), ab = new Vector32();
          if (index) {
            for (let i = 0, il = index.count; i < il; i += 3) {
              const vA = index.getX(i + 0);
              const vB = index.getX(i + 1);
              const vC = index.getX(i + 2);
              pA.fromBufferAttribute(positionAttribute, vA);
              pB.fromBufferAttribute(positionAttribute, vB);
              pC.fromBufferAttribute(positionAttribute, vC);
              cb.subVectors(pC, pB);
              ab.subVectors(pA, pB);
              cb.cross(ab);
              nA.fromBufferAttribute(normalAttribute, vA);
              nB.fromBufferAttribute(normalAttribute, vB);
              nC.fromBufferAttribute(normalAttribute, vC);
              nA.add(cb);
              nB.add(cb);
              nC.add(cb);
              normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
              normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
              normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
            }
          } else {
            for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
              pA.fromBufferAttribute(positionAttribute, i + 0);
              pB.fromBufferAttribute(positionAttribute, i + 1);
              pC.fromBufferAttribute(positionAttribute, i + 2);
              cb.subVectors(pC, pB);
              ab.subVectors(pA, pB);
              cb.cross(ab);
              normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
              normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
              normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
            }
          }
          this.normalizeNormals();
          normalAttribute.needsUpdate = true;
        }
      }
      merge() {
        console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead.");
        return this;
      }
      normalizeNormals() {
        const normals = this.attributes.normal;
        for (let i = 0, il = normals.count; i < il; i++) {
          _vector$7.fromBufferAttribute(normals, i);
          _vector$7.normalize();
          normals.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);
        }
      }
      toNonIndexed() {
        function convertBufferAttribute(attribute, indices2) {
          const array = attribute.array;
          const itemSize = attribute.itemSize;
          const normalized = attribute.normalized;
          const array2 = new array.constructor(indices2.length * itemSize);
          let index = 0, index2 = 0;
          for (let i = 0, l = indices2.length; i < l; i++) {
            if (attribute.isInterleavedBufferAttribute) {
              index = indices2[i] * attribute.data.stride + attribute.offset;
            } else {
              index = indices2[i] * itemSize;
            }
            for (let j = 0; j < itemSize; j++) {
              array2[index2++] = array[index++];
            }
          }
          return new BufferAttribute(array2, itemSize, normalized);
        }
        if (this.index === null) {
          console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
          return this;
        }
        const geometry2 = new BufferGeometry2();
        const indices = this.index.array;
        const attributes = this.attributes;
        for (const name in attributes) {
          const attribute = attributes[name];
          const newAttribute = convertBufferAttribute(attribute, indices);
          geometry2.setAttribute(name, newAttribute);
        }
        const morphAttributes = this.morphAttributes;
        for (const name in morphAttributes) {
          const morphArray = [];
          const morphAttribute = morphAttributes[name];
          for (let i = 0, il = morphAttribute.length; i < il; i++) {
            const attribute = morphAttribute[i];
            const newAttribute = convertBufferAttribute(attribute, indices);
            morphArray.push(newAttribute);
          }
          geometry2.morphAttributes[name] = morphArray;
        }
        geometry2.morphTargetsRelative = this.morphTargetsRelative;
        const groups = this.groups;
        for (let i = 0, l = groups.length; i < l; i++) {
          const group = groups[i];
          geometry2.addGroup(group.start, group.count, group.materialIndex);
        }
        return geometry2;
      }
      toJSON() {
        const data = {
          metadata: {
            version: 4.5,
            type: "BufferGeometry",
            generator: "BufferGeometry.toJSON"
          }
        };
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== "")
          data.name = this.name;
        if (Object.keys(this.userData).length > 0)
          data.userData = this.userData;
        if (this.parameters !== void 0) {
          const parameters = this.parameters;
          for (const key in parameters) {
            if (parameters[key] !== void 0)
              data[key] = parameters[key];
          }
          return data;
        }
        data.data = { attributes: {} };
        const index = this.index;
        if (index !== null) {
          data.data.index = {
            type: index.array.constructor.name,
            array: Array.prototype.slice.call(index.array)
          };
        }
        const attributes = this.attributes;
        for (const key in attributes) {
          const attribute = attributes[key];
          data.data.attributes[key] = attribute.toJSON(data.data);
        }
        const morphAttributes = {};
        let hasMorphAttributes = false;
        for (const key in this.morphAttributes) {
          const attributeArray = this.morphAttributes[key];
          const array = [];
          for (let i = 0, il = attributeArray.length; i < il; i++) {
            const attribute = attributeArray[i];
            array.push(attribute.toJSON(data.data));
          }
          if (array.length > 0) {
            morphAttributes[key] = array;
            hasMorphAttributes = true;
          }
        }
        if (hasMorphAttributes) {
          data.data.morphAttributes = morphAttributes;
          data.data.morphTargetsRelative = this.morphTargetsRelative;
        }
        const groups = this.groups;
        if (groups.length > 0) {
          data.data.groups = JSON.parse(JSON.stringify(groups));
        }
        const boundingSphere = this.boundingSphere;
        if (boundingSphere !== null) {
          data.data.boundingSphere = {
            center: boundingSphere.center.toArray(),
            radius: boundingSphere.radius
          };
        }
        return data;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        const data = {};
        this.name = source.name;
        const index = source.index;
        if (index !== null) {
          this.setIndex(index.clone(data));
        }
        const attributes = source.attributes;
        for (const name in attributes) {
          const attribute = attributes[name];
          this.setAttribute(name, attribute.clone(data));
        }
        const morphAttributes = source.morphAttributes;
        for (const name in morphAttributes) {
          const array = [];
          const morphAttribute = morphAttributes[name];
          for (let i = 0, l = morphAttribute.length; i < l; i++) {
            array.push(morphAttribute[i].clone(data));
          }
          this.morphAttributes[name] = array;
        }
        this.morphTargetsRelative = source.morphTargetsRelative;
        const groups = source.groups;
        for (let i = 0, l = groups.length; i < l; i++) {
          const group = groups[i];
          this.addGroup(group.start, group.count, group.materialIndex);
        }
        const boundingBox = source.boundingBox;
        if (boundingBox !== null) {
          this.boundingBox = boundingBox.clone();
        }
        const boundingSphere = source.boundingSphere;
        if (boundingSphere !== null) {
          this.boundingSphere = boundingSphere.clone();
        }
        this.drawRange.start = source.drawRange.start;
        this.drawRange.count = source.drawRange.count;
        this.userData = source.userData;
        return this;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
    };
    var _inverseMatrix$2 = new Matrix42();
    var _ray$2 = new Ray();
    var _sphere$4 = new Sphere();
    var _sphereHitAt = new Vector32();
    var _vA$1 = new Vector32();
    var _vB$1 = new Vector32();
    var _vC$1 = new Vector32();
    var _tempA = new Vector32();
    var _morphA = new Vector32();
    var _uvA$1 = new Vector22();
    var _uvB$1 = new Vector22();
    var _uvC$1 = new Vector22();
    var _normalA = new Vector32();
    var _normalB = new Vector32();
    var _normalC = new Vector32();
    var _intersectionPoint = new Vector32();
    var _intersectionPointWorld = new Vector32();
    var Mesh2 = class extends Object3D2 {
      constructor(geometry = new BufferGeometry2(), material = new MeshBasicMaterial2()) {
        super();
        this.isMesh = true;
        this.type = "Mesh";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        if (source.morphTargetInfluences !== void 0) {
          this.morphTargetInfluences = source.morphTargetInfluences.slice();
        }
        if (source.morphTargetDictionary !== void 0) {
          this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
        }
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
      }
      updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      }
      getVertexPosition(index, target) {
        const geometry = this.geometry;
        const position = geometry.attributes.position;
        const morphPosition = geometry.morphAttributes.position;
        const morphTargetsRelative = geometry.morphTargetsRelative;
        target.fromBufferAttribute(position, index);
        const morphInfluences = this.morphTargetInfluences;
        if (morphPosition && morphInfluences) {
          _morphA.set(0, 0, 0);
          for (let i = 0, il = morphPosition.length; i < il; i++) {
            const influence = morphInfluences[i];
            const morphAttribute = morphPosition[i];
            if (influence === 0)
              continue;
            _tempA.fromBufferAttribute(morphAttribute, index);
            if (morphTargetsRelative) {
              _morphA.addScaledVector(_tempA, influence);
            } else {
              _morphA.addScaledVector(_tempA.sub(target), influence);
            }
          }
          target.add(_morphA);
        }
        if (this.isSkinnedMesh) {
          this.applyBoneTransform(index, target);
        }
        return target;
      }
      raycast(raycaster, intersects2) {
        const geometry = this.geometry;
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === void 0)
          return;
        if (geometry.boundingSphere === null)
          geometry.computeBoundingSphere();
        _sphere$4.copy(geometry.boundingSphere);
        _sphere$4.applyMatrix4(matrixWorld);
        _ray$2.copy(raycaster.ray).recast(raycaster.near);
        if (_sphere$4.containsPoint(_ray$2.origin) === false) {
          if (_ray$2.intersectSphere(_sphere$4, _sphereHitAt) === null)
            return;
          if (_ray$2.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2)
            return;
        }
        _inverseMatrix$2.copy(matrixWorld).invert();
        _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
        if (geometry.boundingBox !== null) {
          if (_ray$2.intersectsBox(geometry.boundingBox) === false)
            return;
        }
        let intersection;
        const index = geometry.index;
        const position = geometry.attributes.position;
        const uv = geometry.attributes.uv;
        const uv2 = geometry.attributes.uv2;
        const normal = geometry.attributes.normal;
        const groups = geometry.groups;
        const drawRange = geometry.drawRange;
        if (index !== null) {
          if (Array.isArray(material)) {
            for (let i = 0, il = groups.length; i < il; i++) {
              const group = groups[i];
              const groupMaterial = material[group.materialIndex];
              const start = Math.max(group.start, drawRange.start);
              const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
              for (let j = start, jl = end; j < jl; j += 3) {
                const a = index.getX(j);
                const b = index.getX(j + 1);
                const c = index.getX(j + 2);
                intersection = checkGeometryIntersection(this, groupMaterial, raycaster, _ray$2, uv, uv2, normal, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3);
                  intersection.face.materialIndex = group.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i += 3) {
              const a = index.getX(i);
              const b = index.getX(i + 1);
              const c = index.getX(i + 2);
              intersection = checkGeometryIntersection(this, material, raycaster, _ray$2, uv, uv2, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3);
                intersects2.push(intersection);
              }
            }
          }
        } else if (position !== void 0) {
          if (Array.isArray(material)) {
            for (let i = 0, il = groups.length; i < il; i++) {
              const group = groups[i];
              const groupMaterial = material[group.materialIndex];
              const start = Math.max(group.start, drawRange.start);
              const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
              for (let j = start, jl = end; j < jl; j += 3) {
                const a = j;
                const b = j + 1;
                const c = j + 2;
                intersection = checkGeometryIntersection(this, groupMaterial, raycaster, _ray$2, uv, uv2, normal, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3);
                  intersection.face.materialIndex = group.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(position.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i += 3) {
              const a = i;
              const b = i + 1;
              const c = i + 2;
              intersection = checkGeometryIntersection(this, material, raycaster, _ray$2, uv, uv2, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3);
                intersects2.push(intersection);
              }
            }
          }
        }
      }
    };
    function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
      let intersect;
      if (material.side === BackSide) {
        intersect = ray.intersectTriangle(pC, pB, pA, true, point);
      } else {
        intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide2, point);
      }
      if (intersect === null)
        return null;
      _intersectionPointWorld.copy(point);
      _intersectionPointWorld.applyMatrix4(object.matrixWorld);
      const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
      if (distance < raycaster.near || distance > raycaster.far)
        return null;
      return {
        distance,
        point: _intersectionPointWorld.clone(),
        object
      };
    }
    function checkGeometryIntersection(object, material, raycaster, ray, uv, uv2, normal, a, b, c) {
      object.getVertexPosition(a, _vA$1);
      object.getVertexPosition(b, _vB$1);
      object.getVertexPosition(c, _vC$1);
      const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
      if (intersection) {
        if (uv) {
          _uvA$1.fromBufferAttribute(uv, a);
          _uvB$1.fromBufferAttribute(uv, b);
          _uvC$1.fromBufferAttribute(uv, c);
          intersection.uv = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector22());
        }
        if (uv2) {
          _uvA$1.fromBufferAttribute(uv2, a);
          _uvB$1.fromBufferAttribute(uv2, b);
          _uvC$1.fromBufferAttribute(uv2, c);
          intersection.uv2 = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector22());
        }
        if (normal) {
          _normalA.fromBufferAttribute(normal, a);
          _normalB.fromBufferAttribute(normal, b);
          _normalC.fromBufferAttribute(normal, c);
          intersection.normal = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector32());
          if (intersection.normal.dot(ray.direction) > 0) {
            intersection.normal.multiplyScalar(-1);
          }
        }
        const face = {
          a,
          b,
          c,
          normal: new Vector32(),
          materialIndex: 0
        };
        Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
        intersection.face = face;
      }
      return intersection;
    }
    var BoxGeometry = class extends BufferGeometry2 {
      constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
        super();
        this.type = "BoxGeometry";
        this.parameters = {
          width,
          height,
          depth,
          widthSegments,
          heightSegments,
          depthSegments
        };
        const scope = this;
        widthSegments = Math.floor(widthSegments);
        heightSegments = Math.floor(heightSegments);
        depthSegments = Math.floor(depthSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        let numberOfVertices = 0;
        let groupStart = 0;
        buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
        buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
        buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
        buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
        buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
        buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
        function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
          const segmentWidth = width2 / gridX;
          const segmentHeight = height2 / gridY;
          const widthHalf = width2 / 2;
          const heightHalf = height2 / 2;
          const depthHalf = depth2 / 2;
          const gridX1 = gridX + 1;
          const gridY1 = gridY + 1;
          let vertexCounter = 0;
          let groupCount = 0;
          const vector = new Vector32();
          for (let iy = 0; iy < gridY1; iy++) {
            const y = iy * segmentHeight - heightHalf;
            for (let ix = 0; ix < gridX1; ix++) {
              const x = ix * segmentWidth - widthHalf;
              vector[u] = x * udir;
              vector[v] = y * vdir;
              vector[w] = depthHalf;
              vertices.push(vector.x, vector.y, vector.z);
              vector[u] = 0;
              vector[v] = 0;
              vector[w] = depth2 > 0 ? 1 : -1;
              normals.push(vector.x, vector.y, vector.z);
              uvs.push(ix / gridX);
              uvs.push(1 - iy / gridY);
              vertexCounter += 1;
            }
          }
          for (let iy = 0; iy < gridY; iy++) {
            for (let ix = 0; ix < gridX; ix++) {
              const a = numberOfVertices + ix + gridX1 * iy;
              const b = numberOfVertices + ix + gridX1 * (iy + 1);
              const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
              const d = numberOfVertices + (ix + 1) + gridX1 * iy;
              indices.push(a, b, d);
              indices.push(b, c, d);
              groupCount += 6;
            }
          }
          scope.addGroup(groupStart, groupCount, materialIndex);
          groupStart += groupCount;
          numberOfVertices += vertexCounter;
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
      }
    };
    function cloneUniforms(src) {
      const dst = {};
      for (const u in src) {
        dst[u] = {};
        for (const p in src[u]) {
          const property = src[u][p];
          if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
            if (property.isRenderTargetTexture) {
              console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
              dst[u][p] = null;
            } else {
              dst[u][p] = property.clone();
            }
          } else if (Array.isArray(property)) {
            dst[u][p] = property.slice();
          } else {
            dst[u][p] = property;
          }
        }
      }
      return dst;
    }
    function mergeUniforms(uniforms) {
      const merged = {};
      for (let u = 0; u < uniforms.length; u++) {
        const tmp2 = cloneUniforms(uniforms[u]);
        for (const p in tmp2) {
          merged[p] = tmp2[p];
        }
      }
      return merged;
    }
    function cloneUniformsGroups(src) {
      const dst = [];
      for (let u = 0; u < src.length; u++) {
        dst.push(src[u].clone());
      }
      return dst;
    }
    function getUnlitUniformColorSpace(renderer) {
      if (renderer.getRenderTarget() === null) {
        return renderer.outputEncoding === sRGBEncoding2 ? SRGBColorSpace : LinearSRGBColorSpace;
      }
      return LinearSRGBColorSpace;
    }
    var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
    var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
    var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
    var ShaderMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isShaderMaterial = true;
        this.type = "ShaderMaterial";
        this.defines = {};
        this.uniforms = {};
        this.uniformsGroups = [];
        this.vertexShader = default_vertex;
        this.fragmentShader = default_fragment;
        this.linewidth = 1;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false;
        this.lights = false;
        this.clipping = false;
        this.forceSinglePass = true;
        this.extensions = {
          derivatives: false,
          // set to use derivatives
          fragDepth: false,
          // set to use fragment depth values
          drawBuffers: false,
          // set to use draw buffers
          shaderTextureLOD: false
          // set to use shader texture LOD
        };
        this.defaultAttributeValues = {
          "color": [1, 1, 1],
          "uv": [0, 0],
          "uv2": [0, 0]
        };
        this.index0AttributeName = void 0;
        this.uniformsNeedUpdate = false;
        this.glslVersion = null;
        if (parameters !== void 0) {
          this.setValues(parameters);
        }
      }
      copy(source) {
        super.copy(source);
        this.fragmentShader = source.fragmentShader;
        this.vertexShader = source.vertexShader;
        this.uniforms = cloneUniforms(source.uniforms);
        this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
        this.defines = Object.assign({}, source.defines);
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.fog = source.fog;
        this.lights = source.lights;
        this.clipping = source.clipping;
        this.extensions = Object.assign({}, source.extensions);
        this.glslVersion = source.glslVersion;
        return this;
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.glslVersion = this.glslVersion;
        data.uniforms = {};
        for (const name in this.uniforms) {
          const uniform = this.uniforms[name];
          const value = uniform.value;
          if (value && value.isTexture) {
            data.uniforms[name] = {
              type: "t",
              value: value.toJSON(meta).uuid
            };
          } else if (value && value.isColor) {
            data.uniforms[name] = {
              type: "c",
              value: value.getHex()
            };
          } else if (value && value.isVector2) {
            data.uniforms[name] = {
              type: "v2",
              value: value.toArray()
            };
          } else if (value && value.isVector3) {
            data.uniforms[name] = {
              type: "v3",
              value: value.toArray()
            };
          } else if (value && value.isVector4) {
            data.uniforms[name] = {
              type: "v4",
              value: value.toArray()
            };
          } else if (value && value.isMatrix3) {
            data.uniforms[name] = {
              type: "m3",
              value: value.toArray()
            };
          } else if (value && value.isMatrix4) {
            data.uniforms[name] = {
              type: "m4",
              value: value.toArray()
            };
          } else {
            data.uniforms[name] = {
              value
            };
          }
        }
        if (Object.keys(this.defines).length > 0)
          data.defines = this.defines;
        data.vertexShader = this.vertexShader;
        data.fragmentShader = this.fragmentShader;
        const extensions = {};
        for (const key in this.extensions) {
          if (this.extensions[key] === true)
            extensions[key] = true;
        }
        if (Object.keys(extensions).length > 0)
          data.extensions = extensions;
        return data;
      }
    };
    var Camera = class extends Object3D2 {
      constructor() {
        super();
        this.isCamera = true;
        this.type = "Camera";
        this.matrixWorldInverse = new Matrix42();
        this.projectionMatrix = new Matrix42();
        this.projectionMatrixInverse = new Matrix42();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.matrixWorldInverse.copy(source.matrixWorldInverse);
        this.projectionMatrix.copy(source.projectionMatrix);
        this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
        return this;
      }
      getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(-e[8], -e[9], -e[10]).normalize();
      }
      updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
      }
      updateWorldMatrix(updateParents, updateChildren) {
        super.updateWorldMatrix(updateParents, updateChildren);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    var PerspectiveCamera2 = class extends Camera {
      constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
        super();
        this.isPerspectiveCamera = true;
        this.type = "PerspectiveCamera";
        this.fov = fov2;
        this.zoom = 1;
        this.near = near;
        this.far = far;
        this.focus = 10;
        this.aspect = aspect2;
        this.view = null;
        this.filmGauge = 35;
        this.filmOffset = 0;
        this.updateProjectionMatrix();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.fov = source.fov;
        this.zoom = source.zoom;
        this.near = source.near;
        this.far = source.far;
        this.focus = source.focus;
        this.aspect = source.aspect;
        this.view = source.view === null ? null : Object.assign({}, source.view);
        this.filmGauge = source.filmGauge;
        this.filmOffset = source.filmOffset;
        return this;
      }
      /**
       * Sets the FOV by focal length in respect to the current .filmGauge.
       *
       * The default film gauge is 35, so that the focal length can be specified for
       * a 35mm (full frame) camera.
       *
       * Values for focal length and film gauge must have the same unit.
       */
      setFocalLength(focalLength) {
        const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
        this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
        this.updateProjectionMatrix();
      }
      /**
       * Calculates the focal length from the current .fov and .filmGauge.
       */
      getFocalLength() {
        const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
        return 0.5 * this.getFilmHeight() / vExtentSlope;
      }
      getEffectiveFOV() {
        return RAD2DEG * 2 * Math.atan(
          Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
        );
      }
      getFilmWidth() {
        return this.filmGauge * Math.min(this.aspect, 1);
      }
      getFilmHeight() {
        return this.filmGauge / Math.max(this.aspect, 1);
      }
      /**
       * Sets an offset in a larger frustum. This is useful for multi-window or
       * multi-monitor/multi-machine setups.
       *
       * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
       * the monitors are in grid like this
       *
       *   +---+---+---+
       *   | A | B | C |
       *   +---+---+---+
       *   | D | E | F |
       *   +---+---+---+
       *
       * then for each monitor you would call it like this
       *
       *   const w = 1920;
       *   const h = 1080;
       *   const fullWidth = w * 3;
       *   const fullHeight = h * 2;
       *
       *   --A--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
       *   --B--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
       *   --C--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
       *   --D--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
       *   --E--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
       *   --F--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
       *
       *   Note there is no reason monitors have to be the same size or in a grid.
       */
      setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        this.aspect = fullWidth / fullHeight;
        if (this.view === null) {
          this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
          };
        }
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
      }
      clearViewOffset() {
        if (this.view !== null) {
          this.view.enabled = false;
        }
        this.updateProjectionMatrix();
      }
      updateProjectionMatrix() {
        const near = this.near;
        let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
        let height = 2 * top;
        let width = this.aspect * height;
        let left = -0.5 * width;
        const view = this.view;
        if (this.view !== null && this.view.enabled) {
          const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
          left += view.offsetX * width / fullWidth;
          top -= view.offsetY * height / fullHeight;
          width *= view.width / fullWidth;
          height *= view.height / fullHeight;
        }
        const skew = this.filmOffset;
        if (skew !== 0)
          left += near * skew / this.getFilmWidth();
        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.fov = this.fov;
        data.object.zoom = this.zoom;
        data.object.near = this.near;
        data.object.far = this.far;
        data.object.focus = this.focus;
        data.object.aspect = this.aspect;
        if (this.view !== null)
          data.object.view = Object.assign({}, this.view);
        data.object.filmGauge = this.filmGauge;
        data.object.filmOffset = this.filmOffset;
        return data;
      }
    };
    var fov = -90;
    var aspect = 1;
    var CubeCamera = class extends Object3D2 {
      constructor(near, far, renderTarget) {
        super();
        this.type = "CubeCamera";
        this.renderTarget = renderTarget;
        const cameraPX = new PerspectiveCamera2(fov, aspect, near, far);
        cameraPX.layers = this.layers;
        cameraPX.up.set(0, 1, 0);
        cameraPX.lookAt(1, 0, 0);
        this.add(cameraPX);
        const cameraNX = new PerspectiveCamera2(fov, aspect, near, far);
        cameraNX.layers = this.layers;
        cameraNX.up.set(0, 1, 0);
        cameraNX.lookAt(-1, 0, 0);
        this.add(cameraNX);
        const cameraPY = new PerspectiveCamera2(fov, aspect, near, far);
        cameraPY.layers = this.layers;
        cameraPY.up.set(0, 0, -1);
        cameraPY.lookAt(0, 1, 0);
        this.add(cameraPY);
        const cameraNY = new PerspectiveCamera2(fov, aspect, near, far);
        cameraNY.layers = this.layers;
        cameraNY.up.set(0, 0, 1);
        cameraNY.lookAt(0, -1, 0);
        this.add(cameraNY);
        const cameraPZ = new PerspectiveCamera2(fov, aspect, near, far);
        cameraPZ.layers = this.layers;
        cameraPZ.up.set(0, 1, 0);
        cameraPZ.lookAt(0, 0, 1);
        this.add(cameraPZ);
        const cameraNZ = new PerspectiveCamera2(fov, aspect, near, far);
        cameraNZ.layers = this.layers;
        cameraNZ.up.set(0, 1, 0);
        cameraNZ.lookAt(0, 0, -1);
        this.add(cameraNZ);
      }
      update(renderer, scene) {
        if (this.parent === null)
          this.updateMatrixWorld();
        const renderTarget = this.renderTarget;
        const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
        const currentRenderTarget = renderer.getRenderTarget();
        const currentToneMapping = renderer.toneMapping;
        const currentXrEnabled = renderer.xr.enabled;
        renderer.toneMapping = NoToneMapping;
        renderer.xr.enabled = false;
        const generateMipmaps = renderTarget.texture.generateMipmaps;
        renderTarget.texture.generateMipmaps = false;
        renderer.setRenderTarget(renderTarget, 0);
        renderer.render(scene, cameraPX);
        renderer.setRenderTarget(renderTarget, 1);
        renderer.render(scene, cameraNX);
        renderer.setRenderTarget(renderTarget, 2);
        renderer.render(scene, cameraPY);
        renderer.setRenderTarget(renderTarget, 3);
        renderer.render(scene, cameraNY);
        renderer.setRenderTarget(renderTarget, 4);
        renderer.render(scene, cameraPZ);
        renderTarget.texture.generateMipmaps = generateMipmaps;
        renderer.setRenderTarget(renderTarget, 5);
        renderer.render(scene, cameraNZ);
        renderer.setRenderTarget(currentRenderTarget);
        renderer.toneMapping = currentToneMapping;
        renderer.xr.enabled = currentXrEnabled;
        renderTarget.texture.needsPMREMUpdate = true;
      }
    };
    var CubeTexture = class extends Texture2 {
      constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
        images = images !== void 0 ? images : [];
        mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
        super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        this.isCubeTexture = true;
        this.flipY = false;
      }
      get images() {
        return this.image;
      }
      set images(value) {
        this.image = value;
      }
    };
    var WebGLCubeRenderTarget = class extends WebGLRenderTarget {
      constructor(size = 1, options = {}) {
        super(size, size, options);
        this.isWebGLCubeRenderTarget = true;
        const image = { width: size, height: size, depth: 1 };
        const images = [image, image, image, image, image, image];
        this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
        this.texture.isRenderTargetTexture = true;
        this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
        this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
      }
      fromEquirectangularTexture(renderer, texture) {
        this.texture.type = texture.type;
        this.texture.encoding = texture.encoding;
        this.texture.generateMipmaps = texture.generateMipmaps;
        this.texture.minFilter = texture.minFilter;
        this.texture.magFilter = texture.magFilter;
        const shader = {
          uniforms: {
            tEquirect: { value: null }
          },
          vertexShader: (
            /* glsl */
            `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
          ),
          fragmentShader: (
            /* glsl */
            `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
          )
        };
        const geometry = new BoxGeometry(5, 5, 5);
        const material = new ShaderMaterial({
          name: "CubemapFromEquirect",
          uniforms: cloneUniforms(shader.uniforms),
          vertexShader: shader.vertexShader,
          fragmentShader: shader.fragmentShader,
          side: BackSide,
          blending: NoBlending
        });
        material.uniforms.tEquirect.value = texture;
        const mesh = new Mesh2(geometry, material);
        const currentMinFilter = texture.minFilter;
        if (texture.minFilter === LinearMipmapLinearFilter2)
          texture.minFilter = LinearFilter;
        const camera = new CubeCamera(1, 10, this);
        camera.update(renderer, mesh);
        texture.minFilter = currentMinFilter;
        mesh.geometry.dispose();
        mesh.material.dispose();
        return this;
      }
      clear(renderer, color, depth, stencil) {
        const currentRenderTarget = renderer.getRenderTarget();
        for (let i = 0; i < 6; i++) {
          renderer.setRenderTarget(this, i);
          renderer.clear(color, depth, stencil);
        }
        renderer.setRenderTarget(currentRenderTarget);
      }
    };
    var _vector1 = new Vector32();
    var _vector2 = new Vector32();
    var _normalMatrix = new Matrix32();
    var Plane = class {
      constructor(normal = new Vector32(1, 0, 0), constant = 0) {
        this.isPlane = true;
        this.normal = normal;
        this.constant = constant;
      }
      set(normal, constant) {
        this.normal.copy(normal);
        this.constant = constant;
        return this;
      }
      setComponents(x, y, z, w) {
        this.normal.set(x, y, z);
        this.constant = w;
        return this;
      }
      setFromNormalAndCoplanarPoint(normal, point) {
        this.normal.copy(normal);
        this.constant = -point.dot(this.normal);
        return this;
      }
      setFromCoplanarPoints(a, b, c) {
        const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
        this.setFromNormalAndCoplanarPoint(normal, a);
        return this;
      }
      copy(plane) {
        this.normal.copy(plane.normal);
        this.constant = plane.constant;
        return this;
      }
      normalize() {
        const inverseNormalLength = 1 / this.normal.length();
        this.normal.multiplyScalar(inverseNormalLength);
        this.constant *= inverseNormalLength;
        return this;
      }
      negate() {
        this.constant *= -1;
        this.normal.negate();
        return this;
      }
      distanceToPoint(point) {
        return this.normal.dot(point) + this.constant;
      }
      distanceToSphere(sphere) {
        return this.distanceToPoint(sphere.center) - sphere.radius;
      }
      projectPoint(point, target) {
        return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
      }
      intersectLine(line, target) {
        const direction = line.delta(_vector1);
        const denominator = this.normal.dot(direction);
        if (denominator === 0) {
          if (this.distanceToPoint(line.start) === 0) {
            return target.copy(line.start);
          }
          return null;
        }
        const t = -(line.start.dot(this.normal) + this.constant) / denominator;
        if (t < 0 || t > 1) {
          return null;
        }
        return target.copy(line.start).addScaledVector(direction, t);
      }
      intersectsLine(line) {
        const startSign = this.distanceToPoint(line.start);
        const endSign = this.distanceToPoint(line.end);
        return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
      }
      intersectsBox(box) {
        return box.intersectsPlane(this);
      }
      intersectsSphere(sphere) {
        return sphere.intersectsPlane(this);
      }
      coplanarPoint(target) {
        return target.copy(this.normal).multiplyScalar(-this.constant);
      }
      applyMatrix4(matrix, optionalNormalMatrix) {
        const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
        const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
        const normal = this.normal.applyMatrix3(normalMatrix).normalize();
        this.constant = -referencePoint.dot(normal);
        return this;
      }
      translate(offset) {
        this.constant -= offset.dot(this.normal);
        return this;
      }
      equals(plane) {
        return plane.normal.equals(this.normal) && plane.constant === this.constant;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    var _sphere$3 = new Sphere();
    var _vector$6 = new Vector32();
    var Frustum = class {
      constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
        this.planes = [p0, p1, p2, p3, p4, p5];
      }
      set(p0, p1, p2, p3, p4, p5) {
        const planes = this.planes;
        planes[0].copy(p0);
        planes[1].copy(p1);
        planes[2].copy(p2);
        planes[3].copy(p3);
        planes[4].copy(p4);
        planes[5].copy(p5);
        return this;
      }
      copy(frustum) {
        const planes = this.planes;
        for (let i = 0; i < 6; i++) {
          planes[i].copy(frustum.planes[i]);
        }
        return this;
      }
      setFromProjectionMatrix(m) {
        const planes = this.planes;
        const me = m.elements;
        const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
        const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
        const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
        const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
        return this;
      }
      intersectsObject(object) {
        if (object.boundingSphere !== void 0) {
          if (object.boundingSphere === null)
            object.computeBoundingSphere();
          _sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
        } else {
          const geometry = object.geometry;
          if (geometry.boundingSphere === null)
            geometry.computeBoundingSphere();
          _sphere$3.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
        }
        return this.intersectsSphere(_sphere$3);
      }
      intersectsSprite(sprite) {
        _sphere$3.center.set(0, 0, 0);
        _sphere$3.radius = 0.7071067811865476;
        _sphere$3.applyMatrix4(sprite.matrixWorld);
        return this.intersectsSphere(_sphere$3);
      }
      intersectsSphere(sphere) {
        const planes = this.planes;
        const center = sphere.center;
        const negRadius = -sphere.radius;
        for (let i = 0; i < 6; i++) {
          const distance = planes[i].distanceToPoint(center);
          if (distance < negRadius) {
            return false;
          }
        }
        return true;
      }
      intersectsBox(box) {
        const planes = this.planes;
        for (let i = 0; i < 6; i++) {
          const plane = planes[i];
          _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
          _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
          _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;
          if (plane.distanceToPoint(_vector$6) < 0) {
            return false;
          }
        }
        return true;
      }
      containsPoint(point) {
        const planes = this.planes;
        for (let i = 0; i < 6; i++) {
          if (planes[i].distanceToPoint(point) < 0) {
            return false;
          }
        }
        return true;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    function WebGLAnimation() {
      let context = null;
      let isAnimating = false;
      let animationLoop = null;
      let requestId = null;
      function onAnimationFrame(time, frame) {
        animationLoop(time, frame);
        requestId = context.requestAnimationFrame(onAnimationFrame);
      }
      return {
        start: function() {
          if (isAnimating === true)
            return;
          if (animationLoop === null)
            return;
          requestId = context.requestAnimationFrame(onAnimationFrame);
          isAnimating = true;
        },
        stop: function() {
          context.cancelAnimationFrame(requestId);
          isAnimating = false;
        },
        setAnimationLoop: function(callback) {
          animationLoop = callback;
        },
        setContext: function(value) {
          context = value;
        }
      };
    }
    function WebGLAttributes(gl, capabilities) {
      const isWebGL2 = capabilities.isWebGL2;
      const buffers = /* @__PURE__ */ new WeakMap();
      function createBuffer(attribute, bufferType) {
        const array = attribute.array;
        const usage = attribute.usage;
        const buffer = gl.createBuffer();
        gl.bindBuffer(bufferType, buffer);
        gl.bufferData(bufferType, array, usage);
        attribute.onUploadCallback();
        let type;
        if (array instanceof Float32Array) {
          type = gl.FLOAT;
        } else if (array instanceof Uint16Array) {
          if (attribute.isFloat16BufferAttribute) {
            if (isWebGL2) {
              type = gl.HALF_FLOAT;
            } else {
              throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
            }
          } else {
            type = gl.UNSIGNED_SHORT;
          }
        } else if (array instanceof Int16Array) {
          type = gl.SHORT;
        } else if (array instanceof Uint32Array) {
          type = gl.UNSIGNED_INT;
        } else if (array instanceof Int32Array) {
          type = gl.INT;
        } else if (array instanceof Int8Array) {
          type = gl.BYTE;
        } else if (array instanceof Uint8Array) {
          type = gl.UNSIGNED_BYTE;
        } else if (array instanceof Uint8ClampedArray) {
          type = gl.UNSIGNED_BYTE;
        } else {
          throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
        }
        return {
          buffer,
          type,
          bytesPerElement: array.BYTES_PER_ELEMENT,
          version: attribute.version
        };
      }
      function updateBuffer(buffer, attribute, bufferType) {
        const array = attribute.array;
        const updateRange = attribute.updateRange;
        gl.bindBuffer(bufferType, buffer);
        if (updateRange.count === -1) {
          gl.bufferSubData(bufferType, 0, array);
        } else {
          if (isWebGL2) {
            gl.bufferSubData(
              bufferType,
              updateRange.offset * array.BYTES_PER_ELEMENT,
              array,
              updateRange.offset,
              updateRange.count
            );
          } else {
            gl.bufferSubData(
              bufferType,
              updateRange.offset * array.BYTES_PER_ELEMENT,
              array.subarray(updateRange.offset, updateRange.offset + updateRange.count)
            );
          }
          updateRange.count = -1;
        }
        attribute.onUploadCallback();
      }
      function get(attribute) {
        if (attribute.isInterleavedBufferAttribute)
          attribute = attribute.data;
        return buffers.get(attribute);
      }
      function remove(attribute) {
        if (attribute.isInterleavedBufferAttribute)
          attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data) {
          gl.deleteBuffer(data.buffer);
          buffers.delete(attribute);
        }
      }
      function update(attribute, bufferType) {
        if (attribute.isGLBufferAttribute) {
          const cached = buffers.get(attribute);
          if (!cached || cached.version < attribute.version) {
            buffers.set(attribute, {
              buffer: attribute.buffer,
              type: attribute.type,
              bytesPerElement: attribute.elementSize,
              version: attribute.version
            });
          }
          return;
        }
        if (attribute.isInterleavedBufferAttribute)
          attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data === void 0) {
          buffers.set(attribute, createBuffer(attribute, bufferType));
        } else if (data.version < attribute.version) {
          updateBuffer(data.buffer, attribute, bufferType);
          data.version = attribute.version;
        }
      }
      return {
        get,
        remove,
        update
      };
    }
    var PlaneGeometry = class extends BufferGeometry2 {
      constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
        super();
        this.type = "PlaneGeometry";
        this.parameters = {
          width,
          height,
          widthSegments,
          heightSegments
        };
        const width_half = width / 2;
        const height_half = height / 2;
        const gridX = Math.floor(widthSegments);
        const gridY = Math.floor(heightSegments);
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        const segment_width = width / gridX;
        const segment_height = height / gridY;
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        for (let iy = 0; iy < gridY1; iy++) {
          const y = iy * segment_height - height_half;
          for (let ix = 0; ix < gridX1; ix++) {
            const x = ix * segment_width - width_half;
            vertices.push(x, -y, 0);
            normals.push(0, 0, 1);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a = ix + gridX1 * iy;
            const b = ix + gridX1 * (iy + 1);
            const c = ix + 1 + gridX1 * (iy + 1);
            const d = ix + 1 + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
      }
    };
    var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
    var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
    var alphatest_fragment = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
    var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
    var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
    var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
    var begin_vertex = "vec3 transformed = vec3( position );";
    var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
    var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
    var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			 return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float R21 = R12;\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
    var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = dFdx( surf_pos.xyz );\n		vec3 vSigmaY = dFdy( surf_pos.xyz );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
    var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
    var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
    var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
    var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
    var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
    var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
    var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
    var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
    var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
    var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_v0 0.339\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_v1 0.276\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_v4 0.046\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_v5 0.016\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_v6 0.0038\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
    var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
    var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
    var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
    var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
    var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
    var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
    var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
    var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
    var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
    var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
    var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
    var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
    var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
    var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
    var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
    var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
    var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
    var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
    var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
    var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
    var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
    var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
    var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n#endif";
    var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
    var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
    var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
    var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
    var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif";
    var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
    var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometry.viewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
    var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
    var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
    var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
    var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
    var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
    var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
    var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
    var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
    var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
    var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
    var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
    var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
    var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
    var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
    var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
    var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
    var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#ifdef USE_NORMALMAP_TANGENTSPACE\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 geometryNormal = normal;";
    var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
    var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
    var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
    var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
    var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
    var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
    var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
    var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
    var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
    var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
    var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
    var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
    var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
    var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
    var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
    var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
    var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
    var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
    var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
    var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
    var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
    var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
    var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	uniform int boneTextureSize;\n	mat4 getBoneMatrix( const in float i ) {\n		float j = i * 4.0;\n		float x = mod( j, float( boneTextureSize ) );\n		float y = floor( j / float( boneTextureSize ) );\n		float dx = 1.0 / float( boneTextureSize );\n		float dy = 1.0 / float( boneTextureSize );\n		y = dy * ( y + 0.5 );\n		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n		mat4 bone = mat4( v1, v2, v3, v4 );\n		return bone;\n	}\n#endif";
    var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
    var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
    var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
    var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
    var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
    var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
    var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmission = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n#endif";
    var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, vec2 fullSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		\n		vec2 lodFudge = pow( 1.95, lod ) / fullSize;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec2 fullSize = vec2( textureSize( sampler, 0 ) );\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), fullSize, floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), fullSize, ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return radiance;\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n	}\n#endif";
    var uv_pars_fragment = "#ifdef USE_UV\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
    var uv_pars_vertex = "#ifdef USE_UV\n	varying vec2 vUv;\n#endif\n#ifdef USE_UV2\n	attribute vec2 uv2;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
    var uv_vertex = "#ifdef USE_UV\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
    var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
    var vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
    var fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
    var vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
    var fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
    var vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
    var fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
    var vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
    var fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
    var vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
    var fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
    var vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
    var fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
    var vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
    var fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
    var vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
    var fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    var vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
    var fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    var vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
    var fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    var vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
    var fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
    var vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
    var fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    var vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
    var fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    var vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
    var fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    var vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
    var fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
    var vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
    var fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
    var vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
    var fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
    var ShaderChunk = {
      alphamap_fragment,
      alphamap_pars_fragment,
      alphatest_fragment,
      alphatest_pars_fragment,
      aomap_fragment,
      aomap_pars_fragment,
      begin_vertex,
      beginnormal_vertex,
      bsdfs,
      iridescence_fragment,
      bumpmap_pars_fragment,
      clipping_planes_fragment,
      clipping_planes_pars_fragment,
      clipping_planes_pars_vertex,
      clipping_planes_vertex,
      color_fragment,
      color_pars_fragment,
      color_pars_vertex,
      color_vertex,
      common,
      cube_uv_reflection_fragment,
      defaultnormal_vertex,
      displacementmap_pars_vertex,
      displacementmap_vertex,
      emissivemap_fragment,
      emissivemap_pars_fragment,
      encodings_fragment,
      encodings_pars_fragment,
      envmap_fragment,
      envmap_common_pars_fragment,
      envmap_pars_fragment,
      envmap_pars_vertex,
      envmap_physical_pars_fragment,
      envmap_vertex,
      fog_vertex,
      fog_pars_vertex,
      fog_fragment,
      fog_pars_fragment,
      gradientmap_pars_fragment,
      lightmap_fragment,
      lightmap_pars_fragment,
      lights_lambert_fragment,
      lights_lambert_pars_fragment,
      lights_pars_begin,
      lights_toon_fragment,
      lights_toon_pars_fragment,
      lights_phong_fragment,
      lights_phong_pars_fragment,
      lights_physical_fragment,
      lights_physical_pars_fragment,
      lights_fragment_begin,
      lights_fragment_maps,
      lights_fragment_end,
      logdepthbuf_fragment,
      logdepthbuf_pars_fragment,
      logdepthbuf_pars_vertex,
      logdepthbuf_vertex,
      map_fragment,
      map_pars_fragment,
      map_particle_fragment,
      map_particle_pars_fragment,
      metalnessmap_fragment,
      metalnessmap_pars_fragment,
      morphcolor_vertex,
      morphnormal_vertex,
      morphtarget_pars_vertex,
      morphtarget_vertex,
      normal_fragment_begin,
      normal_fragment_maps,
      normal_pars_fragment,
      normal_pars_vertex,
      normal_vertex,
      normalmap_pars_fragment,
      clearcoat_normal_fragment_begin,
      clearcoat_normal_fragment_maps,
      clearcoat_pars_fragment,
      iridescence_pars_fragment,
      output_fragment,
      packing,
      premultiplied_alpha_fragment,
      project_vertex,
      dithering_fragment,
      dithering_pars_fragment,
      roughnessmap_fragment,
      roughnessmap_pars_fragment,
      shadowmap_pars_fragment,
      shadowmap_pars_vertex,
      shadowmap_vertex,
      shadowmask_pars_fragment,
      skinbase_vertex,
      skinning_pars_vertex,
      skinning_vertex,
      skinnormal_vertex,
      specularmap_fragment,
      specularmap_pars_fragment,
      tonemapping_fragment,
      tonemapping_pars_fragment,
      transmission_fragment,
      transmission_pars_fragment,
      uv_pars_fragment,
      uv_pars_vertex,
      uv_vertex,
      worldpos_vertex,
      background_vert: vertex$h,
      background_frag: fragment$h,
      backgroundCube_vert: vertex$g,
      backgroundCube_frag: fragment$g,
      cube_vert: vertex$f,
      cube_frag: fragment$f,
      depth_vert: vertex$e,
      depth_frag: fragment$e,
      distanceRGBA_vert: vertex$d,
      distanceRGBA_frag: fragment$d,
      equirect_vert: vertex$c,
      equirect_frag: fragment$c,
      linedashed_vert: vertex$b,
      linedashed_frag: fragment$b,
      meshbasic_vert: vertex$a,
      meshbasic_frag: fragment$a,
      meshlambert_vert: vertex$9,
      meshlambert_frag: fragment$9,
      meshmatcap_vert: vertex$8,
      meshmatcap_frag: fragment$8,
      meshnormal_vert: vertex$7,
      meshnormal_frag: fragment$7,
      meshphong_vert: vertex$6,
      meshphong_frag: fragment$6,
      meshphysical_vert: vertex$5,
      meshphysical_frag: fragment$5,
      meshtoon_vert: vertex$4,
      meshtoon_frag: fragment$4,
      points_vert: vertex$3,
      points_frag: fragment$3,
      shadow_vert: vertex$2,
      shadow_frag: fragment$2,
      sprite_vert: vertex$1,
      sprite_frag: fragment$1
    };
    var UniformsLib = {
      common: {
        diffuse: { value: new Color2(16777215) },
        opacity: { value: 1 },
        map: { value: null },
        mapTransform: { value: new Matrix32() },
        alphaMap: { value: null },
        alphaMapTransform: { value: new Matrix32() },
        alphaTest: { value: 0 }
      },
      specularmap: {
        specularMap: { value: null },
        specularMapTransform: { value: new Matrix32() }
      },
      envmap: {
        envMap: { value: null },
        flipEnvMap: { value: -1 },
        reflectivity: { value: 1 },
        // basic, lambert, phong
        ior: { value: 1.5 },
        // physical
        refractionRatio: { value: 0.98 }
        // basic, lambert, phong
      },
      aomap: {
        aoMap: { value: null },
        aoMapIntensity: { value: 1 },
        aoMapTransform: { value: new Matrix32() }
      },
      lightmap: {
        lightMap: { value: null },
        lightMapIntensity: { value: 1 },
        lightMapTransform: { value: new Matrix32() }
      },
      bumpmap: {
        bumpMap: { value: null },
        bumpMapTransform: { value: new Matrix32() },
        bumpScale: { value: 1 }
      },
      normalmap: {
        normalMap: { value: null },
        normalMapTransform: { value: new Matrix32() },
        normalScale: { value: new Vector22(1, 1) }
      },
      displacementmap: {
        displacementMap: { value: null },
        displacementMapTransform: { value: new Matrix32() },
        displacementScale: { value: 1 },
        displacementBias: { value: 0 }
      },
      emissivemap: {
        emissiveMap: { value: null },
        emissiveMapTransform: { value: new Matrix32() }
      },
      metalnessmap: {
        metalnessMap: { value: null },
        metalnessMapTransform: { value: new Matrix32() }
      },
      roughnessmap: {
        roughnessMap: { value: null },
        roughnessMapTransform: { value: new Matrix32() }
      },
      gradientmap: {
        gradientMap: { value: null }
      },
      fog: {
        fogDensity: { value: 25e-5 },
        fogNear: { value: 1 },
        fogFar: { value: 2e3 },
        fogColor: { value: new Color2(16777215) }
      },
      lights: {
        ambientLightColor: { value: [] },
        lightProbe: { value: [] },
        directionalLights: { value: [], properties: {
          direction: {},
          color: {}
        } },
        directionalLightShadows: { value: [], properties: {
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {}
        } },
        directionalShadowMap: { value: [] },
        directionalShadowMatrix: { value: [] },
        spotLights: { value: [], properties: {
          color: {},
          position: {},
          direction: {},
          distance: {},
          coneCos: {},
          penumbraCos: {},
          decay: {}
        } },
        spotLightShadows: { value: [], properties: {
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {}
        } },
        spotLightMap: { value: [] },
        spotShadowMap: { value: [] },
        spotLightMatrix: { value: [] },
        pointLights: { value: [], properties: {
          color: {},
          position: {},
          decay: {},
          distance: {}
        } },
        pointLightShadows: { value: [], properties: {
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {},
          shadowCameraNear: {},
          shadowCameraFar: {}
        } },
        pointShadowMap: { value: [] },
        pointShadowMatrix: { value: [] },
        hemisphereLights: { value: [], properties: {
          direction: {},
          skyColor: {},
          groundColor: {}
        } },
        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
        rectAreaLights: { value: [], properties: {
          color: {},
          position: {},
          width: {},
          height: {}
        } },
        ltc_1: { value: null },
        ltc_2: { value: null }
      },
      points: {
        diffuse: { value: new Color2(16777215) },
        opacity: { value: 1 },
        size: { value: 1 },
        scale: { value: 1 },
        map: { value: null },
        alphaMap: { value: null },
        alphaTest: { value: 0 },
        uvTransform: { value: new Matrix32() }
      },
      sprite: {
        diffuse: { value: new Color2(16777215) },
        opacity: { value: 1 },
        center: { value: new Vector22(0.5, 0.5) },
        rotation: { value: 0 },
        map: { value: null },
        mapTransform: { value: new Matrix32() },
        alphaMap: { value: null },
        alphaTest: { value: 0 }
      }
    };
    var ShaderLib = {
      basic: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.specularmap,
          UniformsLib.envmap,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.meshbasic_vert,
        fragmentShader: ShaderChunk.meshbasic_frag
      },
      lambert: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.specularmap,
          UniformsLib.envmap,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.emissivemap,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.fog,
          UniformsLib.lights,
          {
            emissive: { value: new Color2(0) }
          }
        ]),
        vertexShader: ShaderChunk.meshlambert_vert,
        fragmentShader: ShaderChunk.meshlambert_frag
      },
      phong: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.specularmap,
          UniformsLib.envmap,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.emissivemap,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.fog,
          UniformsLib.lights,
          {
            emissive: { value: new Color2(0) },
            specular: { value: new Color2(1118481) },
            shininess: { value: 30 }
          }
        ]),
        vertexShader: ShaderChunk.meshphong_vert,
        fragmentShader: ShaderChunk.meshphong_frag
      },
      standard: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.envmap,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.emissivemap,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.roughnessmap,
          UniformsLib.metalnessmap,
          UniformsLib.fog,
          UniformsLib.lights,
          {
            emissive: { value: new Color2(0) },
            roughness: { value: 1 },
            metalness: { value: 0 },
            envMapIntensity: { value: 1 }
            // temporary
          }
        ]),
        vertexShader: ShaderChunk.meshphysical_vert,
        fragmentShader: ShaderChunk.meshphysical_frag
      },
      toon: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.emissivemap,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.gradientmap,
          UniformsLib.fog,
          UniformsLib.lights,
          {
            emissive: { value: new Color2(0) }
          }
        ]),
        vertexShader: ShaderChunk.meshtoon_vert,
        fragmentShader: ShaderChunk.meshtoon_frag
      },
      matcap: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.fog,
          {
            matcap: { value: null }
          }
        ]),
        vertexShader: ShaderChunk.meshmatcap_vert,
        fragmentShader: ShaderChunk.meshmatcap_frag
      },
      points: {
        uniforms: mergeUniforms([
          UniformsLib.points,
          UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.points_vert,
        fragmentShader: ShaderChunk.points_frag
      },
      dashed: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.fog,
          {
            scale: { value: 1 },
            dashSize: { value: 1 },
            totalSize: { value: 2 }
          }
        ]),
        vertexShader: ShaderChunk.linedashed_vert,
        fragmentShader: ShaderChunk.linedashed_frag
      },
      depth: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.displacementmap
        ]),
        vertexShader: ShaderChunk.depth_vert,
        fragmentShader: ShaderChunk.depth_frag
      },
      normal: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          {
            opacity: { value: 1 }
          }
        ]),
        vertexShader: ShaderChunk.meshnormal_vert,
        fragmentShader: ShaderChunk.meshnormal_frag
      },
      sprite: {
        uniforms: mergeUniforms([
          UniformsLib.sprite,
          UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.sprite_vert,
        fragmentShader: ShaderChunk.sprite_frag
      },
      background: {
        uniforms: {
          uvTransform: { value: new Matrix32() },
          t2D: { value: null },
          backgroundIntensity: { value: 1 }
        },
        vertexShader: ShaderChunk.background_vert,
        fragmentShader: ShaderChunk.background_frag
      },
      backgroundCube: {
        uniforms: {
          envMap: { value: null },
          flipEnvMap: { value: -1 },
          backgroundBlurriness: { value: 0 },
          backgroundIntensity: { value: 1 }
        },
        vertexShader: ShaderChunk.backgroundCube_vert,
        fragmentShader: ShaderChunk.backgroundCube_frag
      },
      cube: {
        uniforms: {
          tCube: { value: null },
          tFlip: { value: -1 },
          opacity: { value: 1 }
        },
        vertexShader: ShaderChunk.cube_vert,
        fragmentShader: ShaderChunk.cube_frag
      },
      equirect: {
        uniforms: {
          tEquirect: { value: null }
        },
        vertexShader: ShaderChunk.equirect_vert,
        fragmentShader: ShaderChunk.equirect_frag
      },
      distanceRGBA: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.displacementmap,
          {
            referencePosition: { value: new Vector32() },
            nearDistance: { value: 1 },
            farDistance: { value: 1e3 }
          }
        ]),
        vertexShader: ShaderChunk.distanceRGBA_vert,
        fragmentShader: ShaderChunk.distanceRGBA_frag
      },
      shadow: {
        uniforms: mergeUniforms([
          UniformsLib.lights,
          UniformsLib.fog,
          {
            color: { value: new Color2(0) },
            opacity: { value: 1 }
          }
        ]),
        vertexShader: ShaderChunk.shadow_vert,
        fragmentShader: ShaderChunk.shadow_frag
      }
    };
    ShaderLib.physical = {
      uniforms: mergeUniforms([
        ShaderLib.standard.uniforms,
        {
          clearcoat: { value: 0 },
          clearcoatMap: { value: null },
          clearcoatMapTransform: { value: new Matrix32() },
          clearcoatNormalMap: { value: null },
          clearcoatNormalMapTransform: { value: new Matrix32() },
          clearcoatNormalScale: { value: new Vector22(1, 1) },
          clearcoatRoughness: { value: 0 },
          clearcoatRoughnessMap: { value: null },
          clearcoatRoughnessMapTransform: { value: new Matrix32() },
          iridescence: { value: 0 },
          iridescenceMap: { value: null },
          iridescenceMapTransform: { value: new Matrix32() },
          iridescenceIOR: { value: 1.3 },
          iridescenceThicknessMinimum: { value: 100 },
          iridescenceThicknessMaximum: { value: 400 },
          iridescenceThicknessMap: { value: null },
          iridescenceThicknessMapTransform: { value: new Matrix32() },
          sheen: { value: 0 },
          sheenColor: { value: new Color2(0) },
          sheenColorMap: { value: null },
          sheenColorMapTransform: { value: new Matrix32() },
          sheenRoughness: { value: 1 },
          sheenRoughnessMap: { value: null },
          sheenRoughnessMapTransform: { value: new Matrix32() },
          transmission: { value: 0 },
          transmissionMap: { value: null },
          transmissionMapTransform: { value: new Matrix32() },
          transmissionSamplerSize: { value: new Vector22() },
          transmissionSamplerMap: { value: null },
          thickness: { value: 0 },
          thicknessMap: { value: null },
          thicknessMapTransform: { value: new Matrix32() },
          attenuationDistance: { value: 0 },
          attenuationColor: { value: new Color2(0) },
          specularColor: { value: new Color2(1, 1, 1) },
          specularColorMap: { value: null },
          specularColorMapTransform: { value: new Matrix32() },
          specularIntensity: { value: 1 },
          specularIntensityMap: { value: null },
          specularIntensityMapTransform: { value: new Matrix32() }
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    };
    var _rgb = { r: 0, b: 0, g: 0 };
    function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
      const clearColor = new Color2(0);
      let clearAlpha = alpha === true ? 0 : 1;
      let planeMesh;
      let boxMesh;
      let currentBackground = null;
      let currentBackgroundVersion = 0;
      let currentTonemapping = null;
      function render(renderList, scene) {
        let forceClear = false;
        let background = scene.isScene === true ? scene.background : null;
        if (background && background.isTexture) {
          const usePMREM = scene.backgroundBlurriness > 0;
          background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
        }
        const xr = renderer.xr;
        const session = xr.getSession && xr.getSession();
        if (session && session.environmentBlendMode === "additive") {
          background = null;
        }
        if (background === null) {
          setClear(clearColor, clearAlpha);
        } else if (background && background.isColor) {
          setClear(background, 1);
          forceClear = true;
        }
        if (renderer.autoClear || forceClear) {
          renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
        }
        if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
          if (boxMesh === void 0) {
            boxMesh = new Mesh2(
              new BoxGeometry(1, 1, 1),
              new ShaderMaterial({
                name: "BackgroundCubeMaterial",
                uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
                vertexShader: ShaderLib.backgroundCube.vertexShader,
                fragmentShader: ShaderLib.backgroundCube.fragmentShader,
                side: BackSide,
                depthTest: false,
                depthWrite: false,
                fog: false
              })
            );
            boxMesh.geometry.deleteAttribute("normal");
            boxMesh.geometry.deleteAttribute("uv");
            boxMesh.onBeforeRender = function(renderer2, scene2, camera) {
              this.matrixWorld.copyPosition(camera.matrixWorld);
            };
            Object.defineProperty(boxMesh.material, "envMap", {
              get: function() {
                return this.uniforms.envMap.value;
              }
            });
            objects.update(boxMesh);
          }
          boxMesh.material.uniforms.envMap.value = background;
          boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
          boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
          boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
          boxMesh.material.toneMapped = background.encoding === sRGBEncoding2 ? false : true;
          if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
            boxMesh.material.needsUpdate = true;
            currentBackground = background;
            currentBackgroundVersion = background.version;
            currentTonemapping = renderer.toneMapping;
          }
          boxMesh.layers.enableAll();
          renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
        } else if (background && background.isTexture) {
          if (planeMesh === void 0) {
            planeMesh = new Mesh2(
              new PlaneGeometry(2, 2),
              new ShaderMaterial({
                name: "BackgroundMaterial",
                uniforms: cloneUniforms(ShaderLib.background.uniforms),
                vertexShader: ShaderLib.background.vertexShader,
                fragmentShader: ShaderLib.background.fragmentShader,
                side: FrontSide2,
                depthTest: false,
                depthWrite: false,
                fog: false
              })
            );
            planeMesh.geometry.deleteAttribute("normal");
            Object.defineProperty(planeMesh.material, "map", {
              get: function() {
                return this.uniforms.t2D.value;
              }
            });
            objects.update(planeMesh);
          }
          planeMesh.material.uniforms.t2D.value = background;
          planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
          planeMesh.material.toneMapped = background.encoding === sRGBEncoding2 ? false : true;
          if (background.matrixAutoUpdate === true) {
            background.updateMatrix();
          }
          planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
          if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
            planeMesh.material.needsUpdate = true;
            currentBackground = background;
            currentBackgroundVersion = background.version;
            currentTonemapping = renderer.toneMapping;
          }
          planeMesh.layers.enableAll();
          renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
        }
      }
      function setClear(color, alpha2) {
        color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));
        state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha2, premultipliedAlpha);
      }
      return {
        getClearColor: function() {
          return clearColor;
        },
        setClearColor: function(color, alpha2 = 1) {
          clearColor.set(color);
          clearAlpha = alpha2;
          setClear(clearColor, clearAlpha);
        },
        getClearAlpha: function() {
          return clearAlpha;
        },
        setClearAlpha: function(alpha2) {
          clearAlpha = alpha2;
          setClear(clearColor, clearAlpha);
        },
        render
      };
    }
    function WebGLBindingStates(gl, extensions, attributes, capabilities) {
      const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
      const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
      const vaoAvailable = capabilities.isWebGL2 || extension !== null;
      const bindingStates = {};
      const defaultState = createBindingState(null);
      let currentState = defaultState;
      let forceUpdate = false;
      function setup(object, material, program, geometry, index) {
        let updateBuffers = false;
        if (vaoAvailable) {
          const state = getBindingState(geometry, program, material);
          if (currentState !== state) {
            currentState = state;
            bindVertexArrayObject(currentState.object);
          }
          updateBuffers = needsUpdate(object, geometry, program, index);
          if (updateBuffers)
            saveCache(object, geometry, program, index);
        } else {
          const wireframe = material.wireframe === true;
          if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
            currentState.geometry = geometry.id;
            currentState.program = program.id;
            currentState.wireframe = wireframe;
            updateBuffers = true;
          }
        }
        if (index !== null) {
          attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
        }
        if (updateBuffers || forceUpdate) {
          forceUpdate = false;
          setupVertexAttributes(object, material, program, geometry);
          if (index !== null) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
          }
        }
      }
      function createVertexArrayObject() {
        if (capabilities.isWebGL2)
          return gl.createVertexArray();
        return extension.createVertexArrayOES();
      }
      function bindVertexArrayObject(vao) {
        if (capabilities.isWebGL2)
          return gl.bindVertexArray(vao);
        return extension.bindVertexArrayOES(vao);
      }
      function deleteVertexArrayObject(vao) {
        if (capabilities.isWebGL2)
          return gl.deleteVertexArray(vao);
        return extension.deleteVertexArrayOES(vao);
      }
      function getBindingState(geometry, program, material) {
        const wireframe = material.wireframe === true;
        let programMap = bindingStates[geometry.id];
        if (programMap === void 0) {
          programMap = {};
          bindingStates[geometry.id] = programMap;
        }
        let stateMap = programMap[program.id];
        if (stateMap === void 0) {
          stateMap = {};
          programMap[program.id] = stateMap;
        }
        let state = stateMap[wireframe];
        if (state === void 0) {
          state = createBindingState(createVertexArrayObject());
          stateMap[wireframe] = state;
        }
        return state;
      }
      function createBindingState(vao) {
        const newAttributes = [];
        const enabledAttributes = [];
        const attributeDivisors = [];
        for (let i = 0; i < maxVertexAttributes; i++) {
          newAttributes[i] = 0;
          enabledAttributes[i] = 0;
          attributeDivisors[i] = 0;
        }
        return {
          // for backward compatibility on non-VAO support browser
          geometry: null,
          program: null,
          wireframe: false,
          newAttributes,
          enabledAttributes,
          attributeDivisors,
          object: vao,
          attributes: {},
          index: null
        };
      }
      function needsUpdate(object, geometry, program, index) {
        const cachedAttributes = currentState.attributes;
        const geometryAttributes = geometry.attributes;
        let attributesNum = 0;
        const programAttributes = program.getAttributes();
        for (const name in programAttributes) {
          const programAttribute = programAttributes[name];
          if (programAttribute.location >= 0) {
            const cachedAttribute = cachedAttributes[name];
            let geometryAttribute = geometryAttributes[name];
            if (geometryAttribute === void 0) {
              if (name === "instanceMatrix" && object.instanceMatrix)
                geometryAttribute = object.instanceMatrix;
              if (name === "instanceColor" && object.instanceColor)
                geometryAttribute = object.instanceColor;
            }
            if (cachedAttribute === void 0)
              return true;
            if (cachedAttribute.attribute !== geometryAttribute)
              return true;
            if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data)
              return true;
            attributesNum++;
          }
        }
        if (currentState.attributesNum !== attributesNum)
          return true;
        if (currentState.index !== index)
          return true;
        return false;
      }
      function saveCache(object, geometry, program, index) {
        const cache = {};
        const attributes2 = geometry.attributes;
        let attributesNum = 0;
        const programAttributes = program.getAttributes();
        for (const name in programAttributes) {
          const programAttribute = programAttributes[name];
          if (programAttribute.location >= 0) {
            let attribute = attributes2[name];
            if (attribute === void 0) {
              if (name === "instanceMatrix" && object.instanceMatrix)
                attribute = object.instanceMatrix;
              if (name === "instanceColor" && object.instanceColor)
                attribute = object.instanceColor;
            }
            const data = {};
            data.attribute = attribute;
            if (attribute && attribute.data) {
              data.data = attribute.data;
            }
            cache[name] = data;
            attributesNum++;
          }
        }
        currentState.attributes = cache;
        currentState.attributesNum = attributesNum;
        currentState.index = index;
      }
      function initAttributes() {
        const newAttributes = currentState.newAttributes;
        for (let i = 0, il = newAttributes.length; i < il; i++) {
          newAttributes[i] = 0;
        }
      }
      function enableAttribute(attribute) {
        enableAttributeAndDivisor(attribute, 0);
      }
      function enableAttributeAndDivisor(attribute, meshPerAttribute) {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        const attributeDivisors = currentState.attributeDivisors;
        newAttributes[attribute] = 1;
        if (enabledAttributes[attribute] === 0) {
          gl.enableVertexAttribArray(attribute);
          enabledAttributes[attribute] = 1;
        }
        if (attributeDivisors[attribute] !== meshPerAttribute) {
          const extension2 = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
          extension2[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
          attributeDivisors[attribute] = meshPerAttribute;
        }
      }
      function disableUnusedAttributes() {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        for (let i = 0, il = enabledAttributes.length; i < il; i++) {
          if (enabledAttributes[i] !== newAttributes[i]) {
            gl.disableVertexAttribArray(i);
            enabledAttributes[i] = 0;
          }
        }
      }
      function vertexAttribPointer(index, size, type, normalized, stride, offset) {
        if (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {
          gl.vertexAttribIPointer(index, size, type, stride, offset);
        } else {
          gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
        }
      }
      function setupVertexAttributes(object, material, program, geometry) {
        if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
          if (extensions.get("ANGLE_instanced_arrays") === null)
            return;
        }
        initAttributes();
        const geometryAttributes = geometry.attributes;
        const programAttributes = program.getAttributes();
        const materialDefaultAttributeValues = material.defaultAttributeValues;
        for (const name in programAttributes) {
          const programAttribute = programAttributes[name];
          if (programAttribute.location >= 0) {
            let geometryAttribute = geometryAttributes[name];
            if (geometryAttribute === void 0) {
              if (name === "instanceMatrix" && object.instanceMatrix)
                geometryAttribute = object.instanceMatrix;
              if (name === "instanceColor" && object.instanceColor)
                geometryAttribute = object.instanceColor;
            }
            if (geometryAttribute !== void 0) {
              const normalized = geometryAttribute.normalized;
              const size = geometryAttribute.itemSize;
              const attribute = attributes.get(geometryAttribute);
              if (attribute === void 0)
                continue;
              const buffer = attribute.buffer;
              const type = attribute.type;
              const bytesPerElement = attribute.bytesPerElement;
              if (geometryAttribute.isInterleavedBufferAttribute) {
                const data = geometryAttribute.data;
                const stride = data.stride;
                const offset = geometryAttribute.offset;
                if (data.isInstancedInterleavedBuffer) {
                  for (let i = 0; i < programAttribute.locationSize; i++) {
                    enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                  }
                  if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                    geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                  }
                } else {
                  for (let i = 0; i < programAttribute.locationSize; i++) {
                    enableAttribute(programAttribute.location + i);
                  }
                }
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  vertexAttribPointer(
                    programAttribute.location + i,
                    size / programAttribute.locationSize,
                    type,
                    normalized,
                    stride * bytesPerElement,
                    (offset + size / programAttribute.locationSize * i) * bytesPerElement
                  );
                }
              } else {
                if (geometryAttribute.isInstancedBufferAttribute) {
                  for (let i = 0; i < programAttribute.locationSize; i++) {
                    enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
                  }
                  if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                    geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                  }
                } else {
                  for (let i = 0; i < programAttribute.locationSize; i++) {
                    enableAttribute(programAttribute.location + i);
                  }
                }
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  vertexAttribPointer(
                    programAttribute.location + i,
                    size / programAttribute.locationSize,
                    type,
                    normalized,
                    size * bytesPerElement,
                    size / programAttribute.locationSize * i * bytesPerElement
                  );
                }
              }
            } else if (materialDefaultAttributeValues !== void 0) {
              const value = materialDefaultAttributeValues[name];
              if (value !== void 0) {
                switch (value.length) {
                  case 2:
                    gl.vertexAttrib2fv(programAttribute.location, value);
                    break;
                  case 3:
                    gl.vertexAttrib3fv(programAttribute.location, value);
                    break;
                  case 4:
                    gl.vertexAttrib4fv(programAttribute.location, value);
                    break;
                  default:
                    gl.vertexAttrib1fv(programAttribute.location, value);
                }
              }
            }
          }
        }
        disableUnusedAttributes();
      }
      function dispose() {
        reset();
        for (const geometryId in bindingStates) {
          const programMap = bindingStates[geometryId];
          for (const programId in programMap) {
            const stateMap = programMap[programId];
            for (const wireframe in stateMap) {
              deleteVertexArrayObject(stateMap[wireframe].object);
              delete stateMap[wireframe];
            }
            delete programMap[programId];
          }
          delete bindingStates[geometryId];
        }
      }
      function releaseStatesOfGeometry(geometry) {
        if (bindingStates[geometry.id] === void 0)
          return;
        const programMap = bindingStates[geometry.id];
        for (const programId in programMap) {
          const stateMap = programMap[programId];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[programId];
        }
        delete bindingStates[geometry.id];
      }
      function releaseStatesOfProgram(program) {
        for (const geometryId in bindingStates) {
          const programMap = bindingStates[geometryId];
          if (programMap[program.id] === void 0)
            continue;
          const stateMap = programMap[program.id];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[program.id];
        }
      }
      function reset() {
        resetDefaultState();
        forceUpdate = true;
        if (currentState === defaultState)
          return;
        currentState = defaultState;
        bindVertexArrayObject(currentState.object);
      }
      function resetDefaultState() {
        defaultState.geometry = null;
        defaultState.program = null;
        defaultState.wireframe = false;
      }
      return {
        setup,
        reset,
        resetDefaultState,
        dispose,
        releaseStatesOfGeometry,
        releaseStatesOfProgram,
        initAttributes,
        enableAttribute,
        disableUnusedAttributes
      };
    }
    function WebGLBufferRenderer(gl, extensions, info, capabilities) {
      const isWebGL2 = capabilities.isWebGL2;
      let mode;
      function setMode(value) {
        mode = value;
      }
      function render(start, count) {
        gl.drawArrays(mode, start, count);
        info.update(count, mode, 1);
      }
      function renderInstances(start, count, primcount) {
        if (primcount === 0)
          return;
        let extension, methodName;
        if (isWebGL2) {
          extension = gl;
          methodName = "drawArraysInstanced";
        } else {
          extension = extensions.get("ANGLE_instanced_arrays");
          methodName = "drawArraysInstancedANGLE";
          if (extension === null) {
            console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
          }
        }
        extension[methodName](mode, start, count, primcount);
        info.update(count, mode, primcount);
      }
      this.setMode = setMode;
      this.render = render;
      this.renderInstances = renderInstances;
    }
    function WebGLCapabilities(gl, extensions, parameters) {
      let maxAnisotropy;
      function getMaxAnisotropy() {
        if (maxAnisotropy !== void 0)
          return maxAnisotropy;
        if (extensions.has("EXT_texture_filter_anisotropic") === true) {
          const extension = extensions.get("EXT_texture_filter_anisotropic");
          maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else {
          maxAnisotropy = 0;
        }
        return maxAnisotropy;
      }
      function getMaxPrecision(precision2) {
        if (precision2 === "highp") {
          if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
            return "highp";
          }
          precision2 = "mediump";
        }
        if (precision2 === "mediump") {
          if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
            return "mediump";
          }
        }
        return "lowp";
      }
      const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl.constructor.name === "WebGL2RenderingContext";
      let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
      const maxPrecision = getMaxPrecision(precision);
      if (maxPrecision !== precision) {
        console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
        precision = maxPrecision;
      }
      const drawBuffers = isWebGL2 || extensions.has("WEBGL_draw_buffers");
      const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
      const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
      const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
      const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
      const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
      const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
      const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
      const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
      const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
      const vertexTextures = maxVertexTextures > 0;
      const floatFragmentTextures = isWebGL2 || extensions.has("OES_texture_float");
      const floatVertexTextures = vertexTextures && floatFragmentTextures;
      const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;
      return {
        isWebGL2,
        drawBuffers,
        getMaxAnisotropy,
        getMaxPrecision,
        precision,
        logarithmicDepthBuffer,
        maxTextures,
        maxVertexTextures,
        maxTextureSize,
        maxCubemapSize,
        maxAttributes,
        maxVertexUniforms,
        maxVaryings,
        maxFragmentUniforms,
        vertexTextures,
        floatFragmentTextures,
        floatVertexTextures,
        maxSamples
      };
    }
    function WebGLClipping(properties) {
      const scope = this;
      let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
      const plane = new Plane(), viewNormalMatrix = new Matrix32(), uniform = { value: null, needsUpdate: false };
      this.uniform = uniform;
      this.numPlanes = 0;
      this.numIntersection = 0;
      this.init = function(planes, enableLocalClipping) {
        const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
        // run another frame in order to reset the state:
        numGlobalPlanes !== 0 || localClippingEnabled;
        localClippingEnabled = enableLocalClipping;
        numGlobalPlanes = planes.length;
        return enabled;
      };
      this.beginShadows = function() {
        renderingShadows = true;
        projectPlanes(null);
      };
      this.endShadows = function() {
        renderingShadows = false;
      };
      this.setGlobalState = function(planes, camera) {
        globalState = projectPlanes(planes, camera, 0);
      };
      this.setState = function(material, camera, useCache) {
        const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
        const materialProperties = properties.get(material);
        if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
          if (renderingShadows) {
            projectPlanes(null);
          } else {
            resetGlobalState();
          }
        } else {
          const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
          let dstArray = materialProperties.clippingState || null;
          uniform.value = dstArray;
          dstArray = projectPlanes(planes, camera, lGlobal, useCache);
          for (let i = 0; i !== lGlobal; ++i) {
            dstArray[i] = globalState[i];
          }
          materialProperties.clippingState = dstArray;
          this.numIntersection = clipIntersection ? this.numPlanes : 0;
          this.numPlanes += nGlobal;
        }
      };
      function resetGlobalState() {
        if (uniform.value !== globalState) {
          uniform.value = globalState;
          uniform.needsUpdate = numGlobalPlanes > 0;
        }
        scope.numPlanes = numGlobalPlanes;
        scope.numIntersection = 0;
      }
      function projectPlanes(planes, camera, dstOffset, skipTransform) {
        const nPlanes = planes !== null ? planes.length : 0;
        let dstArray = null;
        if (nPlanes !== 0) {
          dstArray = uniform.value;
          if (skipTransform !== true || dstArray === null) {
            const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
            viewNormalMatrix.getNormalMatrix(viewMatrix);
            if (dstArray === null || dstArray.length < flatSize) {
              dstArray = new Float32Array(flatSize);
            }
            for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
              plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
              plane.normal.toArray(dstArray, i4);
              dstArray[i4 + 3] = plane.constant;
            }
          }
          uniform.value = dstArray;
          uniform.needsUpdate = true;
        }
        scope.numPlanes = nPlanes;
        scope.numIntersection = 0;
        return dstArray;
      }
    }
    function WebGLCubeMaps(renderer) {
      let cubemaps = /* @__PURE__ */ new WeakMap();
      function mapTextureMapping(texture, mapping) {
        if (mapping === EquirectangularReflectionMapping2) {
          texture.mapping = CubeReflectionMapping;
        } else if (mapping === EquirectangularRefractionMapping) {
          texture.mapping = CubeRefractionMapping;
        }
        return texture;
      }
      function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
          const mapping = texture.mapping;
          if (mapping === EquirectangularReflectionMapping2 || mapping === EquirectangularRefractionMapping) {
            if (cubemaps.has(texture)) {
              const cubemap = cubemaps.get(texture).texture;
              return mapTextureMapping(cubemap, texture.mapping);
            } else {
              const image = texture.image;
              if (image && image.height > 0) {
                const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
                renderTarget.fromEquirectangularTexture(renderer, texture);
                cubemaps.set(texture, renderTarget);
                texture.addEventListener("dispose", onTextureDispose);
                return mapTextureMapping(renderTarget.texture, texture.mapping);
              } else {
                return null;
              }
            }
          }
        }
        return texture;
      }
      function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        const cubemap = cubemaps.get(texture);
        if (cubemap !== void 0) {
          cubemaps.delete(texture);
          cubemap.dispose();
        }
      }
      function dispose() {
        cubemaps = /* @__PURE__ */ new WeakMap();
      }
      return {
        get,
        dispose
      };
    }
    var OrthographicCamera2 = class extends Camera {
      constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
        super();
        this.isOrthographicCamera = true;
        this.type = "OrthographicCamera";
        this.zoom = 1;
        this.view = null;
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.near = near;
        this.far = far;
        this.updateProjectionMatrix();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.left = source.left;
        this.right = source.right;
        this.top = source.top;
        this.bottom = source.bottom;
        this.near = source.near;
        this.far = source.far;
        this.zoom = source.zoom;
        this.view = source.view === null ? null : Object.assign({}, source.view);
        return this;
      }
      setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        if (this.view === null) {
          this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
          };
        }
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
      }
      clearViewOffset() {
        if (this.view !== null) {
          this.view.enabled = false;
        }
        this.updateProjectionMatrix();
      }
      updateProjectionMatrix() {
        const dx = (this.right - this.left) / (2 * this.zoom);
        const dy = (this.top - this.bottom) / (2 * this.zoom);
        const cx = (this.right + this.left) / 2;
        const cy = (this.top + this.bottom) / 2;
        let left = cx - dx;
        let right = cx + dx;
        let top = cy + dy;
        let bottom = cy - dy;
        if (this.view !== null && this.view.enabled) {
          const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
          const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
          left += scaleW * this.view.offsetX;
          right = left + scaleW * this.view.width;
          top -= scaleH * this.view.offsetY;
          bottom = top - scaleH * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.zoom = this.zoom;
        data.object.left = this.left;
        data.object.right = this.right;
        data.object.top = this.top;
        data.object.bottom = this.bottom;
        data.object.near = this.near;
        data.object.far = this.far;
        if (this.view !== null)
          data.object.view = Object.assign({}, this.view);
        return data;
      }
    };
    var LOD_MIN = 4;
    var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
    var MAX_SAMPLES = 20;
    var _flatCamera = new OrthographicCamera2();
    var _clearColor = new Color2();
    var _oldTarget = null;
    var PHI = (1 + Math.sqrt(5)) / 2;
    var INV_PHI = 1 / PHI;
    var _axisDirections = [
      new Vector32(1, 1, 1),
      new Vector32(-1, 1, 1),
      new Vector32(1, 1, -1),
      new Vector32(-1, 1, -1),
      new Vector32(0, PHI, INV_PHI),
      new Vector32(0, PHI, -INV_PHI),
      new Vector32(INV_PHI, 0, PHI),
      new Vector32(-INV_PHI, 0, PHI),
      new Vector32(PHI, INV_PHI, 0),
      new Vector32(-PHI, INV_PHI, 0)
    ];
    var PMREMGenerator = class {
      constructor(renderer) {
        this._renderer = renderer;
        this._pingPongRenderTarget = null;
        this._lodMax = 0;
        this._cubeSize = 0;
        this._lodPlanes = [];
        this._sizeLods = [];
        this._sigmas = [];
        this._blurMaterial = null;
        this._cubemapMaterial = null;
        this._equirectMaterial = null;
        this._compileMaterial(this._blurMaterial);
      }
      /**
       * Generates a PMREM from a supplied Scene, which can be faster than using an
       * image if networking bandwidth is low. Optional sigma specifies a blur radius
       * in radians to be applied to the scene before PMREM generation. Optional near
       * and far planes ensure the scene is rendered in its entirety (the cubeCamera
       * is placed at the origin).
       */
      fromScene(scene, sigma = 0, near = 0.1, far = 100) {
        _oldTarget = this._renderer.getRenderTarget();
        this._setSize(256);
        const cubeUVRenderTarget = this._allocateTargets();
        cubeUVRenderTarget.depthBuffer = true;
        this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
        if (sigma > 0) {
          this._blur(cubeUVRenderTarget, 0, 0, sigma);
        }
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
      }
      /**
       * Generates a PMREM from an equirectangular texture, which can be either LDR
       * or HDR. The ideal input image size is 1k (1024 x 512),
       * as this matches best with the 256 x 256 cubemap output.
       */
      fromEquirectangular(equirectangular, renderTarget = null) {
        return this._fromTexture(equirectangular, renderTarget);
      }
      /**
       * Generates a PMREM from an cubemap texture, which can be either LDR
       * or HDR. The ideal input cube size is 256 x 256,
       * as this matches best with the 256 x 256 cubemap output.
       */
      fromCubemap(cubemap, renderTarget = null) {
        return this._fromTexture(cubemap, renderTarget);
      }
      /**
       * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
       * your texture's network fetch for increased concurrency.
       */
      compileCubemapShader() {
        if (this._cubemapMaterial === null) {
          this._cubemapMaterial = _getCubemapMaterial();
          this._compileMaterial(this._cubemapMaterial);
        }
      }
      /**
       * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
       * your texture's network fetch for increased concurrency.
       */
      compileEquirectangularShader() {
        if (this._equirectMaterial === null) {
          this._equirectMaterial = _getEquirectMaterial();
          this._compileMaterial(this._equirectMaterial);
        }
      }
      /**
       * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
       * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
       * one of them will cause any others to also become unusable.
       */
      dispose() {
        this._dispose();
        if (this._cubemapMaterial !== null)
          this._cubemapMaterial.dispose();
        if (this._equirectMaterial !== null)
          this._equirectMaterial.dispose();
      }
      // private interface
      _setSize(cubeSize) {
        this._lodMax = Math.floor(Math.log2(cubeSize));
        this._cubeSize = Math.pow(2, this._lodMax);
      }
      _dispose() {
        if (this._blurMaterial !== null)
          this._blurMaterial.dispose();
        if (this._pingPongRenderTarget !== null)
          this._pingPongRenderTarget.dispose();
        for (let i = 0; i < this._lodPlanes.length; i++) {
          this._lodPlanes[i].dispose();
        }
      }
      _cleanup(outputTarget) {
        this._renderer.setRenderTarget(_oldTarget);
        outputTarget.scissorTest = false;
        _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
      }
      _fromTexture(texture, renderTarget) {
        if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
          this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
        } else {
          this._setSize(texture.image.width / 4);
        }
        _oldTarget = this._renderer.getRenderTarget();
        const cubeUVRenderTarget = renderTarget || this._allocateTargets();
        this._textureToCubeUV(texture, cubeUVRenderTarget);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
      }
      _allocateTargets() {
        const width = 3 * Math.max(this._cubeSize, 16 * 7);
        const height = 4 * this._cubeSize;
        const params = {
          magFilter: LinearFilter,
          minFilter: LinearFilter,
          generateMipmaps: false,
          type: HalfFloatType,
          format: RGBAFormat,
          encoding: LinearEncoding,
          depthBuffer: false
        };
        const cubeUVRenderTarget = _createRenderTarget(width, height, params);
        if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
          if (this._pingPongRenderTarget !== null) {
            this._dispose();
          }
          this._pingPongRenderTarget = _createRenderTarget(width, height, params);
          const { _lodMax } = this;
          ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
          this._blurMaterial = _getBlurShader(_lodMax, width, height);
        }
        return cubeUVRenderTarget;
      }
      _compileMaterial(material) {
        const tmpMesh = new Mesh2(this._lodPlanes[0], material);
        this._renderer.compile(tmpMesh, _flatCamera);
      }
      _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
        const fov2 = 90;
        const aspect2 = 1;
        const cubeCamera = new PerspectiveCamera2(fov2, aspect2, near, far);
        const upSign = [1, -1, 1, 1, 1, 1];
        const forwardSign = [1, 1, 1, -1, -1, -1];
        const renderer = this._renderer;
        const originalAutoClear = renderer.autoClear;
        const toneMapping = renderer.toneMapping;
        renderer.getClearColor(_clearColor);
        renderer.toneMapping = NoToneMapping;
        renderer.autoClear = false;
        const backgroundMaterial = new MeshBasicMaterial2({
          name: "PMREM.Background",
          side: BackSide,
          depthWrite: false,
          depthTest: false
        });
        const backgroundBox = new Mesh2(new BoxGeometry(), backgroundMaterial);
        let useSolidColor = false;
        const background = scene.background;
        if (background) {
          if (background.isColor) {
            backgroundMaterial.color.copy(background);
            scene.background = null;
            useSolidColor = true;
          }
        } else {
          backgroundMaterial.color.copy(_clearColor);
          useSolidColor = true;
        }
        for (let i = 0; i < 6; i++) {
          const col = i % 3;
          if (col === 0) {
            cubeCamera.up.set(0, upSign[i], 0);
            cubeCamera.lookAt(forwardSign[i], 0, 0);
          } else if (col === 1) {
            cubeCamera.up.set(0, 0, upSign[i]);
            cubeCamera.lookAt(0, forwardSign[i], 0);
          } else {
            cubeCamera.up.set(0, upSign[i], 0);
            cubeCamera.lookAt(0, 0, forwardSign[i]);
          }
          const size = this._cubeSize;
          _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
          renderer.setRenderTarget(cubeUVRenderTarget);
          if (useSolidColor) {
            renderer.render(backgroundBox, cubeCamera);
          }
          renderer.render(scene, cubeCamera);
        }
        backgroundBox.geometry.dispose();
        backgroundBox.material.dispose();
        renderer.toneMapping = toneMapping;
        renderer.autoClear = originalAutoClear;
        scene.background = background;
      }
      _textureToCubeUV(texture, cubeUVRenderTarget) {
        const renderer = this._renderer;
        const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
        if (isCubeTexture) {
          if (this._cubemapMaterial === null) {
            this._cubemapMaterial = _getCubemapMaterial();
          }
          this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
        } else {
          if (this._equirectMaterial === null) {
            this._equirectMaterial = _getEquirectMaterial();
          }
        }
        const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
        const mesh = new Mesh2(this._lodPlanes[0], material);
        const uniforms = material.uniforms;
        uniforms["envMap"].value = texture;
        const size = this._cubeSize;
        _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
        renderer.setRenderTarget(cubeUVRenderTarget);
        renderer.render(mesh, _flatCamera);
      }
      _applyPMREM(cubeUVRenderTarget) {
        const renderer = this._renderer;
        const autoClear = renderer.autoClear;
        renderer.autoClear = false;
        for (let i = 1; i < this._lodPlanes.length; i++) {
          const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
          const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
          this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
        }
        renderer.autoClear = autoClear;
      }
      /**
       * This is a two-pass Gaussian blur for a cubemap. Normally this is done
       * vertically and horizontally, but this breaks down on a cube. Here we apply
       * the blur latitudinally (around the poles), and then longitudinally (towards
       * the poles) to approximate the orthogonally-separable blur. It is least
       * accurate at the poles, but still does a decent job.
       */
      _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
        const pingPongRenderTarget = this._pingPongRenderTarget;
        this._halfBlur(
          cubeUVRenderTarget,
          pingPongRenderTarget,
          lodIn,
          lodOut,
          sigma,
          "latitudinal",
          poleAxis
        );
        this._halfBlur(
          pingPongRenderTarget,
          cubeUVRenderTarget,
          lodOut,
          lodOut,
          sigma,
          "longitudinal",
          poleAxis
        );
      }
      _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
        const renderer = this._renderer;
        const blurMaterial = this._blurMaterial;
        if (direction !== "latitudinal" && direction !== "longitudinal") {
          console.error(
            "blur direction must be either latitudinal or longitudinal!"
          );
        }
        const STANDARD_DEVIATIONS = 3;
        const blurMesh = new Mesh2(this._lodPlanes[lodOut], blurMaterial);
        const blurUniforms = blurMaterial.uniforms;
        const pixels = this._sizeLods[lodIn] - 1;
        const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
        const sigmaPixels = sigmaRadians / radiansPerPixel;
        const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
        if (samples > MAX_SAMPLES) {
          console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
        }
        const weights = [];
        let sum = 0;
        for (let i = 0; i < MAX_SAMPLES; ++i) {
          const x2 = i / sigmaPixels;
          const weight = Math.exp(-x2 * x2 / 2);
          weights.push(weight);
          if (i === 0) {
            sum += weight;
          } else if (i < samples) {
            sum += 2 * weight;
          }
        }
        for (let i = 0; i < weights.length; i++) {
          weights[i] = weights[i] / sum;
        }
        blurUniforms["envMap"].value = targetIn.texture;
        blurUniforms["samples"].value = samples;
        blurUniforms["weights"].value = weights;
        blurUniforms["latitudinal"].value = direction === "latitudinal";
        if (poleAxis) {
          blurUniforms["poleAxis"].value = poleAxis;
        }
        const { _lodMax } = this;
        blurUniforms["dTheta"].value = radiansPerPixel;
        blurUniforms["mipInt"].value = _lodMax - lodIn;
        const outputSize = this._sizeLods[lodOut];
        const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
        const y = 4 * (this._cubeSize - outputSize);
        _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
        renderer.setRenderTarget(targetOut);
        renderer.render(blurMesh, _flatCamera);
      }
    };
    function _createPlanes(lodMax) {
      const lodPlanes = [];
      const sizeLods = [];
      const sigmas = [];
      let lod = lodMax;
      const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
      for (let i = 0; i < totalLods; i++) {
        const sizeLod = Math.pow(2, lod);
        sizeLods.push(sizeLod);
        let sigma = 1 / sizeLod;
        if (i > lodMax - LOD_MIN) {
          sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
        } else if (i === 0) {
          sigma = 0;
        }
        sigmas.push(sigma);
        const texelSize = 1 / (sizeLod - 2);
        const min = -texelSize;
        const max2 = 1 + texelSize;
        const uv1 = [min, min, max2, min, max2, max2, min, min, max2, max2, min, max2];
        const cubeFaces = 6;
        const vertices = 6;
        const positionSize = 3;
        const uvSize = 2;
        const faceIndexSize = 1;
        const position = new Float32Array(positionSize * vertices * cubeFaces);
        const uv = new Float32Array(uvSize * vertices * cubeFaces);
        const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
        for (let face = 0; face < cubeFaces; face++) {
          const x = face % 3 * 2 / 3 - 1;
          const y = face > 2 ? 0 : -1;
          const coordinates = [
            x,
            y,
            0,
            x + 2 / 3,
            y,
            0,
            x + 2 / 3,
            y + 1,
            0,
            x,
            y,
            0,
            x + 2 / 3,
            y + 1,
            0,
            x,
            y + 1,
            0
          ];
          position.set(coordinates, positionSize * vertices * face);
          uv.set(uv1, uvSize * vertices * face);
          const fill = [face, face, face, face, face, face];
          faceIndex.set(fill, faceIndexSize * vertices * face);
        }
        const planes = new BufferGeometry2();
        planes.setAttribute("position", new BufferAttribute(position, positionSize));
        planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
        planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
        lodPlanes.push(planes);
        if (lod > LOD_MIN) {
          lod--;
        }
      }
      return { lodPlanes, sizeLods, sigmas };
    }
    function _createRenderTarget(width, height, params) {
      const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
      cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
      cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
      cubeUVRenderTarget.scissorTest = true;
      return cubeUVRenderTarget;
    }
    function _setViewport(target, x, y, width, height) {
      target.viewport.set(x, y, width, height);
      target.scissor.set(x, y, width, height);
    }
    function _getBlurShader(lodMax, width, height) {
      const weights = new Float32Array(MAX_SAMPLES);
      const poleAxis = new Vector32(0, 1, 0);
      const shaderMaterial = new ShaderMaterial({
        name: "SphericalGaussianBlur",
        defines: {
          "n": MAX_SAMPLES,
          "CUBEUV_TEXEL_WIDTH": 1 / width,
          "CUBEUV_TEXEL_HEIGHT": 1 / height,
          "CUBEUV_MAX_MIP": `${lodMax}.0`
        },
        uniforms: {
          "envMap": { value: null },
          "samples": { value: 1 },
          "weights": { value: weights },
          "latitudinal": { value: false },
          "dTheta": { value: 0 },
          "mipInt": { value: 0 },
          "poleAxis": { value: poleAxis }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: (
          /* glsl */
          `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
        ),
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
      });
      return shaderMaterial;
    }
    function _getEquirectMaterial() {
      return new ShaderMaterial({
        name: "EquirectangularToCubeUV",
        uniforms: {
          "envMap": { value: null }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: (
          /* glsl */
          `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
        ),
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
      });
    }
    function _getCubemapMaterial() {
      return new ShaderMaterial({
        name: "CubemapToCubeUV",
        uniforms: {
          "envMap": { value: null },
          "flipEnvMap": { value: -1 }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: (
          /* glsl */
          `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
        ),
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
      });
    }
    function _getCommonVertexShader() {
      return (
        /* glsl */
        `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
      );
    }
    function WebGLCubeUVMaps(renderer) {
      let cubeUVmaps = /* @__PURE__ */ new WeakMap();
      let pmremGenerator = null;
      function get(texture) {
        if (texture && texture.isTexture) {
          const mapping = texture.mapping;
          const isEquirectMap = mapping === EquirectangularReflectionMapping2 || mapping === EquirectangularRefractionMapping;
          const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
          if (isEquirectMap || isCubeMap) {
            if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
              texture.needsPMREMUpdate = false;
              let renderTarget = cubeUVmaps.get(texture);
              if (pmremGenerator === null)
                pmremGenerator = new PMREMGenerator(renderer);
              renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
              cubeUVmaps.set(texture, renderTarget);
              return renderTarget.texture;
            } else {
              if (cubeUVmaps.has(texture)) {
                return cubeUVmaps.get(texture).texture;
              } else {
                const image = texture.image;
                if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                  if (pmremGenerator === null)
                    pmremGenerator = new PMREMGenerator(renderer);
                  const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                  cubeUVmaps.set(texture, renderTarget);
                  texture.addEventListener("dispose", onTextureDispose);
                  return renderTarget.texture;
                } else {
                  return null;
                }
              }
            }
          }
        }
        return texture;
      }
      function isCubeTextureComplete(image) {
        let count = 0;
        const length = 6;
        for (let i = 0; i < length; i++) {
          if (image[i] !== void 0)
            count++;
        }
        return count === length;
      }
      function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        const cubemapUV = cubeUVmaps.get(texture);
        if (cubemapUV !== void 0) {
          cubeUVmaps.delete(texture);
          cubemapUV.dispose();
        }
      }
      function dispose() {
        cubeUVmaps = /* @__PURE__ */ new WeakMap();
        if (pmremGenerator !== null) {
          pmremGenerator.dispose();
          pmremGenerator = null;
        }
      }
      return {
        get,
        dispose
      };
    }
    function WebGLExtensions(gl) {
      const extensions = {};
      function getExtension(name) {
        if (extensions[name] !== void 0) {
          return extensions[name];
        }
        let extension;
        switch (name) {
          case "WEBGL_depth_texture":
            extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
            break;
          case "EXT_texture_filter_anisotropic":
            extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
            break;
          case "WEBGL_compressed_texture_s3tc":
            extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
            break;
          case "WEBGL_compressed_texture_pvrtc":
            extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
            break;
          default:
            extension = gl.getExtension(name);
        }
        extensions[name] = extension;
        return extension;
      }
      return {
        has: function(name) {
          return getExtension(name) !== null;
        },
        init: function(capabilities) {
          if (capabilities.isWebGL2) {
            getExtension("EXT_color_buffer_float");
          } else {
            getExtension("WEBGL_depth_texture");
            getExtension("OES_texture_float");
            getExtension("OES_texture_half_float");
            getExtension("OES_texture_half_float_linear");
            getExtension("OES_standard_derivatives");
            getExtension("OES_element_index_uint");
            getExtension("OES_vertex_array_object");
            getExtension("ANGLE_instanced_arrays");
          }
          getExtension("OES_texture_float_linear");
          getExtension("EXT_color_buffer_half_float");
          getExtension("WEBGL_multisampled_render_to_texture");
        },
        get: function(name) {
          const extension = getExtension(name);
          if (extension === null) {
            console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
          }
          return extension;
        }
      };
    }
    function WebGLGeometries(gl, attributes, info, bindingStates) {
      const geometries = {};
      const wireframeAttributes = /* @__PURE__ */ new WeakMap();
      function onGeometryDispose(event) {
        const geometry = event.target;
        if (geometry.index !== null) {
          attributes.remove(geometry.index);
        }
        for (const name in geometry.attributes) {
          attributes.remove(geometry.attributes[name]);
        }
        geometry.removeEventListener("dispose", onGeometryDispose);
        delete geometries[geometry.id];
        const attribute = wireframeAttributes.get(geometry);
        if (attribute) {
          attributes.remove(attribute);
          wireframeAttributes.delete(geometry);
        }
        bindingStates.releaseStatesOfGeometry(geometry);
        if (geometry.isInstancedBufferGeometry === true) {
          delete geometry._maxInstanceCount;
        }
        info.memory.geometries--;
      }
      function get(object, geometry) {
        if (geometries[geometry.id] === true)
          return geometry;
        geometry.addEventListener("dispose", onGeometryDispose);
        geometries[geometry.id] = true;
        info.memory.geometries++;
        return geometry;
      }
      function update(geometry) {
        const geometryAttributes = geometry.attributes;
        for (const name in geometryAttributes) {
          attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
        }
        const morphAttributes = geometry.morphAttributes;
        for (const name in morphAttributes) {
          const array = morphAttributes[name];
          for (let i = 0, l = array.length; i < l; i++) {
            attributes.update(array[i], gl.ARRAY_BUFFER);
          }
        }
      }
      function updateWireframeAttribute(geometry) {
        const indices = [];
        const geometryIndex = geometry.index;
        const geometryPosition = geometry.attributes.position;
        let version = 0;
        if (geometryIndex !== null) {
          const array = geometryIndex.array;
          version = geometryIndex.version;
          for (let i = 0, l = array.length; i < l; i += 3) {
            const a = array[i + 0];
            const b = array[i + 1];
            const c = array[i + 2];
            indices.push(a, b, b, c, c, a);
          }
        } else {
          const array = geometryPosition.array;
          version = geometryPosition.version;
          for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
            const a = i + 0;
            const b = i + 1;
            const c = i + 2;
            indices.push(a, b, b, c, c, a);
          }
        }
        const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute2)(indices, 1);
        attribute.version = version;
        const previousAttribute = wireframeAttributes.get(geometry);
        if (previousAttribute)
          attributes.remove(previousAttribute);
        wireframeAttributes.set(geometry, attribute);
      }
      function getWireframeAttribute(geometry) {
        const currentAttribute = wireframeAttributes.get(geometry);
        if (currentAttribute) {
          const geometryIndex = geometry.index;
          if (geometryIndex !== null) {
            if (currentAttribute.version < geometryIndex.version) {
              updateWireframeAttribute(geometry);
            }
          }
        } else {
          updateWireframeAttribute(geometry);
        }
        return wireframeAttributes.get(geometry);
      }
      return {
        get,
        update,
        getWireframeAttribute
      };
    }
    function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
      const isWebGL2 = capabilities.isWebGL2;
      let mode;
      function setMode(value) {
        mode = value;
      }
      let type, bytesPerElement;
      function setIndex(value) {
        type = value.type;
        bytesPerElement = value.bytesPerElement;
      }
      function render(start, count) {
        gl.drawElements(mode, count, type, start * bytesPerElement);
        info.update(count, mode, 1);
      }
      function renderInstances(start, count, primcount) {
        if (primcount === 0)
          return;
        let extension, methodName;
        if (isWebGL2) {
          extension = gl;
          methodName = "drawElementsInstanced";
        } else {
          extension = extensions.get("ANGLE_instanced_arrays");
          methodName = "drawElementsInstancedANGLE";
          if (extension === null) {
            console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            return;
          }
        }
        extension[methodName](mode, count, type, start * bytesPerElement, primcount);
        info.update(count, mode, primcount);
      }
      this.setMode = setMode;
      this.setIndex = setIndex;
      this.render = render;
      this.renderInstances = renderInstances;
    }
    function WebGLInfo(gl) {
      const memory = {
        geometries: 0,
        textures: 0
      };
      const render = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
      };
      function update(count, mode, instanceCount) {
        render.calls++;
        switch (mode) {
          case gl.TRIANGLES:
            render.triangles += instanceCount * (count / 3);
            break;
          case gl.LINES:
            render.lines += instanceCount * (count / 2);
            break;
          case gl.LINE_STRIP:
            render.lines += instanceCount * (count - 1);
            break;
          case gl.LINE_LOOP:
            render.lines += instanceCount * count;
            break;
          case gl.POINTS:
            render.points += instanceCount * count;
            break;
          default:
            console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
            break;
        }
      }
      function reset() {
        render.frame++;
        render.calls = 0;
        render.triangles = 0;
        render.points = 0;
        render.lines = 0;
      }
      return {
        memory,
        render,
        programs: null,
        autoReset: true,
        reset,
        update
      };
    }
    function numericalSort(a, b) {
      return a[0] - b[0];
    }
    function absNumericalSort(a, b) {
      return Math.abs(b[1]) - Math.abs(a[1]);
    }
    function WebGLMorphtargets(gl, capabilities, textures) {
      const influencesList = {};
      const morphInfluences = new Float32Array(8);
      const morphTextures = /* @__PURE__ */ new WeakMap();
      const morph = new Vector42();
      const workInfluences = [];
      for (let i = 0; i < 8; i++) {
        workInfluences[i] = [i, 0];
      }
      function update(object, geometry, program) {
        const objectInfluences = object.morphTargetInfluences;
        if (capabilities.isWebGL2 === true) {
          const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
          const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
          let entry = morphTextures.get(geometry);
          if (entry === void 0 || entry.count !== morphTargetsCount) {
            let disposeTexture = function() {
              texture.dispose();
              morphTextures.delete(geometry);
              geometry.removeEventListener("dispose", disposeTexture);
            };
            if (entry !== void 0)
              entry.texture.dispose();
            const hasMorphPosition = geometry.morphAttributes.position !== void 0;
            const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
            const hasMorphColors = geometry.morphAttributes.color !== void 0;
            const morphTargets = geometry.morphAttributes.position || [];
            const morphNormals = geometry.morphAttributes.normal || [];
            const morphColors = geometry.morphAttributes.color || [];
            let vertexDataCount = 0;
            if (hasMorphPosition === true)
              vertexDataCount = 1;
            if (hasMorphNormals === true)
              vertexDataCount = 2;
            if (hasMorphColors === true)
              vertexDataCount = 3;
            let width = geometry.attributes.position.count * vertexDataCount;
            let height = 1;
            if (width > capabilities.maxTextureSize) {
              height = Math.ceil(width / capabilities.maxTextureSize);
              width = capabilities.maxTextureSize;
            }
            const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
            const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
            texture.type = FloatType;
            texture.needsUpdate = true;
            const vertexDataStride = vertexDataCount * 4;
            for (let i = 0; i < morphTargetsCount; i++) {
              const morphTarget = morphTargets[i];
              const morphNormal = morphNormals[i];
              const morphColor = morphColors[i];
              const offset = width * height * 4 * i;
              for (let j = 0; j < morphTarget.count; j++) {
                const stride = j * vertexDataStride;
                if (hasMorphPosition === true) {
                  morph.fromBufferAttribute(morphTarget, j);
                  buffer[offset + stride + 0] = morph.x;
                  buffer[offset + stride + 1] = morph.y;
                  buffer[offset + stride + 2] = morph.z;
                  buffer[offset + stride + 3] = 0;
                }
                if (hasMorphNormals === true) {
                  morph.fromBufferAttribute(morphNormal, j);
                  buffer[offset + stride + 4] = morph.x;
                  buffer[offset + stride + 5] = morph.y;
                  buffer[offset + stride + 6] = morph.z;
                  buffer[offset + stride + 7] = 0;
                }
                if (hasMorphColors === true) {
                  morph.fromBufferAttribute(morphColor, j);
                  buffer[offset + stride + 8] = morph.x;
                  buffer[offset + stride + 9] = morph.y;
                  buffer[offset + stride + 10] = morph.z;
                  buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
                }
              }
            }
            entry = {
              count: morphTargetsCount,
              texture,
              size: new Vector22(width, height)
            };
            morphTextures.set(geometry, entry);
            geometry.addEventListener("dispose", disposeTexture);
          }
          let morphInfluencesSum = 0;
          for (let i = 0; i < objectInfluences.length; i++) {
            morphInfluencesSum += objectInfluences[i];
          }
          const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
          program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
          program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
          program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
          program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
        } else {
          const length = objectInfluences === void 0 ? 0 : objectInfluences.length;
          let influences = influencesList[geometry.id];
          if (influences === void 0 || influences.length !== length) {
            influences = [];
            for (let i = 0; i < length; i++) {
              influences[i] = [i, 0];
            }
            influencesList[geometry.id] = influences;
          }
          for (let i = 0; i < length; i++) {
            const influence = influences[i];
            influence[0] = i;
            influence[1] = objectInfluences[i];
          }
          influences.sort(absNumericalSort);
          for (let i = 0; i < 8; i++) {
            if (i < length && influences[i][1]) {
              workInfluences[i][0] = influences[i][0];
              workInfluences[i][1] = influences[i][1];
            } else {
              workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
              workInfluences[i][1] = 0;
            }
          }
          workInfluences.sort(numericalSort);
          const morphTargets = geometry.morphAttributes.position;
          const morphNormals = geometry.morphAttributes.normal;
          let morphInfluencesSum = 0;
          for (let i = 0; i < 8; i++) {
            const influence = workInfluences[i];
            const index = influence[0];
            const value = influence[1];
            if (index !== Number.MAX_SAFE_INTEGER && value) {
              if (morphTargets && geometry.getAttribute("morphTarget" + i) !== morphTargets[index]) {
                geometry.setAttribute("morphTarget" + i, morphTargets[index]);
              }
              if (morphNormals && geometry.getAttribute("morphNormal" + i) !== morphNormals[index]) {
                geometry.setAttribute("morphNormal" + i, morphNormals[index]);
              }
              morphInfluences[i] = value;
              morphInfluencesSum += value;
            } else {
              if (morphTargets && geometry.hasAttribute("morphTarget" + i) === true) {
                geometry.deleteAttribute("morphTarget" + i);
              }
              if (morphNormals && geometry.hasAttribute("morphNormal" + i) === true) {
                geometry.deleteAttribute("morphNormal" + i);
              }
              morphInfluences[i] = 0;
            }
          }
          const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
          program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
          program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
        }
      }
      return {
        update
      };
    }
    function WebGLObjects(gl, geometries, attributes, info) {
      let updateMap = /* @__PURE__ */ new WeakMap();
      function update(object) {
        const frame = info.render.frame;
        const geometry = object.geometry;
        const buffergeometry = geometries.get(object, geometry);
        if (updateMap.get(buffergeometry) !== frame) {
          geometries.update(buffergeometry);
          updateMap.set(buffergeometry, frame);
        }
        if (object.isInstancedMesh) {
          if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) {
            object.addEventListener("dispose", onInstancedMeshDispose);
          }
          attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
          if (object.instanceColor !== null) {
            attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
          }
        }
        return buffergeometry;
      }
      function dispose() {
        updateMap = /* @__PURE__ */ new WeakMap();
      }
      function onInstancedMeshDispose(event) {
        const instancedMesh = event.target;
        instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
        attributes.remove(instancedMesh.instanceMatrix);
        if (instancedMesh.instanceColor !== null)
          attributes.remove(instancedMesh.instanceColor);
      }
      return {
        update,
        dispose
      };
    }
    var emptyTexture = new Texture2();
    var emptyArrayTexture = new DataArrayTexture();
    var empty3dTexture = new Data3DTexture();
    var emptyCubeTexture = new CubeTexture();
    var arrayCacheF32 = [];
    var arrayCacheI32 = [];
    var mat4array = new Float32Array(16);
    var mat3array = new Float32Array(9);
    var mat2array = new Float32Array(4);
    function flatten(array, nBlocks, blockSize) {
      const firstElem = array[0];
      if (firstElem <= 0 || firstElem > 0)
        return array;
      const n = nBlocks * blockSize;
      let r = arrayCacheF32[n];
      if (r === void 0) {
        r = new Float32Array(n);
        arrayCacheF32[n] = r;
      }
      if (nBlocks !== 0) {
        firstElem.toArray(r, 0);
        for (let i = 1, offset = 0; i !== nBlocks; ++i) {
          offset += blockSize;
          array[i].toArray(r, offset);
        }
      }
      return r;
    }
    function arraysEqual(a, b) {
      if (a.length !== b.length)
        return false;
      for (let i = 0, l = a.length; i < l; i++) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    }
    function copyArray(a, b) {
      for (let i = 0, l = b.length; i < l; i++) {
        a[i] = b[i];
      }
    }
    function allocTexUnits(textures, n) {
      let r = arrayCacheI32[n];
      if (r === void 0) {
        r = new Int32Array(n);
        arrayCacheI32[n] = r;
      }
      for (let i = 0; i !== n; ++i) {
        r[i] = textures.allocateTextureUnit();
      }
      return r;
    }
    function setValueV1f(gl, v) {
      const cache = this.cache;
      if (cache[0] === v)
        return;
      gl.uniform1f(this.addr, v);
      cache[0] = v;
    }
    function setValueV2f(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
          gl.uniform2f(this.addr, v.x, v.y);
          cache[0] = v.x;
          cache[1] = v.y;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform2fv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueV3f(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
          gl.uniform3f(this.addr, v.x, v.y, v.z);
          cache[0] = v.x;
          cache[1] = v.y;
          cache[2] = v.z;
        }
      } else if (v.r !== void 0) {
        if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
          gl.uniform3f(this.addr, v.r, v.g, v.b);
          cache[0] = v.r;
          cache[1] = v.g;
          cache[2] = v.b;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform3fv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueV4f(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
          gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
          cache[0] = v.x;
          cache[1] = v.y;
          cache[2] = v.z;
          cache[3] = v.w;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform4fv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueM2(gl, v) {
      const cache = this.cache;
      const elements = v.elements;
      if (elements === void 0) {
        if (arraysEqual(cache, v))
          return;
        gl.uniformMatrix2fv(this.addr, false, v);
        copyArray(cache, v);
      } else {
        if (arraysEqual(cache, elements))
          return;
        mat2array.set(elements);
        gl.uniformMatrix2fv(this.addr, false, mat2array);
        copyArray(cache, elements);
      }
    }
    function setValueM3(gl, v) {
      const cache = this.cache;
      const elements = v.elements;
      if (elements === void 0) {
        if (arraysEqual(cache, v))
          return;
        gl.uniformMatrix3fv(this.addr, false, v);
        copyArray(cache, v);
      } else {
        if (arraysEqual(cache, elements))
          return;
        mat3array.set(elements);
        gl.uniformMatrix3fv(this.addr, false, mat3array);
        copyArray(cache, elements);
      }
    }
    function setValueM4(gl, v) {
      const cache = this.cache;
      const elements = v.elements;
      if (elements === void 0) {
        if (arraysEqual(cache, v))
          return;
        gl.uniformMatrix4fv(this.addr, false, v);
        copyArray(cache, v);
      } else {
        if (arraysEqual(cache, elements))
          return;
        mat4array.set(elements);
        gl.uniformMatrix4fv(this.addr, false, mat4array);
        copyArray(cache, elements);
      }
    }
    function setValueV1i(gl, v) {
      const cache = this.cache;
      if (cache[0] === v)
        return;
      gl.uniform1i(this.addr, v);
      cache[0] = v;
    }
    function setValueV2i(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
          gl.uniform2i(this.addr, v.x, v.y);
          cache[0] = v.x;
          cache[1] = v.y;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform2iv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueV3i(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
          gl.uniform3i(this.addr, v.x, v.y, v.z);
          cache[0] = v.x;
          cache[1] = v.y;
          cache[2] = v.z;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform3iv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueV4i(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
          gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
          cache[0] = v.x;
          cache[1] = v.y;
          cache[2] = v.z;
          cache[3] = v.w;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform4iv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueV1ui(gl, v) {
      const cache = this.cache;
      if (cache[0] === v)
        return;
      gl.uniform1ui(this.addr, v);
      cache[0] = v;
    }
    function setValueV2ui(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
          gl.uniform2ui(this.addr, v.x, v.y);
          cache[0] = v.x;
          cache[1] = v.y;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform2uiv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueV3ui(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
          gl.uniform3ui(this.addr, v.x, v.y, v.z);
          cache[0] = v.x;
          cache[1] = v.y;
          cache[2] = v.z;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform3uiv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueV4ui(gl, v) {
      const cache = this.cache;
      if (v.x !== void 0) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
          gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
          cache[0] = v.x;
          cache[1] = v.y;
          cache[2] = v.z;
          cache[3] = v.w;
        }
      } else {
        if (arraysEqual(cache, v))
          return;
        gl.uniform4uiv(this.addr, v);
        copyArray(cache, v);
      }
    }
    function setValueT1(gl, v, textures) {
      const cache = this.cache;
      const unit = textures.allocateTextureUnit();
      if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
      }
      textures.setTexture2D(v || emptyTexture, unit);
    }
    function setValueT3D1(gl, v, textures) {
      const cache = this.cache;
      const unit = textures.allocateTextureUnit();
      if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
      }
      textures.setTexture3D(v || empty3dTexture, unit);
    }
    function setValueT6(gl, v, textures) {
      const cache = this.cache;
      const unit = textures.allocateTextureUnit();
      if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
      }
      textures.setTextureCube(v || emptyCubeTexture, unit);
    }
    function setValueT2DArray1(gl, v, textures) {
      const cache = this.cache;
      const unit = textures.allocateTextureUnit();
      if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
      }
      textures.setTexture2DArray(v || emptyArrayTexture, unit);
    }
    function getSingularSetter(type) {
      switch (type) {
        case 5126:
          return setValueV1f;
        case 35664:
          return setValueV2f;
        case 35665:
          return setValueV3f;
        case 35666:
          return setValueV4f;
        case 35674:
          return setValueM2;
        case 35675:
          return setValueM3;
        case 35676:
          return setValueM4;
        case 5124:
        case 35670:
          return setValueV1i;
        case 35667:
        case 35671:
          return setValueV2i;
        case 35668:
        case 35672:
          return setValueV3i;
        case 35669:
        case 35673:
          return setValueV4i;
        case 5125:
          return setValueV1ui;
        case 36294:
          return setValueV2ui;
        case 36295:
          return setValueV3ui;
        case 36296:
          return setValueV4ui;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
          return setValueT1;
        case 35679:
        case 36299:
        case 36307:
          return setValueT3D1;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
          return setValueT6;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
          return setValueT2DArray1;
      }
    }
    function setValueV1fArray(gl, v) {
      gl.uniform1fv(this.addr, v);
    }
    function setValueV2fArray(gl, v) {
      const data = flatten(v, this.size, 2);
      gl.uniform2fv(this.addr, data);
    }
    function setValueV3fArray(gl, v) {
      const data = flatten(v, this.size, 3);
      gl.uniform3fv(this.addr, data);
    }
    function setValueV4fArray(gl, v) {
      const data = flatten(v, this.size, 4);
      gl.uniform4fv(this.addr, data);
    }
    function setValueM2Array(gl, v) {
      const data = flatten(v, this.size, 4);
      gl.uniformMatrix2fv(this.addr, false, data);
    }
    function setValueM3Array(gl, v) {
      const data = flatten(v, this.size, 9);
      gl.uniformMatrix3fv(this.addr, false, data);
    }
    function setValueM4Array(gl, v) {
      const data = flatten(v, this.size, 16);
      gl.uniformMatrix4fv(this.addr, false, data);
    }
    function setValueV1iArray(gl, v) {
      gl.uniform1iv(this.addr, v);
    }
    function setValueV2iArray(gl, v) {
      gl.uniform2iv(this.addr, v);
    }
    function setValueV3iArray(gl, v) {
      gl.uniform3iv(this.addr, v);
    }
    function setValueV4iArray(gl, v) {
      gl.uniform4iv(this.addr, v);
    }
    function setValueV1uiArray(gl, v) {
      gl.uniform1uiv(this.addr, v);
    }
    function setValueV2uiArray(gl, v) {
      gl.uniform2uiv(this.addr, v);
    }
    function setValueV3uiArray(gl, v) {
      gl.uniform3uiv(this.addr, v);
    }
    function setValueV4uiArray(gl, v) {
      gl.uniform4uiv(this.addr, v);
    }
    function setValueT1Array(gl, v, textures) {
      const cache = this.cache;
      const n = v.length;
      const units = allocTexUnits(textures, n);
      if (!arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        copyArray(cache, units);
      }
      for (let i = 0; i !== n; ++i) {
        textures.setTexture2D(v[i] || emptyTexture, units[i]);
      }
    }
    function setValueT3DArray(gl, v, textures) {
      const cache = this.cache;
      const n = v.length;
      const units = allocTexUnits(textures, n);
      if (!arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        copyArray(cache, units);
      }
      for (let i = 0; i !== n; ++i) {
        textures.setTexture3D(v[i] || empty3dTexture, units[i]);
      }
    }
    function setValueT6Array(gl, v, textures) {
      const cache = this.cache;
      const n = v.length;
      const units = allocTexUnits(textures, n);
      if (!arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        copyArray(cache, units);
      }
      for (let i = 0; i !== n; ++i) {
        textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
      }
    }
    function setValueT2DArrayArray(gl, v, textures) {
      const cache = this.cache;
      const n = v.length;
      const units = allocTexUnits(textures, n);
      if (!arraysEqual(cache, units)) {
        gl.uniform1iv(this.addr, units);
        copyArray(cache, units);
      }
      for (let i = 0; i !== n; ++i) {
        textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
      }
    }
    function getPureArraySetter(type) {
      switch (type) {
        case 5126:
          return setValueV1fArray;
        case 35664:
          return setValueV2fArray;
        case 35665:
          return setValueV3fArray;
        case 35666:
          return setValueV4fArray;
        case 35674:
          return setValueM2Array;
        case 35675:
          return setValueM3Array;
        case 35676:
          return setValueM4Array;
        case 5124:
        case 35670:
          return setValueV1iArray;
        case 35667:
        case 35671:
          return setValueV2iArray;
        case 35668:
        case 35672:
          return setValueV3iArray;
        case 35669:
        case 35673:
          return setValueV4iArray;
        case 5125:
          return setValueV1uiArray;
        case 36294:
          return setValueV2uiArray;
        case 36295:
          return setValueV3uiArray;
        case 36296:
          return setValueV4uiArray;
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
          return setValueT1Array;
        case 35679:
        case 36299:
        case 36307:
          return setValueT3DArray;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
          return setValueT6Array;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
          return setValueT2DArrayArray;
      }
    }
    var SingleUniform = class {
      constructor(id2, activeInfo, addr) {
        this.id = id2;
        this.addr = addr;
        this.cache = [];
        this.setValue = getSingularSetter(activeInfo.type);
      }
    };
    var PureArrayUniform = class {
      constructor(id2, activeInfo, addr) {
        this.id = id2;
        this.addr = addr;
        this.cache = [];
        this.size = activeInfo.size;
        this.setValue = getPureArraySetter(activeInfo.type);
      }
    };
    var StructuredUniform = class {
      constructor(id2) {
        this.id = id2;
        this.seq = [];
        this.map = {};
      }
      setValue(gl, value, textures) {
        const seq = this.seq;
        for (let i = 0, n = seq.length; i !== n; ++i) {
          const u = seq[i];
          u.setValue(gl, value[u.id], textures);
        }
      }
    };
    var RePathPart = /(\w+)(\])?(\[|\.)?/g;
    function addUniform(container, uniformObject) {
      container.seq.push(uniformObject);
      container.map[uniformObject.id] = uniformObject;
    }
    function parseUniform(activeInfo, addr, container) {
      const path = activeInfo.name, pathLength = path.length;
      RePathPart.lastIndex = 0;
      while (true) {
        const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
        let id2 = match[1];
        const idIsIndex = match[2] === "]", subscript = match[3];
        if (idIsIndex)
          id2 = id2 | 0;
        if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
          addUniform(container, subscript === void 0 ? new SingleUniform(id2, activeInfo, addr) : new PureArrayUniform(id2, activeInfo, addr));
          break;
        } else {
          const map = container.map;
          let next = map[id2];
          if (next === void 0) {
            next = new StructuredUniform(id2);
            addUniform(container, next);
          }
          container = next;
        }
      }
    }
    var WebGLUniforms = class {
      constructor(gl, program) {
        this.seq = [];
        this.map = {};
        const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for (let i = 0; i < n; ++i) {
          const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
          parseUniform(info, addr, this);
        }
      }
      setValue(gl, name, value, textures) {
        const u = this.map[name];
        if (u !== void 0)
          u.setValue(gl, value, textures);
      }
      setOptional(gl, object, name) {
        const v = object[name];
        if (v !== void 0)
          this.setValue(gl, name, v);
      }
      static upload(gl, seq, values, textures) {
        for (let i = 0, n = seq.length; i !== n; ++i) {
          const u = seq[i], v = values[u.id];
          if (v.needsUpdate !== false) {
            u.setValue(gl, v.value, textures);
          }
        }
      }
      static seqWithValue(seq, values) {
        const r = [];
        for (let i = 0, n = seq.length; i !== n; ++i) {
          const u = seq[i];
          if (u.id in values)
            r.push(u);
        }
        return r;
      }
    };
    function WebGLShader(gl, type, string) {
      const shader = gl.createShader(type);
      gl.shaderSource(shader, string);
      gl.compileShader(shader);
      return shader;
    }
    var programIdCount = 0;
    function handleSource(string, errorLine) {
      const lines = string.split("\n");
      const lines2 = [];
      const from = Math.max(errorLine - 6, 0);
      const to = Math.min(errorLine + 6, lines.length);
      for (let i = from; i < to; i++) {
        const line = i + 1;
        lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
      }
      return lines2.join("\n");
    }
    function getEncodingComponents(encoding) {
      switch (encoding) {
        case LinearEncoding:
          return ["Linear", "( value )"];
        case sRGBEncoding2:
          return ["sRGB", "( value )"];
        default:
          console.warn("THREE.WebGLProgram: Unsupported encoding:", encoding);
          return ["Linear", "( value )"];
      }
    }
    function getShaderErrors(gl, shader, type) {
      const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
      const errors = gl.getShaderInfoLog(shader).trim();
      if (status && errors === "")
        return "";
      const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
      if (errorMatches) {
        const errorLine = parseInt(errorMatches[1]);
        return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
      } else {
        return errors;
      }
    }
    function getTexelEncodingFunction(functionName, encoding) {
      const components = getEncodingComponents(encoding);
      return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
    }
    function getToneMappingFunction(functionName, toneMapping) {
      let toneMappingName;
      switch (toneMapping) {
        case LinearToneMapping:
          toneMappingName = "Linear";
          break;
        case ReinhardToneMapping:
          toneMappingName = "Reinhard";
          break;
        case CineonToneMapping:
          toneMappingName = "OptimizedCineon";
          break;
        case ACESFilmicToneMapping:
          toneMappingName = "ACESFilmic";
          break;
        case CustomToneMapping:
          toneMappingName = "Custom";
          break;
        default:
          console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
          toneMappingName = "Linear";
      }
      return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
    }
    function generateExtensions(parameters) {
      const chunks = [
        parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
        (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
        parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
        (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
      ];
      return chunks.filter(filterEmptyLine).join("\n");
    }
    function generateDefines(defines) {
      const chunks = [];
      for (const name in defines) {
        const value = defines[name];
        if (value === false)
          continue;
        chunks.push("#define " + name + " " + value);
      }
      return chunks.join("\n");
    }
    function fetchAttributeLocations(gl, program) {
      const attributes = {};
      const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
      for (let i = 0; i < n; i++) {
        const info = gl.getActiveAttrib(program, i);
        const name = info.name;
        let locationSize = 1;
        if (info.type === gl.FLOAT_MAT2)
          locationSize = 2;
        if (info.type === gl.FLOAT_MAT3)
          locationSize = 3;
        if (info.type === gl.FLOAT_MAT4)
          locationSize = 4;
        attributes[name] = {
          type: info.type,
          location: gl.getAttribLocation(program, name),
          locationSize
        };
      }
      return attributes;
    }
    function filterEmptyLine(string) {
      return string !== "";
    }
    function replaceLightNums(string, parameters) {
      const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
      return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
    }
    function replaceClippingPlaneNums(string, parameters) {
      return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
    }
    var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
    function resolveIncludes(string) {
      return string.replace(includePattern, includeReplacer);
    }
    function includeReplacer(match, include) {
      const string = ShaderChunk[include];
      if (string === void 0) {
        throw new Error("Can not resolve #include <" + include + ">");
      }
      return resolveIncludes(string);
    }
    var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
    function unrollLoops(string) {
      return string.replace(unrollLoopPattern, loopReplacer);
    }
    function loopReplacer(match, start, end, snippet) {
      let string = "";
      for (let i = parseInt(start); i < parseInt(end); i++) {
        string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
      }
      return string;
    }
    function generatePrecision(parameters) {
      let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
      if (parameters.precision === "highp") {
        precisionstring += "\n#define HIGH_PRECISION";
      } else if (parameters.precision === "mediump") {
        precisionstring += "\n#define MEDIUM_PRECISION";
      } else if (parameters.precision === "lowp") {
        precisionstring += "\n#define LOW_PRECISION";
      }
      return precisionstring;
    }
    function generateShadowMapTypeDefine(parameters) {
      let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
      if (parameters.shadowMapType === PCFShadowMap) {
        shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
      } else if (parameters.shadowMapType === PCFSoftShadowMap) {
        shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
      } else if (parameters.shadowMapType === VSMShadowMap) {
        shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
      }
      return shadowMapTypeDefine;
    }
    function generateEnvMapTypeDefine(parameters) {
      let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
      if (parameters.envMap) {
        switch (parameters.envMapMode) {
          case CubeReflectionMapping:
          case CubeRefractionMapping:
            envMapTypeDefine = "ENVMAP_TYPE_CUBE";
            break;
          case CubeUVReflectionMapping:
            envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
            break;
        }
      }
      return envMapTypeDefine;
    }
    function generateEnvMapModeDefine(parameters) {
      let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
      if (parameters.envMap) {
        switch (parameters.envMapMode) {
          case CubeRefractionMapping:
            envMapModeDefine = "ENVMAP_MODE_REFRACTION";
            break;
        }
      }
      return envMapModeDefine;
    }
    function generateEnvMapBlendingDefine(parameters) {
      let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
      if (parameters.envMap) {
        switch (parameters.combine) {
          case MultiplyOperation:
            envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
            break;
          case MixOperation:
            envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
            break;
          case AddOperation:
            envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
            break;
        }
      }
      return envMapBlendingDefine;
    }
    function generateCubeUVSize(parameters) {
      const imageHeight = parameters.envMapCubeUVHeight;
      if (imageHeight === null)
        return null;
      const maxMip = Math.log2(imageHeight) - 2;
      const texelHeight = 1 / imageHeight;
      const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
      return { texelWidth, texelHeight, maxMip };
    }
    function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
      const gl = renderer.getContext();
      const defines = parameters.defines;
      let vertexShader = parameters.vertexShader;
      let fragmentShader = parameters.fragmentShader;
      const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
      const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
      const envMapModeDefine = generateEnvMapModeDefine(parameters);
      const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
      const envMapCubeUVSize = generateCubeUVSize(parameters);
      const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
      const customDefines = generateDefines(defines);
      const program = gl.createProgram();
      let prefixVertex, prefixFragment;
      let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
      if (parameters.isRawShaderMaterial) {
        prefixVertex = [
          customDefines
        ].filter(filterEmptyLine).join("\n");
        if (prefixVertex.length > 0) {
          prefixVertex += "\n";
        }
        prefixFragment = [
          customExtensions,
          customDefines
        ].filter(filterEmptyLine).join("\n");
        if (prefixFragment.length > 0) {
          prefixFragment += "\n";
        }
      } else {
        prefixVertex = [
          generatePrecision(parameters),
          "#define SHADER_NAME " + parameters.shaderName,
          customDefines,
          parameters.instancing ? "#define USE_INSTANCING" : "",
          parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
          parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
          parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
          parameters.map ? "#define USE_MAP" : "",
          parameters.envMap ? "#define USE_ENVMAP" : "",
          parameters.envMap ? "#define " + envMapModeDefine : "",
          parameters.lightMap ? "#define USE_LIGHTMAP" : "",
          parameters.aoMap ? "#define USE_AOMAP" : "",
          parameters.bumpMap ? "#define USE_BUMPMAP" : "",
          parameters.normalMap ? "#define USE_NORMALMAP" : "",
          parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
          parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
          parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
          parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
          parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
          parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
          parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
          parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
          parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
          parameters.specularMap ? "#define USE_SPECULARMAP" : "",
          parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
          parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
          parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
          parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
          parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
          parameters.transmission ? "#define USE_TRANSMISSION" : "",
          parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
          parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
          parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
          parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
          //
          parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
          parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
          parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
          parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
          parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
          parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
          parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
          parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
          parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
          parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
          parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
          parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
          parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
          parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
          parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
          parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
          parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
          parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
          parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
          parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
          parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
          parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
          //
          parameters.vertexTangents ? "#define USE_TANGENT" : "",
          parameters.vertexColors ? "#define USE_COLOR" : "",
          parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
          parameters.vertexUvs2 ? "#define USE_UV2" : "",
          parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
          parameters.flatShading ? "#define FLAT_SHADED" : "",
          parameters.skinning ? "#define USE_SKINNING" : "",
          parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
          parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
          parameters.morphColors && parameters.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
          parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
          parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
          parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
          parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
          parameters.flipSided ? "#define FLIP_SIDED" : "",
          parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
          parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
          parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
          parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
          parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
          "uniform mat4 modelMatrix;",
          "uniform mat4 modelViewMatrix;",
          "uniform mat4 projectionMatrix;",
          "uniform mat4 viewMatrix;",
          "uniform mat3 normalMatrix;",
          "uniform vec3 cameraPosition;",
          "uniform bool isOrthographic;",
          "#ifdef USE_INSTANCING",
          "	attribute mat4 instanceMatrix;",
          "#endif",
          "#ifdef USE_INSTANCING_COLOR",
          "	attribute vec3 instanceColor;",
          "#endif",
          "attribute vec3 position;",
          "attribute vec3 normal;",
          "attribute vec2 uv;",
          "#ifdef USE_TANGENT",
          "	attribute vec4 tangent;",
          "#endif",
          "#if defined( USE_COLOR_ALPHA )",
          "	attribute vec4 color;",
          "#elif defined( USE_COLOR )",
          "	attribute vec3 color;",
          "#endif",
          "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
          "	attribute vec3 morphTarget0;",
          "	attribute vec3 morphTarget1;",
          "	attribute vec3 morphTarget2;",
          "	attribute vec3 morphTarget3;",
          "	#ifdef USE_MORPHNORMALS",
          "		attribute vec3 morphNormal0;",
          "		attribute vec3 morphNormal1;",
          "		attribute vec3 morphNormal2;",
          "		attribute vec3 morphNormal3;",
          "	#else",
          "		attribute vec3 morphTarget4;",
          "		attribute vec3 morphTarget5;",
          "		attribute vec3 morphTarget6;",
          "		attribute vec3 morphTarget7;",
          "	#endif",
          "#endif",
          "#ifdef USE_SKINNING",
          "	attribute vec4 skinIndex;",
          "	attribute vec4 skinWeight;",
          "#endif",
          "\n"
        ].filter(filterEmptyLine).join("\n");
        prefixFragment = [
          customExtensions,
          generatePrecision(parameters),
          "#define SHADER_NAME " + parameters.shaderName,
          customDefines,
          parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
          parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
          parameters.map ? "#define USE_MAP" : "",
          parameters.matcap ? "#define USE_MATCAP" : "",
          parameters.envMap ? "#define USE_ENVMAP" : "",
          parameters.envMap ? "#define " + envMapTypeDefine : "",
          parameters.envMap ? "#define " + envMapModeDefine : "",
          parameters.envMap ? "#define " + envMapBlendingDefine : "",
          envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
          envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
          envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
          parameters.lightMap ? "#define USE_LIGHTMAP" : "",
          parameters.aoMap ? "#define USE_AOMAP" : "",
          parameters.bumpMap ? "#define USE_BUMPMAP" : "",
          parameters.normalMap ? "#define USE_NORMALMAP" : "",
          parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
          parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
          parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
          parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
          parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
          parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
          parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
          parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
          parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
          parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
          parameters.specularMap ? "#define USE_SPECULARMAP" : "",
          parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
          parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
          parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
          parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
          parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
          parameters.alphaTest ? "#define USE_ALPHATEST" : "",
          parameters.sheen ? "#define USE_SHEEN" : "",
          parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
          parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
          parameters.transmission ? "#define USE_TRANSMISSION" : "",
          parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
          parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
          parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
          parameters.vertexTangents ? "#define USE_TANGENT" : "",
          parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
          parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
          parameters.vertexUvs2 ? "#define USE_UV2" : "",
          parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
          parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
          parameters.flatShading ? "#define FLAT_SHADED" : "",
          parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
          parameters.flipSided ? "#define FLIP_SIDED" : "",
          parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
          parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
          parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
          parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
          parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
          parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
          "uniform mat4 viewMatrix;",
          "uniform vec3 cameraPosition;",
          "uniform bool isOrthographic;",
          parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
          parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
          // this code is required here because it is used by the toneMapping() function defined below
          parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
          parameters.dithering ? "#define DITHERING" : "",
          parameters.opaque ? "#define OPAQUE" : "",
          ShaderChunk["encodings_pars_fragment"],
          // this code is required here because it is used by the various encoding/decoding function defined below
          getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding),
          parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
          "\n"
        ].filter(filterEmptyLine).join("\n");
      }
      vertexShader = resolveIncludes(vertexShader);
      vertexShader = replaceLightNums(vertexShader, parameters);
      vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
      fragmentShader = resolveIncludes(fragmentShader);
      fragmentShader = replaceLightNums(fragmentShader, parameters);
      fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
      vertexShader = unrollLoops(vertexShader);
      fragmentShader = unrollLoops(fragmentShader);
      if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
        versionString = "#version 300 es\n";
        prefixVertex = [
          "precision mediump sampler2DArray;",
          "#define attribute in",
          "#define varying out",
          "#define texture2D texture"
        ].join("\n") + "\n" + prefixVertex;
        prefixFragment = [
          "#define varying in",
          parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
          parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
          "#define gl_FragDepthEXT gl_FragDepth",
          "#define texture2D texture",
          "#define textureCube texture",
          "#define texture2DProj textureProj",
          "#define texture2DLodEXT textureLod",
          "#define texture2DProjLodEXT textureProjLod",
          "#define textureCubeLodEXT textureLod",
          "#define texture2DGradEXT textureGrad",
          "#define texture2DProjGradEXT textureProjGrad",
          "#define textureCubeGradEXT textureGrad"
        ].join("\n") + "\n" + prefixFragment;
      }
      const vertexGlsl = versionString + prefixVertex + vertexShader;
      const fragmentGlsl = versionString + prefixFragment + fragmentShader;
      const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
      const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
      gl.attachShader(program, glVertexShader);
      gl.attachShader(program, glFragmentShader);
      if (parameters.index0AttributeName !== void 0) {
        gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
      } else if (parameters.morphTargets === true) {
        gl.bindAttribLocation(program, 0, "position");
      }
      gl.linkProgram(program);
      if (renderer.debug.checkShaderErrors) {
        const programLog = gl.getProgramInfoLog(program).trim();
        const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
        const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
        let runnable = true;
        let haveDiagnostics = true;
        if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
          runnable = false;
          if (typeof renderer.debug.onShaderError === "function") {
            renderer.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
          } else {
            const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
            const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
            console.error(
              "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
            );
          }
        } else if (programLog !== "") {
          console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
        } else if (vertexLog === "" || fragmentLog === "") {
          haveDiagnostics = false;
        }
        if (haveDiagnostics) {
          this.diagnostics = {
            runnable,
            programLog,
            vertexShader: {
              log: vertexLog,
              prefix: prefixVertex
            },
            fragmentShader: {
              log: fragmentLog,
              prefix: prefixFragment
            }
          };
        }
      }
      gl.deleteShader(glVertexShader);
      gl.deleteShader(glFragmentShader);
      let cachedUniforms;
      this.getUniforms = function() {
        if (cachedUniforms === void 0) {
          cachedUniforms = new WebGLUniforms(gl, program);
        }
        return cachedUniforms;
      };
      let cachedAttributes;
      this.getAttributes = function() {
        if (cachedAttributes === void 0) {
          cachedAttributes = fetchAttributeLocations(gl, program);
        }
        return cachedAttributes;
      };
      this.destroy = function() {
        bindingStates.releaseStatesOfProgram(this);
        gl.deleteProgram(program);
        this.program = void 0;
      };
      this.name = parameters.shaderName;
      this.id = programIdCount++;
      this.cacheKey = cacheKey;
      this.usedTimes = 1;
      this.program = program;
      this.vertexShader = glVertexShader;
      this.fragmentShader = glFragmentShader;
      return this;
    }
    var _id = 0;
    var WebGLShaderCache = class {
      constructor() {
        this.shaderCache = /* @__PURE__ */ new Map();
        this.materialCache = /* @__PURE__ */ new Map();
      }
      update(material) {
        const vertexShader = material.vertexShader;
        const fragmentShader = material.fragmentShader;
        const vertexShaderStage = this._getShaderStage(vertexShader);
        const fragmentShaderStage = this._getShaderStage(fragmentShader);
        const materialShaders = this._getShaderCacheForMaterial(material);
        if (materialShaders.has(vertexShaderStage) === false) {
          materialShaders.add(vertexShaderStage);
          vertexShaderStage.usedTimes++;
        }
        if (materialShaders.has(fragmentShaderStage) === false) {
          materialShaders.add(fragmentShaderStage);
          fragmentShaderStage.usedTimes++;
        }
        return this;
      }
      remove(material) {
        const materialShaders = this.materialCache.get(material);
        for (const shaderStage of materialShaders) {
          shaderStage.usedTimes--;
          if (shaderStage.usedTimes === 0)
            this.shaderCache.delete(shaderStage.code);
        }
        this.materialCache.delete(material);
        return this;
      }
      getVertexShaderID(material) {
        return this._getShaderStage(material.vertexShader).id;
      }
      getFragmentShaderID(material) {
        return this._getShaderStage(material.fragmentShader).id;
      }
      dispose() {
        this.shaderCache.clear();
        this.materialCache.clear();
      }
      _getShaderCacheForMaterial(material) {
        const cache = this.materialCache;
        let set = cache.get(material);
        if (set === void 0) {
          set = /* @__PURE__ */ new Set();
          cache.set(material, set);
        }
        return set;
      }
      _getShaderStage(code) {
        const cache = this.shaderCache;
        let stage = cache.get(code);
        if (stage === void 0) {
          stage = new WebGLShaderStage(code);
          cache.set(code, stage);
        }
        return stage;
      }
    };
    var WebGLShaderStage = class {
      constructor(code) {
        this.id = _id++;
        this.code = code;
        this.usedTimes = 0;
      }
    };
    function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
      const _programLayers = new Layers();
      const _customShaders = new WebGLShaderCache();
      const programs = [];
      const IS_WEBGL2 = capabilities.isWebGL2;
      const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
      const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
      let precision = capabilities.precision;
      const shaderIDs = {
        MeshDepthMaterial: "depth",
        MeshDistanceMaterial: "distanceRGBA",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshToonMaterial: "toon",
        MeshStandardMaterial: "physical",
        MeshPhysicalMaterial: "physical",
        MeshMatcapMaterial: "matcap",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
        ShadowMaterial: "shadow",
        SpriteMaterial: "sprite"
      };
      function getChannel(value) {
        if (value === 1)
          return "uv2";
        return "uv";
      }
      function getParameters(material, lights, shadows, scene, object) {
        const fog = scene.fog;
        const geometry = object.geometry;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
        const shaderID = shaderIDs[material.type];
        if (material.precision !== null) {
          precision = capabilities.getMaxPrecision(material.precision);
          if (precision !== material.precision) {
            console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
          }
        }
        const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
        const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
        let morphTextureStride = 0;
        if (geometry.morphAttributes.position !== void 0)
          morphTextureStride = 1;
        if (geometry.morphAttributes.normal !== void 0)
          morphTextureStride = 2;
        if (geometry.morphAttributes.color !== void 0)
          morphTextureStride = 3;
        let vertexShader, fragmentShader;
        let customVertexShaderID, customFragmentShaderID;
        if (shaderID) {
          const shader = ShaderLib[shaderID];
          vertexShader = shader.vertexShader;
          fragmentShader = shader.fragmentShader;
        } else {
          vertexShader = material.vertexShader;
          fragmentShader = material.fragmentShader;
          _customShaders.update(material);
          customVertexShaderID = _customShaders.getVertexShaderID(material);
          customFragmentShaderID = _customShaders.getFragmentShaderID(material);
        }
        const currentRenderTarget = renderer.getRenderTarget();
        const IS_INSTANCEDMESH = object.isInstancedMesh === true;
        const HAS_MAP = !!material.map;
        const HAS_MATCAP = !!material.matcap;
        const HAS_ENVMAP = !!envMap;
        const HAS_AOMAP = !!material.aoMap;
        const HAS_LIGHTMAP = !!material.lightMap;
        const HAS_BUMPMAP = !!material.bumpMap;
        const HAS_NORMALMAP = !!material.normalMap;
        const HAS_DISPLACEMENTMAP = !!material.displacementMap;
        const HAS_EMISSIVEMAP = !!material.emissiveMap;
        const HAS_METALNESSMAP = !!material.metalnessMap;
        const HAS_ROUGHNESSMAP = !!material.roughnessMap;
        const HAS_CLEARCOAT = material.clearcoat > 0;
        const HAS_IRIDESCENCE = material.iridescence > 0;
        const HAS_SHEEN = material.sheen > 0;
        const HAS_TRANSMISSION = material.transmission > 0;
        const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
        const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
        const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
        const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
        const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
        const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
        const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
        const HAS_SPECULARMAP = !!material.specularMap;
        const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
        const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
        const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
        const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
        const HAS_GRADIENTMAP = !!material.gradientMap;
        const HAS_ALPHAMAP = !!material.alphaMap;
        const HAS_ALPHATEST = material.alphaTest > 0;
        const HAS_EXTENSIONS = !!material.extensions;
        const HAS_ATTRIBUTE_UV2 = !!geometry.attributes.uv2;
        const parameters = {
          isWebGL2: IS_WEBGL2,
          shaderID,
          shaderName: material.type,
          vertexShader,
          fragmentShader,
          defines: material.defines,
          customVertexShaderID,
          customFragmentShaderID,
          isRawShaderMaterial: material.isRawShaderMaterial === true,
          glslVersion: material.glslVersion,
          precision,
          instancing: IS_INSTANCEDMESH,
          instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
          supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
          outputEncoding: currentRenderTarget === null ? renderer.outputEncoding : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding,
          map: HAS_MAP,
          matcap: HAS_MATCAP,
          envMap: HAS_ENVMAP,
          envMapMode: HAS_ENVMAP && envMap.mapping,
          envMapCubeUVHeight,
          aoMap: HAS_AOMAP,
          lightMap: HAS_LIGHTMAP,
          bumpMap: HAS_BUMPMAP,
          normalMap: HAS_NORMALMAP,
          displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
          emissiveMap: HAS_EMISSIVEMAP,
          normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
          normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,
          decodeVideoTexture: HAS_MAP && material.map.isVideoTexture === true && material.map.encoding === sRGBEncoding2,
          metalnessMap: HAS_METALNESSMAP,
          roughnessMap: HAS_ROUGHNESSMAP,
          clearcoat: HAS_CLEARCOAT,
          clearcoatMap: HAS_CLEARCOATMAP,
          clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
          clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
          iridescence: HAS_IRIDESCENCE,
          iridescenceMap: HAS_IRIDESCENCEMAP,
          iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
          sheen: HAS_SHEEN,
          sheenColorMap: HAS_SHEEN_COLORMAP,
          sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
          specularMap: HAS_SPECULARMAP,
          specularColorMap: HAS_SPECULAR_COLORMAP,
          specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
          transmission: HAS_TRANSMISSION,
          transmissionMap: HAS_TRANSMISSIONMAP,
          thicknessMap: HAS_THICKNESSMAP,
          gradientMap: HAS_GRADIENTMAP,
          opaque: material.transparent === false && material.blending === NormalBlending,
          alphaMap: HAS_ALPHAMAP,
          alphaTest: HAS_ALPHATEST,
          combine: material.combine,
          //
          mapUv: HAS_MAP && getChannel(material.map.channel),
          aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
          lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
          bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
          normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
          displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
          emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
          metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
          roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
          clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
          clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
          clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
          iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
          iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
          sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
          sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
          specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
          specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
          specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
          transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
          thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
          alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
          //
          vertexTangents: HAS_NORMALMAP && !!geometry.attributes.tangent,
          vertexColors: material.vertexColors,
          vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
          vertexUvs2: HAS_ATTRIBUTE_UV2,
          pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
          fog: !!fog,
          useFog: material.fog === true,
          fogExp2: fog && fog.isFogExp2,
          flatShading: material.flatShading === true,
          sizeAttenuation: material.sizeAttenuation === true,
          logarithmicDepthBuffer,
          skinning: object.isSkinnedMesh === true,
          morphTargets: geometry.morphAttributes.position !== void 0,
          morphNormals: geometry.morphAttributes.normal !== void 0,
          morphColors: geometry.morphAttributes.color !== void 0,
          morphTargetsCount,
          morphTextureStride,
          numDirLights: lights.directional.length,
          numPointLights: lights.point.length,
          numSpotLights: lights.spot.length,
          numSpotLightMaps: lights.spotLightMap.length,
          numRectAreaLights: lights.rectArea.length,
          numHemiLights: lights.hemi.length,
          numDirLightShadows: lights.directionalShadowMap.length,
          numPointLightShadows: lights.pointShadowMap.length,
          numSpotLightShadows: lights.spotShadowMap.length,
          numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
          numClippingPlanes: clipping.numPlanes,
          numClipIntersection: clipping.numIntersection,
          dithering: material.dithering,
          shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
          shadowMapType: renderer.shadowMap.type,
          toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
          useLegacyLights: renderer.useLegacyLights,
          premultipliedAlpha: material.premultipliedAlpha,
          doubleSided: material.side === DoubleSide2,
          flipSided: material.side === BackSide,
          useDepthPacking: material.depthPacking >= 0,
          depthPacking: material.depthPacking || 0,
          index0AttributeName: material.index0AttributeName,
          extensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,
          extensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,
          extensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,
          extensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,
          rendererExtensionFragDepth: IS_WEBGL2 || extensions.has("EXT_frag_depth"),
          rendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has("WEBGL_draw_buffers"),
          rendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has("EXT_shader_texture_lod"),
          customProgramCacheKey: material.customProgramCacheKey()
        };
        return parameters;
      }
      function getProgramCacheKey(parameters) {
        const array = [];
        if (parameters.shaderID) {
          array.push(parameters.shaderID);
        } else {
          array.push(parameters.customVertexShaderID);
          array.push(parameters.customFragmentShaderID);
        }
        if (parameters.defines !== void 0) {
          for (const name in parameters.defines) {
            array.push(name);
            array.push(parameters.defines[name]);
          }
        }
        if (parameters.isRawShaderMaterial === false) {
          getProgramCacheKeyParameters(array, parameters);
          getProgramCacheKeyBooleans(array, parameters);
          array.push(renderer.outputEncoding);
        }
        array.push(parameters.customProgramCacheKey);
        return array.join();
      }
      function getProgramCacheKeyParameters(array, parameters) {
        array.push(parameters.precision);
        array.push(parameters.outputEncoding);
        array.push(parameters.envMapMode);
        array.push(parameters.envMapCubeUVHeight);
        array.push(parameters.mapUv);
        array.push(parameters.alphaMapUv);
        array.push(parameters.lightMapUv);
        array.push(parameters.aoMapUv);
        array.push(parameters.bumpMapUv);
        array.push(parameters.normalMapUv);
        array.push(parameters.displacementMapUv);
        array.push(parameters.emissiveMapUv);
        array.push(parameters.metalnessMapUv);
        array.push(parameters.roughnessMapUv);
        array.push(parameters.clearcoatMapUv);
        array.push(parameters.clearcoatNormalMapUv);
        array.push(parameters.clearcoatRoughnessMapUv);
        array.push(parameters.iridescenceMapUv);
        array.push(parameters.iridescenceThicknessMapUv);
        array.push(parameters.sheenColorMapUv);
        array.push(parameters.sheenRoughnessMapUv);
        array.push(parameters.specularMapUv);
        array.push(parameters.specularColorMapUv);
        array.push(parameters.specularIntensityMapUv);
        array.push(parameters.transmissionMapUv);
        array.push(parameters.thicknessMapUv);
        array.push(parameters.combine);
        array.push(parameters.fogExp2);
        array.push(parameters.sizeAttenuation);
        array.push(parameters.morphTargetsCount);
        array.push(parameters.morphAttributeCount);
        array.push(parameters.numDirLights);
        array.push(parameters.numPointLights);
        array.push(parameters.numSpotLights);
        array.push(parameters.numSpotLightMaps);
        array.push(parameters.numHemiLights);
        array.push(parameters.numRectAreaLights);
        array.push(parameters.numDirLightShadows);
        array.push(parameters.numPointLightShadows);
        array.push(parameters.numSpotLightShadows);
        array.push(parameters.numSpotLightShadowsWithMaps);
        array.push(parameters.shadowMapType);
        array.push(parameters.toneMapping);
        array.push(parameters.numClippingPlanes);
        array.push(parameters.numClipIntersection);
        array.push(parameters.depthPacking);
      }
      function getProgramCacheKeyBooleans(array, parameters) {
        _programLayers.disableAll();
        if (parameters.isWebGL2)
          _programLayers.enable(0);
        if (parameters.supportsVertexTextures)
          _programLayers.enable(1);
        if (parameters.instancing)
          _programLayers.enable(2);
        if (parameters.instancingColor)
          _programLayers.enable(3);
        if (parameters.matcap)
          _programLayers.enable(4);
        if (parameters.envMap)
          _programLayers.enable(5);
        if (parameters.normalMapObjectSpace)
          _programLayers.enable(6);
        if (parameters.normalMapTangentSpace)
          _programLayers.enable(7);
        if (parameters.clearcoat)
          _programLayers.enable(8);
        if (parameters.iridescence)
          _programLayers.enable(9);
        if (parameters.alphaTest)
          _programLayers.enable(10);
        if (parameters.vertexColors)
          _programLayers.enable(11);
        if (parameters.vertexAlphas)
          _programLayers.enable(12);
        if (parameters.vertexUvs2)
          _programLayers.enable(13);
        if (parameters.vertexTangents)
          _programLayers.enable(14);
        array.push(_programLayers.mask);
        _programLayers.disableAll();
        if (parameters.fog)
          _programLayers.enable(0);
        if (parameters.useFog)
          _programLayers.enable(1);
        if (parameters.flatShading)
          _programLayers.enable(2);
        if (parameters.logarithmicDepthBuffer)
          _programLayers.enable(3);
        if (parameters.skinning)
          _programLayers.enable(4);
        if (parameters.morphTargets)
          _programLayers.enable(5);
        if (parameters.morphNormals)
          _programLayers.enable(6);
        if (parameters.morphColors)
          _programLayers.enable(7);
        if (parameters.premultipliedAlpha)
          _programLayers.enable(8);
        if (parameters.shadowMapEnabled)
          _programLayers.enable(9);
        if (parameters.useLegacyLights)
          _programLayers.enable(10);
        if (parameters.doubleSided)
          _programLayers.enable(11);
        if (parameters.flipSided)
          _programLayers.enable(12);
        if (parameters.useDepthPacking)
          _programLayers.enable(13);
        if (parameters.dithering)
          _programLayers.enable(14);
        if (parameters.transmission)
          _programLayers.enable(15);
        if (parameters.sheen)
          _programLayers.enable(16);
        if (parameters.decodeVideoTexture)
          _programLayers.enable(17);
        if (parameters.opaque)
          _programLayers.enable(18);
        if (parameters.pointsUvs)
          _programLayers.enable(19);
        array.push(_programLayers.mask);
      }
      function getUniforms(material) {
        const shaderID = shaderIDs[material.type];
        let uniforms;
        if (shaderID) {
          const shader = ShaderLib[shaderID];
          uniforms = UniformsUtils.clone(shader.uniforms);
        } else {
          uniforms = material.uniforms;
        }
        return uniforms;
      }
      function acquireProgram(parameters, cacheKey) {
        let program;
        for (let p = 0, pl = programs.length; p < pl; p++) {
          const preexistingProgram = programs[p];
          if (preexistingProgram.cacheKey === cacheKey) {
            program = preexistingProgram;
            ++program.usedTimes;
            break;
          }
        }
        if (program === void 0) {
          program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
          programs.push(program);
        }
        return program;
      }
      function releaseProgram(program) {
        if (--program.usedTimes === 0) {
          const i = programs.indexOf(program);
          programs[i] = programs[programs.length - 1];
          programs.pop();
          program.destroy();
        }
      }
      function releaseShaderCache(material) {
        _customShaders.remove(material);
      }
      function dispose() {
        _customShaders.dispose();
      }
      return {
        getParameters,
        getProgramCacheKey,
        getUniforms,
        acquireProgram,
        releaseProgram,
        releaseShaderCache,
        // Exposed for resource monitoring & error feedback via renderer.info:
        programs,
        dispose
      };
    }
    function WebGLProperties() {
      let properties = /* @__PURE__ */ new WeakMap();
      function get(object) {
        let map = properties.get(object);
        if (map === void 0) {
          map = {};
          properties.set(object, map);
        }
        return map;
      }
      function remove(object) {
        properties.delete(object);
      }
      function update(object, key, value) {
        properties.get(object)[key] = value;
      }
      function dispose() {
        properties = /* @__PURE__ */ new WeakMap();
      }
      return {
        get,
        remove,
        update,
        dispose
      };
    }
    function painterSortStable(a, b) {
      if (a.groupOrder !== b.groupOrder) {
        return a.groupOrder - b.groupOrder;
      } else if (a.renderOrder !== b.renderOrder) {
        return a.renderOrder - b.renderOrder;
      } else if (a.material.id !== b.material.id) {
        return a.material.id - b.material.id;
      } else if (a.z !== b.z) {
        return a.z - b.z;
      } else {
        return a.id - b.id;
      }
    }
    function reversePainterSortStable(a, b) {
      if (a.groupOrder !== b.groupOrder) {
        return a.groupOrder - b.groupOrder;
      } else if (a.renderOrder !== b.renderOrder) {
        return a.renderOrder - b.renderOrder;
      } else if (a.z !== b.z) {
        return b.z - a.z;
      } else {
        return a.id - b.id;
      }
    }
    function WebGLRenderList() {
      const renderItems = [];
      let renderItemsIndex = 0;
      const opaque = [];
      const transmissive = [];
      const transparent = [];
      function init() {
        renderItemsIndex = 0;
        opaque.length = 0;
        transmissive.length = 0;
        transparent.length = 0;
      }
      function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
        let renderItem = renderItems[renderItemsIndex];
        if (renderItem === void 0) {
          renderItem = {
            id: object.id,
            object,
            geometry,
            material,
            groupOrder,
            renderOrder: object.renderOrder,
            z,
            group
          };
          renderItems[renderItemsIndex] = renderItem;
        } else {
          renderItem.id = object.id;
          renderItem.object = object;
          renderItem.geometry = geometry;
          renderItem.material = material;
          renderItem.groupOrder = groupOrder;
          renderItem.renderOrder = object.renderOrder;
          renderItem.z = z;
          renderItem.group = group;
        }
        renderItemsIndex++;
        return renderItem;
      }
      function push(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0) {
          transmissive.push(renderItem);
        } else if (material.transparent === true) {
          transparent.push(renderItem);
        } else {
          opaque.push(renderItem);
        }
      }
      function unshift(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0) {
          transmissive.unshift(renderItem);
        } else if (material.transparent === true) {
          transparent.unshift(renderItem);
        } else {
          opaque.unshift(renderItem);
        }
      }
      function sort(customOpaqueSort, customTransparentSort) {
        if (opaque.length > 1)
          opaque.sort(customOpaqueSort || painterSortStable);
        if (transmissive.length > 1)
          transmissive.sort(customTransparentSort || reversePainterSortStable);
        if (transparent.length > 1)
          transparent.sort(customTransparentSort || reversePainterSortStable);
      }
      function finish() {
        for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
          const renderItem = renderItems[i];
          if (renderItem.id === null)
            break;
          renderItem.id = null;
          renderItem.object = null;
          renderItem.geometry = null;
          renderItem.material = null;
          renderItem.group = null;
        }
      }
      return {
        opaque,
        transmissive,
        transparent,
        init,
        push,
        unshift,
        finish,
        sort
      };
    }
    function WebGLRenderLists() {
      let lists = /* @__PURE__ */ new WeakMap();
      function get(scene, renderCallDepth) {
        const listArray = lists.get(scene);
        let list;
        if (listArray === void 0) {
          list = new WebGLRenderList();
          lists.set(scene, [list]);
        } else {
          if (renderCallDepth >= listArray.length) {
            list = new WebGLRenderList();
            listArray.push(list);
          } else {
            list = listArray[renderCallDepth];
          }
        }
        return list;
      }
      function dispose() {
        lists = /* @__PURE__ */ new WeakMap();
      }
      return {
        get,
        dispose
      };
    }
    function UniformsCache() {
      const lights = {};
      return {
        get: function(light) {
          if (lights[light.id] !== void 0) {
            return lights[light.id];
          }
          let uniforms;
          switch (light.type) {
            case "DirectionalLight":
              uniforms = {
                direction: new Vector32(),
                color: new Color2()
              };
              break;
            case "SpotLight":
              uniforms = {
                position: new Vector32(),
                direction: new Vector32(),
                color: new Color2(),
                distance: 0,
                coneCos: 0,
                penumbraCos: 0,
                decay: 0
              };
              break;
            case "PointLight":
              uniforms = {
                position: new Vector32(),
                color: new Color2(),
                distance: 0,
                decay: 0
              };
              break;
            case "HemisphereLight":
              uniforms = {
                direction: new Vector32(),
                skyColor: new Color2(),
                groundColor: new Color2()
              };
              break;
            case "RectAreaLight":
              uniforms = {
                color: new Color2(),
                position: new Vector32(),
                halfWidth: new Vector32(),
                halfHeight: new Vector32()
              };
              break;
          }
          lights[light.id] = uniforms;
          return uniforms;
        }
      };
    }
    function ShadowUniformsCache() {
      const lights = {};
      return {
        get: function(light) {
          if (lights[light.id] !== void 0) {
            return lights[light.id];
          }
          let uniforms;
          switch (light.type) {
            case "DirectionalLight":
              uniforms = {
                shadowBias: 0,
                shadowNormalBias: 0,
                shadowRadius: 1,
                shadowMapSize: new Vector22()
              };
              break;
            case "SpotLight":
              uniforms = {
                shadowBias: 0,
                shadowNormalBias: 0,
                shadowRadius: 1,
                shadowMapSize: new Vector22()
              };
              break;
            case "PointLight":
              uniforms = {
                shadowBias: 0,
                shadowNormalBias: 0,
                shadowRadius: 1,
                shadowMapSize: new Vector22(),
                shadowCameraNear: 1,
                shadowCameraFar: 1e3
              };
              break;
          }
          lights[light.id] = uniforms;
          return uniforms;
        }
      };
    }
    var nextVersion = 0;
    function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
      return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
    }
    function WebGLLights(extensions, capabilities) {
      const cache = new UniformsCache();
      const shadowCache = ShadowUniformsCache();
      const state = {
        version: 0,
        hash: {
          directionalLength: -1,
          pointLength: -1,
          spotLength: -1,
          rectAreaLength: -1,
          hemiLength: -1,
          numDirectionalShadows: -1,
          numPointShadows: -1,
          numSpotShadows: -1,
          numSpotMaps: -1
        },
        ambient: [0, 0, 0],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotLightMap: [],
        spotShadow: [],
        spotShadowMap: [],
        spotLightMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: [],
        numSpotLightShadowsWithMaps: 0
      };
      for (let i = 0; i < 9; i++)
        state.probe.push(new Vector32());
      const vector3 = new Vector32();
      const matrix4 = new Matrix42();
      const matrix42 = new Matrix42();
      function setup(lights, useLegacyLights) {
        let r = 0, g = 0, b = 0;
        for (let i = 0; i < 9; i++)
          state.probe[i].set(0, 0, 0);
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        let numDirectionalShadows = 0;
        let numPointShadows = 0;
        let numSpotShadows = 0;
        let numSpotMaps = 0;
        let numSpotShadowsWithMaps = 0;
        lights.sort(shadowCastingAndTexturingLightsFirst);
        const scaleFactor = useLegacyLights === true ? Math.PI : 1;
        for (let i = 0, l = lights.length; i < l; i++) {
          const light = lights[i];
          const color = light.color;
          const intensity = light.intensity;
          const distance = light.distance;
          const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
          if (light.isAmbientLight) {
            r += color.r * intensity * scaleFactor;
            g += color.g * intensity * scaleFactor;
            b += color.b * intensity * scaleFactor;
          } else if (light.isLightProbe) {
            for (let j = 0; j < 9; j++) {
              state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
            }
          } else if (light.isDirectionalLight) {
            const uniforms = cache.get(light);
            uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
            if (light.castShadow) {
              const shadow = light.shadow;
              const shadowUniforms = shadowCache.get(light);
              shadowUniforms.shadowBias = shadow.bias;
              shadowUniforms.shadowNormalBias = shadow.normalBias;
              shadowUniforms.shadowRadius = shadow.radius;
              shadowUniforms.shadowMapSize = shadow.mapSize;
              state.directionalShadow[directionalLength] = shadowUniforms;
              state.directionalShadowMap[directionalLength] = shadowMap;
              state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
              numDirectionalShadows++;
            }
            state.directional[directionalLength] = uniforms;
            directionalLength++;
          } else if (light.isSpotLight) {
            const uniforms = cache.get(light);
            uniforms.position.setFromMatrixPosition(light.matrixWorld);
            uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
            uniforms.distance = distance;
            uniforms.coneCos = Math.cos(light.angle);
            uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
            uniforms.decay = light.decay;
            state.spot[spotLength] = uniforms;
            const shadow = light.shadow;
            if (light.map) {
              state.spotLightMap[numSpotMaps] = light.map;
              numSpotMaps++;
              shadow.updateMatrices(light);
              if (light.castShadow)
                numSpotShadowsWithMaps++;
            }
            state.spotLightMatrix[spotLength] = shadow.matrix;
            if (light.castShadow) {
              const shadowUniforms = shadowCache.get(light);
              shadowUniforms.shadowBias = shadow.bias;
              shadowUniforms.shadowNormalBias = shadow.normalBias;
              shadowUniforms.shadowRadius = shadow.radius;
              shadowUniforms.shadowMapSize = shadow.mapSize;
              state.spotShadow[spotLength] = shadowUniforms;
              state.spotShadowMap[spotLength] = shadowMap;
              numSpotShadows++;
            }
            spotLength++;
          } else if (light.isRectAreaLight) {
            const uniforms = cache.get(light);
            uniforms.color.copy(color).multiplyScalar(intensity);
            uniforms.halfWidth.set(light.width * 0.5, 0, 0);
            uniforms.halfHeight.set(0, light.height * 0.5, 0);
            state.rectArea[rectAreaLength] = uniforms;
            rectAreaLength++;
          } else if (light.isPointLight) {
            const uniforms = cache.get(light);
            uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
            uniforms.distance = light.distance;
            uniforms.decay = light.decay;
            if (light.castShadow) {
              const shadow = light.shadow;
              const shadowUniforms = shadowCache.get(light);
              shadowUniforms.shadowBias = shadow.bias;
              shadowUniforms.shadowNormalBias = shadow.normalBias;
              shadowUniforms.shadowRadius = shadow.radius;
              shadowUniforms.shadowMapSize = shadow.mapSize;
              shadowUniforms.shadowCameraNear = shadow.camera.near;
              shadowUniforms.shadowCameraFar = shadow.camera.far;
              state.pointShadow[pointLength] = shadowUniforms;
              state.pointShadowMap[pointLength] = shadowMap;
              state.pointShadowMatrix[pointLength] = light.shadow.matrix;
              numPointShadows++;
            }
            state.point[pointLength] = uniforms;
            pointLength++;
          } else if (light.isHemisphereLight) {
            const uniforms = cache.get(light);
            uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
            uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
            state.hemi[hemiLength] = uniforms;
            hemiLength++;
          }
        }
        if (rectAreaLength > 0) {
          if (capabilities.isWebGL2) {
            state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
            state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
          } else {
            if (extensions.has("OES_texture_float_linear") === true) {
              state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
              state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
            } else if (extensions.has("OES_texture_half_float_linear") === true) {
              state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
              state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
            } else {
              console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
            }
          }
        }
        state.ambient[0] = r;
        state.ambient[1] = g;
        state.ambient[2] = b;
        const hash = state.hash;
        if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps) {
          state.directional.length = directionalLength;
          state.spot.length = spotLength;
          state.rectArea.length = rectAreaLength;
          state.point.length = pointLength;
          state.hemi.length = hemiLength;
          state.directionalShadow.length = numDirectionalShadows;
          state.directionalShadowMap.length = numDirectionalShadows;
          state.pointShadow.length = numPointShadows;
          state.pointShadowMap.length = numPointShadows;
          state.spotShadow.length = numSpotShadows;
          state.spotShadowMap.length = numSpotShadows;
          state.directionalShadowMatrix.length = numDirectionalShadows;
          state.pointShadowMatrix.length = numPointShadows;
          state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
          state.spotLightMap.length = numSpotMaps;
          state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
          hash.directionalLength = directionalLength;
          hash.pointLength = pointLength;
          hash.spotLength = spotLength;
          hash.rectAreaLength = rectAreaLength;
          hash.hemiLength = hemiLength;
          hash.numDirectionalShadows = numDirectionalShadows;
          hash.numPointShadows = numPointShadows;
          hash.numSpotShadows = numSpotShadows;
          hash.numSpotMaps = numSpotMaps;
          state.version = nextVersion++;
        }
      }
      function setupView(lights, camera) {
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        const viewMatrix = camera.matrixWorldInverse;
        for (let i = 0, l = lights.length; i < l; i++) {
          const light = lights[i];
          if (light.isDirectionalLight) {
            const uniforms = state.directional[directionalLength];
            uniforms.direction.setFromMatrixPosition(light.matrixWorld);
            vector3.setFromMatrixPosition(light.target.matrixWorld);
            uniforms.direction.sub(vector3);
            uniforms.direction.transformDirection(viewMatrix);
            directionalLength++;
          } else if (light.isSpotLight) {
            const uniforms = state.spot[spotLength];
            uniforms.position.setFromMatrixPosition(light.matrixWorld);
            uniforms.position.applyMatrix4(viewMatrix);
            uniforms.direction.setFromMatrixPosition(light.matrixWorld);
            vector3.setFromMatrixPosition(light.target.matrixWorld);
            uniforms.direction.sub(vector3);
            uniforms.direction.transformDirection(viewMatrix);
            spotLength++;
          } else if (light.isRectAreaLight) {
            const uniforms = state.rectArea[rectAreaLength];
            uniforms.position.setFromMatrixPosition(light.matrixWorld);
            uniforms.position.applyMatrix4(viewMatrix);
            matrix42.identity();
            matrix4.copy(light.matrixWorld);
            matrix4.premultiply(viewMatrix);
            matrix42.extractRotation(matrix4);
            uniforms.halfWidth.set(light.width * 0.5, 0, 0);
            uniforms.halfHeight.set(0, light.height * 0.5, 0);
            uniforms.halfWidth.applyMatrix4(matrix42);
            uniforms.halfHeight.applyMatrix4(matrix42);
            rectAreaLength++;
          } else if (light.isPointLight) {
            const uniforms = state.point[pointLength];
            uniforms.position.setFromMatrixPosition(light.matrixWorld);
            uniforms.position.applyMatrix4(viewMatrix);
            pointLength++;
          } else if (light.isHemisphereLight) {
            const uniforms = state.hemi[hemiLength];
            uniforms.direction.setFromMatrixPosition(light.matrixWorld);
            uniforms.direction.transformDirection(viewMatrix);
            hemiLength++;
          }
        }
      }
      return {
        setup,
        setupView,
        state
      };
    }
    function WebGLRenderState(extensions, capabilities) {
      const lights = new WebGLLights(extensions, capabilities);
      const lightsArray = [];
      const shadowsArray = [];
      function init() {
        lightsArray.length = 0;
        shadowsArray.length = 0;
      }
      function pushLight(light) {
        lightsArray.push(light);
      }
      function pushShadow(shadowLight) {
        shadowsArray.push(shadowLight);
      }
      function setupLights(useLegacyLights) {
        lights.setup(lightsArray, useLegacyLights);
      }
      function setupLightsView(camera) {
        lights.setupView(lightsArray, camera);
      }
      const state = {
        lightsArray,
        shadowsArray,
        lights
      };
      return {
        init,
        state,
        setupLights,
        setupLightsView,
        pushLight,
        pushShadow
      };
    }
    function WebGLRenderStates(extensions, capabilities) {
      let renderStates = /* @__PURE__ */ new WeakMap();
      function get(scene, renderCallDepth = 0) {
        const renderStateArray = renderStates.get(scene);
        let renderState;
        if (renderStateArray === void 0) {
          renderState = new WebGLRenderState(extensions, capabilities);
          renderStates.set(scene, [renderState]);
        } else {
          if (renderCallDepth >= renderStateArray.length) {
            renderState = new WebGLRenderState(extensions, capabilities);
            renderStateArray.push(renderState);
          } else {
            renderState = renderStateArray[renderCallDepth];
          }
        }
        return renderState;
      }
      function dispose() {
        renderStates = /* @__PURE__ */ new WeakMap();
      }
      return {
        get,
        dispose
      };
    }
    var MeshDepthMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshDepthMaterial = true;
        this.type = "MeshDepthMaterial";
        this.depthPacking = BasicDepthPacking;
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.depthPacking = source.depthPacking;
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        return this;
      }
    };
    var MeshDistanceMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshDistanceMaterial = true;
        this.type = "MeshDistanceMaterial";
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        return this;
      }
    };
    var vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
    var fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
    function WebGLShadowMap(_renderer, _objects, _capabilities) {
      let _frustum = new Frustum();
      const _shadowMapSize = new Vector22(), _viewportSize = new Vector22(), _viewport = new Vector42(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = _capabilities.maxTextureSize;
      const shadowSide = { [FrontSide2]: BackSide, [BackSide]: FrontSide2, [DoubleSide2]: DoubleSide2 };
      const shadowMaterialVertical = new ShaderMaterial({
        defines: {
          VSM_SAMPLES: 8
        },
        uniforms: {
          shadow_pass: { value: null },
          resolution: { value: new Vector22() },
          radius: { value: 4 }
        },
        vertexShader: vertex,
        fragmentShader: fragment
      });
      const shadowMaterialHorizontal = shadowMaterialVertical.clone();
      shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
      const fullScreenTri = new BufferGeometry2();
      fullScreenTri.setAttribute(
        "position",
        new BufferAttribute(
          new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
          3
        )
      );
      const fullScreenMesh = new Mesh2(fullScreenTri, shadowMaterialVertical);
      const scope = this;
      this.enabled = false;
      this.autoUpdate = true;
      this.needsUpdate = false;
      this.type = PCFShadowMap;
      this.render = function(lights, scene, camera) {
        if (scope.enabled === false)
          return;
        if (scope.autoUpdate === false && scope.needsUpdate === false)
          return;
        if (lights.length === 0)
          return;
        const currentRenderTarget = _renderer.getRenderTarget();
        const activeCubeFace = _renderer.getActiveCubeFace();
        const activeMipmapLevel = _renderer.getActiveMipmapLevel();
        const _state = _renderer.state;
        _state.setBlending(NoBlending);
        _state.buffers.color.setClear(1, 1, 1, 1);
        _state.buffers.depth.setTest(true);
        _state.setScissorTest(false);
        for (let i = 0, il = lights.length; i < il; i++) {
          const light = lights[i];
          const shadow = light.shadow;
          if (shadow === void 0) {
            console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
            continue;
          }
          if (shadow.autoUpdate === false && shadow.needsUpdate === false)
            continue;
          _shadowMapSize.copy(shadow.mapSize);
          const shadowFrameExtents = shadow.getFrameExtents();
          _shadowMapSize.multiply(shadowFrameExtents);
          _viewportSize.copy(shadow.mapSize);
          if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
            if (_shadowMapSize.x > _maxTextureSize) {
              _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
              _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
              shadow.mapSize.x = _viewportSize.x;
            }
            if (_shadowMapSize.y > _maxTextureSize) {
              _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
              _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
              shadow.mapSize.y = _viewportSize.y;
            }
          }
          if (shadow.map === null) {
            const pars = this.type !== VSMShadowMap ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
            shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
            shadow.map.texture.name = light.name + ".shadowMap";
            shadow.camera.updateProjectionMatrix();
          }
          _renderer.setRenderTarget(shadow.map);
          _renderer.clear();
          const viewportCount = shadow.getViewportCount();
          for (let vp = 0; vp < viewportCount; vp++) {
            const viewport = shadow.getViewport(vp);
            _viewport.set(
              _viewportSize.x * viewport.x,
              _viewportSize.y * viewport.y,
              _viewportSize.x * viewport.z,
              _viewportSize.y * viewport.w
            );
            _state.viewport(_viewport);
            shadow.updateMatrices(light, vp);
            _frustum = shadow.getFrustum();
            renderObject(scene, camera, shadow.camera, light, this.type);
          }
          if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
            VSMPass(shadow, camera);
          }
          shadow.needsUpdate = false;
        }
        scope.needsUpdate = false;
        _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
      };
      function VSMPass(shadow, camera) {
        const geometry = _objects.update(fullScreenMesh);
        if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
          shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
          shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
          shadowMaterialVertical.needsUpdate = true;
          shadowMaterialHorizontal.needsUpdate = true;
        }
        if (shadow.mapPass === null) {
          shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
        }
        shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
        shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialVertical.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.mapPass);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
        shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
        shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
      }
      function getDepthMaterial(object, material, light, type) {
        let result = null;
        const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
        if (customMaterial !== void 0) {
          result = customMaterial;
        } else {
          result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
          if (_renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
            const keyA = result.uuid, keyB = material.uuid;
            let materialsForVariant = _materialCache[keyA];
            if (materialsForVariant === void 0) {
              materialsForVariant = {};
              _materialCache[keyA] = materialsForVariant;
            }
            let cachedMaterial = materialsForVariant[keyB];
            if (cachedMaterial === void 0) {
              cachedMaterial = result.clone();
              materialsForVariant[keyB] = cachedMaterial;
            }
            result = cachedMaterial;
          }
        }
        result.visible = material.visible;
        result.wireframe = material.wireframe;
        if (type === VSMShadowMap) {
          result.side = material.shadowSide !== null ? material.shadowSide : material.side;
        } else {
          result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
        }
        result.alphaMap = material.alphaMap;
        result.alphaTest = material.alphaTest;
        result.map = material.map;
        result.clipShadows = material.clipShadows;
        result.clippingPlanes = material.clippingPlanes;
        result.clipIntersection = material.clipIntersection;
        result.displacementMap = material.displacementMap;
        result.displacementScale = material.displacementScale;
        result.displacementBias = material.displacementBias;
        result.wireframeLinewidth = material.wireframeLinewidth;
        result.linewidth = material.linewidth;
        if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
          const materialProperties = _renderer.properties.get(result);
          materialProperties.light = light;
        }
        return result;
      }
      function renderObject(object, camera, shadowCamera, light, type) {
        if (object.visible === false)
          return;
        const visible = object.layers.test(camera.layers);
        if (visible && (object.isMesh || object.isLine || object.isPoints)) {
          if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
            object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
            const geometry = _objects.update(object);
            const material = object.material;
            if (Array.isArray(material)) {
              const groups = geometry.groups;
              for (let k = 0, kl = groups.length; k < kl; k++) {
                const group = groups[k];
                const groupMaterial = material[group.materialIndex];
                if (groupMaterial && groupMaterial.visible) {
                  const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
                  _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                }
              }
            } else if (material.visible) {
              const depthMaterial = getDepthMaterial(object, material, light, type);
              _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
            }
          }
        }
        const children = object.children;
        for (let i = 0, l = children.length; i < l; i++) {
          renderObject(children[i], camera, shadowCamera, light, type);
        }
      }
    }
    function WebGLState(gl, extensions, capabilities) {
      const isWebGL2 = capabilities.isWebGL2;
      function ColorBuffer() {
        let locked = false;
        const color = new Vector42();
        let currentColorMask = null;
        const currentColorClear = new Vector42(0, 0, 0, 0);
        return {
          setMask: function(colorMask) {
            if (currentColorMask !== colorMask && !locked) {
              gl.colorMask(colorMask, colorMask, colorMask, colorMask);
              currentColorMask = colorMask;
            }
          },
          setLocked: function(lock) {
            locked = lock;
          },
          setClear: function(r, g, b, a, premultipliedAlpha) {
            if (premultipliedAlpha === true) {
              r *= a;
              g *= a;
              b *= a;
            }
            color.set(r, g, b, a);
            if (currentColorClear.equals(color) === false) {
              gl.clearColor(r, g, b, a);
              currentColorClear.copy(color);
            }
          },
          reset: function() {
            locked = false;
            currentColorMask = null;
            currentColorClear.set(-1, 0, 0, 0);
          }
        };
      }
      function DepthBuffer() {
        let locked = false;
        let currentDepthMask = null;
        let currentDepthFunc = null;
        let currentDepthClear = null;
        return {
          setTest: function(depthTest) {
            if (depthTest) {
              enable(gl.DEPTH_TEST);
            } else {
              disable(gl.DEPTH_TEST);
            }
          },
          setMask: function(depthMask) {
            if (currentDepthMask !== depthMask && !locked) {
              gl.depthMask(depthMask);
              currentDepthMask = depthMask;
            }
          },
          setFunc: function(depthFunc) {
            if (currentDepthFunc !== depthFunc) {
              switch (depthFunc) {
                case NeverDepth:
                  gl.depthFunc(gl.NEVER);
                  break;
                case AlwaysDepth:
                  gl.depthFunc(gl.ALWAYS);
                  break;
                case LessDepth:
                  gl.depthFunc(gl.LESS);
                  break;
                case LessEqualDepth:
                  gl.depthFunc(gl.LEQUAL);
                  break;
                case EqualDepth:
                  gl.depthFunc(gl.EQUAL);
                  break;
                case GreaterEqualDepth:
                  gl.depthFunc(gl.GEQUAL);
                  break;
                case GreaterDepth:
                  gl.depthFunc(gl.GREATER);
                  break;
                case NotEqualDepth:
                  gl.depthFunc(gl.NOTEQUAL);
                  break;
                default:
                  gl.depthFunc(gl.LEQUAL);
              }
              currentDepthFunc = depthFunc;
            }
          },
          setLocked: function(lock) {
            locked = lock;
          },
          setClear: function(depth) {
            if (currentDepthClear !== depth) {
              gl.clearDepth(depth);
              currentDepthClear = depth;
            }
          },
          reset: function() {
            locked = false;
            currentDepthMask = null;
            currentDepthFunc = null;
            currentDepthClear = null;
          }
        };
      }
      function StencilBuffer() {
        let locked = false;
        let currentStencilMask = null;
        let currentStencilFunc = null;
        let currentStencilRef = null;
        let currentStencilFuncMask = null;
        let currentStencilFail = null;
        let currentStencilZFail = null;
        let currentStencilZPass = null;
        let currentStencilClear = null;
        return {
          setTest: function(stencilTest) {
            if (!locked) {
              if (stencilTest) {
                enable(gl.STENCIL_TEST);
              } else {
                disable(gl.STENCIL_TEST);
              }
            }
          },
          setMask: function(stencilMask) {
            if (currentStencilMask !== stencilMask && !locked) {
              gl.stencilMask(stencilMask);
              currentStencilMask = stencilMask;
            }
          },
          setFunc: function(stencilFunc, stencilRef, stencilMask) {
            if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
              gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
              currentStencilFunc = stencilFunc;
              currentStencilRef = stencilRef;
              currentStencilFuncMask = stencilMask;
            }
          },
          setOp: function(stencilFail, stencilZFail, stencilZPass) {
            if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
              gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
              currentStencilFail = stencilFail;
              currentStencilZFail = stencilZFail;
              currentStencilZPass = stencilZPass;
            }
          },
          setLocked: function(lock) {
            locked = lock;
          },
          setClear: function(stencil) {
            if (currentStencilClear !== stencil) {
              gl.clearStencil(stencil);
              currentStencilClear = stencil;
            }
          },
          reset: function() {
            locked = false;
            currentStencilMask = null;
            currentStencilFunc = null;
            currentStencilRef = null;
            currentStencilFuncMask = null;
            currentStencilFail = null;
            currentStencilZFail = null;
            currentStencilZPass = null;
            currentStencilClear = null;
          }
        };
      }
      const colorBuffer = new ColorBuffer();
      const depthBuffer = new DepthBuffer();
      const stencilBuffer = new StencilBuffer();
      const uboBindings = /* @__PURE__ */ new WeakMap();
      const uboProgramMap = /* @__PURE__ */ new WeakMap();
      let enabledCapabilities = {};
      let currentBoundFramebuffers = {};
      let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
      let defaultDrawbuffers = [];
      let currentProgram = null;
      let currentBlendingEnabled = false;
      let currentBlending = null;
      let currentBlendEquation = null;
      let currentBlendSrc = null;
      let currentBlendDst = null;
      let currentBlendEquationAlpha = null;
      let currentBlendSrcAlpha = null;
      let currentBlendDstAlpha = null;
      let currentPremultipledAlpha = false;
      let currentFlipSided = null;
      let currentCullFace = null;
      let currentLineWidth = null;
      let currentPolygonOffsetFactor = null;
      let currentPolygonOffsetUnits = null;
      const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
      let lineWidthAvailable = false;
      let version = 0;
      const glVersion = gl.getParameter(gl.VERSION);
      if (glVersion.indexOf("WebGL") !== -1) {
        version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 1;
      } else if (glVersion.indexOf("OpenGL ES") !== -1) {
        version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 2;
      }
      let currentTextureSlot = null;
      let currentBoundTextures = {};
      const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
      const viewportParam = gl.getParameter(gl.VIEWPORT);
      const currentScissor = new Vector42().fromArray(scissorParam);
      const currentViewport = new Vector42().fromArray(viewportParam);
      function createTexture(type, target, count) {
        const data = new Uint8Array(4);
        const texture = gl.createTexture();
        gl.bindTexture(type, texture);
        gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        for (let i = 0; i < count; i++) {
          gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        }
        return texture;
      }
      const emptyTextures = {};
      emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
      emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
      colorBuffer.setClear(0, 0, 0, 1);
      depthBuffer.setClear(1);
      stencilBuffer.setClear(0);
      enable(gl.DEPTH_TEST);
      depthBuffer.setFunc(LessEqualDepth);
      setFlipSided(false);
      setCullFace(CullFaceBack);
      enable(gl.CULL_FACE);
      setBlending(NoBlending);
      function enable(id2) {
        if (enabledCapabilities[id2] !== true) {
          gl.enable(id2);
          enabledCapabilities[id2] = true;
        }
      }
      function disable(id2) {
        if (enabledCapabilities[id2] !== false) {
          gl.disable(id2);
          enabledCapabilities[id2] = false;
        }
      }
      function bindFramebuffer(target, framebuffer) {
        if (currentBoundFramebuffers[target] !== framebuffer) {
          gl.bindFramebuffer(target, framebuffer);
          currentBoundFramebuffers[target] = framebuffer;
          if (isWebGL2) {
            if (target === gl.DRAW_FRAMEBUFFER) {
              currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
            }
            if (target === gl.FRAMEBUFFER) {
              currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
            }
          }
          return true;
        }
        return false;
      }
      function drawBuffers(renderTarget, framebuffer) {
        let drawBuffers2 = defaultDrawbuffers;
        let needsUpdate = false;
        if (renderTarget) {
          drawBuffers2 = currentDrawbuffers.get(framebuffer);
          if (drawBuffers2 === void 0) {
            drawBuffers2 = [];
            currentDrawbuffers.set(framebuffer, drawBuffers2);
          }
          if (renderTarget.isWebGLMultipleRenderTargets) {
            const textures = renderTarget.texture;
            if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
              for (let i = 0, il = textures.length; i < il; i++) {
                drawBuffers2[i] = gl.COLOR_ATTACHMENT0 + i;
              }
              drawBuffers2.length = textures.length;
              needsUpdate = true;
            }
          } else {
            if (drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
              drawBuffers2[0] = gl.COLOR_ATTACHMENT0;
              needsUpdate = true;
            }
          }
        } else {
          if (drawBuffers2[0] !== gl.BACK) {
            drawBuffers2[0] = gl.BACK;
            needsUpdate = true;
          }
        }
        if (needsUpdate) {
          if (capabilities.isWebGL2) {
            gl.drawBuffers(drawBuffers2);
          } else {
            extensions.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers2);
          }
        }
      }
      function useProgram(program) {
        if (currentProgram !== program) {
          gl.useProgram(program);
          currentProgram = program;
          return true;
        }
        return false;
      }
      const equationToGL = {
        [AddEquation]: gl.FUNC_ADD,
        [SubtractEquation]: gl.FUNC_SUBTRACT,
        [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
      };
      if (isWebGL2) {
        equationToGL[MinEquation] = gl.MIN;
        equationToGL[MaxEquation] = gl.MAX;
      } else {
        const extension = extensions.get("EXT_blend_minmax");
        if (extension !== null) {
          equationToGL[MinEquation] = extension.MIN_EXT;
          equationToGL[MaxEquation] = extension.MAX_EXT;
        }
      }
      const factorToGL = {
        [ZeroFactor]: gl.ZERO,
        [OneFactor]: gl.ONE,
        [SrcColorFactor]: gl.SRC_COLOR,
        [SrcAlphaFactor]: gl.SRC_ALPHA,
        [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
        [DstColorFactor]: gl.DST_COLOR,
        [DstAlphaFactor]: gl.DST_ALPHA,
        [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
        [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
        [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
        [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
      };
      function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
        if (blending === NoBlending) {
          if (currentBlendingEnabled === true) {
            disable(gl.BLEND);
            currentBlendingEnabled = false;
          }
          return;
        }
        if (currentBlendingEnabled === false) {
          enable(gl.BLEND);
          currentBlendingEnabled = true;
        }
        if (blending !== CustomBlending) {
          if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
            if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
              gl.blendEquation(gl.FUNC_ADD);
              currentBlendEquation = AddEquation;
              currentBlendEquationAlpha = AddEquation;
            }
            if (premultipliedAlpha) {
              switch (blending) {
                case NormalBlending:
                  gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                  break;
                case AdditiveBlending:
                  gl.blendFunc(gl.ONE, gl.ONE);
                  break;
                case SubtractiveBlending:
                  gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                  break;
                case MultiplyBlending:
                  gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", blending);
                  break;
              }
            } else {
              switch (blending) {
                case NormalBlending:
                  gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                  break;
                case AdditiveBlending:
                  gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                  break;
                case SubtractiveBlending:
                  gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                  break;
                case MultiplyBlending:
                  gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                  break;
                default:
                  console.error("THREE.WebGLState: Invalid blending: ", blending);
                  break;
              }
            }
            currentBlendSrc = null;
            currentBlendDst = null;
            currentBlendSrcAlpha = null;
            currentBlendDstAlpha = null;
            currentBlending = blending;
            currentPremultipledAlpha = premultipliedAlpha;
          }
          return;
        }
        blendEquationAlpha = blendEquationAlpha || blendEquation;
        blendSrcAlpha = blendSrcAlpha || blendSrc;
        blendDstAlpha = blendDstAlpha || blendDst;
        if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
          gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
          currentBlendEquation = blendEquation;
          currentBlendEquationAlpha = blendEquationAlpha;
        }
        if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
          gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
          currentBlendSrc = blendSrc;
          currentBlendDst = blendDst;
          currentBlendSrcAlpha = blendSrcAlpha;
          currentBlendDstAlpha = blendDstAlpha;
        }
        currentBlending = blending;
        currentPremultipledAlpha = false;
      }
      function setMaterial(material, frontFaceCW) {
        material.side === DoubleSide2 ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
        let flipSided = material.side === BackSide;
        if (frontFaceCW)
          flipSided = !flipSided;
        setFlipSided(flipSided);
        material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
        depthBuffer.setFunc(material.depthFunc);
        depthBuffer.setTest(material.depthTest);
        depthBuffer.setMask(material.depthWrite);
        colorBuffer.setMask(material.colorWrite);
        const stencilWrite = material.stencilWrite;
        stencilBuffer.setTest(stencilWrite);
        if (stencilWrite) {
          stencilBuffer.setMask(material.stencilWriteMask);
          stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
          stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
        }
        setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
        material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      }
      function setFlipSided(flipSided) {
        if (currentFlipSided !== flipSided) {
          if (flipSided) {
            gl.frontFace(gl.CW);
          } else {
            gl.frontFace(gl.CCW);
          }
          currentFlipSided = flipSided;
        }
      }
      function setCullFace(cullFace) {
        if (cullFace !== CullFaceNone) {
          enable(gl.CULL_FACE);
          if (cullFace !== currentCullFace) {
            if (cullFace === CullFaceBack) {
              gl.cullFace(gl.BACK);
            } else if (cullFace === CullFaceFront) {
              gl.cullFace(gl.FRONT);
            } else {
              gl.cullFace(gl.FRONT_AND_BACK);
            }
          }
        } else {
          disable(gl.CULL_FACE);
        }
        currentCullFace = cullFace;
      }
      function setLineWidth(width) {
        if (width !== currentLineWidth) {
          if (lineWidthAvailable)
            gl.lineWidth(width);
          currentLineWidth = width;
        }
      }
      function setPolygonOffset(polygonOffset, factor, units) {
        if (polygonOffset) {
          enable(gl.POLYGON_OFFSET_FILL);
          if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
            gl.polygonOffset(factor, units);
            currentPolygonOffsetFactor = factor;
            currentPolygonOffsetUnits = units;
          }
        } else {
          disable(gl.POLYGON_OFFSET_FILL);
        }
      }
      function setScissorTest(scissorTest) {
        if (scissorTest) {
          enable(gl.SCISSOR_TEST);
        } else {
          disable(gl.SCISSOR_TEST);
        }
      }
      function activeTexture(webglSlot) {
        if (webglSlot === void 0)
          webglSlot = gl.TEXTURE0 + maxTextures - 1;
        if (currentTextureSlot !== webglSlot) {
          gl.activeTexture(webglSlot);
          currentTextureSlot = webglSlot;
        }
      }
      function bindTexture(webglType, webglTexture, webglSlot) {
        if (webglSlot === void 0) {
          if (currentTextureSlot === null) {
            webglSlot = gl.TEXTURE0 + maxTextures - 1;
          } else {
            webglSlot = currentTextureSlot;
          }
        }
        let boundTexture = currentBoundTextures[webglSlot];
        if (boundTexture === void 0) {
          boundTexture = { type: void 0, texture: void 0 };
          currentBoundTextures[webglSlot] = boundTexture;
        }
        if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
          if (currentTextureSlot !== webglSlot) {
            gl.activeTexture(webglSlot);
            currentTextureSlot = webglSlot;
          }
          gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
          boundTexture.type = webglType;
          boundTexture.texture = webglTexture;
        }
      }
      function unbindTexture() {
        const boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture !== void 0 && boundTexture.type !== void 0) {
          gl.bindTexture(boundTexture.type, null);
          boundTexture.type = void 0;
          boundTexture.texture = void 0;
        }
      }
      function compressedTexImage2D() {
        try {
          gl.compressedTexImage2D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function compressedTexImage3D() {
        try {
          gl.compressedTexImage3D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function texSubImage2D() {
        try {
          gl.texSubImage2D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function texSubImage3D() {
        try {
          gl.texSubImage3D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function compressedTexSubImage2D() {
        try {
          gl.compressedTexSubImage2D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function compressedTexSubImage3D() {
        try {
          gl.compressedTexSubImage3D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function texStorage2D() {
        try {
          gl.texStorage2D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function texStorage3D() {
        try {
          gl.texStorage3D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function texImage2D() {
        try {
          gl.texImage2D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function texImage3D() {
        try {
          gl.texImage3D.apply(gl, arguments);
        } catch (error) {
          console.error("THREE.WebGLState:", error);
        }
      }
      function scissor(scissor2) {
        if (currentScissor.equals(scissor2) === false) {
          gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
          currentScissor.copy(scissor2);
        }
      }
      function viewport(viewport2) {
        if (currentViewport.equals(viewport2) === false) {
          gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
          currentViewport.copy(viewport2);
        }
      }
      function updateUBOMapping(uniformsGroup, program) {
        let mapping = uboProgramMap.get(program);
        if (mapping === void 0) {
          mapping = /* @__PURE__ */ new WeakMap();
          uboProgramMap.set(program, mapping);
        }
        let blockIndex = mapping.get(uniformsGroup);
        if (blockIndex === void 0) {
          blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
          mapping.set(uniformsGroup, blockIndex);
        }
      }
      function uniformBlockBinding(uniformsGroup, program) {
        const mapping = uboProgramMap.get(program);
        const blockIndex = mapping.get(uniformsGroup);
        if (uboBindings.get(program) !== blockIndex) {
          gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
          uboBindings.set(program, blockIndex);
        }
      }
      function reset() {
        gl.disable(gl.BLEND);
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.disable(gl.SCISSOR_TEST);
        gl.disable(gl.STENCIL_TEST);
        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
        gl.blendEquation(gl.FUNC_ADD);
        gl.blendFunc(gl.ONE, gl.ZERO);
        gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
        gl.colorMask(true, true, true, true);
        gl.clearColor(0, 0, 0, 0);
        gl.depthMask(true);
        gl.depthFunc(gl.LESS);
        gl.clearDepth(1);
        gl.stencilMask(4294967295);
        gl.stencilFunc(gl.ALWAYS, 0, 4294967295);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        gl.clearStencil(0);
        gl.cullFace(gl.BACK);
        gl.frontFace(gl.CCW);
        gl.polygonOffset(0, 0);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        if (isWebGL2 === true) {
          gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
          gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
        }
        gl.useProgram(null);
        gl.lineWidth(1);
        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        enabledCapabilities = {};
        currentTextureSlot = null;
        currentBoundTextures = {};
        currentBoundFramebuffers = {};
        currentDrawbuffers = /* @__PURE__ */ new WeakMap();
        defaultDrawbuffers = [];
        currentProgram = null;
        currentBlendingEnabled = false;
        currentBlending = null;
        currentBlendEquation = null;
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendEquationAlpha = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentPremultipledAlpha = false;
        currentFlipSided = null;
        currentCullFace = null;
        currentLineWidth = null;
        currentPolygonOffsetFactor = null;
        currentPolygonOffsetUnits = null;
        currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
        currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
        colorBuffer.reset();
        depthBuffer.reset();
        stencilBuffer.reset();
      }
      return {
        buffers: {
          color: colorBuffer,
          depth: depthBuffer,
          stencil: stencilBuffer
        },
        enable,
        disable,
        bindFramebuffer,
        drawBuffers,
        useProgram,
        setBlending,
        setMaterial,
        setFlipSided,
        setCullFace,
        setLineWidth,
        setPolygonOffset,
        setScissorTest,
        activeTexture,
        bindTexture,
        unbindTexture,
        compressedTexImage2D,
        compressedTexImage3D,
        texImage2D,
        texImage3D,
        updateUBOMapping,
        uniformBlockBinding,
        texStorage2D,
        texStorage3D,
        texSubImage2D,
        texSubImage3D,
        compressedTexSubImage2D,
        compressedTexSubImage3D,
        scissor,
        viewport,
        reset
      };
    }
    function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
      const isWebGL2 = capabilities.isWebGL2;
      const maxTextures = capabilities.maxTextures;
      const maxCubemapSize = capabilities.maxCubemapSize;
      const maxTextureSize = capabilities.maxTextureSize;
      const maxSamples = capabilities.maxSamples;
      const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
      const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
      const _videoTextures = /* @__PURE__ */ new WeakMap();
      let _canvas2;
      const _sources = /* @__PURE__ */ new WeakMap();
      let useOffscreenCanvas = false;
      try {
        useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
      } catch (err) {
      }
      function createCanvas(width, height) {
        return useOffscreenCanvas ? (
          // eslint-disable-next-line compat/compat
          new OffscreenCanvas(width, height)
        ) : createElementNS("canvas");
      }
      function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
        let scale = 1;
        if (image.width > maxSize || image.height > maxSize) {
          scale = maxSize / Math.max(image.width, image.height);
        }
        if (scale < 1 || needsPowerOfTwo === true) {
          if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
            const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
            const width = floor(scale * image.width);
            const height = floor(scale * image.height);
            if (_canvas2 === void 0)
              _canvas2 = createCanvas(width, height);
            const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
            canvas.width = width;
            canvas.height = height;
            const context = canvas.getContext("2d");
            context.drawImage(image, 0, 0, width, height);
            console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
            return canvas;
          } else {
            if ("data" in image) {
              console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
            }
            return image;
          }
        }
        return image;
      }
      function isPowerOfTwo$1(image) {
        return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
      }
      function textureNeedsPowerOfTwo(texture) {
        if (isWebGL2)
          return false;
        return texture.wrapS !== ClampToEdgeWrapping2 || texture.wrapT !== ClampToEdgeWrapping2 || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
      }
      function textureNeedsGenerateMipmaps(texture, supportsMips) {
        return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
      }
      function generateMipmap(target) {
        _gl.generateMipmap(target);
      }
      function getInternalFormat(internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false) {
        if (isWebGL2 === false)
          return glFormat;
        if (internalFormatName !== null) {
          if (_gl[internalFormatName] !== void 0)
            return _gl[internalFormatName];
          console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
        }
        let internalFormat = glFormat;
        if (glFormat === _gl.RED) {
          if (glType === _gl.FLOAT)
            internalFormat = _gl.R32F;
          if (glType === _gl.HALF_FLOAT)
            internalFormat = _gl.R16F;
          if (glType === _gl.UNSIGNED_BYTE)
            internalFormat = _gl.R8;
        }
        if (glFormat === _gl.RG) {
          if (glType === _gl.FLOAT)
            internalFormat = _gl.RG32F;
          if (glType === _gl.HALF_FLOAT)
            internalFormat = _gl.RG16F;
          if (glType === _gl.UNSIGNED_BYTE)
            internalFormat = _gl.RG8;
        }
        if (glFormat === _gl.RGBA) {
          if (glType === _gl.FLOAT)
            internalFormat = _gl.RGBA32F;
          if (glType === _gl.HALF_FLOAT)
            internalFormat = _gl.RGBA16F;
          if (glType === _gl.UNSIGNED_BYTE)
            internalFormat = encoding === sRGBEncoding2 && forceLinearEncoding === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
          if (glType === _gl.UNSIGNED_SHORT_4_4_4_4)
            internalFormat = _gl.RGBA4;
          if (glType === _gl.UNSIGNED_SHORT_5_5_5_1)
            internalFormat = _gl.RGB5_A1;
        }
        if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
          extensions.get("EXT_color_buffer_float");
        }
        return internalFormat;
      }
      function getMipLevels(texture, image, supportsMips) {
        if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
          return Math.log2(Math.max(image.width, image.height)) + 1;
        } else if (texture.mipmaps !== void 0 && texture.mipmaps.length > 0) {
          return texture.mipmaps.length;
        } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
          return image.mipmaps.length;
        } else {
          return 1;
        }
      }
      function filterFallback(f) {
        if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
          return _gl.NEAREST;
        }
        return _gl.LINEAR;
      }
      function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        deallocateTexture(texture);
        if (texture.isVideoTexture) {
          _videoTextures.delete(texture);
        }
      }
      function onRenderTargetDispose(event) {
        const renderTarget = event.target;
        renderTarget.removeEventListener("dispose", onRenderTargetDispose);
        deallocateRenderTarget(renderTarget);
      }
      function deallocateTexture(texture) {
        const textureProperties = properties.get(texture);
        if (textureProperties.__webglInit === void 0)
          return;
        const source = texture.source;
        const webglTextures = _sources.get(source);
        if (webglTextures) {
          const webglTexture = webglTextures[textureProperties.__cacheKey];
          webglTexture.usedTimes--;
          if (webglTexture.usedTimes === 0) {
            deleteTexture(texture);
          }
          if (Object.keys(webglTextures).length === 0) {
            _sources.delete(source);
          }
        }
        properties.remove(texture);
      }
      function deleteTexture(texture) {
        const textureProperties = properties.get(texture);
        _gl.deleteTexture(textureProperties.__webglTexture);
        const source = texture.source;
        const webglTextures = _sources.get(source);
        delete webglTextures[textureProperties.__cacheKey];
        info.memory.textures--;
      }
      function deallocateRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        if (textureProperties.__webglTexture !== void 0) {
          _gl.deleteTexture(textureProperties.__webglTexture);
          info.memory.textures--;
        }
        if (renderTarget.depthTexture) {
          renderTarget.depthTexture.dispose();
        }
        if (renderTarget.isWebGLCubeRenderTarget) {
          for (let i = 0; i < 6; i++) {
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
            if (renderTargetProperties.__webglDepthbuffer)
              _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
          }
        } else {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
          if (renderTargetProperties.__webglDepthbuffer)
            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
          if (renderTargetProperties.__webglMultisampledFramebuffer)
            _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
          if (renderTargetProperties.__webglColorRenderbuffer) {
            for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {
              if (renderTargetProperties.__webglColorRenderbuffer[i])
                _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
            }
          }
          if (renderTargetProperties.__webglDepthRenderbuffer)
            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) {
          for (let i = 0, il = texture.length; i < il; i++) {
            const attachmentProperties = properties.get(texture[i]);
            if (attachmentProperties.__webglTexture) {
              _gl.deleteTexture(attachmentProperties.__webglTexture);
              info.memory.textures--;
            }
            properties.remove(texture[i]);
          }
        }
        properties.remove(texture);
        properties.remove(renderTarget);
      }
      let textureUnits = 0;
      function resetTextureUnits() {
        textureUnits = 0;
      }
      function allocateTextureUnit() {
        const textureUnit = textureUnits;
        if (textureUnit >= maxTextures) {
          console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
        }
        textureUnits += 1;
        return textureUnit;
      }
      function getTextureCacheKey(texture) {
        const array = [];
        array.push(texture.wrapS);
        array.push(texture.wrapT);
        array.push(texture.wrapR || 0);
        array.push(texture.magFilter);
        array.push(texture.minFilter);
        array.push(texture.anisotropy);
        array.push(texture.internalFormat);
        array.push(texture.format);
        array.push(texture.type);
        array.push(texture.generateMipmaps);
        array.push(texture.premultiplyAlpha);
        array.push(texture.flipY);
        array.push(texture.unpackAlignment);
        array.push(texture.encoding);
        return array.join();
      }
      function setTexture2D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.isVideoTexture)
          updateVideoTexture(texture);
        if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
          const image = texture.image;
          if (image === null) {
            console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
          } else if (image.complete === false) {
            console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
          } else {
            uploadTexture(textureProperties, texture, slot);
            return;
          }
        }
        state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      }
      function setTexture2DArray(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
        state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      }
      function setTexture3D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
        state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      }
      function setTextureCube(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
          uploadCubeTexture(textureProperties, texture, slot);
          return;
        }
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      }
      const wrappingToGL = {
        [RepeatWrapping2]: _gl.REPEAT,
        [ClampToEdgeWrapping2]: _gl.CLAMP_TO_EDGE,
        [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
      };
      const filterToGL = {
        [NearestFilter]: _gl.NEAREST,
        [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
        [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
        [LinearFilter]: _gl.LINEAR,
        [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
        [LinearMipmapLinearFilter2]: _gl.LINEAR_MIPMAP_LINEAR
      };
      function setTextureParameters(textureType, texture, supportsMips) {
        if (supportsMips) {
          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
          if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
          }
          _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
          _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
        } else {
          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
          if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
          }
          if (texture.wrapS !== ClampToEdgeWrapping2 || texture.wrapT !== ClampToEdgeWrapping2) {
            console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
          }
          _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
          _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));
          if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
            console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
          }
        }
        if (extensions.has("EXT_texture_filter_anisotropic") === true) {
          const extension = extensions.get("EXT_texture_filter_anisotropic");
          if (texture.magFilter === NearestFilter)
            return;
          if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter2)
            return;
          if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false)
            return;
          if (isWebGL2 === false && (texture.type === HalfFloatType && extensions.has("OES_texture_half_float_linear") === false))
            return;
          if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
            _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
            properties.get(texture).__currentAnisotropy = texture.anisotropy;
          }
        }
      }
      function initTexture(textureProperties, texture) {
        let forceUpload = false;
        if (textureProperties.__webglInit === void 0) {
          textureProperties.__webglInit = true;
          texture.addEventListener("dispose", onTextureDispose);
        }
        const source = texture.source;
        let webglTextures = _sources.get(source);
        if (webglTextures === void 0) {
          webglTextures = {};
          _sources.set(source, webglTextures);
        }
        const textureCacheKey = getTextureCacheKey(texture);
        if (textureCacheKey !== textureProperties.__cacheKey) {
          if (webglTextures[textureCacheKey] === void 0) {
            webglTextures[textureCacheKey] = {
              texture: _gl.createTexture(),
              usedTimes: 0
            };
            info.memory.textures++;
            forceUpload = true;
          }
          webglTextures[textureCacheKey].usedTimes++;
          const webglTexture = webglTextures[textureProperties.__cacheKey];
          if (webglTexture !== void 0) {
            webglTextures[textureProperties.__cacheKey].usedTimes--;
            if (webglTexture.usedTimes === 0) {
              deleteTexture(texture);
            }
          }
          textureProperties.__cacheKey = textureCacheKey;
          textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
        }
        return forceUpload;
      }
      function uploadTexture(textureProperties, texture, slot) {
        let textureType = _gl.TEXTURE_2D;
        if (texture.isDataArrayTexture || texture.isCompressedArrayTexture)
          textureType = _gl.TEXTURE_2D_ARRAY;
        if (texture.isData3DTexture)
          textureType = _gl.TEXTURE_3D;
        const forceUpload = initTexture(textureProperties, texture);
        const source = texture.source;
        state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
        const sourceProperties = properties.get(source);
        if (source.version !== sourceProperties.__version || forceUpload === true) {
          state.activeTexture(_gl.TEXTURE0 + slot);
          _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
          _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
          _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
          _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
          const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
          let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
          image = verifyColorSpace(texture, image);
          const supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.encoding);
          let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);
          setTextureParameters(textureType, texture, supportsMips);
          let mipmap;
          const mipmaps = texture.mipmaps;
          const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
          const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
          const levels = getMipLevels(texture, image, supportsMips);
          if (texture.isDepthTexture) {
            glInternalFormat = _gl.DEPTH_COMPONENT;
            if (isWebGL2) {
              if (texture.type === FloatType) {
                glInternalFormat = _gl.DEPTH_COMPONENT32F;
              } else if (texture.type === UnsignedIntType) {
                glInternalFormat = _gl.DEPTH_COMPONENT24;
              } else if (texture.type === UnsignedInt248Type) {
                glInternalFormat = _gl.DEPTH24_STENCIL8;
              } else {
                glInternalFormat = _gl.DEPTH_COMPONENT16;
              }
            } else {
              if (texture.type === FloatType) {
                console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
              }
            }
            if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
              if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
                console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
                texture.type = UnsignedIntType;
                glType = utils.convert(texture.type);
              }
            }
            if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
              glInternalFormat = _gl.DEPTH_STENCIL;
              if (texture.type !== UnsignedInt248Type) {
                console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
                texture.type = UnsignedInt248Type;
                glType = utils.convert(texture.type);
              }
            }
            if (allocateMemory) {
              if (useTexStorage) {
                state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
              } else {
                state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
              }
            }
          } else if (texture.isDataTexture) {
            if (mipmaps.length > 0 && supportsMips) {
              if (useTexStorage && allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
              }
              for (let i = 0, il = mipmaps.length; i < il; i++) {
                mipmap = mipmaps[i];
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                } else {
                  state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
              texture.generateMipmaps = false;
            } else {
              if (useTexStorage) {
                if (allocateMemory) {
                  state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
                }
                state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
              } else {
                state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
              }
            }
          } else if (texture.isCompressedTexture) {
            if (texture.isCompressedArrayTexture) {
              if (useTexStorage && allocateMemory) {
                state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
              }
              for (let i = 0, il = mipmaps.length; i < il; i++) {
                mipmap = mipmaps[i];
                if (texture.format !== RGBAFormat) {
                  if (glFormat !== null) {
                    if (useTexStorage) {
                      state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);
                    } else {
                      state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                    }
                  } else {
                    console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                  }
                } else {
                  if (useTexStorage) {
                    state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                  } else {
                    state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
                  }
                }
              }
            } else {
              if (useTexStorage && allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
              }
              for (let i = 0, il = mipmaps.length; i < il; i++) {
                mipmap = mipmaps[i];
                if (texture.format !== RGBAFormat) {
                  if (glFormat !== null) {
                    if (useTexStorage) {
                      state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                    } else {
                      state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                    }
                  } else {
                    console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                  }
                } else {
                  if (useTexStorage) {
                    state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                  } else {
                    state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                  }
                }
              }
            }
          } else if (texture.isDataArrayTexture) {
            if (useTexStorage) {
              if (allocateMemory) {
                state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
              }
              state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            } else {
              state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
            }
          } else if (texture.isData3DTexture) {
            if (useTexStorage) {
              if (allocateMemory) {
                state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
              }
              state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            } else {
              state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
            }
          } else if (texture.isFramebufferTexture) {
            if (allocateMemory) {
              if (useTexStorage) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
              } else {
                let width = image.width, height = image.height;
                for (let i = 0; i < levels; i++) {
                  state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
                  width >>= 1;
                  height >>= 1;
                }
              }
            }
          } else {
            if (mipmaps.length > 0 && supportsMips) {
              if (useTexStorage && allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
              }
              for (let i = 0, il = mipmaps.length; i < il; i++) {
                mipmap = mipmaps[i];
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
                } else {
                  state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
                }
              }
              texture.generateMipmaps = false;
            } else {
              if (useTexStorage) {
                if (allocateMemory) {
                  state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
                }
                state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
              } else {
                state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
              }
            }
          }
          if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
            generateMipmap(textureType);
          }
          sourceProperties.__version = source.version;
          if (texture.onUpdate)
            texture.onUpdate(texture);
        }
        textureProperties.__version = texture.version;
      }
      function uploadCubeTexture(textureProperties, texture, slot) {
        if (texture.image.length !== 6)
          return;
        const forceUpload = initTexture(textureProperties, texture);
        const source = texture.source;
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
        const sourceProperties = properties.get(source);
        if (source.version !== sourceProperties.__version || forceUpload === true) {
          state.activeTexture(_gl.TEXTURE0 + slot);
          _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
          _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
          _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
          _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
          const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
          const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
          const cubeImage = [];
          for (let i = 0; i < 6; i++) {
            if (!isCompressed && !isDataTexture) {
              cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
            } else {
              cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
            }
            cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
          }
          const image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.encoding), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
          const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
          const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
          let levels = getMipLevels(texture, image, supportsMips);
          setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
          let mipmaps;
          if (isCompressed) {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
            }
            for (let i = 0; i < 6; i++) {
              mipmaps = cubeImage[i].mipmaps;
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                if (texture.format !== RGBAFormat) {
                  if (glFormat !== null) {
                    if (useTexStorage) {
                      state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                    } else {
                      state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                    }
                  } else {
                    console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                  }
                } else {
                  if (useTexStorage) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                  } else {
                    state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                  }
                }
              }
            }
          } else {
            mipmaps = texture.mipmaps;
            if (useTexStorage && allocateMemory) {
              if (mipmaps.length > 0)
                levels++;
              state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
            }
            for (let i = 0; i < 6; i++) {
              if (isDataTexture) {
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
                }
                for (let j = 0; j < mipmaps.length; j++) {
                  const mipmap = mipmaps[j];
                  const mipmapImage = mipmap.image[i].image;
                  if (useTexStorage) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                  } else {
                    state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                  }
                }
              } else {
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
                }
                for (let j = 0; j < mipmaps.length; j++) {
                  const mipmap = mipmaps[j];
                  if (useTexStorage) {
                    state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                  } else {
                    state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
                  }
                }
              }
            }
          }
          if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
            generateMipmap(_gl.TEXTURE_CUBE_MAP);
          }
          sourceProperties.__version = source.version;
          if (texture.onUpdate)
            texture.onUpdate(texture);
        }
        textureProperties.__version = texture.version;
      }
      function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
        const glFormat = utils.convert(texture.format, texture.encoding);
        const glType = utils.convert(texture.type);
        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        const renderTargetProperties = properties.get(renderTarget);
        if (!renderTargetProperties.__hasExternalTextures) {
          if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
            state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
          } else {
            state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
          }
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
        } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
      }
      function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
          let glInternalFormat = _gl.DEPTH_COMPONENT16;
          if (isMultisample || useMultisampledRTT(renderTarget)) {
            const depthTexture = renderTarget.depthTexture;
            if (depthTexture && depthTexture.isDepthTexture) {
              if (depthTexture.type === FloatType) {
                glInternalFormat = _gl.DEPTH_COMPONENT32F;
              } else if (depthTexture.type === UnsignedIntType) {
                glInternalFormat = _gl.DEPTH_COMPONENT24;
              }
            }
            const samples = getRenderTargetSamples(renderTarget);
            if (useMultisampledRTT(renderTarget)) {
              multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            } else {
              _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            }
          } else {
            _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
          }
          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
          const samples = getRenderTargetSamples(renderTarget);
          if (isMultisample && useMultisampledRTT(renderTarget) === false) {
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
          } else if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
          } else {
            _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
          }
          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
        } else {
          const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
          for (let i = 0; i < textures.length; i++) {
            const texture = textures[i];
            const glFormat = utils.convert(texture.format, texture.encoding);
            const glType = utils.convert(texture.type);
            const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
            const samples = getRenderTargetSamples(renderTarget);
            if (isMultisample && useMultisampledRTT(renderTarget) === false) {
              _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            } else if (useMultisampledRTT(renderTarget)) {
              multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            } else {
              _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
            }
          }
        }
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
      }
      function setupDepthTexture(framebuffer, renderTarget) {
        const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
        if (isCube)
          throw new Error("Depth Texture with cube render targets is not supported");
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
          throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
        }
        if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
          renderTarget.depthTexture.image.width = renderTarget.width;
          renderTarget.depthTexture.image.height = renderTarget.height;
          renderTarget.depthTexture.needsUpdate = true;
        }
        setTexture2D(renderTarget.depthTexture, 0);
        const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
        const samples = getRenderTargetSamples(renderTarget);
        if (renderTarget.depthTexture.format === DepthFormat) {
          if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
          } else {
            _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
          }
        } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
          if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
          } else {
            _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
          }
        } else {
          throw new Error("Unknown depthTexture format");
        }
      }
      function setupDepthRenderbuffer(renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
          if (isCube)
            throw new Error("target.depthTexture not supported in Cube render targets");
          setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
        } else {
          if (isCube) {
            renderTargetProperties.__webglDepthbuffer = [];
            for (let i = 0; i < 6; i++) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
              renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
              setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
            }
          } else {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
          }
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
      }
      function rebindTextures(renderTarget, colorTexture, depthTexture) {
        const renderTargetProperties = properties.get(renderTarget);
        if (colorTexture !== void 0) {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);
        }
        if (depthTexture !== void 0) {
          setupDepthRenderbuffer(renderTarget);
        }
      }
      function setupRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        renderTarget.addEventListener("dispose", onRenderTargetDispose);
        if (renderTarget.isWebGLMultipleRenderTargets !== true) {
          if (textureProperties.__webglTexture === void 0) {
            textureProperties.__webglTexture = _gl.createTexture();
          }
          textureProperties.__version = texture.version;
          info.memory.textures++;
        }
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        if (isCube) {
          renderTargetProperties.__webglFramebuffer = [];
          for (let i = 0; i < 6; i++) {
            renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
          }
        } else {
          renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
          if (isMultipleRenderTargets) {
            if (capabilities.drawBuffers) {
              const textures = renderTarget.texture;
              for (let i = 0, il = textures.length; i < il; i++) {
                const attachmentProperties = properties.get(textures[i]);
                if (attachmentProperties.__webglTexture === void 0) {
                  attachmentProperties.__webglTexture = _gl.createTexture();
                  info.memory.textures++;
                }
              }
            } else {
              console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
            }
          }
          if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
            const textures = isMultipleRenderTargets ? texture : [texture];
            renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
            renderTargetProperties.__webglColorRenderbuffer = [];
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            for (let i = 0; i < textures.length; i++) {
              const texture2 = textures[i];
              renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
              _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
              const glFormat = utils.convert(texture2.format, texture2.encoding);
              const glType = utils.convert(texture2.type);
              const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.encoding, renderTarget.isXRRenderTarget === true);
              const samples = getRenderTargetSamples(renderTarget);
              _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            }
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
            if (renderTarget.depthBuffer) {
              renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
              setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
            }
            state.bindFramebuffer(_gl.FRAMEBUFFER, null);
          }
        }
        if (isCube) {
          state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
          setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
          for (let i = 0; i < 6; i++) {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
          }
          if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
            generateMipmap(_gl.TEXTURE_CUBE_MAP);
          }
          state.unbindTexture();
        } else if (isMultipleRenderTargets) {
          const textures = renderTarget.texture;
          for (let i = 0, il = textures.length; i < il; i++) {
            const attachment = textures[i];
            const attachmentProperties = properties.get(attachment);
            state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
            setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);
            if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {
              generateMipmap(_gl.TEXTURE_2D);
            }
          }
          state.unbindTexture();
        } else {
          let glTextureType = _gl.TEXTURE_2D;
          if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
            if (isWebGL2) {
              glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
            } else {
              console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");
            }
          }
          state.bindTexture(glTextureType, textureProperties.__webglTexture);
          setTextureParameters(glTextureType, texture, supportsMips);
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);
          if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
            generateMipmap(glTextureType);
          }
          state.unbindTexture();
        }
        if (renderTarget.depthBuffer) {
          setupDepthRenderbuffer(renderTarget);
        }
      }
      function updateRenderTargetMipmap(renderTarget) {
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
        for (let i = 0, il = textures.length; i < il; i++) {
          const texture = textures[i];
          if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
            const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
            const webglTexture = properties.get(texture).__webglTexture;
            state.bindTexture(target, webglTexture);
            generateMipmap(target);
            state.unbindTexture();
          }
        }
      }
      function updateMultisampleRenderTarget(renderTarget) {
        if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
          const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [renderTarget.texture];
          const width = renderTarget.width;
          const height = renderTarget.height;
          let mask = _gl.COLOR_BUFFER_BIT;
          const invalidationArray = [];
          const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          const renderTargetProperties = properties.get(renderTarget);
          const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
          if (isMultipleRenderTargets) {
            for (let i = 0; i < textures.length; i++) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
            }
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
          for (let i = 0; i < textures.length; i++) {
            invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);
            if (renderTarget.depthBuffer) {
              invalidationArray.push(depthStyle);
            }
            const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== void 0 ? renderTargetProperties.__ignoreDepthValues : false;
            if (ignoreDepthValues === false) {
              if (renderTarget.depthBuffer)
                mask |= _gl.DEPTH_BUFFER_BIT;
              if (renderTarget.stencilBuffer)
                mask |= _gl.STENCIL_BUFFER_BIT;
            }
            if (isMultipleRenderTargets) {
              _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            }
            if (ignoreDepthValues === true) {
              _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);
              _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
            }
            if (isMultipleRenderTargets) {
              const webglTexture = properties.get(textures[i]).__webglTexture;
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
            }
            _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
            if (supportsInvalidateFramebuffer) {
              _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);
            }
          }
          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
          if (isMultipleRenderTargets) {
            for (let i = 0; i < textures.length; i++) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
              _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
              const webglTexture = properties.get(textures[i]).__webglTexture;
              state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
              _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
            }
          }
          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        }
      }
      function getRenderTargetSamples(renderTarget) {
        return Math.min(maxSamples, renderTarget.samples);
      }
      function useMultisampledRTT(renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        return isWebGL2 && renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
      }
      function updateVideoTexture(texture) {
        const frame = info.render.frame;
        if (_videoTextures.get(texture) !== frame) {
          _videoTextures.set(texture, frame);
          texture.update();
        }
      }
      function verifyColorSpace(texture, image) {
        const encoding = texture.encoding;
        const format = texture.format;
        const type = texture.type;
        if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat)
          return image;
        if (encoding !== LinearEncoding) {
          if (encoding === sRGBEncoding2) {
            if (isWebGL2 === false) {
              if (extensions.has("EXT_sRGB") === true && format === RGBAFormat) {
                texture.format = _SRGBAFormat;
                texture.minFilter = LinearFilter;
                texture.generateMipmaps = false;
              } else {
                image = ImageUtils.sRGBToLinear(image);
              }
            } else {
              if (format !== RGBAFormat || type !== UnsignedByteType) {
                console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
              }
            }
          } else {
            console.error("THREE.WebGLTextures: Unsupported texture encoding:", encoding);
          }
        }
        return image;
      }
      this.allocateTextureUnit = allocateTextureUnit;
      this.resetTextureUnits = resetTextureUnits;
      this.setTexture2D = setTexture2D;
      this.setTexture2DArray = setTexture2DArray;
      this.setTexture3D = setTexture3D;
      this.setTextureCube = setTextureCube;
      this.rebindTextures = rebindTextures;
      this.setupRenderTarget = setupRenderTarget;
      this.updateRenderTargetMipmap = updateRenderTargetMipmap;
      this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
      this.setupDepthRenderbuffer = setupDepthRenderbuffer;
      this.setupFrameBufferTexture = setupFrameBufferTexture;
      this.useMultisampledRTT = useMultisampledRTT;
    }
    function WebGLUtils(gl, extensions, capabilities) {
      const isWebGL2 = capabilities.isWebGL2;
      function convert(p, encoding = null) {
        let extension;
        if (p === UnsignedByteType)
          return gl.UNSIGNED_BYTE;
        if (p === UnsignedShort4444Type)
          return gl.UNSIGNED_SHORT_4_4_4_4;
        if (p === UnsignedShort5551Type)
          return gl.UNSIGNED_SHORT_5_5_5_1;
        if (p === ByteType)
          return gl.BYTE;
        if (p === ShortType)
          return gl.SHORT;
        if (p === UnsignedShortType)
          return gl.UNSIGNED_SHORT;
        if (p === IntType)
          return gl.INT;
        if (p === UnsignedIntType)
          return gl.UNSIGNED_INT;
        if (p === FloatType)
          return gl.FLOAT;
        if (p === HalfFloatType) {
          if (isWebGL2)
            return gl.HALF_FLOAT;
          extension = extensions.get("OES_texture_half_float");
          if (extension !== null) {
            return extension.HALF_FLOAT_OES;
          } else {
            return null;
          }
        }
        if (p === AlphaFormat)
          return gl.ALPHA;
        if (p === RGBAFormat)
          return gl.RGBA;
        if (p === LuminanceFormat)
          return gl.LUMINANCE;
        if (p === LuminanceAlphaFormat)
          return gl.LUMINANCE_ALPHA;
        if (p === DepthFormat)
          return gl.DEPTH_COMPONENT;
        if (p === DepthStencilFormat)
          return gl.DEPTH_STENCIL;
        if (p === _SRGBAFormat) {
          extension = extensions.get("EXT_sRGB");
          if (extension !== null) {
            return extension.SRGB_ALPHA_EXT;
          } else {
            return null;
          }
        }
        if (p === RedFormat)
          return gl.RED;
        if (p === RedIntegerFormat)
          return gl.RED_INTEGER;
        if (p === RGFormat)
          return gl.RG;
        if (p === RGIntegerFormat)
          return gl.RG_INTEGER;
        if (p === RGBAIntegerFormat)
          return gl.RGBA_INTEGER;
        if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
          if (encoding === sRGBEncoding2) {
            extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
            if (extension !== null) {
              if (p === RGB_S3TC_DXT1_Format)
                return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
              if (p === RGBA_S3TC_DXT1_Format)
                return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
              if (p === RGBA_S3TC_DXT3_Format)
                return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
              if (p === RGBA_S3TC_DXT5_Format)
                return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
            } else {
              return null;
            }
          } else {
            extension = extensions.get("WEBGL_compressed_texture_s3tc");
            if (extension !== null) {
              if (p === RGB_S3TC_DXT1_Format)
                return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
              if (p === RGBA_S3TC_DXT1_Format)
                return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
              if (p === RGBA_S3TC_DXT3_Format)
                return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
              if (p === RGBA_S3TC_DXT5_Format)
                return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
            } else {
              return null;
            }
          }
        }
        if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
          extension = extensions.get("WEBGL_compressed_texture_pvrtc");
          if (extension !== null) {
            if (p === RGB_PVRTC_4BPPV1_Format)
              return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
            if (p === RGB_PVRTC_2BPPV1_Format)
              return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
            if (p === RGBA_PVRTC_4BPPV1_Format)
              return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
            if (p === RGBA_PVRTC_2BPPV1_Format)
              return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
          } else {
            return null;
          }
        }
        if (p === RGB_ETC1_Format) {
          extension = extensions.get("WEBGL_compressed_texture_etc1");
          if (extension !== null) {
            return extension.COMPRESSED_RGB_ETC1_WEBGL;
          } else {
            return null;
          }
        }
        if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
          extension = extensions.get("WEBGL_compressed_texture_etc");
          if (extension !== null) {
            if (p === RGB_ETC2_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
            if (p === RGBA_ETC2_EAC_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
          } else {
            return null;
          }
        }
        if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
          extension = extensions.get("WEBGL_compressed_texture_astc");
          if (extension !== null) {
            if (p === RGBA_ASTC_4x4_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
            if (p === RGBA_ASTC_5x4_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
            if (p === RGBA_ASTC_5x5_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
            if (p === RGBA_ASTC_6x5_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
            if (p === RGBA_ASTC_6x6_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
            if (p === RGBA_ASTC_8x5_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
            if (p === RGBA_ASTC_8x6_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
            if (p === RGBA_ASTC_8x8_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
            if (p === RGBA_ASTC_10x5_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
            if (p === RGBA_ASTC_10x6_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
            if (p === RGBA_ASTC_10x8_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
            if (p === RGBA_ASTC_10x10_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
            if (p === RGBA_ASTC_12x10_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
            if (p === RGBA_ASTC_12x12_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
          } else {
            return null;
          }
        }
        if (p === RGBA_BPTC_Format) {
          extension = extensions.get("EXT_texture_compression_bptc");
          if (extension !== null) {
            if (p === RGBA_BPTC_Format)
              return encoding === sRGBEncoding2 ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
          } else {
            return null;
          }
        }
        if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {
          extension = extensions.get("EXT_texture_compression_rgtc");
          if (extension !== null) {
            if (p === RGBA_BPTC_Format)
              return extension.COMPRESSED_RED_RGTC1_EXT;
            if (p === SIGNED_RED_RGTC1_Format)
              return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
            if (p === RED_GREEN_RGTC2_Format)
              return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
            if (p === SIGNED_RED_GREEN_RGTC2_Format)
              return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
          } else {
            return null;
          }
        }
        if (p === UnsignedInt248Type) {
          if (isWebGL2)
            return gl.UNSIGNED_INT_24_8;
          extension = extensions.get("WEBGL_depth_texture");
          if (extension !== null) {
            return extension.UNSIGNED_INT_24_8_WEBGL;
          } else {
            return null;
          }
        }
        return gl[p] !== void 0 ? gl[p] : null;
      }
      return { convert };
    }
    var ArrayCamera = class extends PerspectiveCamera2 {
      constructor(array = []) {
        super();
        this.isArrayCamera = true;
        this.cameras = array;
      }
    };
    var Group2 = class extends Object3D2 {
      constructor() {
        super();
        this.isGroup = true;
        this.type = "Group";
      }
    };
    var _moveEvent = { type: "move" };
    var WebXRController = class {
      constructor() {
        this._targetRay = null;
        this._grip = null;
        this._hand = null;
      }
      getHandSpace() {
        if (this._hand === null) {
          this._hand = new Group2();
          this._hand.matrixAutoUpdate = false;
          this._hand.visible = false;
          this._hand.joints = {};
          this._hand.inputState = { pinching: false };
        }
        return this._hand;
      }
      getTargetRaySpace() {
        if (this._targetRay === null) {
          this._targetRay = new Group2();
          this._targetRay.matrixAutoUpdate = false;
          this._targetRay.visible = false;
          this._targetRay.hasLinearVelocity = false;
          this._targetRay.linearVelocity = new Vector32();
          this._targetRay.hasAngularVelocity = false;
          this._targetRay.angularVelocity = new Vector32();
        }
        return this._targetRay;
      }
      getGripSpace() {
        if (this._grip === null) {
          this._grip = new Group2();
          this._grip.matrixAutoUpdate = false;
          this._grip.visible = false;
          this._grip.hasLinearVelocity = false;
          this._grip.linearVelocity = new Vector32();
          this._grip.hasAngularVelocity = false;
          this._grip.angularVelocity = new Vector32();
        }
        return this._grip;
      }
      dispatchEvent(event) {
        if (this._targetRay !== null) {
          this._targetRay.dispatchEvent(event);
        }
        if (this._grip !== null) {
          this._grip.dispatchEvent(event);
        }
        if (this._hand !== null) {
          this._hand.dispatchEvent(event);
        }
        return this;
      }
      connect(inputSource) {
        if (inputSource && inputSource.hand) {
          const hand = this._hand;
          if (hand) {
            for (const inputjoint of inputSource.hand.values()) {
              this._getHandJoint(hand, inputjoint);
            }
          }
        }
        this.dispatchEvent({ type: "connected", data: inputSource });
        return this;
      }
      disconnect(inputSource) {
        this.dispatchEvent({ type: "disconnected", data: inputSource });
        if (this._targetRay !== null) {
          this._targetRay.visible = false;
        }
        if (this._grip !== null) {
          this._grip.visible = false;
        }
        if (this._hand !== null) {
          this._hand.visible = false;
        }
        return this;
      }
      update(inputSource, frame, referenceSpace) {
        let inputPose = null;
        let gripPose = null;
        let handPose = null;
        const targetRay = this._targetRay;
        const grip = this._grip;
        const hand = this._hand;
        if (inputSource && frame.session.visibilityState !== "visible-blurred") {
          if (hand && inputSource.hand) {
            handPose = true;
            for (const inputjoint of inputSource.hand.values()) {
              const jointPose = frame.getJointPose(inputjoint, referenceSpace);
              const joint = this._getHandJoint(hand, inputjoint);
              if (jointPose !== null) {
                joint.matrix.fromArray(jointPose.transform.matrix);
                joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                joint.jointRadius = jointPose.radius;
              }
              joint.visible = jointPose !== null;
            }
            const indexTip = hand.joints["index-finger-tip"];
            const thumbTip = hand.joints["thumb-tip"];
            const distance = indexTip.position.distanceTo(thumbTip.position);
            const distanceToPinch = 0.02;
            const threshold = 5e-3;
            if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
              hand.inputState.pinching = false;
              this.dispatchEvent({
                type: "pinchend",
                handedness: inputSource.handedness,
                target: this
              });
            } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
              hand.inputState.pinching = true;
              this.dispatchEvent({
                type: "pinchstart",
                handedness: inputSource.handedness,
                target: this
              });
            }
          } else {
            if (grip !== null && inputSource.gripSpace) {
              gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
              if (gripPose !== null) {
                grip.matrix.fromArray(gripPose.transform.matrix);
                grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
                if (gripPose.linearVelocity) {
                  grip.hasLinearVelocity = true;
                  grip.linearVelocity.copy(gripPose.linearVelocity);
                } else {
                  grip.hasLinearVelocity = false;
                }
                if (gripPose.angularVelocity) {
                  grip.hasAngularVelocity = true;
                  grip.angularVelocity.copy(gripPose.angularVelocity);
                } else {
                  grip.hasAngularVelocity = false;
                }
              }
            }
          }
          if (targetRay !== null) {
            inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
            if (inputPose === null && gripPose !== null) {
              inputPose = gripPose;
            }
            if (inputPose !== null) {
              targetRay.matrix.fromArray(inputPose.transform.matrix);
              targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
              if (inputPose.linearVelocity) {
                targetRay.hasLinearVelocity = true;
                targetRay.linearVelocity.copy(inputPose.linearVelocity);
              } else {
                targetRay.hasLinearVelocity = false;
              }
              if (inputPose.angularVelocity) {
                targetRay.hasAngularVelocity = true;
                targetRay.angularVelocity.copy(inputPose.angularVelocity);
              } else {
                targetRay.hasAngularVelocity = false;
              }
              this.dispatchEvent(_moveEvent);
            }
          }
        }
        if (targetRay !== null) {
          targetRay.visible = inputPose !== null;
        }
        if (grip !== null) {
          grip.visible = gripPose !== null;
        }
        if (hand !== null) {
          hand.visible = handPose !== null;
        }
        return this;
      }
      // private method
      _getHandJoint(hand, inputjoint) {
        if (hand.joints[inputjoint.jointName] === void 0) {
          const joint = new Group2();
          joint.matrixAutoUpdate = false;
          joint.visible = false;
          hand.joints[inputjoint.jointName] = joint;
          hand.add(joint);
        }
        return hand.joints[inputjoint.jointName];
      }
    };
    var DepthTexture = class extends Texture2 {
      constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
        format = format !== void 0 ? format : DepthFormat;
        if (format !== DepthFormat && format !== DepthStencilFormat) {
          throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        }
        if (type === void 0 && format === DepthFormat)
          type = UnsignedIntType;
        if (type === void 0 && format === DepthStencilFormat)
          type = UnsignedInt248Type;
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isDepthTexture = true;
        this.image = { width, height };
        this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
        this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
        this.flipY = false;
        this.generateMipmaps = false;
      }
    };
    var WebXRManager = class extends EventDispatcher2 {
      constructor(renderer, gl) {
        super();
        const scope = this;
        let session = null;
        let framebufferScaleFactor = 1;
        let referenceSpace = null;
        let referenceSpaceType = "local-floor";
        let foveation = 1;
        let customReferenceSpace = null;
        let pose = null;
        let glBinding = null;
        let glProjLayer = null;
        let glBaseLayer = null;
        let xrFrame = null;
        const attributes = gl.getContextAttributes();
        let initialRenderTarget = null;
        let newRenderTarget = null;
        const controllers = [];
        const controllerInputSources = [];
        const planes = /* @__PURE__ */ new Set();
        const planesLastChangedTimes = /* @__PURE__ */ new Map();
        const cameraL = new PerspectiveCamera2();
        cameraL.layers.enable(1);
        cameraL.viewport = new Vector42();
        const cameraR = new PerspectiveCamera2();
        cameraR.layers.enable(2);
        cameraR.viewport = new Vector42();
        const cameras = [cameraL, cameraR];
        const cameraVR = new ArrayCamera();
        cameraVR.layers.enable(1);
        cameraVR.layers.enable(2);
        let _currentDepthNear = null;
        let _currentDepthFar = null;
        this.cameraAutoUpdate = true;
        this.enabled = false;
        this.isPresenting = false;
        this.getController = function(index) {
          let controller = controllers[index];
          if (controller === void 0) {
            controller = new WebXRController();
            controllers[index] = controller;
          }
          return controller.getTargetRaySpace();
        };
        this.getControllerGrip = function(index) {
          let controller = controllers[index];
          if (controller === void 0) {
            controller = new WebXRController();
            controllers[index] = controller;
          }
          return controller.getGripSpace();
        };
        this.getHand = function(index) {
          let controller = controllers[index];
          if (controller === void 0) {
            controller = new WebXRController();
            controllers[index] = controller;
          }
          return controller.getHandSpace();
        };
        function onSessionEvent(event) {
          const controllerIndex = controllerInputSources.indexOf(event.inputSource);
          if (controllerIndex === -1) {
            return;
          }
          const controller = controllers[controllerIndex];
          if (controller !== void 0) {
            controller.dispatchEvent({ type: event.type, data: event.inputSource });
          }
        }
        function onSessionEnd() {
          session.removeEventListener("select", onSessionEvent);
          session.removeEventListener("selectstart", onSessionEvent);
          session.removeEventListener("selectend", onSessionEvent);
          session.removeEventListener("squeeze", onSessionEvent);
          session.removeEventListener("squeezestart", onSessionEvent);
          session.removeEventListener("squeezeend", onSessionEvent);
          session.removeEventListener("end", onSessionEnd);
          session.removeEventListener("inputsourceschange", onInputSourcesChange);
          for (let i = 0; i < controllers.length; i++) {
            const inputSource = controllerInputSources[i];
            if (inputSource === null)
              continue;
            controllerInputSources[i] = null;
            controllers[i].disconnect(inputSource);
          }
          _currentDepthNear = null;
          _currentDepthFar = null;
          renderer.setRenderTarget(initialRenderTarget);
          glBaseLayer = null;
          glProjLayer = null;
          glBinding = null;
          session = null;
          newRenderTarget = null;
          animation.stop();
          scope.isPresenting = false;
          scope.dispatchEvent({ type: "sessionend" });
        }
        this.setFramebufferScaleFactor = function(value) {
          framebufferScaleFactor = value;
          if (scope.isPresenting === true) {
            console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
          }
        };
        this.setReferenceSpaceType = function(value) {
          referenceSpaceType = value;
          if (scope.isPresenting === true) {
            console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
          }
        };
        this.getReferenceSpace = function() {
          return customReferenceSpace || referenceSpace;
        };
        this.setReferenceSpace = function(space) {
          customReferenceSpace = space;
        };
        this.getBaseLayer = function() {
          return glProjLayer !== null ? glProjLayer : glBaseLayer;
        };
        this.getBinding = function() {
          return glBinding;
        };
        this.getFrame = function() {
          return xrFrame;
        };
        this.getSession = function() {
          return session;
        };
        this.setSession = async function(value) {
          session = value;
          if (session !== null) {
            initialRenderTarget = renderer.getRenderTarget();
            session.addEventListener("select", onSessionEvent);
            session.addEventListener("selectstart", onSessionEvent);
            session.addEventListener("selectend", onSessionEvent);
            session.addEventListener("squeeze", onSessionEvent);
            session.addEventListener("squeezestart", onSessionEvent);
            session.addEventListener("squeezeend", onSessionEvent);
            session.addEventListener("end", onSessionEnd);
            session.addEventListener("inputsourceschange", onInputSourcesChange);
            if (attributes.xrCompatible !== true) {
              await gl.makeXRCompatible();
            }
            if (session.renderState.layers === void 0 || renderer.capabilities.isWebGL2 === false) {
              const layerInit = {
                antialias: session.renderState.layers === void 0 ? attributes.antialias : true,
                alpha: attributes.alpha,
                depth: attributes.depth,
                stencil: attributes.stencil,
                framebufferScaleFactor
              };
              glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
              session.updateRenderState({ baseLayer: glBaseLayer });
              newRenderTarget = new WebGLRenderTarget(
                glBaseLayer.framebufferWidth,
                glBaseLayer.framebufferHeight,
                {
                  format: RGBAFormat,
                  type: UnsignedByteType,
                  encoding: renderer.outputEncoding,
                  stencilBuffer: attributes.stencil
                }
              );
            } else {
              let depthFormat = null;
              let depthType = null;
              let glDepthFormat = null;
              if (attributes.depth) {
                glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
                depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
                depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
              }
              const projectionlayerInit = {
                colorFormat: gl.RGBA8,
                depthFormat: glDepthFormat,
                scaleFactor: framebufferScaleFactor
              };
              glBinding = new XRWebGLBinding(session, gl);
              glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
              session.updateRenderState({ layers: [glProjLayer] });
              newRenderTarget = new WebGLRenderTarget(
                glProjLayer.textureWidth,
                glProjLayer.textureHeight,
                {
                  format: RGBAFormat,
                  type: UnsignedByteType,
                  depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
                  stencilBuffer: attributes.stencil,
                  encoding: renderer.outputEncoding,
                  samples: attributes.antialias ? 4 : 0
                }
              );
              const renderTargetProperties = renderer.properties.get(newRenderTarget);
              renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
            }
            newRenderTarget.isXRRenderTarget = true;
            this.setFoveation(foveation);
            customReferenceSpace = null;
            referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
            animation.setContext(session);
            animation.start();
            scope.isPresenting = true;
            scope.dispatchEvent({ type: "sessionstart" });
          }
        };
        function onInputSourcesChange(event) {
          for (let i = 0; i < event.removed.length; i++) {
            const inputSource = event.removed[i];
            const index = controllerInputSources.indexOf(inputSource);
            if (index >= 0) {
              controllerInputSources[index] = null;
              controllers[index].disconnect(inputSource);
            }
          }
          for (let i = 0; i < event.added.length; i++) {
            const inputSource = event.added[i];
            let controllerIndex = controllerInputSources.indexOf(inputSource);
            if (controllerIndex === -1) {
              for (let i2 = 0; i2 < controllers.length; i2++) {
                if (i2 >= controllerInputSources.length) {
                  controllerInputSources.push(inputSource);
                  controllerIndex = i2;
                  break;
                } else if (controllerInputSources[i2] === null) {
                  controllerInputSources[i2] = inputSource;
                  controllerIndex = i2;
                  break;
                }
              }
              if (controllerIndex === -1)
                break;
            }
            const controller = controllers[controllerIndex];
            if (controller) {
              controller.connect(inputSource);
            }
          }
        }
        const cameraLPos = new Vector32();
        const cameraRPos = new Vector32();
        function setProjectionFromUnion(camera, cameraL2, cameraR2) {
          cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
          cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
          const ipd = cameraLPos.distanceTo(cameraRPos);
          const projL = cameraL2.projectionMatrix.elements;
          const projR = cameraR2.projectionMatrix.elements;
          const near = projL[14] / (projL[10] - 1);
          const far = projL[14] / (projL[10] + 1);
          const topFov = (projL[9] + 1) / projL[5];
          const bottomFov = (projL[9] - 1) / projL[5];
          const leftFov = (projL[8] - 1) / projL[0];
          const rightFov = (projR[8] + 1) / projR[0];
          const left = near * leftFov;
          const right = near * rightFov;
          const zOffset = ipd / (-leftFov + rightFov);
          const xOffset = zOffset * -leftFov;
          cameraL2.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
          camera.translateX(xOffset);
          camera.translateZ(zOffset);
          camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
          camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
          const near2 = near + zOffset;
          const far2 = far + zOffset;
          const left2 = left - xOffset;
          const right2 = right + (ipd - xOffset);
          const top2 = topFov * far / far2 * near2;
          const bottom2 = bottomFov * far / far2 * near2;
          camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
          camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
        }
        function updateCamera(camera, parent) {
          if (parent === null) {
            camera.matrixWorld.copy(camera.matrix);
          } else {
            camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
          }
          camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        }
        this.updateCamera = function(camera) {
          if (session === null)
            return;
          cameraVR.near = cameraR.near = cameraL.near = camera.near;
          cameraVR.far = cameraR.far = cameraL.far = camera.far;
          if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
            session.updateRenderState({
              depthNear: cameraVR.near,
              depthFar: cameraVR.far
            });
            _currentDepthNear = cameraVR.near;
            _currentDepthFar = cameraVR.far;
          }
          const parent = camera.parent;
          const cameras2 = cameraVR.cameras;
          updateCamera(cameraVR, parent);
          for (let i = 0; i < cameras2.length; i++) {
            updateCamera(cameras2[i], parent);
          }
          if (cameras2.length === 2) {
            setProjectionFromUnion(cameraVR, cameraL, cameraR);
          } else {
            cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
          }
          updateUserCamera(camera, cameraVR, parent);
        };
        function updateUserCamera(camera, cameraVR2, parent) {
          if (parent === null) {
            camera.matrix.copy(cameraVR2.matrixWorld);
          } else {
            camera.matrix.copy(parent.matrixWorld);
            camera.matrix.invert();
            camera.matrix.multiply(cameraVR2.matrixWorld);
          }
          camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
          camera.updateMatrixWorld(true);
          const children = camera.children;
          for (let i = 0, l = children.length; i < l; i++) {
            children[i].updateMatrixWorld(true);
          }
          camera.projectionMatrix.copy(cameraVR2.projectionMatrix);
          camera.projectionMatrixInverse.copy(cameraVR2.projectionMatrixInverse);
          if (camera.isPerspectiveCamera) {
            camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
            camera.zoom = 1;
          }
        }
        this.getCamera = function() {
          return cameraVR;
        };
        this.getFoveation = function() {
          if (glProjLayer === null && glBaseLayer === null) {
            return void 0;
          }
          return foveation;
        };
        this.setFoveation = function(value) {
          foveation = value;
          if (glProjLayer !== null) {
            glProjLayer.fixedFoveation = value;
          }
          if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
            glBaseLayer.fixedFoveation = value;
          }
        };
        this.getPlanes = function() {
          return planes;
        };
        let onAnimationFrameCallback = null;
        function onAnimationFrame(time, frame) {
          pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
          xrFrame = frame;
          if (pose !== null) {
            const views = pose.views;
            if (glBaseLayer !== null) {
              renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
              renderer.setRenderTarget(newRenderTarget);
            }
            let cameraVRNeedsUpdate = false;
            if (views.length !== cameraVR.cameras.length) {
              cameraVR.cameras.length = 0;
              cameraVRNeedsUpdate = true;
            }
            for (let i = 0; i < views.length; i++) {
              const view = views[i];
              let viewport = null;
              if (glBaseLayer !== null) {
                viewport = glBaseLayer.getViewport(view);
              } else {
                const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
                viewport = glSubImage.viewport;
                if (i === 0) {
                  renderer.setRenderTargetTextures(
                    newRenderTarget,
                    glSubImage.colorTexture,
                    glProjLayer.ignoreDepthValues ? void 0 : glSubImage.depthStencilTexture
                  );
                  renderer.setRenderTarget(newRenderTarget);
                }
              }
              let camera = cameras[i];
              if (camera === void 0) {
                camera = new PerspectiveCamera2();
                camera.layers.enable(i);
                camera.viewport = new Vector42();
                cameras[i] = camera;
              }
              camera.matrix.fromArray(view.transform.matrix);
              camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
              camera.projectionMatrix.fromArray(view.projectionMatrix);
              camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
              camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
              if (i === 0) {
                cameraVR.matrix.copy(camera.matrix);
                cameraVR.matrix.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale);
              }
              if (cameraVRNeedsUpdate === true) {
                cameraVR.cameras.push(camera);
              }
            }
          }
          for (let i = 0; i < controllers.length; i++) {
            const inputSource = controllerInputSources[i];
            const controller = controllers[i];
            if (inputSource !== null && controller !== void 0) {
              controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
            }
          }
          if (onAnimationFrameCallback)
            onAnimationFrameCallback(time, frame);
          if (frame.detectedPlanes) {
            scope.dispatchEvent({ type: "planesdetected", data: frame.detectedPlanes });
            let planesToRemove = null;
            for (const plane of planes) {
              if (!frame.detectedPlanes.has(plane)) {
                if (planesToRemove === null) {
                  planesToRemove = [];
                }
                planesToRemove.push(plane);
              }
            }
            if (planesToRemove !== null) {
              for (const plane of planesToRemove) {
                planes.delete(plane);
                planesLastChangedTimes.delete(plane);
                scope.dispatchEvent({ type: "planeremoved", data: plane });
              }
            }
            for (const plane of frame.detectedPlanes) {
              if (!planes.has(plane)) {
                planes.add(plane);
                planesLastChangedTimes.set(plane, frame.lastChangedTime);
                scope.dispatchEvent({ type: "planeadded", data: plane });
              } else {
                const lastKnownTime = planesLastChangedTimes.get(plane);
                if (plane.lastChangedTime > lastKnownTime) {
                  planesLastChangedTimes.set(plane, plane.lastChangedTime);
                  scope.dispatchEvent({ type: "planechanged", data: plane });
                }
              }
            }
          }
          xrFrame = null;
        }
        const animation = new WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        this.setAnimationLoop = function(callback) {
          onAnimationFrameCallback = callback;
        };
        this.dispose = function() {
        };
      }
    };
    function WebGLMaterials(renderer, properties) {
      function refreshTransformUniform(map, uniform) {
        if (map.matrixAutoUpdate === true) {
          map.updateMatrix();
        }
        uniform.value.copy(map.matrix);
      }
      function refreshFogUniforms(uniforms, fog) {
        fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));
        if (fog.isFog) {
          uniforms.fogNear.value = fog.near;
          uniforms.fogFar.value = fog.far;
        } else if (fog.isFogExp2) {
          uniforms.fogDensity.value = fog.density;
        }
      }
      function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
        if (material.isMeshBasicMaterial) {
          refreshUniformsCommon(uniforms, material);
        } else if (material.isMeshLambertMaterial) {
          refreshUniformsCommon(uniforms, material);
        } else if (material.isMeshToonMaterial) {
          refreshUniformsCommon(uniforms, material);
          refreshUniformsToon(uniforms, material);
        } else if (material.isMeshPhongMaterial) {
          refreshUniformsCommon(uniforms, material);
          refreshUniformsPhong(uniforms, material);
        } else if (material.isMeshStandardMaterial) {
          refreshUniformsCommon(uniforms, material);
          refreshUniformsStandard(uniforms, material);
          if (material.isMeshPhysicalMaterial) {
            refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
          }
        } else if (material.isMeshMatcapMaterial) {
          refreshUniformsCommon(uniforms, material);
          refreshUniformsMatcap(uniforms, material);
        } else if (material.isMeshDepthMaterial) {
          refreshUniformsCommon(uniforms, material);
        } else if (material.isMeshDistanceMaterial) {
          refreshUniformsCommon(uniforms, material);
          refreshUniformsDistance(uniforms, material);
        } else if (material.isMeshNormalMaterial) {
          refreshUniformsCommon(uniforms, material);
        } else if (material.isLineBasicMaterial) {
          refreshUniformsLine(uniforms, material);
          if (material.isLineDashedMaterial) {
            refreshUniformsDash(uniforms, material);
          }
        } else if (material.isPointsMaterial) {
          refreshUniformsPoints(uniforms, material, pixelRatio, height);
        } else if (material.isSpriteMaterial) {
          refreshUniformsSprites(uniforms, material);
        } else if (material.isShadowMaterial) {
          uniforms.color.value.copy(material.color);
          uniforms.opacity.value = material.opacity;
        } else if (material.isShaderMaterial) {
          material.uniformsNeedUpdate = false;
        }
      }
      function refreshUniformsCommon(uniforms, material) {
        uniforms.opacity.value = material.opacity;
        if (material.color) {
          uniforms.diffuse.value.copy(material.color);
        }
        if (material.emissive) {
          uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
        }
        if (material.map) {
          uniforms.map.value = material.map;
          refreshTransformUniform(material.map, uniforms.mapTransform);
        }
        if (material.alphaMap) {
          uniforms.alphaMap.value = material.alphaMap;
          refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
        }
        if (material.bumpMap) {
          uniforms.bumpMap.value = material.bumpMap;
          refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
          uniforms.bumpScale.value = material.bumpScale;
          if (material.side === BackSide) {
            uniforms.bumpScale.value *= -1;
          }
        }
        if (material.normalMap) {
          uniforms.normalMap.value = material.normalMap;
          refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
          uniforms.normalScale.value.copy(material.normalScale);
          if (material.side === BackSide) {
            uniforms.normalScale.value.negate();
          }
        }
        if (material.displacementMap) {
          uniforms.displacementMap.value = material.displacementMap;
          refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
          uniforms.displacementScale.value = material.displacementScale;
          uniforms.displacementBias.value = material.displacementBias;
        }
        if (material.emissiveMap) {
          uniforms.emissiveMap.value = material.emissiveMap;
          refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
        }
        if (material.specularMap) {
          uniforms.specularMap.value = material.specularMap;
          refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
        }
        if (material.alphaTest > 0) {
          uniforms.alphaTest.value = material.alphaTest;
        }
        const envMap = properties.get(material).envMap;
        if (envMap) {
          uniforms.envMap.value = envMap;
          uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
          uniforms.reflectivity.value = material.reflectivity;
          uniforms.ior.value = material.ior;
          uniforms.refractionRatio.value = material.refractionRatio;
        }
        if (material.lightMap) {
          uniforms.lightMap.value = material.lightMap;
          const scaleFactor = renderer.useLegacyLights === true ? Math.PI : 1;
          uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
          refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
        }
        if (material.aoMap) {
          uniforms.aoMap.value = material.aoMap;
          uniforms.aoMapIntensity.value = material.aoMapIntensity;
          refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
        }
      }
      function refreshUniformsLine(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        if (material.map) {
          uniforms.map.value = material.map;
          refreshTransformUniform(material.map, uniforms.mapTransform);
        }
      }
      function refreshUniformsDash(uniforms, material) {
        uniforms.dashSize.value = material.dashSize;
        uniforms.totalSize.value = material.dashSize + material.gapSize;
        uniforms.scale.value = material.scale;
      }
      function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.size.value = material.size * pixelRatio;
        uniforms.scale.value = height * 0.5;
        if (material.map) {
          uniforms.map.value = material.map;
          refreshTransformUniform(material.map, uniforms.uvTransform);
        }
        if (material.alphaMap) {
          uniforms.alphaMap.value = material.alphaMap;
        }
        if (material.alphaTest > 0) {
          uniforms.alphaTest.value = material.alphaTest;
        }
      }
      function refreshUniformsSprites(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.rotation.value = material.rotation;
        if (material.map) {
          uniforms.map.value = material.map;
          refreshTransformUniform(material.map, uniforms.mapTransform);
        }
        if (material.alphaMap) {
          uniforms.alphaMap.value = material.alphaMap;
        }
        if (material.alphaTest > 0) {
          uniforms.alphaTest.value = material.alphaTest;
        }
      }
      function refreshUniformsPhong(uniforms, material) {
        uniforms.specular.value.copy(material.specular);
        uniforms.shininess.value = Math.max(material.shininess, 1e-4);
      }
      function refreshUniformsToon(uniforms, material) {
        if (material.gradientMap) {
          uniforms.gradientMap.value = material.gradientMap;
        }
      }
      function refreshUniformsStandard(uniforms, material) {
        uniforms.metalness.value = material.metalness;
        if (material.metalnessMap) {
          uniforms.metalnessMap.value = material.metalnessMap;
          refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
        }
        uniforms.roughness.value = material.roughness;
        if (material.roughnessMap) {
          uniforms.roughnessMap.value = material.roughnessMap;
          refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
        }
        const envMap = properties.get(material).envMap;
        if (envMap) {
          uniforms.envMapIntensity.value = material.envMapIntensity;
        }
      }
      function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
        uniforms.ior.value = material.ior;
        if (material.sheen > 0) {
          uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
          uniforms.sheenRoughness.value = material.sheenRoughness;
          if (material.sheenColorMap) {
            uniforms.sheenColorMap.value = material.sheenColorMap;
            refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
          }
          if (material.sheenRoughnessMap) {
            uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
            refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
          }
        }
        if (material.clearcoat > 0) {
          uniforms.clearcoat.value = material.clearcoat;
          uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
          if (material.clearcoatMap) {
            uniforms.clearcoatMap.value = material.clearcoatMap;
            refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
          }
          if (material.clearcoatRoughnessMap) {
            uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
            refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
          }
          if (material.clearcoatNormalMap) {
            uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
            refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
            uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
            if (material.side === BackSide) {
              uniforms.clearcoatNormalScale.value.negate();
            }
          }
        }
        if (material.iridescence > 0) {
          uniforms.iridescence.value = material.iridescence;
          uniforms.iridescenceIOR.value = material.iridescenceIOR;
          uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
          uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
          if (material.iridescenceMap) {
            uniforms.iridescenceMap.value = material.iridescenceMap;
            refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
          }
          if (material.iridescenceThicknessMap) {
            uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
            refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
          }
        }
        if (material.transmission > 0) {
          uniforms.transmission.value = material.transmission;
          uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
          uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
          if (material.transmissionMap) {
            uniforms.transmissionMap.value = material.transmissionMap;
            refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
          }
          uniforms.thickness.value = material.thickness;
          if (material.thicknessMap) {
            uniforms.thicknessMap.value = material.thicknessMap;
            refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
          }
          uniforms.attenuationDistance.value = material.attenuationDistance;
          uniforms.attenuationColor.value.copy(material.attenuationColor);
        }
        uniforms.specularIntensity.value = material.specularIntensity;
        uniforms.specularColor.value.copy(material.specularColor);
        if (material.specularColorMap) {
          uniforms.specularColorMap.value = material.specularColorMap;
          refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
        }
        if (material.specularIntensityMap) {
          uniforms.specularIntensityMap.value = material.specularIntensityMap;
          refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
        }
      }
      function refreshUniformsMatcap(uniforms, material) {
        if (material.matcap) {
          uniforms.matcap.value = material.matcap;
        }
      }
      function refreshUniformsDistance(uniforms, material) {
        const light = properties.get(material).light;
        uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
        uniforms.nearDistance.value = light.shadow.camera.near;
        uniforms.farDistance.value = light.shadow.camera.far;
      }
      return {
        refreshFogUniforms,
        refreshMaterialUniforms
      };
    }
    function WebGLUniformsGroups(gl, info, capabilities, state) {
      let buffers = {};
      let updateList = {};
      let allocatedBindingPoints = [];
      const maxBindingPoints = capabilities.isWebGL2 ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
      function bind(uniformsGroup, program) {
        const webglProgram = program.program;
        state.uniformBlockBinding(uniformsGroup, webglProgram);
      }
      function update(uniformsGroup, program) {
        let buffer = buffers[uniformsGroup.id];
        if (buffer === void 0) {
          prepareUniformsGroup(uniformsGroup);
          buffer = createBuffer(uniformsGroup);
          buffers[uniformsGroup.id] = buffer;
          uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
        }
        const webglProgram = program.program;
        state.updateUBOMapping(uniformsGroup, webglProgram);
        const frame = info.render.frame;
        if (updateList[uniformsGroup.id] !== frame) {
          updateBufferData(uniformsGroup);
          updateList[uniformsGroup.id] = frame;
        }
      }
      function createBuffer(uniformsGroup) {
        const bindingPointIndex = allocateBindingPointIndex();
        uniformsGroup.__bindingPointIndex = bindingPointIndex;
        const buffer = gl.createBuffer();
        const size = uniformsGroup.__size;
        const usage = uniformsGroup.usage;
        gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
        gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
        gl.bindBuffer(gl.UNIFORM_BUFFER, null);
        gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
        return buffer;
      }
      function allocateBindingPointIndex() {
        for (let i = 0; i < maxBindingPoints; i++) {
          if (allocatedBindingPoints.indexOf(i) === -1) {
            allocatedBindingPoints.push(i);
            return i;
          }
        }
        console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
        return 0;
      }
      function updateBufferData(uniformsGroup) {
        const buffer = buffers[uniformsGroup.id];
        const uniforms = uniformsGroup.uniforms;
        const cache = uniformsGroup.__cache;
        gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
        for (let i = 0, il = uniforms.length; i < il; i++) {
          const uniform = uniforms[i];
          if (hasUniformChanged(uniform, i, cache) === true) {
            const offset = uniform.__offset;
            const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
            let arrayOffset = 0;
            for (let i2 = 0; i2 < values.length; i2++) {
              const value = values[i2];
              const info2 = getUniformSize(value);
              if (typeof value === "number") {
                uniform.__data[0] = value;
                gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
              } else if (value.isMatrix3) {
                uniform.__data[0] = value.elements[0];
                uniform.__data[1] = value.elements[1];
                uniform.__data[2] = value.elements[2];
                uniform.__data[3] = value.elements[0];
                uniform.__data[4] = value.elements[3];
                uniform.__data[5] = value.elements[4];
                uniform.__data[6] = value.elements[5];
                uniform.__data[7] = value.elements[0];
                uniform.__data[8] = value.elements[6];
                uniform.__data[9] = value.elements[7];
                uniform.__data[10] = value.elements[8];
                uniform.__data[11] = value.elements[0];
              } else {
                value.toArray(uniform.__data, arrayOffset);
                arrayOffset += info2.storage / Float32Array.BYTES_PER_ELEMENT;
              }
            }
            gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
          }
        }
        gl.bindBuffer(gl.UNIFORM_BUFFER, null);
      }
      function hasUniformChanged(uniform, index, cache) {
        const value = uniform.value;
        if (cache[index] === void 0) {
          if (typeof value === "number") {
            cache[index] = value;
          } else {
            const values = Array.isArray(value) ? value : [value];
            const tempValues = [];
            for (let i = 0; i < values.length; i++) {
              tempValues.push(values[i].clone());
            }
            cache[index] = tempValues;
          }
          return true;
        } else {
          if (typeof value === "number") {
            if (cache[index] !== value) {
              cache[index] = value;
              return true;
            }
          } else {
            const cachedObjects = Array.isArray(cache[index]) ? cache[index] : [cache[index]];
            const values = Array.isArray(value) ? value : [value];
            for (let i = 0; i < cachedObjects.length; i++) {
              const cachedObject = cachedObjects[i];
              if (cachedObject.equals(values[i]) === false) {
                cachedObject.copy(values[i]);
                return true;
              }
            }
          }
        }
        return false;
      }
      function prepareUniformsGroup(uniformsGroup) {
        const uniforms = uniformsGroup.uniforms;
        let offset = 0;
        const chunkSize = 16;
        let chunkOffset = 0;
        for (let i = 0, l = uniforms.length; i < l; i++) {
          const uniform = uniforms[i];
          const infos = {
            boundary: 0,
            // bytes
            storage: 0
            // bytes
          };
          const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
          for (let j = 0, jl = values.length; j < jl; j++) {
            const value = values[j];
            const info2 = getUniformSize(value);
            infos.boundary += info2.boundary;
            infos.storage += info2.storage;
          }
          uniform.__data = new Float32Array(infos.storage / Float32Array.BYTES_PER_ELEMENT);
          uniform.__offset = offset;
          if (i > 0) {
            chunkOffset = offset % chunkSize;
            const remainingSizeInChunk = chunkSize - chunkOffset;
            if (chunkOffset !== 0 && remainingSizeInChunk - infos.boundary < 0) {
              offset += chunkSize - chunkOffset;
              uniform.__offset = offset;
            }
          }
          offset += infos.storage;
        }
        chunkOffset = offset % chunkSize;
        if (chunkOffset > 0)
          offset += chunkSize - chunkOffset;
        uniformsGroup.__size = offset;
        uniformsGroup.__cache = {};
        return this;
      }
      function getUniformSize(value) {
        const info2 = {
          boundary: 0,
          // bytes
          storage: 0
          // bytes
        };
        if (typeof value === "number") {
          info2.boundary = 4;
          info2.storage = 4;
        } else if (value.isVector2) {
          info2.boundary = 8;
          info2.storage = 8;
        } else if (value.isVector3 || value.isColor) {
          info2.boundary = 16;
          info2.storage = 12;
        } else if (value.isVector4) {
          info2.boundary = 16;
          info2.storage = 16;
        } else if (value.isMatrix3) {
          info2.boundary = 48;
          info2.storage = 48;
        } else if (value.isMatrix4) {
          info2.boundary = 64;
          info2.storage = 64;
        } else if (value.isTexture) {
          console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
        } else {
          console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
        }
        return info2;
      }
      function onUniformsGroupsDispose(event) {
        const uniformsGroup = event.target;
        uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
        const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
        allocatedBindingPoints.splice(index, 1);
        gl.deleteBuffer(buffers[uniformsGroup.id]);
        delete buffers[uniformsGroup.id];
        delete updateList[uniformsGroup.id];
      }
      function dispose() {
        for (const id2 in buffers) {
          gl.deleteBuffer(buffers[id2]);
        }
        allocatedBindingPoints = [];
        buffers = {};
        updateList = {};
      }
      return {
        bind,
        update,
        dispose
      };
    }
    function createCanvasElement() {
      const canvas = createElementNS("canvas");
      canvas.style.display = "block";
      return canvas;
    }
    var WebGLRenderer = class {
      constructor(parameters = {}) {
        const {
          canvas = createCanvasElement(),
          context = null,
          depth = true,
          stencil = true,
          alpha = false,
          antialias = false,
          premultipliedAlpha = true,
          preserveDrawingBuffer = false,
          powerPreference = "default",
          failIfMajorPerformanceCaveat = false
        } = parameters;
        this.isWebGLRenderer = true;
        let _alpha;
        if (context !== null) {
          _alpha = context.getContextAttributes().alpha;
        } else {
          _alpha = alpha;
        }
        let currentRenderList = null;
        let currentRenderState = null;
        const renderListStack = [];
        const renderStateStack = [];
        this.domElement = canvas;
        this.debug = {
          /**
           * Enables error checking and reporting when shader programs are being compiled
           * @type {boolean}
           */
          checkShaderErrors: true,
          /**
           * Callback for custom error reporting.
           * @type {?Function}
           */
          onShaderError: null
        };
        this.autoClear = true;
        this.autoClearColor = true;
        this.autoClearDepth = true;
        this.autoClearStencil = true;
        this.sortObjects = true;
        this.clippingPlanes = [];
        this.localClippingEnabled = false;
        this.outputEncoding = LinearEncoding;
        this.useLegacyLights = true;
        this.toneMapping = NoToneMapping;
        this.toneMappingExposure = 1;
        const _this = this;
        let _isContextLost = false;
        let _currentActiveCubeFace = 0;
        let _currentActiveMipmapLevel = 0;
        let _currentRenderTarget = null;
        let _currentMaterialId = -1;
        let _currentCamera = null;
        const _currentViewport = new Vector42();
        const _currentScissor = new Vector42();
        let _currentScissorTest = null;
        let _width = canvas.width;
        let _height = canvas.height;
        let _pixelRatio = 1;
        let _opaqueSort = null;
        let _transparentSort = null;
        const _viewport = new Vector42(0, 0, _width, _height);
        const _scissor = new Vector42(0, 0, _width, _height);
        let _scissorTest = false;
        const _frustum = new Frustum();
        let _clippingEnabled = false;
        let _localClippingEnabled = false;
        let _transmissionRenderTarget = null;
        const _projScreenMatrix2 = new Matrix42();
        const _vector32 = new Vector32();
        const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
        function getTargetPixelRatio() {
          return _currentRenderTarget === null ? _pixelRatio : 1;
        }
        let _gl = context;
        function getContext(contextNames, contextAttributes) {
          for (let i = 0; i < contextNames.length; i++) {
            const contextName = contextNames[i];
            const context2 = canvas.getContext(contextName, contextAttributes);
            if (context2 !== null)
              return context2;
          }
          return null;
        }
        try {
          const contextAttributes = {
            alpha: true,
            depth,
            stencil,
            antialias,
            premultipliedAlpha,
            preserveDrawingBuffer,
            powerPreference,
            failIfMajorPerformanceCaveat
          };
          if ("setAttribute" in canvas)
            canvas.setAttribute("data-engine", `three.js r${REVISION}`);
          canvas.addEventListener("webglcontextlost", onContextLost, false);
          canvas.addEventListener("webglcontextrestored", onContextRestore, false);
          canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
          if (_gl === null) {
            const contextNames = ["webgl2", "webgl", "experimental-webgl"];
            if (_this.isWebGL1Renderer === true) {
              contextNames.shift();
            }
            _gl = getContext(contextNames, contextAttributes);
            if (_gl === null) {
              if (getContext(contextNames)) {
                throw new Error("Error creating WebGL context with your selected attributes.");
              } else {
                throw new Error("Error creating WebGL context.");
              }
            }
          }
          if (_gl.getShaderPrecisionFormat === void 0) {
            _gl.getShaderPrecisionFormat = function() {
              return { "rangeMin": 1, "rangeMax": 1, "precision": 1 };
            };
          }
        } catch (error) {
          console.error("THREE.WebGLRenderer: " + error.message);
          throw error;
        }
        let extensions, capabilities, state, info;
        let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
        let programCache, materials, renderLists, renderStates, clipping, shadowMap;
        let background, morphtargets, bufferRenderer, indexedBufferRenderer;
        let utils, bindingStates, uniformsGroups;
        function initGLContext() {
          extensions = new WebGLExtensions(_gl);
          capabilities = new WebGLCapabilities(_gl, extensions, parameters);
          extensions.init(capabilities);
          utils = new WebGLUtils(_gl, extensions, capabilities);
          state = new WebGLState(_gl, extensions, capabilities);
          info = new WebGLInfo(_gl);
          properties = new WebGLProperties();
          textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
          cubemaps = new WebGLCubeMaps(_this);
          cubeuvmaps = new WebGLCubeUVMaps(_this);
          attributes = new WebGLAttributes(_gl, capabilities);
          bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
          geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
          objects = new WebGLObjects(_gl, geometries, attributes, info);
          morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
          clipping = new WebGLClipping(properties);
          programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
          materials = new WebGLMaterials(_this, properties);
          renderLists = new WebGLRenderLists();
          renderStates = new WebGLRenderStates(extensions, capabilities);
          background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
          shadowMap = new WebGLShadowMap(_this, objects, capabilities);
          uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
          bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
          indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
          info.programs = programCache.programs;
          _this.capabilities = capabilities;
          _this.extensions = extensions;
          _this.properties = properties;
          _this.renderLists = renderLists;
          _this.shadowMap = shadowMap;
          _this.state = state;
          _this.info = info;
        }
        initGLContext();
        const xr = new WebXRManager(_this, _gl);
        this.xr = xr;
        this.getContext = function() {
          return _gl;
        };
        this.getContextAttributes = function() {
          return _gl.getContextAttributes();
        };
        this.forceContextLoss = function() {
          const extension = extensions.get("WEBGL_lose_context");
          if (extension)
            extension.loseContext();
        };
        this.forceContextRestore = function() {
          const extension = extensions.get("WEBGL_lose_context");
          if (extension)
            extension.restoreContext();
        };
        this.getPixelRatio = function() {
          return _pixelRatio;
        };
        this.setPixelRatio = function(value) {
          if (value === void 0)
            return;
          _pixelRatio = value;
          this.setSize(_width, _height, false);
        };
        this.getSize = function(target) {
          return target.set(_width, _height);
        };
        this.setSize = function(width, height, updateStyle = true) {
          if (xr.isPresenting) {
            console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
            return;
          }
          _width = width;
          _height = height;
          canvas.width = Math.floor(width * _pixelRatio);
          canvas.height = Math.floor(height * _pixelRatio);
          if (updateStyle === true) {
            canvas.style.width = width + "px";
            canvas.style.height = height + "px";
          }
          this.setViewport(0, 0, width, height);
        };
        this.getDrawingBufferSize = function(target) {
          return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
        };
        this.setDrawingBufferSize = function(width, height, pixelRatio) {
          _width = width;
          _height = height;
          _pixelRatio = pixelRatio;
          canvas.width = Math.floor(width * pixelRatio);
          canvas.height = Math.floor(height * pixelRatio);
          this.setViewport(0, 0, width, height);
        };
        this.getCurrentViewport = function(target) {
          return target.copy(_currentViewport);
        };
        this.getViewport = function(target) {
          return target.copy(_viewport);
        };
        this.setViewport = function(x, y, width, height) {
          if (x.isVector4) {
            _viewport.set(x.x, x.y, x.z, x.w);
          } else {
            _viewport.set(x, y, width, height);
          }
          state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
        };
        this.getScissor = function(target) {
          return target.copy(_scissor);
        };
        this.setScissor = function(x, y, width, height) {
          if (x.isVector4) {
            _scissor.set(x.x, x.y, x.z, x.w);
          } else {
            _scissor.set(x, y, width, height);
          }
          state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
        };
        this.getScissorTest = function() {
          return _scissorTest;
        };
        this.setScissorTest = function(boolean) {
          state.setScissorTest(_scissorTest = boolean);
        };
        this.setOpaqueSort = function(method) {
          _opaqueSort = method;
        };
        this.setTransparentSort = function(method) {
          _transparentSort = method;
        };
        this.getClearColor = function(target) {
          return target.copy(background.getClearColor());
        };
        this.setClearColor = function() {
          background.setClearColor.apply(background, arguments);
        };
        this.getClearAlpha = function() {
          return background.getClearAlpha();
        };
        this.setClearAlpha = function() {
          background.setClearAlpha.apply(background, arguments);
        };
        this.clear = function(color = true, depth2 = true, stencil2 = true) {
          let bits2 = 0;
          if (color)
            bits2 |= _gl.COLOR_BUFFER_BIT;
          if (depth2)
            bits2 |= _gl.DEPTH_BUFFER_BIT;
          if (stencil2)
            bits2 |= _gl.STENCIL_BUFFER_BIT;
          _gl.clear(bits2);
        };
        this.clearColor = function() {
          this.clear(true, false, false);
        };
        this.clearDepth = function() {
          this.clear(false, true, false);
        };
        this.clearStencil = function() {
          this.clear(false, false, true);
        };
        this.dispose = function() {
          canvas.removeEventListener("webglcontextlost", onContextLost, false);
          canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
          canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
          renderLists.dispose();
          renderStates.dispose();
          properties.dispose();
          cubemaps.dispose();
          cubeuvmaps.dispose();
          objects.dispose();
          bindingStates.dispose();
          uniformsGroups.dispose();
          programCache.dispose();
          xr.dispose();
          xr.removeEventListener("sessionstart", onXRSessionStart);
          xr.removeEventListener("sessionend", onXRSessionEnd);
          if (_transmissionRenderTarget) {
            _transmissionRenderTarget.dispose();
            _transmissionRenderTarget = null;
          }
          animation.stop();
        };
        function onContextLost(event) {
          event.preventDefault();
          console.log("THREE.WebGLRenderer: Context Lost.");
          _isContextLost = true;
        }
        function onContextRestore() {
          console.log("THREE.WebGLRenderer: Context Restored.");
          _isContextLost = false;
          const infoAutoReset = info.autoReset;
          const shadowMapEnabled = shadowMap.enabled;
          const shadowMapAutoUpdate = shadowMap.autoUpdate;
          const shadowMapNeedsUpdate = shadowMap.needsUpdate;
          const shadowMapType = shadowMap.type;
          initGLContext();
          info.autoReset = infoAutoReset;
          shadowMap.enabled = shadowMapEnabled;
          shadowMap.autoUpdate = shadowMapAutoUpdate;
          shadowMap.needsUpdate = shadowMapNeedsUpdate;
          shadowMap.type = shadowMapType;
        }
        function onContextCreationError(event) {
          console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
        }
        function onMaterialDispose(event) {
          const material = event.target;
          material.removeEventListener("dispose", onMaterialDispose);
          deallocateMaterial(material);
        }
        function deallocateMaterial(material) {
          releaseMaterialProgramReferences(material);
          properties.remove(material);
        }
        function releaseMaterialProgramReferences(material) {
          const programs = properties.get(material).programs;
          if (programs !== void 0) {
            programs.forEach(function(program) {
              programCache.releaseProgram(program);
            });
            if (material.isShaderMaterial) {
              programCache.releaseShaderCache(material);
            }
          }
        }
        this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
          if (scene === null)
            scene = _emptyScene;
          const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
          const program = setProgram(camera, scene, geometry, material, object);
          state.setMaterial(material, frontFaceCW);
          let index = geometry.index;
          let rangeFactor = 1;
          if (material.wireframe === true) {
            index = geometries.getWireframeAttribute(geometry);
            rangeFactor = 2;
          }
          const drawRange = geometry.drawRange;
          const position = geometry.attributes.position;
          let drawStart = drawRange.start * rangeFactor;
          let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
          if (group !== null) {
            drawStart = Math.max(drawStart, group.start * rangeFactor);
            drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
          }
          if (index !== null) {
            drawStart = Math.max(drawStart, 0);
            drawEnd = Math.min(drawEnd, index.count);
          } else if (position !== void 0 && position !== null) {
            drawStart = Math.max(drawStart, 0);
            drawEnd = Math.min(drawEnd, position.count);
          }
          const drawCount = drawEnd - drawStart;
          if (drawCount < 0 || drawCount === Infinity)
            return;
          bindingStates.setup(object, material, program, geometry, index);
          let attribute;
          let renderer = bufferRenderer;
          if (index !== null) {
            attribute = attributes.get(index);
            renderer = indexedBufferRenderer;
            renderer.setIndex(attribute);
          }
          if (object.isMesh) {
            if (material.wireframe === true) {
              state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
              renderer.setMode(_gl.LINES);
            } else {
              renderer.setMode(_gl.TRIANGLES);
            }
          } else if (object.isLine) {
            let lineWidth = material.linewidth;
            if (lineWidth === void 0)
              lineWidth = 1;
            state.setLineWidth(lineWidth * getTargetPixelRatio());
            if (object.isLineSegments) {
              renderer.setMode(_gl.LINES);
            } else if (object.isLineLoop) {
              renderer.setMode(_gl.LINE_LOOP);
            } else {
              renderer.setMode(_gl.LINE_STRIP);
            }
          } else if (object.isPoints) {
            renderer.setMode(_gl.POINTS);
          } else if (object.isSprite) {
            renderer.setMode(_gl.TRIANGLES);
          }
          if (object.isInstancedMesh) {
            renderer.renderInstances(drawStart, drawCount, object.count);
          } else if (geometry.isInstancedBufferGeometry) {
            const maxInstanceCount = geometry._maxInstanceCount !== void 0 ? geometry._maxInstanceCount : Infinity;
            const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
            renderer.renderInstances(drawStart, drawCount, instanceCount);
          } else {
            renderer.render(drawStart, drawCount);
          }
        };
        this.compile = function(scene, camera) {
          function prepare(material, scene2, object) {
            if (material.transparent === true && material.side === DoubleSide2 && material.forceSinglePass === false) {
              material.side = BackSide;
              material.needsUpdate = true;
              getProgram(material, scene2, object);
              material.side = FrontSide2;
              material.needsUpdate = true;
              getProgram(material, scene2, object);
              material.side = DoubleSide2;
            } else {
              getProgram(material, scene2, object);
            }
          }
          currentRenderState = renderStates.get(scene);
          currentRenderState.init();
          renderStateStack.push(currentRenderState);
          scene.traverseVisible(function(object) {
            if (object.isLight && object.layers.test(camera.layers)) {
              currentRenderState.pushLight(object);
              if (object.castShadow) {
                currentRenderState.pushShadow(object);
              }
            }
          });
          currentRenderState.setupLights(_this.useLegacyLights);
          scene.traverse(function(object) {
            const material = object.material;
            if (material) {
              if (Array.isArray(material)) {
                for (let i = 0; i < material.length; i++) {
                  const material2 = material[i];
                  prepare(material2, scene, object);
                }
              } else {
                prepare(material, scene, object);
              }
            }
          });
          renderStateStack.pop();
          currentRenderState = null;
        };
        let onAnimationFrameCallback = null;
        function onAnimationFrame(time) {
          if (onAnimationFrameCallback)
            onAnimationFrameCallback(time);
        }
        function onXRSessionStart() {
          animation.stop();
        }
        function onXRSessionEnd() {
          animation.start();
        }
        const animation = new WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        if (typeof self !== "undefined")
          animation.setContext(self);
        this.setAnimationLoop = function(callback) {
          onAnimationFrameCallback = callback;
          xr.setAnimationLoop(callback);
          callback === null ? animation.stop() : animation.start();
        };
        xr.addEventListener("sessionstart", onXRSessionStart);
        xr.addEventListener("sessionend", onXRSessionEnd);
        this.render = function(scene, camera) {
          if (camera !== void 0 && camera.isCamera !== true) {
            console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
            return;
          }
          if (_isContextLost === true)
            return;
          if (scene.matrixWorldAutoUpdate === true)
            scene.updateMatrixWorld();
          if (camera.parent === null && camera.matrixWorldAutoUpdate === true)
            camera.updateMatrixWorld();
          if (xr.enabled === true && xr.isPresenting === true) {
            if (xr.cameraAutoUpdate === true)
              xr.updateCamera(camera);
            camera = xr.getCamera();
          }
          if (scene.isScene === true)
            scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
          currentRenderState = renderStates.get(scene, renderStateStack.length);
          currentRenderState.init();
          renderStateStack.push(currentRenderState);
          _projScreenMatrix2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
          _frustum.setFromProjectionMatrix(_projScreenMatrix2);
          _localClippingEnabled = this.localClippingEnabled;
          _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
          currentRenderList = renderLists.get(scene, renderListStack.length);
          currentRenderList.init();
          renderListStack.push(currentRenderList);
          projectObject(scene, camera, 0, _this.sortObjects);
          currentRenderList.finish();
          if (_this.sortObjects === true) {
            currentRenderList.sort(_opaqueSort, _transparentSort);
          }
          if (_clippingEnabled === true)
            clipping.beginShadows();
          const shadowsArray = currentRenderState.state.shadowsArray;
          shadowMap.render(shadowsArray, scene, camera);
          if (_clippingEnabled === true)
            clipping.endShadows();
          if (this.info.autoReset === true)
            this.info.reset();
          background.render(currentRenderList, scene);
          currentRenderState.setupLights(_this.useLegacyLights);
          if (camera.isArrayCamera) {
            const cameras = camera.cameras;
            for (let i = 0, l = cameras.length; i < l; i++) {
              const camera2 = cameras[i];
              renderScene(currentRenderList, scene, camera2, camera2.viewport);
            }
          } else {
            renderScene(currentRenderList, scene, camera);
          }
          if (_currentRenderTarget !== null) {
            textures.updateMultisampleRenderTarget(_currentRenderTarget);
            textures.updateRenderTargetMipmap(_currentRenderTarget);
          }
          if (scene.isScene === true)
            scene.onAfterRender(_this, scene, camera);
          bindingStates.resetDefaultState();
          _currentMaterialId = -1;
          _currentCamera = null;
          renderStateStack.pop();
          if (renderStateStack.length > 0) {
            currentRenderState = renderStateStack[renderStateStack.length - 1];
          } else {
            currentRenderState = null;
          }
          renderListStack.pop();
          if (renderListStack.length > 0) {
            currentRenderList = renderListStack[renderListStack.length - 1];
          } else {
            currentRenderList = null;
          }
        };
        function projectObject(object, camera, groupOrder, sortObjects) {
          if (object.visible === false)
            return;
          const visible = object.layers.test(camera.layers);
          if (visible) {
            if (object.isGroup) {
              groupOrder = object.renderOrder;
            } else if (object.isLOD) {
              if (object.autoUpdate === true)
                object.update(camera);
            } else if (object.isLight) {
              currentRenderState.pushLight(object);
              if (object.castShadow) {
                currentRenderState.pushShadow(object);
              }
            } else if (object.isSprite) {
              if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                if (sortObjects) {
                  _vector32.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
                }
                const geometry = objects.update(object);
                const material = object.material;
                if (material.visible) {
                  currentRenderList.push(object, geometry, material, groupOrder, _vector32.z, null);
                }
              }
            } else if (object.isMesh || object.isLine || object.isPoints) {
              if (object.isSkinnedMesh) {
                if (object.skeleton.frame !== info.render.frame) {
                  object.skeleton.update();
                  object.skeleton.frame = info.render.frame;
                }
              }
              if (!object.frustumCulled || _frustum.intersectsObject(object)) {
                if (sortObjects) {
                  _vector32.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix2);
                }
                const geometry = objects.update(object);
                const material = object.material;
                if (Array.isArray(material)) {
                  const groups = geometry.groups;
                  for (let i = 0, l = groups.length; i < l; i++) {
                    const group = groups[i];
                    const groupMaterial = material[group.materialIndex];
                    if (groupMaterial && groupMaterial.visible) {
                      currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector32.z, group);
                    }
                  }
                } else if (material.visible) {
                  currentRenderList.push(object, geometry, material, groupOrder, _vector32.z, null);
                }
              }
            }
          }
          const children = object.children;
          for (let i = 0, l = children.length; i < l; i++) {
            projectObject(children[i], camera, groupOrder, sortObjects);
          }
        }
        function renderScene(currentRenderList2, scene, camera, viewport) {
          const opaqueObjects = currentRenderList2.opaque;
          const transmissiveObjects = currentRenderList2.transmissive;
          const transparentObjects = currentRenderList2.transparent;
          currentRenderState.setupLightsView(camera);
          if (_clippingEnabled === true)
            clipping.setGlobalState(_this.clippingPlanes, camera);
          if (transmissiveObjects.length > 0)
            renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);
          if (viewport)
            state.viewport(_currentViewport.copy(viewport));
          if (opaqueObjects.length > 0)
            renderObjects(opaqueObjects, scene, camera);
          if (transmissiveObjects.length > 0)
            renderObjects(transmissiveObjects, scene, camera);
          if (transparentObjects.length > 0)
            renderObjects(transparentObjects, scene, camera);
          state.buffers.depth.setTest(true);
          state.buffers.depth.setMask(true);
          state.buffers.color.setMask(true);
          state.setPolygonOffset(false);
        }
        function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {
          if (_transmissionRenderTarget === null) {
            const isWebGL2 = capabilities.isWebGL2;
            _transmissionRenderTarget = new WebGLRenderTarget(1024, 1024, {
              generateMipmaps: true,
              type: extensions.has("EXT_color_buffer_half_float") ? HalfFloatType : UnsignedByteType,
              minFilter: LinearMipmapLinearFilter2,
              samples: isWebGL2 && antialias === true ? 4 : 0
            });
          }
          const currentRenderTarget = _this.getRenderTarget();
          _this.setRenderTarget(_transmissionRenderTarget);
          _this.clear();
          const currentToneMapping = _this.toneMapping;
          _this.toneMapping = NoToneMapping;
          renderObjects(opaqueObjects, scene, camera);
          textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
          textures.updateRenderTargetMipmap(_transmissionRenderTarget);
          let renderTargetNeedsUpdate = false;
          for (let i = 0, l = transmissiveObjects.length; i < l; i++) {
            const renderItem = transmissiveObjects[i];
            const object = renderItem.object;
            const geometry = renderItem.geometry;
            const material = renderItem.material;
            const group = renderItem.group;
            if (material.side === DoubleSide2 && object.layers.test(camera.layers)) {
              const currentSide = material.side;
              material.side = BackSide;
              material.needsUpdate = true;
              renderObject(object, scene, camera, geometry, material, group);
              material.side = currentSide;
              material.needsUpdate = true;
              renderTargetNeedsUpdate = true;
            }
          }
          if (renderTargetNeedsUpdate === true) {
            textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
            textures.updateRenderTargetMipmap(_transmissionRenderTarget);
          }
          _this.setRenderTarget(currentRenderTarget);
          _this.toneMapping = currentToneMapping;
        }
        function renderObjects(renderList, scene, camera) {
          const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
          for (let i = 0, l = renderList.length; i < l; i++) {
            const renderItem = renderList[i];
            const object = renderItem.object;
            const geometry = renderItem.geometry;
            const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
            const group = renderItem.group;
            if (object.layers.test(camera.layers)) {
              renderObject(object, scene, camera, geometry, material, group);
            }
          }
        }
        function renderObject(object, scene, camera, geometry, material, group) {
          object.onBeforeRender(_this, scene, camera, geometry, material, group);
          object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
          object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
          material.onBeforeRender(_this, scene, camera, geometry, object, group);
          if (material.transparent === true && material.side === DoubleSide2 && material.forceSinglePass === false) {
            material.side = BackSide;
            material.needsUpdate = true;
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            material.side = FrontSide2;
            material.needsUpdate = true;
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            material.side = DoubleSide2;
          } else {
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
          }
          object.onAfterRender(_this, scene, camera, geometry, material, group);
        }
        function getProgram(material, scene, object) {
          if (scene.isScene !== true)
            scene = _emptyScene;
          const materialProperties = properties.get(material);
          const lights = currentRenderState.state.lights;
          const shadowsArray = currentRenderState.state.shadowsArray;
          const lightsStateVersion = lights.state.version;
          const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
          const programCacheKey = programCache.getProgramCacheKey(parameters2);
          let programs = materialProperties.programs;
          materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
          materialProperties.fog = scene.fog;
          materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
          if (programs === void 0) {
            material.addEventListener("dispose", onMaterialDispose);
            programs = /* @__PURE__ */ new Map();
            materialProperties.programs = programs;
          }
          let program = programs.get(programCacheKey);
          if (program !== void 0) {
            if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
              updateCommonMaterialProperties(material, parameters2);
              return program;
            }
          } else {
            parameters2.uniforms = programCache.getUniforms(material);
            material.onBuild(object, parameters2, _this);
            material.onBeforeCompile(parameters2, _this);
            program = programCache.acquireProgram(parameters2, programCacheKey);
            programs.set(programCacheKey, program);
            materialProperties.uniforms = parameters2.uniforms;
          }
          const uniforms = materialProperties.uniforms;
          if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
            uniforms.clippingPlanes = clipping.uniform;
          }
          updateCommonMaterialProperties(material, parameters2);
          materialProperties.needsLights = materialNeedsLights(material);
          materialProperties.lightsStateVersion = lightsStateVersion;
          if (materialProperties.needsLights) {
            uniforms.ambientLightColor.value = lights.state.ambient;
            uniforms.lightProbe.value = lights.state.probe;
            uniforms.directionalLights.value = lights.state.directional;
            uniforms.directionalLightShadows.value = lights.state.directionalShadow;
            uniforms.spotLights.value = lights.state.spot;
            uniforms.spotLightShadows.value = lights.state.spotShadow;
            uniforms.rectAreaLights.value = lights.state.rectArea;
            uniforms.ltc_1.value = lights.state.rectAreaLTC1;
            uniforms.ltc_2.value = lights.state.rectAreaLTC2;
            uniforms.pointLights.value = lights.state.point;
            uniforms.pointLightShadows.value = lights.state.pointShadow;
            uniforms.hemisphereLights.value = lights.state.hemi;
            uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
            uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
            uniforms.spotShadowMap.value = lights.state.spotShadowMap;
            uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
            uniforms.spotLightMap.value = lights.state.spotLightMap;
            uniforms.pointShadowMap.value = lights.state.pointShadowMap;
            uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
          }
          const progUniforms = program.getUniforms();
          const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
          materialProperties.currentProgram = program;
          materialProperties.uniformsList = uniformsList;
          return program;
        }
        function updateCommonMaterialProperties(material, parameters2) {
          const materialProperties = properties.get(material);
          materialProperties.outputEncoding = parameters2.outputEncoding;
          materialProperties.instancing = parameters2.instancing;
          materialProperties.skinning = parameters2.skinning;
          materialProperties.morphTargets = parameters2.morphTargets;
          materialProperties.morphNormals = parameters2.morphNormals;
          materialProperties.morphColors = parameters2.morphColors;
          materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
          materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
          materialProperties.numIntersection = parameters2.numClipIntersection;
          materialProperties.vertexAlphas = parameters2.vertexAlphas;
          materialProperties.vertexTangents = parameters2.vertexTangents;
          materialProperties.toneMapping = parameters2.toneMapping;
        }
        function setProgram(camera, scene, geometry, material, object) {
          if (scene.isScene !== true)
            scene = _emptyScene;
          textures.resetTextureUnits();
          const fog = scene.fog;
          const environment = material.isMeshStandardMaterial ? scene.environment : null;
          const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding;
          const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
          const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
          const vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;
          const morphTargets = !!geometry.morphAttributes.position;
          const morphNormals = !!geometry.morphAttributes.normal;
          const morphColors = !!geometry.morphAttributes.color;
          const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;
          const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
          const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
          const materialProperties = properties.get(material);
          const lights = currentRenderState.state.lights;
          if (_clippingEnabled === true) {
            if (_localClippingEnabled === true || camera !== _currentCamera) {
              const useCache = camera === _currentCamera && material.id === _currentMaterialId;
              clipping.setState(material, camera, useCache);
            }
          }
          let needsProgramChange = false;
          if (material.version === materialProperties.__version) {
            if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
              needsProgramChange = true;
            } else if (materialProperties.outputEncoding !== encoding) {
              needsProgramChange = true;
            } else if (object.isInstancedMesh && materialProperties.instancing === false) {
              needsProgramChange = true;
            } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
              needsProgramChange = true;
            } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
              needsProgramChange = true;
            } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
              needsProgramChange = true;
            } else if (materialProperties.envMap !== envMap) {
              needsProgramChange = true;
            } else if (material.fog === true && materialProperties.fog !== fog) {
              needsProgramChange = true;
            } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
              needsProgramChange = true;
            } else if (materialProperties.vertexAlphas !== vertexAlphas) {
              needsProgramChange = true;
            } else if (materialProperties.vertexTangents !== vertexTangents) {
              needsProgramChange = true;
            } else if (materialProperties.morphTargets !== morphTargets) {
              needsProgramChange = true;
            } else if (materialProperties.morphNormals !== morphNormals) {
              needsProgramChange = true;
            } else if (materialProperties.morphColors !== morphColors) {
              needsProgramChange = true;
            } else if (materialProperties.toneMapping !== toneMapping) {
              needsProgramChange = true;
            } else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {
              needsProgramChange = true;
            }
          } else {
            needsProgramChange = true;
            materialProperties.__version = material.version;
          }
          let program = materialProperties.currentProgram;
          if (needsProgramChange === true) {
            program = getProgram(material, scene, object);
          }
          let refreshProgram = false;
          let refreshMaterial = false;
          let refreshLights = false;
          const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
          if (state.useProgram(program.program)) {
            refreshProgram = true;
            refreshMaterial = true;
            refreshLights = true;
          }
          if (material.id !== _currentMaterialId) {
            _currentMaterialId = material.id;
            refreshMaterial = true;
          }
          if (refreshProgram || _currentCamera !== camera) {
            p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
            if (capabilities.logarithmicDepthBuffer) {
              p_uniforms.setValue(
                _gl,
                "logDepthBufFC",
                2 / (Math.log(camera.far + 1) / Math.LN2)
              );
            }
            if (_currentCamera !== camera) {
              _currentCamera = camera;
              refreshMaterial = true;
              refreshLights = true;
            }
            if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
              const uCamPos = p_uniforms.map.cameraPosition;
              if (uCamPos !== void 0) {
                uCamPos.setValue(
                  _gl,
                  _vector32.setFromMatrixPosition(camera.matrixWorld)
                );
              }
            }
            if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
              p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
            }
            if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {
              p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
            }
          }
          if (object.isSkinnedMesh) {
            p_uniforms.setOptional(_gl, object, "bindMatrix");
            p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
            const skeleton = object.skeleton;
            if (skeleton) {
              if (capabilities.floatVertexTextures) {
                if (skeleton.boneTexture === null)
                  skeleton.computeBoneTexture();
                p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
                p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
              } else {
                console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.");
              }
            }
          }
          const morphAttributes = geometry.morphAttributes;
          if (morphAttributes.position !== void 0 || morphAttributes.normal !== void 0 || morphAttributes.color !== void 0 && capabilities.isWebGL2 === true) {
            morphtargets.update(object, geometry, program);
          }
          if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
            materialProperties.receiveShadow = object.receiveShadow;
            p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
          }
          if (material.isMeshGouraudMaterial && material.envMap !== null) {
            m_uniforms.envMap.value = envMap;
            m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
          }
          if (refreshMaterial) {
            p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
            if (materialProperties.needsLights) {
              markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
            }
            if (fog && material.fog === true) {
              materials.refreshFogUniforms(m_uniforms, fog);
            }
            materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
            WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
          }
          if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
            WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
            material.uniformsNeedUpdate = false;
          }
          if (material.isSpriteMaterial) {
            p_uniforms.setValue(_gl, "center", object.center);
          }
          p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
          p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
          p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
          if (material.isShaderMaterial || material.isRawShaderMaterial) {
            const groups = material.uniformsGroups;
            for (let i = 0, l = groups.length; i < l; i++) {
              if (capabilities.isWebGL2) {
                const group = groups[i];
                uniformsGroups.update(group, program);
                uniformsGroups.bind(group, program);
              } else {
                console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
              }
            }
          }
          return program;
        }
        function markUniformsLightsNeedsUpdate(uniforms, value) {
          uniforms.ambientLightColor.needsUpdate = value;
          uniforms.lightProbe.needsUpdate = value;
          uniforms.directionalLights.needsUpdate = value;
          uniforms.directionalLightShadows.needsUpdate = value;
          uniforms.pointLights.needsUpdate = value;
          uniforms.pointLightShadows.needsUpdate = value;
          uniforms.spotLights.needsUpdate = value;
          uniforms.spotLightShadows.needsUpdate = value;
          uniforms.rectAreaLights.needsUpdate = value;
          uniforms.hemisphereLights.needsUpdate = value;
        }
        function materialNeedsLights(material) {
          return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
        }
        this.getActiveCubeFace = function() {
          return _currentActiveCubeFace;
        };
        this.getActiveMipmapLevel = function() {
          return _currentActiveMipmapLevel;
        };
        this.getRenderTarget = function() {
          return _currentRenderTarget;
        };
        this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
          properties.get(renderTarget.texture).__webglTexture = colorTexture;
          properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
          const renderTargetProperties = properties.get(renderTarget);
          renderTargetProperties.__hasExternalTextures = true;
          if (renderTargetProperties.__hasExternalTextures) {
            renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === void 0;
            if (!renderTargetProperties.__autoAllocateDepthBuffer) {
              if (extensions.has("WEBGL_multisampled_render_to_texture") === true) {
                console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
                renderTargetProperties.__useRenderToTexture = false;
              }
            }
          }
        };
        this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
          const renderTargetProperties = properties.get(renderTarget);
          renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
          renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
        };
        this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
          _currentRenderTarget = renderTarget;
          _currentActiveCubeFace = activeCubeFace;
          _currentActiveMipmapLevel = activeMipmapLevel;
          let useDefaultFramebuffer = true;
          let framebuffer = null;
          let isCube = false;
          let isRenderTarget3D = false;
          if (renderTarget) {
            const renderTargetProperties = properties.get(renderTarget);
            if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
              state.bindFramebuffer(_gl.FRAMEBUFFER, null);
              useDefaultFramebuffer = false;
            } else if (renderTargetProperties.__webglFramebuffer === void 0) {
              textures.setupRenderTarget(renderTarget);
            } else if (renderTargetProperties.__hasExternalTextures) {
              textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
            }
            const texture = renderTarget.texture;
            if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
              isRenderTarget3D = true;
            }
            const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
            if (renderTarget.isWebGLCubeRenderTarget) {
              framebuffer = __webglFramebuffer[activeCubeFace];
              isCube = true;
            } else if (capabilities.isWebGL2 && renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
              framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
            } else {
              framebuffer = __webglFramebuffer;
            }
            _currentViewport.copy(renderTarget.viewport);
            _currentScissor.copy(renderTarget.scissor);
            _currentScissorTest = renderTarget.scissorTest;
          } else {
            _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
            _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
            _currentScissorTest = _scissorTest;
          }
          const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
          if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
            state.drawBuffers(renderTarget, framebuffer);
          }
          state.viewport(_currentViewport);
          state.scissor(_currentScissor);
          state.setScissorTest(_currentScissorTest);
          if (isCube) {
            const textureProperties = properties.get(renderTarget.texture);
            _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
          } else if (isRenderTarget3D) {
            const textureProperties = properties.get(renderTarget.texture);
            const layer = activeCubeFace || 0;
            _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
          }
          _currentMaterialId = -1;
        };
        this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
          if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
            return;
          }
          let framebuffer = properties.get(renderTarget).__webglFramebuffer;
          if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
            framebuffer = framebuffer[activeCubeFaceIndex];
          }
          if (framebuffer) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
            try {
              const texture = renderTarget.texture;
              const textureFormat = texture.format;
              const textureType = texture.type;
              if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
                console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                return;
              }
              const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || capabilities.isWebGL2 && extensions.has("EXT_color_buffer_float"));
              if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
              !(textureType === FloatType && (capabilities.isWebGL2 || extensions.has("OES_texture_float") || extensions.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
              !halfFloatSupportedByExt) {
                console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                return;
              }
              if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
                _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
              }
            } finally {
              const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
              state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
            }
          }
        };
        this.copyFramebufferToTexture = function(position, texture, level = 0) {
          const levelScale = Math.pow(2, -level);
          const width = Math.floor(texture.image.width * levelScale);
          const height = Math.floor(texture.image.height * levelScale);
          textures.setTexture2D(texture, 0);
          _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height);
          state.unbindTexture();
        };
        this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
          const width = srcTexture.image.width;
          const height = srcTexture.image.height;
          const glFormat = utils.convert(dstTexture.format);
          const glType = utils.convert(dstTexture.type);
          textures.setTexture2D(dstTexture, 0);
          _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
          _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
          _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
          if (srcTexture.isDataTexture) {
            _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
          } else {
            if (srcTexture.isCompressedTexture) {
              _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
            } else {
              _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);
            }
          }
          if (level === 0 && dstTexture.generateMipmaps)
            _gl.generateMipmap(_gl.TEXTURE_2D);
          state.unbindTexture();
        };
        this.copyTextureToTexture3D = function(sourceBox, position, srcTexture, dstTexture, level = 0) {
          if (_this.isWebGL1Renderer) {
            console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
            return;
          }
          const width = sourceBox.max.x - sourceBox.min.x + 1;
          const height = sourceBox.max.y - sourceBox.min.y + 1;
          const depth2 = sourceBox.max.z - sourceBox.min.z + 1;
          const glFormat = utils.convert(dstTexture.format);
          const glType = utils.convert(dstTexture.type);
          let glTarget;
          if (dstTexture.isData3DTexture) {
            textures.setTexture3D(dstTexture, 0);
            glTarget = _gl.TEXTURE_3D;
          } else if (dstTexture.isDataArrayTexture) {
            textures.setTexture2DArray(dstTexture, 0);
            glTarget = _gl.TEXTURE_2D_ARRAY;
          } else {
            console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
            return;
          }
          _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
          _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
          _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
          const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
          const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
          const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
          const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
          const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
          const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
          _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
          _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
          _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);
          _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);
          _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);
          if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
            _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth2, glFormat, glType, image.data);
          } else {
            if (srcTexture.isCompressedArrayTexture) {
              console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
              _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth2, glFormat, image.data);
            } else {
              _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth2, glFormat, glType, image);
            }
          }
          _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);
          _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
          _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);
          _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
          _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages);
          if (level === 0 && dstTexture.generateMipmaps)
            _gl.generateMipmap(glTarget);
          state.unbindTexture();
        };
        this.initTexture = function(texture) {
          if (texture.isCubeTexture) {
            textures.setTextureCube(texture, 0);
          } else if (texture.isData3DTexture) {
            textures.setTexture3D(texture, 0);
          } else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
            textures.setTexture2DArray(texture, 0);
          } else {
            textures.setTexture2D(texture, 0);
          }
          state.unbindTexture();
        };
        this.resetState = function() {
          _currentActiveCubeFace = 0;
          _currentActiveMipmapLevel = 0;
          _currentRenderTarget = null;
          state.reset();
          bindingStates.reset();
        };
        if (typeof __THREE_DEVTOOLS__ !== "undefined") {
          __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
        }
      }
      get physicallyCorrectLights() {
        console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
        return !this.useLegacyLights;
      }
      set physicallyCorrectLights(value) {
        console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
        this.useLegacyLights = !value;
      }
    };
    var WebGL1Renderer = class extends WebGLRenderer {
    };
    WebGL1Renderer.prototype.isWebGL1Renderer = true;
    var FogExp2 = class {
      constructor(color, density = 25e-5) {
        this.isFogExp2 = true;
        this.name = "";
        this.color = new Color2(color);
        this.density = density;
      }
      clone() {
        return new FogExp2(this.color, this.density);
      }
      toJSON() {
        return {
          type: "FogExp2",
          color: this.color.getHex(),
          density: this.density
        };
      }
    };
    var Fog = class {
      constructor(color, near = 1, far = 1e3) {
        this.isFog = true;
        this.name = "";
        this.color = new Color2(color);
        this.near = near;
        this.far = far;
      }
      clone() {
        return new Fog(this.color, this.near, this.far);
      }
      toJSON() {
        return {
          type: "Fog",
          color: this.color.getHex(),
          near: this.near,
          far: this.far
        };
      }
    };
    var Scene2 = class extends Object3D2 {
      constructor() {
        super();
        this.isScene = true;
        this.type = "Scene";
        this.background = null;
        this.environment = null;
        this.fog = null;
        this.backgroundBlurriness = 0;
        this.backgroundIntensity = 1;
        this.overrideMaterial = null;
        if (typeof __THREE_DEVTOOLS__ !== "undefined") {
          __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
        }
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        if (source.background !== null)
          this.background = source.background.clone();
        if (source.environment !== null)
          this.environment = source.environment.clone();
        if (source.fog !== null)
          this.fog = source.fog.clone();
        this.backgroundBlurriness = source.backgroundBlurriness;
        this.backgroundIntensity = source.backgroundIntensity;
        if (source.overrideMaterial !== null)
          this.overrideMaterial = source.overrideMaterial.clone();
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        return this;
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.fog !== null)
          data.object.fog = this.fog.toJSON();
        if (this.backgroundBlurriness > 0)
          data.object.backgroundBlurriness = this.backgroundBlurriness;
        if (this.backgroundIntensity !== 1)
          data.object.backgroundIntensity = this.backgroundIntensity;
        return data;
      }
      get autoUpdate() {
        console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.");
        return this.matrixWorldAutoUpdate;
      }
      set autoUpdate(value) {
        console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.");
        this.matrixWorldAutoUpdate = value;
      }
    };
    var InterleavedBuffer = class {
      constructor(array, stride) {
        this.isInterleavedBuffer = true;
        this.array = array;
        this.stride = stride;
        this.count = array !== void 0 ? array.length / stride : 0;
        this.usage = StaticDrawUsage;
        this.updateRange = { offset: 0, count: -1 };
        this.version = 0;
        this.uuid = generateUUID();
      }
      onUploadCallback() {
      }
      set needsUpdate(value) {
        if (value === true)
          this.version++;
      }
      setUsage(value) {
        this.usage = value;
        return this;
      }
      copy(source) {
        this.array = new source.array.constructor(source.array);
        this.count = source.count;
        this.stride = source.stride;
        this.usage = source.usage;
        return this;
      }
      copyAt(index1, attribute, index2) {
        index1 *= this.stride;
        index2 *= attribute.stride;
        for (let i = 0, l = this.stride; i < l; i++) {
          this.array[index1 + i] = attribute.array[index2 + i];
        }
        return this;
      }
      set(value, offset = 0) {
        this.array.set(value, offset);
        return this;
      }
      clone(data) {
        if (data.arrayBuffers === void 0) {
          data.arrayBuffers = {};
        }
        if (this.array.buffer._uuid === void 0) {
          this.array.buffer._uuid = generateUUID();
        }
        if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
          data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
        }
        const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
        const ib = new this.constructor(array, this.stride);
        ib.setUsage(this.usage);
        return ib;
      }
      onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
      }
      toJSON(data) {
        if (data.arrayBuffers === void 0) {
          data.arrayBuffers = {};
        }
        if (this.array.buffer._uuid === void 0) {
          this.array.buffer._uuid = generateUUID();
        }
        if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
          data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
        }
        return {
          uuid: this.uuid,
          buffer: this.array.buffer._uuid,
          type: this.array.constructor.name,
          stride: this.stride
        };
      }
    };
    var _vector$5 = new Vector32();
    var InterleavedBufferAttribute = class {
      constructor(interleavedBuffer, itemSize, offset, normalized = false) {
        this.isInterleavedBufferAttribute = true;
        this.name = "";
        this.data = interleavedBuffer;
        this.itemSize = itemSize;
        this.offset = offset;
        this.normalized = normalized;
      }
      get count() {
        return this.data.count;
      }
      get array() {
        return this.data.array;
      }
      set needsUpdate(value) {
        this.data.needsUpdate = value;
      }
      applyMatrix4(m) {
        for (let i = 0, l = this.data.count; i < l; i++) {
          _vector$5.fromBufferAttribute(this, i);
          _vector$5.applyMatrix4(m);
          this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
        }
        return this;
      }
      applyNormalMatrix(m) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$5.fromBufferAttribute(this, i);
          _vector$5.applyNormalMatrix(m);
          this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
        }
        return this;
      }
      transformDirection(m) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$5.fromBufferAttribute(this, i);
          _vector$5.transformDirection(m);
          this.setXYZ(i, _vector$5.x, _vector$5.y, _vector$5.z);
        }
        return this;
      }
      setX(index, x) {
        if (this.normalized)
          x = normalize(x, this.array);
        this.data.array[index * this.data.stride + this.offset] = x;
        return this;
      }
      setY(index, y) {
        if (this.normalized)
          y = normalize(y, this.array);
        this.data.array[index * this.data.stride + this.offset + 1] = y;
        return this;
      }
      setZ(index, z) {
        if (this.normalized)
          z = normalize(z, this.array);
        this.data.array[index * this.data.stride + this.offset + 2] = z;
        return this;
      }
      setW(index, w) {
        if (this.normalized)
          w = normalize(w, this.array);
        this.data.array[index * this.data.stride + this.offset + 3] = w;
        return this;
      }
      getX(index) {
        let x = this.data.array[index * this.data.stride + this.offset];
        if (this.normalized)
          x = denormalize(x, this.array);
        return x;
      }
      getY(index) {
        let y = this.data.array[index * this.data.stride + this.offset + 1];
        if (this.normalized)
          y = denormalize(y, this.array);
        return y;
      }
      getZ(index) {
        let z = this.data.array[index * this.data.stride + this.offset + 2];
        if (this.normalized)
          z = denormalize(z, this.array);
        return z;
      }
      getW(index) {
        let w = this.data.array[index * this.data.stride + this.offset + 3];
        if (this.normalized)
          w = denormalize(w, this.array);
        return w;
      }
      setXY(index, x, y) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        return this;
      }
      setXYZ(index, x, y, z) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
          z = normalize(z, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        this.data.array[index + 2] = z;
        return this;
      }
      setXYZW(index, x, y, z, w) {
        index = index * this.data.stride + this.offset;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
          z = normalize(z, this.array);
          w = normalize(w, this.array);
        }
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        this.data.array[index + 2] = z;
        this.data.array[index + 3] = w;
        return this;
      }
      clone(data) {
        if (data === void 0) {
          console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
          const array = [];
          for (let i = 0; i < this.count; i++) {
            const index = i * this.data.stride + this.offset;
            for (let j = 0; j < this.itemSize; j++) {
              array.push(this.data.array[index + j]);
            }
          }
          return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
        } else {
          if (data.interleavedBuffers === void 0) {
            data.interleavedBuffers = {};
          }
          if (data.interleavedBuffers[this.data.uuid] === void 0) {
            data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
          }
          return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
        }
      }
      toJSON(data) {
        if (data === void 0) {
          console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
          const array = [];
          for (let i = 0; i < this.count; i++) {
            const index = i * this.data.stride + this.offset;
            for (let j = 0; j < this.itemSize; j++) {
              array.push(this.data.array[index + j]);
            }
          }
          return {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array,
            normalized: this.normalized
          };
        } else {
          if (data.interleavedBuffers === void 0) {
            data.interleavedBuffers = {};
          }
          if (data.interleavedBuffers[this.data.uuid] === void 0) {
            data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
          }
          return {
            isInterleavedBufferAttribute: true,
            itemSize: this.itemSize,
            data: this.data.uuid,
            offset: this.offset,
            normalized: this.normalized
          };
        }
      }
    };
    var SpriteMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isSpriteMaterial = true;
        this.type = "SpriteMaterial";
        this.color = new Color2(16777215);
        this.map = null;
        this.alphaMap = null;
        this.rotation = 0;
        this.sizeAttenuation = true;
        this.transparent = true;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.rotation = source.rotation;
        this.sizeAttenuation = source.sizeAttenuation;
        this.fog = source.fog;
        return this;
      }
    };
    var _geometry;
    var _intersectPoint = new Vector32();
    var _worldScale = new Vector32();
    var _mvPosition = new Vector32();
    var _alignedPosition = new Vector22();
    var _rotatedPosition = new Vector22();
    var _viewWorldMatrix = new Matrix42();
    var _vA2 = new Vector32();
    var _vB2 = new Vector32();
    var _vC2 = new Vector32();
    var _uvA = new Vector22();
    var _uvB = new Vector22();
    var _uvC = new Vector22();
    var Sprite = class extends Object3D2 {
      constructor(material) {
        super();
        this.isSprite = true;
        this.type = "Sprite";
        if (_geometry === void 0) {
          _geometry = new BufferGeometry2();
          const float32Array = new Float32Array([
            -0.5,
            -0.5,
            0,
            0,
            0,
            0.5,
            -0.5,
            0,
            1,
            0,
            0.5,
            0.5,
            0,
            1,
            1,
            -0.5,
            0.5,
            0,
            0,
            1
          ]);
          const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
          _geometry.setIndex([0, 1, 2, 0, 2, 3]);
          _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
          _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
        }
        this.geometry = _geometry;
        this.material = material !== void 0 ? material : new SpriteMaterial();
        this.center = new Vector22(0.5, 0.5);
      }
      raycast(raycaster, intersects2) {
        if (raycaster.camera === null) {
          console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
        }
        _worldScale.setFromMatrixScale(this.matrixWorld);
        _viewWorldMatrix.copy(raycaster.camera.matrixWorld);
        this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
        _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
        if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
          _worldScale.multiplyScalar(-_mvPosition.z);
        }
        const rotation = this.material.rotation;
        let sin, cos;
        if (rotation !== 0) {
          cos = Math.cos(rotation);
          sin = Math.sin(rotation);
        }
        const center = this.center;
        transformVertex(_vA2.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        transformVertex(_vB2.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        transformVertex(_vC2.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        _uvA.set(0, 0);
        _uvB.set(1, 0);
        _uvC.set(1, 1);
        let intersect = raycaster.ray.intersectTriangle(_vA2, _vB2, _vC2, false, _intersectPoint);
        if (intersect === null) {
          transformVertex(_vB2.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
          _uvB.set(0, 1);
          intersect = raycaster.ray.intersectTriangle(_vA2, _vC2, _vB2, false, _intersectPoint);
          if (intersect === null) {
            return;
          }
        }
        const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far)
          return;
        intersects2.push({
          distance,
          point: _intersectPoint.clone(),
          uv: Triangle.getInterpolation(_intersectPoint, _vA2, _vB2, _vC2, _uvA, _uvB, _uvC, new Vector22()),
          face: null,
          object: this
        });
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        if (source.center !== void 0)
          this.center.copy(source.center);
        this.material = source.material;
        return this;
      }
    };
    function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
      _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
      if (sin !== void 0) {
        _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
        _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
      } else {
        _rotatedPosition.copy(_alignedPosition);
      }
      vertexPosition.copy(mvPosition);
      vertexPosition.x += _rotatedPosition.x;
      vertexPosition.y += _rotatedPosition.y;
      vertexPosition.applyMatrix4(_viewWorldMatrix);
    }
    var _v1$2 = new Vector32();
    var _v2$1 = new Vector32();
    var LOD = class extends Object3D2 {
      constructor() {
        super();
        this._currentLevel = 0;
        this.type = "LOD";
        Object.defineProperties(this, {
          levels: {
            enumerable: true,
            value: []
          },
          isLOD: {
            value: true
          }
        });
        this.autoUpdate = true;
      }
      copy(source) {
        super.copy(source, false);
        const levels = source.levels;
        for (let i = 0, l = levels.length; i < l; i++) {
          const level = levels[i];
          this.addLevel(level.object.clone(), level.distance, level.hysteresis);
        }
        this.autoUpdate = source.autoUpdate;
        return this;
      }
      addLevel(object, distance = 0, hysteresis = 0) {
        distance = Math.abs(distance);
        const levels = this.levels;
        let l;
        for (l = 0; l < levels.length; l++) {
          if (distance < levels[l].distance) {
            break;
          }
        }
        levels.splice(l, 0, { distance, hysteresis, object });
        this.add(object);
        return this;
      }
      getCurrentLevel() {
        return this._currentLevel;
      }
      getObjectForDistance(distance) {
        const levels = this.levels;
        if (levels.length > 0) {
          let i, l;
          for (i = 1, l = levels.length; i < l; i++) {
            let levelDistance = levels[i].distance;
            if (levels[i].object.visible) {
              levelDistance -= levelDistance * levels[i].hysteresis;
            }
            if (distance < levelDistance) {
              break;
            }
          }
          return levels[i - 1].object;
        }
        return null;
      }
      raycast(raycaster, intersects2) {
        const levels = this.levels;
        if (levels.length > 0) {
          _v1$2.setFromMatrixPosition(this.matrixWorld);
          const distance = raycaster.ray.origin.distanceTo(_v1$2);
          this.getObjectForDistance(distance).raycast(raycaster, intersects2);
        }
      }
      update(camera) {
        const levels = this.levels;
        if (levels.length > 1) {
          _v1$2.setFromMatrixPosition(camera.matrixWorld);
          _v2$1.setFromMatrixPosition(this.matrixWorld);
          const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;
          levels[0].object.visible = true;
          let i, l;
          for (i = 1, l = levels.length; i < l; i++) {
            let levelDistance = levels[i].distance;
            if (levels[i].object.visible) {
              levelDistance -= levelDistance * levels[i].hysteresis;
            }
            if (distance >= levelDistance) {
              levels[i - 1].object.visible = false;
              levels[i].object.visible = true;
            } else {
              break;
            }
          }
          this._currentLevel = i - 1;
          for (; i < l; i++) {
            levels[i].object.visible = false;
          }
        }
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.autoUpdate === false)
          data.object.autoUpdate = false;
        data.object.levels = [];
        const levels = this.levels;
        for (let i = 0, l = levels.length; i < l; i++) {
          const level = levels[i];
          data.object.levels.push({
            object: level.object.uuid,
            distance: level.distance,
            hysteresis: level.hysteresis
          });
        }
        return data;
      }
    };
    var _basePosition = new Vector32();
    var _skinIndex = new Vector42();
    var _skinWeight = new Vector42();
    var _vector3 = new Vector32();
    var _matrix4 = new Matrix42();
    var _vertex = new Vector32();
    var SkinnedMesh2 = class extends Mesh2 {
      constructor(geometry, material) {
        super(geometry, material);
        this.isSkinnedMesh = true;
        this.type = "SkinnedMesh";
        this.bindMode = "attached";
        this.bindMatrix = new Matrix42();
        this.bindMatrixInverse = new Matrix42();
        this.boundingBox = null;
        this.boundingSphere = null;
      }
      computeBoundingBox() {
        const geometry = this.geometry;
        if (this.boundingBox === null) {
          this.boundingBox = new Box3();
        }
        this.boundingBox.makeEmpty();
        const positionAttribute = geometry.getAttribute("position");
        for (let i = 0; i < positionAttribute.count; i++) {
          _vertex.fromBufferAttribute(positionAttribute, i);
          this.applyBoneTransform(i, _vertex);
          this.boundingBox.expandByPoint(_vertex);
        }
      }
      computeBoundingSphere() {
        const geometry = this.geometry;
        if (this.boundingSphere === null) {
          this.boundingSphere = new Sphere();
        }
        this.boundingSphere.makeEmpty();
        const positionAttribute = geometry.getAttribute("position");
        for (let i = 0; i < positionAttribute.count; i++) {
          _vertex.fromBufferAttribute(positionAttribute, i);
          this.applyBoneTransform(i, _vertex);
          this.boundingSphere.expandByPoint(_vertex);
        }
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.bindMode = source.bindMode;
        this.bindMatrix.copy(source.bindMatrix);
        this.bindMatrixInverse.copy(source.bindMatrixInverse);
        this.skeleton = source.skeleton;
        return this;
      }
      bind(skeleton, bindMatrix) {
        this.skeleton = skeleton;
        if (bindMatrix === void 0) {
          this.updateMatrixWorld(true);
          this.skeleton.calculateInverses();
          bindMatrix = this.matrixWorld;
        }
        this.bindMatrix.copy(bindMatrix);
        this.bindMatrixInverse.copy(bindMatrix).invert();
      }
      pose() {
        this.skeleton.pose();
      }
      normalizeSkinWeights() {
        const vector = new Vector42();
        const skinWeight = this.geometry.attributes.skinWeight;
        for (let i = 0, l = skinWeight.count; i < l; i++) {
          vector.fromBufferAttribute(skinWeight, i);
          const scale = 1 / vector.manhattanLength();
          if (scale !== Infinity) {
            vector.multiplyScalar(scale);
          } else {
            vector.set(1, 0, 0, 0);
          }
          skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
        }
      }
      updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.bindMode === "attached") {
          this.bindMatrixInverse.copy(this.matrixWorld).invert();
        } else if (this.bindMode === "detached") {
          this.bindMatrixInverse.copy(this.bindMatrix).invert();
        } else {
          console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
        }
      }
      applyBoneTransform(index, vector) {
        const skeleton = this.skeleton;
        const geometry = this.geometry;
        _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
        _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
        _basePosition.copy(vector).applyMatrix4(this.bindMatrix);
        vector.set(0, 0, 0);
        for (let i = 0; i < 4; i++) {
          const weight = _skinWeight.getComponent(i);
          if (weight !== 0) {
            const boneIndex = _skinIndex.getComponent(i);
            _matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
            vector.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4), weight);
          }
        }
        return vector.applyMatrix4(this.bindMatrixInverse);
      }
      boneTransform(index, vector) {
        console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151.");
        return this.applyBoneTransform(index, vector);
      }
    };
    var Bone2 = class extends Object3D2 {
      constructor() {
        super();
        this.isBone = true;
        this.type = "Bone";
      }
    };
    var DataTexture = class extends Texture2 {
      constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding) {
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        this.isDataTexture = true;
        this.image = { data, width, height };
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
      }
    };
    var _offsetMatrix = new Matrix42();
    var _identityMatrix = new Matrix42();
    var Skeleton2 = class {
      constructor(bones = [], boneInverses = []) {
        this.uuid = generateUUID();
        this.bones = bones.slice(0);
        this.boneInverses = boneInverses;
        this.boneMatrices = null;
        this.boneTexture = null;
        this.boneTextureSize = 0;
        this.frame = -1;
        this.init();
      }
      init() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        this.boneMatrices = new Float32Array(bones.length * 16);
        if (boneInverses.length === 0) {
          this.calculateInverses();
        } else {
          if (bones.length !== boneInverses.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
            this.boneInverses = [];
            for (let i = 0, il = this.bones.length; i < il; i++) {
              this.boneInverses.push(new Matrix42());
            }
          }
        }
      }
      calculateInverses() {
        this.boneInverses.length = 0;
        for (let i = 0, il = this.bones.length; i < il; i++) {
          const inverse = new Matrix42();
          if (this.bones[i]) {
            inverse.copy(this.bones[i].matrixWorld).invert();
          }
          this.boneInverses.push(inverse);
        }
      }
      pose() {
        for (let i = 0, il = this.bones.length; i < il; i++) {
          const bone = this.bones[i];
          if (bone) {
            bone.matrixWorld.copy(this.boneInverses[i]).invert();
          }
        }
        for (let i = 0, il = this.bones.length; i < il; i++) {
          const bone = this.bones[i];
          if (bone) {
            if (bone.parent && bone.parent.isBone) {
              bone.matrix.copy(bone.parent.matrixWorld).invert();
              bone.matrix.multiply(bone.matrixWorld);
            } else {
              bone.matrix.copy(bone.matrixWorld);
            }
            bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
          }
        }
      }
      update() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        const boneMatrices = this.boneMatrices;
        const boneTexture = this.boneTexture;
        for (let i = 0, il = bones.length; i < il; i++) {
          const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
          _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
          _offsetMatrix.toArray(boneMatrices, i * 16);
        }
        if (boneTexture !== null) {
          boneTexture.needsUpdate = true;
        }
      }
      clone() {
        return new Skeleton2(this.bones, this.boneInverses);
      }
      computeBoneTexture() {
        let size = Math.sqrt(this.bones.length * 4);
        size = ceilPowerOfTwo(size);
        size = Math.max(size, 4);
        const boneMatrices = new Float32Array(size * size * 4);
        boneMatrices.set(this.boneMatrices);
        const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
        boneTexture.needsUpdate = true;
        this.boneMatrices = boneMatrices;
        this.boneTexture = boneTexture;
        this.boneTextureSize = size;
        return this;
      }
      getBoneByName(name) {
        for (let i = 0, il = this.bones.length; i < il; i++) {
          const bone = this.bones[i];
          if (bone.name === name) {
            return bone;
          }
        }
        return void 0;
      }
      dispose() {
        if (this.boneTexture !== null) {
          this.boneTexture.dispose();
          this.boneTexture = null;
        }
      }
      fromJSON(json, bones) {
        this.uuid = json.uuid;
        for (let i = 0, l = json.bones.length; i < l; i++) {
          const uuid = json.bones[i];
          let bone = bones[uuid];
          if (bone === void 0) {
            console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
            bone = new Bone2();
          }
          this.bones.push(bone);
          this.boneInverses.push(new Matrix42().fromArray(json.boneInverses[i]));
        }
        this.init();
        return this;
      }
      toJSON() {
        const data = {
          metadata: {
            version: 4.5,
            type: "Skeleton",
            generator: "Skeleton.toJSON"
          },
          bones: [],
          boneInverses: []
        };
        data.uuid = this.uuid;
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        for (let i = 0, l = bones.length; i < l; i++) {
          const bone = bones[i];
          data.bones.push(bone.uuid);
          const boneInverse = boneInverses[i];
          data.boneInverses.push(boneInverse.toArray());
        }
        return data;
      }
    };
    var InstancedBufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized, meshPerAttribute = 1) {
        super(array, itemSize, normalized);
        this.isInstancedBufferAttribute = true;
        this.meshPerAttribute = meshPerAttribute;
      }
      copy(source) {
        super.copy(source);
        this.meshPerAttribute = source.meshPerAttribute;
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.meshPerAttribute = this.meshPerAttribute;
        data.isInstancedBufferAttribute = true;
        return data;
      }
    };
    var _instanceLocalMatrix = new Matrix42();
    var _instanceWorldMatrix = new Matrix42();
    var _instanceIntersects = [];
    var _box3 = new Box3();
    var _identity = new Matrix42();
    var _mesh = new Mesh2();
    var _sphere$2 = new Sphere();
    var InstancedMesh = class extends Mesh2 {
      constructor(geometry, material, count) {
        super(geometry, material);
        this.isInstancedMesh = true;
        this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);
        this.instanceColor = null;
        this.count = count;
        this.boundingBox = null;
        this.boundingSphere = null;
        for (let i = 0; i < count; i++) {
          this.setMatrixAt(i, _identity);
        }
      }
      computeBoundingBox() {
        const geometry = this.geometry;
        const count = this.count;
        if (this.boundingBox === null) {
          this.boundingBox = new Box3();
        }
        if (geometry.boundingBox === null) {
          geometry.computeBoundingBox();
        }
        this.boundingBox.makeEmpty();
        for (let i = 0; i < count; i++) {
          this.getMatrixAt(i, _instanceLocalMatrix);
          _box3.copy(geometry.boundingBox).applyMatrix4(_instanceLocalMatrix);
          this.boundingBox.union(_box3);
        }
      }
      computeBoundingSphere() {
        const geometry = this.geometry;
        const count = this.count;
        if (this.boundingSphere === null) {
          this.boundingSphere = new Sphere();
        }
        if (geometry.boundingSphere === null) {
          geometry.computeBoundingSphere();
        }
        this.boundingSphere.makeEmpty();
        for (let i = 0; i < count; i++) {
          this.getMatrixAt(i, _instanceLocalMatrix);
          _sphere$2.copy(geometry.boundingSphere).applyMatrix4(_instanceLocalMatrix);
          this.boundingSphere.union(_sphere$2);
        }
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.instanceMatrix.copy(source.instanceMatrix);
        if (source.instanceColor !== null)
          this.instanceColor = source.instanceColor.clone();
        this.count = source.count;
        return this;
      }
      getColorAt(index, color) {
        color.fromArray(this.instanceColor.array, index * 3);
      }
      getMatrixAt(index, matrix) {
        matrix.fromArray(this.instanceMatrix.array, index * 16);
      }
      raycast(raycaster, intersects2) {
        const matrixWorld = this.matrixWorld;
        const raycastTimes = this.count;
        _mesh.geometry = this.geometry;
        _mesh.material = this.material;
        if (_mesh.material === void 0)
          return;
        if (this.boundingSphere === null)
          this.computeBoundingSphere();
        _sphere$2.copy(this.boundingSphere);
        _sphere$2.applyMatrix4(matrixWorld);
        if (raycaster.ray.intersectsSphere(_sphere$2) === false)
          return;
        for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
          this.getMatrixAt(instanceId, _instanceLocalMatrix);
          _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
          _mesh.matrixWorld = _instanceWorldMatrix;
          _mesh.raycast(raycaster, _instanceIntersects);
          for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
            const intersect = _instanceIntersects[i];
            intersect.instanceId = instanceId;
            intersect.object = this;
            intersects2.push(intersect);
          }
          _instanceIntersects.length = 0;
        }
      }
      setColorAt(index, color) {
        if (this.instanceColor === null) {
          this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
        }
        color.toArray(this.instanceColor.array, index * 3);
      }
      setMatrixAt(index, matrix) {
        matrix.toArray(this.instanceMatrix.array, index * 16);
      }
      updateMorphTargets() {
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
    };
    var LineBasicMaterial2 = class extends Material2 {
      constructor(parameters) {
        super();
        this.isLineBasicMaterial = true;
        this.type = "LineBasicMaterial";
        this.color = new Color2(16777215);
        this.map = null;
        this.linewidth = 1;
        this.linecap = "round";
        this.linejoin = "round";
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.linewidth = source.linewidth;
        this.linecap = source.linecap;
        this.linejoin = source.linejoin;
        this.fog = source.fog;
        return this;
      }
    };
    var _start$1 = new Vector32();
    var _end$1 = new Vector32();
    var _inverseMatrix$1 = new Matrix42();
    var _ray$1 = new Ray();
    var _sphere$1 = new Sphere();
    var Line2 = class extends Object3D2 {
      constructor(geometry = new BufferGeometry2(), material = new LineBasicMaterial2()) {
        super();
        this.isLine = true;
        this.type = "Line";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
      }
      computeLineDistances() {
        const geometry = this.geometry;
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [0];
          for (let i = 1, l = positionAttribute.count; i < l; i++) {
            _start$1.fromBufferAttribute(positionAttribute, i - 1);
            _end$1.fromBufferAttribute(positionAttribute, i);
            lineDistances[i] = lineDistances[i - 1];
            lineDistances[i] += _start$1.distanceTo(_end$1);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute2(lineDistances, 1));
        } else {
          console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
        return this;
      }
      raycast(raycaster, intersects2) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Line.threshold;
        const drawRange = geometry.drawRange;
        if (geometry.boundingSphere === null)
          geometry.computeBoundingSphere();
        _sphere$1.copy(geometry.boundingSphere);
        _sphere$1.applyMatrix4(matrixWorld);
        _sphere$1.radius += threshold;
        if (raycaster.ray.intersectsSphere(_sphere$1) === false)
          return;
        _inverseMatrix$1.copy(matrixWorld).invert();
        _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const vStart = new Vector32();
        const vEnd = new Vector32();
        const interSegment = new Vector32();
        const interRay = new Vector32();
        const step = this.isLineSegments ? 2 : 1;
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i = start, l = end - 1; i < l; i += step) {
            const a = index.getX(i);
            const b = index.getX(i + 1);
            vStart.fromBufferAttribute(positionAttribute, a);
            vEnd.fromBufferAttribute(positionAttribute, b);
            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localThresholdSq)
              continue;
            interRay.applyMatrix4(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far)
              continue;
            intersects2.push({
              distance,
              // What do we want? intersection point on the ray or on the segment??
              // point: raycaster.ray.at( distance ),
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
          for (let i = start, l = end - 1; i < l; i += step) {
            vStart.fromBufferAttribute(positionAttribute, i);
            vEnd.fromBufferAttribute(positionAttribute, i + 1);
            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localThresholdSq)
              continue;
            interRay.applyMatrix4(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far)
              continue;
            intersects2.push({
              distance,
              // What do we want? intersection point on the ray or on the segment??
              // point: raycaster.ray.at( distance ),
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        }
      }
      updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      }
    };
    var _start = new Vector32();
    var _end = new Vector32();
    var LineSegments2 = class extends Line2 {
      constructor(geometry, material) {
        super(geometry, material);
        this.isLineSegments = true;
        this.type = "LineSegments";
      }
      computeLineDistances() {
        const geometry = this.geometry;
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [];
          for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
            _start.fromBufferAttribute(positionAttribute, i);
            _end.fromBufferAttribute(positionAttribute, i + 1);
            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
            lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute2(lineDistances, 1));
        } else {
          console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
        return this;
      }
    };
    var LineLoop = class extends Line2 {
      constructor(geometry, material) {
        super(geometry, material);
        this.isLineLoop = true;
        this.type = "LineLoop";
      }
    };
    var PointsMaterial2 = class extends Material2 {
      constructor(parameters) {
        super();
        this.isPointsMaterial = true;
        this.type = "PointsMaterial";
        this.color = new Color2(16777215);
        this.map = null;
        this.alphaMap = null;
        this.size = 1;
        this.sizeAttenuation = true;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.size = source.size;
        this.sizeAttenuation = source.sizeAttenuation;
        this.fog = source.fog;
        return this;
      }
    };
    var _inverseMatrix = new Matrix42();
    var _ray = new Ray();
    var _sphere = new Sphere();
    var _position$2 = new Vector32();
    var Points2 = class extends Object3D2 {
      constructor(geometry = new BufferGeometry2(), material = new PointsMaterial2()) {
        super();
        this.isPoints = true;
        this.type = "Points";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
      }
      raycast(raycaster, intersects2) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Points.threshold;
        const drawRange = geometry.drawRange;
        if (geometry.boundingSphere === null)
          geometry.computeBoundingSphere();
        _sphere.copy(geometry.boundingSphere);
        _sphere.applyMatrix4(matrixWorld);
        _sphere.radius += threshold;
        if (raycaster.ray.intersectsSphere(_sphere) === false)
          return;
        _inverseMatrix.copy(matrixWorld).invert();
        _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i++) {
            const a = index.getX(i);
            _position$2.fromBufferAttribute(positionAttribute, a);
            testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects2, this);
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
          for (let i = start, l = end; i < l; i++) {
            _position$2.fromBufferAttribute(positionAttribute, i);
            testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects2, this);
          }
        }
      }
      updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      }
    };
    function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects2, object) {
      const rayPointDistanceSq = _ray.distanceSqToPoint(point);
      if (rayPointDistanceSq < localThresholdSq) {
        const intersectPoint = new Vector32();
        _ray.closestPointToPoint(point, intersectPoint);
        intersectPoint.applyMatrix4(matrixWorld);
        const distance = raycaster.ray.origin.distanceTo(intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far)
          return;
        intersects2.push({
          distance,
          distanceToRay: Math.sqrt(rayPointDistanceSq),
          point: intersectPoint,
          index,
          face: null,
          object
        });
      }
    }
    var VideoTexture = class extends Texture2 {
      constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
        super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isVideoTexture = true;
        this.minFilter = minFilter !== void 0 ? minFilter : LinearFilter;
        this.magFilter = magFilter !== void 0 ? magFilter : LinearFilter;
        this.generateMipmaps = false;
        const scope = this;
        function updateVideo() {
          scope.needsUpdate = true;
          video.requestVideoFrameCallback(updateVideo);
        }
        if ("requestVideoFrameCallback" in video) {
          video.requestVideoFrameCallback(updateVideo);
        }
      }
      clone() {
        return new this.constructor(this.image).copy(this);
      }
      update() {
        const video = this.image;
        const hasVideoFrameCallback = "requestVideoFrameCallback" in video;
        if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
          this.needsUpdate = true;
        }
      }
    };
    var FramebufferTexture = class extends Texture2 {
      constructor(width, height, format) {
        super({ width, height });
        this.isFramebufferTexture = true;
        this.format = format;
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.generateMipmaps = false;
        this.needsUpdate = true;
      }
    };
    var CompressedTexture = class extends Texture2 {
      constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        this.isCompressedTexture = true;
        this.image = { width, height };
        this.mipmaps = mipmaps;
        this.flipY = false;
        this.generateMipmaps = false;
      }
    };
    var CompressedArrayTexture = class extends CompressedTexture {
      constructor(mipmaps, width, height, depth, format, type) {
        super(mipmaps, width, height, format, type);
        this.isCompressedArrayTexture = true;
        this.image.depth = depth;
        this.wrapR = ClampToEdgeWrapping2;
      }
    };
    var CanvasTexture = class extends Texture2 {
      constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
        super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isCanvasTexture = true;
        this.needsUpdate = true;
      }
    };
    var Curve2 = class {
      constructor() {
        this.type = "Curve";
        this.arcLengthDivisions = 200;
      }
      // Virtual base class method to overwrite and implement in subclasses
      //	- t [0 .. 1]
      getPoint() {
        console.warn("THREE.Curve: .getPoint() not implemented.");
        return null;
      }
      // Get point at relative position in curve according to arc length
      // - u [0 .. 1]
      getPointAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getPoint(t, optionalTarget);
      }
      // Get sequence of points using getPoint( t )
      getPoints(divisions = 5) {
        const points = [];
        for (let d = 0; d <= divisions; d++) {
          points.push(this.getPoint(d / divisions));
        }
        return points;
      }
      // Get sequence of points using getPointAt( u )
      getSpacedPoints(divisions = 5) {
        const points = [];
        for (let d = 0; d <= divisions; d++) {
          points.push(this.getPointAt(d / divisions));
        }
        return points;
      }
      // Get total curve arc length
      getLength() {
        const lengths = this.getLengths();
        return lengths[lengths.length - 1];
      }
      // Get list of cumulative segment lengths
      getLengths(divisions = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
          return this.cacheArcLengths;
        }
        this.needsUpdate = false;
        const cache = [];
        let current, last = this.getPoint(0);
        let sum = 0;
        cache.push(0);
        for (let p = 1; p <= divisions; p++) {
          current = this.getPoint(p / divisions);
          sum += current.distanceTo(last);
          cache.push(sum);
          last = current;
        }
        this.cacheArcLengths = cache;
        return cache;
      }
      updateArcLengths() {
        this.needsUpdate = true;
        this.getLengths();
      }
      // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
      getUtoTmapping(u, distance) {
        const arcLengths = this.getLengths();
        let i = 0;
        const il = arcLengths.length;
        let targetArcLength;
        if (distance) {
          targetArcLength = distance;
        } else {
          targetArcLength = u * arcLengths[il - 1];
        }
        let low = 0, high = il - 1, comparison;
        while (low <= high) {
          i = Math.floor(low + (high - low) / 2);
          comparison = arcLengths[i] - targetArcLength;
          if (comparison < 0) {
            low = i + 1;
          } else if (comparison > 0) {
            high = i - 1;
          } else {
            high = i;
            break;
          }
        }
        i = high;
        if (arcLengths[i] === targetArcLength) {
          return i / (il - 1);
        }
        const lengthBefore = arcLengths[i];
        const lengthAfter = arcLengths[i + 1];
        const segmentLength = lengthAfter - lengthBefore;
        const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
        const t = (i + segmentFraction) / (il - 1);
        return t;
      }
      // Returns a unit vector tangent at t
      // In case any sub curve does not implement its tangent derivation,
      // 2 points a small delta apart will be used to find its gradient
      // which seems to give a reasonable approximation
      getTangent(t, optionalTarget) {
        const delta = 1e-4;
        let t1 = t - delta;
        let t2 = t + delta;
        if (t1 < 0)
          t1 = 0;
        if (t2 > 1)
          t2 = 1;
        const pt1 = this.getPoint(t1);
        const pt2 = this.getPoint(t2);
        const tangent = optionalTarget || (pt1.isVector2 ? new Vector22() : new Vector32());
        tangent.copy(pt2).sub(pt1).normalize();
        return tangent;
      }
      getTangentAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getTangent(t, optionalTarget);
      }
      computeFrenetFrames(segments, closed) {
        const normal = new Vector32();
        const tangents = [];
        const normals = [];
        const binormals = [];
        const vec = new Vector32();
        const mat = new Matrix42();
        for (let i = 0; i <= segments; i++) {
          const u = i / segments;
          tangents[i] = this.getTangentAt(u, new Vector32());
        }
        normals[0] = new Vector32();
        binormals[0] = new Vector32();
        let min = Number.MAX_VALUE;
        const tx = Math.abs(tangents[0].x);
        const ty = Math.abs(tangents[0].y);
        const tz = Math.abs(tangents[0].z);
        if (tx <= min) {
          min = tx;
          normal.set(1, 0, 0);
        }
        if (ty <= min) {
          min = ty;
          normal.set(0, 1, 0);
        }
        if (tz <= min) {
          normal.set(0, 0, 1);
        }
        vec.crossVectors(tangents[0], normal).normalize();
        normals[0].crossVectors(tangents[0], vec);
        binormals[0].crossVectors(tangents[0], normals[0]);
        for (let i = 1; i <= segments; i++) {
          normals[i] = normals[i - 1].clone();
          binormals[i] = binormals[i - 1].clone();
          vec.crossVectors(tangents[i - 1], tangents[i]);
          if (vec.length() > Number.EPSILON) {
            vec.normalize();
            const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1));
            normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
          }
          binormals[i].crossVectors(tangents[i], normals[i]);
        }
        if (closed === true) {
          let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
          theta /= segments;
          if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
            theta = -theta;
          }
          for (let i = 1; i <= segments; i++) {
            normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
            binormals[i].crossVectors(tangents[i], normals[i]);
          }
        }
        return {
          tangents,
          normals,
          binormals
        };
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.arcLengthDivisions = source.arcLengthDivisions;
        return this;
      }
      toJSON() {
        const data = {
          metadata: {
            version: 4.5,
            type: "Curve",
            generator: "Curve.toJSON"
          }
        };
        data.arcLengthDivisions = this.arcLengthDivisions;
        data.type = this.type;
        return data;
      }
      fromJSON(json) {
        this.arcLengthDivisions = json.arcLengthDivisions;
        return this;
      }
    };
    var EllipseCurve = class extends Curve2 {
      constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
        super();
        this.isEllipseCurve = true;
        this.type = "EllipseCurve";
        this.aX = aX;
        this.aY = aY;
        this.xRadius = xRadius;
        this.yRadius = yRadius;
        this.aStartAngle = aStartAngle;
        this.aEndAngle = aEndAngle;
        this.aClockwise = aClockwise;
        this.aRotation = aRotation;
      }
      getPoint(t, optionalTarget) {
        const point = optionalTarget || new Vector22();
        const twoPi = Math.PI * 2;
        let deltaAngle = this.aEndAngle - this.aStartAngle;
        const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
        while (deltaAngle < 0)
          deltaAngle += twoPi;
        while (deltaAngle > twoPi)
          deltaAngle -= twoPi;
        if (deltaAngle < Number.EPSILON) {
          if (samePoints) {
            deltaAngle = 0;
          } else {
            deltaAngle = twoPi;
          }
        }
        if (this.aClockwise === true && !samePoints) {
          if (deltaAngle === twoPi) {
            deltaAngle = -twoPi;
          } else {
            deltaAngle = deltaAngle - twoPi;
          }
        }
        const angle = this.aStartAngle + t * deltaAngle;
        let x = this.aX + this.xRadius * Math.cos(angle);
        let y = this.aY + this.yRadius * Math.sin(angle);
        if (this.aRotation !== 0) {
          const cos = Math.cos(this.aRotation);
          const sin = Math.sin(this.aRotation);
          const tx = x - this.aX;
          const ty = y - this.aY;
          x = tx * cos - ty * sin + this.aX;
          y = tx * sin + ty * cos + this.aY;
        }
        return point.set(x, y);
      }
      copy(source) {
        super.copy(source);
        this.aX = source.aX;
        this.aY = source.aY;
        this.xRadius = source.xRadius;
        this.yRadius = source.yRadius;
        this.aStartAngle = source.aStartAngle;
        this.aEndAngle = source.aEndAngle;
        this.aClockwise = source.aClockwise;
        this.aRotation = source.aRotation;
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.aX = this.aX;
        data.aY = this.aY;
        data.xRadius = this.xRadius;
        data.yRadius = this.yRadius;
        data.aStartAngle = this.aStartAngle;
        data.aEndAngle = this.aEndAngle;
        data.aClockwise = this.aClockwise;
        data.aRotation = this.aRotation;
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.aX = json.aX;
        this.aY = json.aY;
        this.xRadius = json.xRadius;
        this.yRadius = json.yRadius;
        this.aStartAngle = json.aStartAngle;
        this.aEndAngle = json.aEndAngle;
        this.aClockwise = json.aClockwise;
        this.aRotation = json.aRotation;
        return this;
      }
    };
    var ArcCurve = class extends EllipseCurve {
      constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        this.isArcCurve = true;
        this.type = "ArcCurve";
      }
    };
    function CubicPoly() {
      let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
      function init(x0, x1, t0, t1) {
        c0 = x0;
        c1 = t0;
        c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
        c3 = 2 * x0 - 2 * x1 + t0 + t1;
      }
      return {
        initCatmullRom: function(x0, x1, x2, x3, tension) {
          init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
        },
        initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
          let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
          let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
          t1 *= dt1;
          t2 *= dt1;
          init(x1, x2, t1, t2);
        },
        calc: function(t) {
          const t2 = t * t;
          const t3 = t2 * t;
          return c0 + c1 * t + c2 * t2 + c3 * t3;
        }
      };
    }
    var tmp = new Vector32();
    var px = new CubicPoly();
    var py = new CubicPoly();
    var pz = new CubicPoly();
    var CatmullRomCurve3 = class extends Curve2 {
      constructor(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
        super();
        this.isCatmullRomCurve3 = true;
        this.type = "CatmullRomCurve3";
        this.points = points;
        this.closed = closed;
        this.curveType = curveType;
        this.tension = tension;
      }
      getPoint(t, optionalTarget = new Vector32()) {
        const point = optionalTarget;
        const points = this.points;
        const l = points.length;
        const p = (l - (this.closed ? 0 : 1)) * t;
        let intPoint = Math.floor(p);
        let weight = p - intPoint;
        if (this.closed) {
          intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
        } else if (weight === 0 && intPoint === l - 1) {
          intPoint = l - 2;
          weight = 1;
        }
        let p0, p3;
        if (this.closed || intPoint > 0) {
          p0 = points[(intPoint - 1) % l];
        } else {
          tmp.subVectors(points[0], points[1]).add(points[0]);
          p0 = tmp;
        }
        const p1 = points[intPoint % l];
        const p2 = points[(intPoint + 1) % l];
        if (this.closed || intPoint + 2 < l) {
          p3 = points[(intPoint + 2) % l];
        } else {
          tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
          p3 = tmp;
        }
        if (this.curveType === "centripetal" || this.curveType === "chordal") {
          const pow = this.curveType === "chordal" ? 0.5 : 0.25;
          let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
          let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
          let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
          if (dt1 < 1e-4)
            dt1 = 1;
          if (dt0 < 1e-4)
            dt0 = dt1;
          if (dt2 < 1e-4)
            dt2 = dt1;
          px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
          py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
          pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
        } else if (this.curveType === "catmullrom") {
          px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
          py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
          pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
        }
        point.set(
          px.calc(weight),
          py.calc(weight),
          pz.calc(weight)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.points = [];
        for (let i = 0, l = source.points.length; i < l; i++) {
          const point = source.points[i];
          this.points.push(point.clone());
        }
        this.closed = source.closed;
        this.curveType = source.curveType;
        this.tension = source.tension;
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.points = [];
        for (let i = 0, l = this.points.length; i < l; i++) {
          const point = this.points[i];
          data.points.push(point.toArray());
        }
        data.closed = this.closed;
        data.curveType = this.curveType;
        data.tension = this.tension;
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for (let i = 0, l = json.points.length; i < l; i++) {
          const point = json.points[i];
          this.points.push(new Vector32().fromArray(point));
        }
        this.closed = json.closed;
        this.curveType = json.curveType;
        this.tension = json.tension;
        return this;
      }
    };
    function CatmullRom(t, p0, p1, p2, p3) {
      const v0 = (p2 - p0) * 0.5;
      const v1 = (p3 - p1) * 0.5;
      const t2 = t * t;
      const t3 = t * t2;
      return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
    }
    function QuadraticBezierP0(t, p) {
      const k = 1 - t;
      return k * k * p;
    }
    function QuadraticBezierP1(t, p) {
      return 2 * (1 - t) * t * p;
    }
    function QuadraticBezierP2(t, p) {
      return t * t * p;
    }
    function QuadraticBezier(t, p0, p1, p2) {
      return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
    }
    function CubicBezierP0(t, p) {
      const k = 1 - t;
      return k * k * k * p;
    }
    function CubicBezierP1(t, p) {
      const k = 1 - t;
      return 3 * k * k * t * p;
    }
    function CubicBezierP2(t, p) {
      return 3 * (1 - t) * t * t * p;
    }
    function CubicBezierP3(t, p) {
      return t * t * t * p;
    }
    function CubicBezier(t, p0, p1, p2, p3) {
      return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
    }
    var CubicBezierCurve = class extends Curve2 {
      constructor(v0 = new Vector22(), v1 = new Vector22(), v2 = new Vector22(), v3 = new Vector22()) {
        super();
        this.isCubicBezierCurve = true;
        this.type = "CubicBezierCurve";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
      }
      getPoint(t, optionalTarget = new Vector22()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set(
          CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
          CubicBezier(t, v0.y, v1.y, v2.y, v3.y)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
      }
    };
    var CubicBezierCurve3 = class extends Curve2 {
      constructor(v0 = new Vector32(), v1 = new Vector32(), v2 = new Vector32(), v3 = new Vector32()) {
        super();
        this.isCubicBezierCurve3 = true;
        this.type = "CubicBezierCurve3";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
      }
      getPoint(t, optionalTarget = new Vector32()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set(
          CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
          CubicBezier(t, v0.y, v1.y, v2.y, v3.y),
          CubicBezier(t, v0.z, v1.z, v2.z, v3.z)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
      }
    };
    var LineCurve = class extends Curve2 {
      constructor(v1 = new Vector22(), v2 = new Vector22()) {
        super();
        this.isLineCurve = true;
        this.type = "LineCurve";
        this.v1 = v1;
        this.v2 = v2;
      }
      getPoint(t, optionalTarget = new Vector22()) {
        const point = optionalTarget;
        if (t === 1) {
          point.copy(this.v2);
        } else {
          point.copy(this.v2).sub(this.v1);
          point.multiplyScalar(t).add(this.v1);
        }
        return point;
      }
      // Line curve is linear, so we can overwrite default getPointAt
      getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
      }
      getTangent(t, optionalTarget = new Vector22()) {
        return optionalTarget.subVectors(this.v2, this.v1).normalize();
      }
      getTangentAt(u, optionalTarget) {
        return this.getTangent(u, optionalTarget);
      }
      copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
      }
    };
    var LineCurve3 = class extends Curve2 {
      constructor(v1 = new Vector32(), v2 = new Vector32()) {
        super();
        this.isLineCurve3 = true;
        this.type = "LineCurve3";
        this.v1 = v1;
        this.v2 = v2;
      }
      getPoint(t, optionalTarget = new Vector32()) {
        const point = optionalTarget;
        if (t === 1) {
          point.copy(this.v2);
        } else {
          point.copy(this.v2).sub(this.v1);
          point.multiplyScalar(t).add(this.v1);
        }
        return point;
      }
      // Line curve is linear, so we can overwrite default getPointAt
      getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
      }
      getTangent(t, optionalTarget = new Vector32()) {
        return optionalTarget.subVectors(this.v2, this.v1).normalize();
      }
      getTangentAt(u, optionalTarget) {
        return this.getTangent(u, optionalTarget);
      }
      copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
      }
    };
    var QuadraticBezierCurve = class extends Curve2 {
      constructor(v0 = new Vector22(), v1 = new Vector22(), v2 = new Vector22()) {
        super();
        this.isQuadraticBezierCurve = true;
        this.type = "QuadraticBezierCurve";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
      }
      getPoint(t, optionalTarget = new Vector22()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set(
          QuadraticBezier(t, v0.x, v1.x, v2.x),
          QuadraticBezier(t, v0.y, v1.y, v2.y)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
      }
    };
    var QuadraticBezierCurve3 = class extends Curve2 {
      constructor(v0 = new Vector32(), v1 = new Vector32(), v2 = new Vector32()) {
        super();
        this.isQuadraticBezierCurve3 = true;
        this.type = "QuadraticBezierCurve3";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
      }
      getPoint(t, optionalTarget = new Vector32()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set(
          QuadraticBezier(t, v0.x, v1.x, v2.x),
          QuadraticBezier(t, v0.y, v1.y, v2.y),
          QuadraticBezier(t, v0.z, v1.z, v2.z)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
      }
    };
    var SplineCurve = class extends Curve2 {
      constructor(points = []) {
        super();
        this.isSplineCurve = true;
        this.type = "SplineCurve";
        this.points = points;
      }
      getPoint(t, optionalTarget = new Vector22()) {
        const point = optionalTarget;
        const points = this.points;
        const p = (points.length - 1) * t;
        const intPoint = Math.floor(p);
        const weight = p - intPoint;
        const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
        const p1 = points[intPoint];
        const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
        const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
        point.set(
          CatmullRom(weight, p0.x, p1.x, p2.x, p3.x),
          CatmullRom(weight, p0.y, p1.y, p2.y, p3.y)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.points = [];
        for (let i = 0, l = source.points.length; i < l; i++) {
          const point = source.points[i];
          this.points.push(point.clone());
        }
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.points = [];
        for (let i = 0, l = this.points.length; i < l; i++) {
          const point = this.points[i];
          data.points.push(point.toArray());
        }
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for (let i = 0, l = json.points.length; i < l; i++) {
          const point = json.points[i];
          this.points.push(new Vector22().fromArray(point));
        }
        return this;
      }
    };
    var Curves = Object.freeze({
      __proto__: null,
      ArcCurve,
      CatmullRomCurve3,
      CubicBezierCurve,
      CubicBezierCurve3,
      EllipseCurve,
      LineCurve,
      LineCurve3,
      QuadraticBezierCurve,
      QuadraticBezierCurve3,
      SplineCurve
    });
    var CurvePath = class extends Curve2 {
      constructor() {
        super();
        this.type = "CurvePath";
        this.curves = [];
        this.autoClose = false;
      }
      add(curve) {
        this.curves.push(curve);
      }
      closePath() {
        const startPoint = this.curves[0].getPoint(0);
        const endPoint = this.curves[this.curves.length - 1].getPoint(1);
        if (!startPoint.equals(endPoint)) {
          this.curves.push(new LineCurve(endPoint, startPoint));
        }
      }
      // To get accurate point with reference to
      // entire path distance at time t,
      // following has to be done:
      // 1. Length of each sub path have to be known
      // 2. Locate and identify type of curve
      // 3. Get t for the curve
      // 4. Return curve.getPointAt(t')
      getPoint(t, optionalTarget) {
        const d = t * this.getLength();
        const curveLengths = this.getCurveLengths();
        let i = 0;
        while (i < curveLengths.length) {
          if (curveLengths[i] >= d) {
            const diff = curveLengths[i] - d;
            const curve = this.curves[i];
            const segmentLength = curve.getLength();
            const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
            return curve.getPointAt(u, optionalTarget);
          }
          i++;
        }
        return null;
      }
      // We cannot use the default THREE.Curve getPoint() with getLength() because in
      // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
      // getPoint() depends on getLength
      getLength() {
        const lens = this.getCurveLengths();
        return lens[lens.length - 1];
      }
      // cacheLengths must be recalculated.
      updateArcLengths() {
        this.needsUpdate = true;
        this.cacheLengths = null;
        this.getCurveLengths();
      }
      // Compute lengths and cache them
      // We cannot overwrite getLengths() because UtoT mapping uses it.
      getCurveLengths() {
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
          return this.cacheLengths;
        }
        const lengths = [];
        let sums = 0;
        for (let i = 0, l = this.curves.length; i < l; i++) {
          sums += this.curves[i].getLength();
          lengths.push(sums);
        }
        this.cacheLengths = lengths;
        return lengths;
      }
      getSpacedPoints(divisions = 40) {
        const points = [];
        for (let i = 0; i <= divisions; i++) {
          points.push(this.getPoint(i / divisions));
        }
        if (this.autoClose) {
          points.push(points[0]);
        }
        return points;
      }
      getPoints(divisions = 12) {
        const points = [];
        let last;
        for (let i = 0, curves = this.curves; i < curves.length; i++) {
          const curve = curves[i];
          const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
          const pts = curve.getPoints(resolution);
          for (let j = 0; j < pts.length; j++) {
            const point = pts[j];
            if (last && last.equals(point))
              continue;
            points.push(point);
            last = point;
          }
        }
        if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
          points.push(points[0]);
        }
        return points;
      }
      copy(source) {
        super.copy(source);
        this.curves = [];
        for (let i = 0, l = source.curves.length; i < l; i++) {
          const curve = source.curves[i];
          this.curves.push(curve.clone());
        }
        this.autoClose = source.autoClose;
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.autoClose = this.autoClose;
        data.curves = [];
        for (let i = 0, l = this.curves.length; i < l; i++) {
          const curve = this.curves[i];
          data.curves.push(curve.toJSON());
        }
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.autoClose = json.autoClose;
        this.curves = [];
        for (let i = 0, l = json.curves.length; i < l; i++) {
          const curve = json.curves[i];
          this.curves.push(new Curves[curve.type]().fromJSON(curve));
        }
        return this;
      }
    };
    var Path = class extends CurvePath {
      constructor(points) {
        super();
        this.type = "Path";
        this.currentPoint = new Vector22();
        if (points) {
          this.setFromPoints(points);
        }
      }
      setFromPoints(points) {
        this.moveTo(points[0].x, points[0].y);
        for (let i = 1, l = points.length; i < l; i++) {
          this.lineTo(points[i].x, points[i].y);
        }
        return this;
      }
      moveTo(x, y) {
        this.currentPoint.set(x, y);
        return this;
      }
      lineTo(x, y) {
        const curve = new LineCurve(this.currentPoint.clone(), new Vector22(x, y));
        this.curves.push(curve);
        this.currentPoint.set(x, y);
        return this;
      }
      quadraticCurveTo(aCPx, aCPy, aX, aY) {
        const curve = new QuadraticBezierCurve(
          this.currentPoint.clone(),
          new Vector22(aCPx, aCPy),
          new Vector22(aX, aY)
        );
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
      }
      bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        const curve = new CubicBezierCurve(
          this.currentPoint.clone(),
          new Vector22(aCP1x, aCP1y),
          new Vector22(aCP2x, aCP2y),
          new Vector22(aX, aY)
        );
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
      }
      splineThru(pts) {
        const npts = [this.currentPoint.clone()].concat(pts);
        const curve = new SplineCurve(npts);
        this.curves.push(curve);
        this.currentPoint.copy(pts[pts.length - 1]);
        return this;
      }
      arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absarc(
          aX + x0,
          aY + y0,
          aRadius,
          aStartAngle,
          aEndAngle,
          aClockwise
        );
        return this;
      }
      absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        return this;
      }
      ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        return this;
      }
      absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        if (this.curves.length > 0) {
          const firstPoint = curve.getPoint(0);
          if (!firstPoint.equals(this.currentPoint)) {
            this.lineTo(firstPoint.x, firstPoint.y);
          }
        }
        this.curves.push(curve);
        const lastPoint = curve.getPoint(1);
        this.currentPoint.copy(lastPoint);
        return this;
      }
      copy(source) {
        super.copy(source);
        this.currentPoint.copy(source.currentPoint);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.currentPoint = this.currentPoint.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.currentPoint.fromArray(json.currentPoint);
        return this;
      }
    };
    var LatheGeometry = class extends BufferGeometry2 {
      constructor(points = [new Vector22(0, -0.5), new Vector22(0.5, 0), new Vector22(0, 0.5)], segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
        super();
        this.type = "LatheGeometry";
        this.parameters = {
          points,
          segments,
          phiStart,
          phiLength
        };
        segments = Math.floor(segments);
        phiLength = clamp(phiLength, 0, Math.PI * 2);
        const indices = [];
        const vertices = [];
        const uvs = [];
        const initNormals = [];
        const normals = [];
        const inverseSegments = 1 / segments;
        const vertex2 = new Vector32();
        const uv = new Vector22();
        const normal = new Vector32();
        const curNormal = new Vector32();
        const prevNormal = new Vector32();
        let dx = 0;
        let dy = 0;
        for (let j = 0; j <= points.length - 1; j++) {
          switch (j) {
            case 0:
              dx = points[j + 1].x - points[j].x;
              dy = points[j + 1].y - points[j].y;
              normal.x = dy * 1;
              normal.y = -dx;
              normal.z = dy * 0;
              prevNormal.copy(normal);
              normal.normalize();
              initNormals.push(normal.x, normal.y, normal.z);
              break;
            case points.length - 1:
              initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
              break;
            default:
              dx = points[j + 1].x - points[j].x;
              dy = points[j + 1].y - points[j].y;
              normal.x = dy * 1;
              normal.y = -dx;
              normal.z = dy * 0;
              curNormal.copy(normal);
              normal.x += prevNormal.x;
              normal.y += prevNormal.y;
              normal.z += prevNormal.z;
              normal.normalize();
              initNormals.push(normal.x, normal.y, normal.z);
              prevNormal.copy(curNormal);
          }
        }
        for (let i = 0; i <= segments; i++) {
          const phi = phiStart + i * inverseSegments * phiLength;
          const sin = Math.sin(phi);
          const cos = Math.cos(phi);
          for (let j = 0; j <= points.length - 1; j++) {
            vertex2.x = points[j].x * sin;
            vertex2.y = points[j].y;
            vertex2.z = points[j].x * cos;
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
            uv.x = i / segments;
            uv.y = j / (points.length - 1);
            uvs.push(uv.x, uv.y);
            const x = initNormals[3 * j + 0] * sin;
            const y = initNormals[3 * j + 1];
            const z = initNormals[3 * j + 0] * cos;
            normals.push(x, y, z);
          }
        }
        for (let i = 0; i < segments; i++) {
          for (let j = 0; j < points.length - 1; j++) {
            const base = j + i * points.length;
            const a = base;
            const b = base + points.length;
            const c = base + points.length + 1;
            const d = base + 1;
            indices.push(a, b, d);
            indices.push(c, d, b);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
      }
    };
    var CapsuleGeometry = class extends LatheGeometry {
      constructor(radius = 1, length = 1, capSegments = 4, radialSegments = 8) {
        const path = new Path();
        path.absarc(0, -length / 2, radius, Math.PI * 1.5, 0);
        path.absarc(0, length / 2, radius, 0, Math.PI * 0.5);
        super(path.getPoints(capSegments), radialSegments);
        this.type = "CapsuleGeometry";
        this.parameters = {
          radius,
          height: length,
          capSegments,
          radialSegments
        };
      }
      static fromJSON(data) {
        return new CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
      }
    };
    var CircleGeometry = class extends BufferGeometry2 {
      constructor(radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2) {
        super();
        this.type = "CircleGeometry";
        this.parameters = {
          radius,
          segments,
          thetaStart,
          thetaLength
        };
        segments = Math.max(3, segments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        const vertex2 = new Vector32();
        const uv = new Vector22();
        vertices.push(0, 0, 0);
        normals.push(0, 0, 1);
        uvs.push(0.5, 0.5);
        for (let s = 0, i = 3; s <= segments; s++, i += 3) {
          const segment = thetaStart + s / segments * thetaLength;
          vertex2.x = radius * Math.cos(segment);
          vertex2.y = radius * Math.sin(segment);
          vertices.push(vertex2.x, vertex2.y, vertex2.z);
          normals.push(0, 0, 1);
          uv.x = (vertices[i] / radius + 1) / 2;
          uv.y = (vertices[i + 1] / radius + 1) / 2;
          uvs.push(uv.x, uv.y);
        }
        for (let i = 1; i <= segments; i++) {
          indices.push(i, i + 1, 0);
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
      }
    };
    var CylinderGeometry = class extends BufferGeometry2 {
      constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
        super();
        this.type = "CylinderGeometry";
        this.parameters = {
          radiusTop,
          radiusBottom,
          height,
          radialSegments,
          heightSegments,
          openEnded,
          thetaStart,
          thetaLength
        };
        const scope = this;
        radialSegments = Math.floor(radialSegments);
        heightSegments = Math.floor(heightSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        let index = 0;
        const indexArray = [];
        const halfHeight = height / 2;
        let groupStart = 0;
        generateTorso();
        if (openEnded === false) {
          if (radiusTop > 0)
            generateCap(true);
          if (radiusBottom > 0)
            generateCap(false);
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
        function generateTorso() {
          const normal = new Vector32();
          const vertex2 = new Vector32();
          let groupCount = 0;
          const slope = (radiusBottom - radiusTop) / height;
          for (let y = 0; y <= heightSegments; y++) {
            const indexRow = [];
            const v = y / heightSegments;
            const radius = v * (radiusBottom - radiusTop) + radiusTop;
            for (let x = 0; x <= radialSegments; x++) {
              const u = x / radialSegments;
              const theta = u * thetaLength + thetaStart;
              const sinTheta = Math.sin(theta);
              const cosTheta = Math.cos(theta);
              vertex2.x = radius * sinTheta;
              vertex2.y = -v * height + halfHeight;
              vertex2.z = radius * cosTheta;
              vertices.push(vertex2.x, vertex2.y, vertex2.z);
              normal.set(sinTheta, slope, cosTheta).normalize();
              normals.push(normal.x, normal.y, normal.z);
              uvs.push(u, 1 - v);
              indexRow.push(index++);
            }
            indexArray.push(indexRow);
          }
          for (let x = 0; x < radialSegments; x++) {
            for (let y = 0; y < heightSegments; y++) {
              const a = indexArray[y][x];
              const b = indexArray[y + 1][x];
              const c = indexArray[y + 1][x + 1];
              const d = indexArray[y][x + 1];
              indices.push(a, b, d);
              indices.push(b, c, d);
              groupCount += 6;
            }
          }
          scope.addGroup(groupStart, groupCount, 0);
          groupStart += groupCount;
        }
        function generateCap(top) {
          const centerIndexStart = index;
          const uv = new Vector22();
          const vertex2 = new Vector32();
          let groupCount = 0;
          const radius = top === true ? radiusTop : radiusBottom;
          const sign2 = top === true ? 1 : -1;
          for (let x = 1; x <= radialSegments; x++) {
            vertices.push(0, halfHeight * sign2, 0);
            normals.push(0, sign2, 0);
            uvs.push(0.5, 0.5);
            index++;
          }
          const centerIndexEnd = index;
          for (let x = 0; x <= radialSegments; x++) {
            const u = x / radialSegments;
            const theta = u * thetaLength + thetaStart;
            const cosTheta = Math.cos(theta);
            const sinTheta = Math.sin(theta);
            vertex2.x = radius * sinTheta;
            vertex2.y = halfHeight * sign2;
            vertex2.z = radius * cosTheta;
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
            normals.push(0, sign2, 0);
            uv.x = cosTheta * 0.5 + 0.5;
            uv.y = sinTheta * 0.5 * sign2 + 0.5;
            uvs.push(uv.x, uv.y);
            index++;
          }
          for (let x = 0; x < radialSegments; x++) {
            const c = centerIndexStart + x;
            const i = centerIndexEnd + x;
            if (top === true) {
              indices.push(i, i + 1, c);
            } else {
              indices.push(i + 1, i, c);
            }
            groupCount += 3;
          }
          scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
          groupStart += groupCount;
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
      }
    };
    var ConeGeometry = class extends CylinderGeometry {
      constructor(radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
        super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
        this.type = "ConeGeometry";
        this.parameters = {
          radius,
          height,
          radialSegments,
          heightSegments,
          openEnded,
          thetaStart,
          thetaLength
        };
      }
      static fromJSON(data) {
        return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
      }
    };
    var PolyhedronGeometry = class extends BufferGeometry2 {
      constructor(vertices = [], indices = [], radius = 1, detail = 0) {
        super();
        this.type = "PolyhedronGeometry";
        this.parameters = {
          vertices,
          indices,
          radius,
          detail
        };
        const vertexBuffer = [];
        const uvBuffer = [];
        subdivide(detail);
        applyRadius(radius);
        generateUVs();
        this.setAttribute("position", new Float32BufferAttribute2(vertexBuffer, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(vertexBuffer.slice(), 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvBuffer, 2));
        if (detail === 0) {
          this.computeVertexNormals();
        } else {
          this.normalizeNormals();
        }
        function subdivide(detail2) {
          const a = new Vector32();
          const b = new Vector32();
          const c = new Vector32();
          for (let i = 0; i < indices.length; i += 3) {
            getVertexByIndex(indices[i + 0], a);
            getVertexByIndex(indices[i + 1], b);
            getVertexByIndex(indices[i + 2], c);
            subdivideFace(a, b, c, detail2);
          }
        }
        function subdivideFace(a, b, c, detail2) {
          const cols = detail2 + 1;
          const v = [];
          for (let i = 0; i <= cols; i++) {
            v[i] = [];
            const aj = a.clone().lerp(c, i / cols);
            const bj = b.clone().lerp(c, i / cols);
            const rows = cols - i;
            for (let j = 0; j <= rows; j++) {
              if (j === 0 && i === cols) {
                v[i][j] = aj;
              } else {
                v[i][j] = aj.clone().lerp(bj, j / rows);
              }
            }
          }
          for (let i = 0; i < cols; i++) {
            for (let j = 0; j < 2 * (cols - i) - 1; j++) {
              const k = Math.floor(j / 2);
              if (j % 2 === 0) {
                pushVertex(v[i][k + 1]);
                pushVertex(v[i + 1][k]);
                pushVertex(v[i][k]);
              } else {
                pushVertex(v[i][k + 1]);
                pushVertex(v[i + 1][k + 1]);
                pushVertex(v[i + 1][k]);
              }
            }
          }
        }
        function applyRadius(radius2) {
          const vertex2 = new Vector32();
          for (let i = 0; i < vertexBuffer.length; i += 3) {
            vertex2.x = vertexBuffer[i + 0];
            vertex2.y = vertexBuffer[i + 1];
            vertex2.z = vertexBuffer[i + 2];
            vertex2.normalize().multiplyScalar(radius2);
            vertexBuffer[i + 0] = vertex2.x;
            vertexBuffer[i + 1] = vertex2.y;
            vertexBuffer[i + 2] = vertex2.z;
          }
        }
        function generateUVs() {
          const vertex2 = new Vector32();
          for (let i = 0; i < vertexBuffer.length; i += 3) {
            vertex2.x = vertexBuffer[i + 0];
            vertex2.y = vertexBuffer[i + 1];
            vertex2.z = vertexBuffer[i + 2];
            const u = azimuth(vertex2) / 2 / Math.PI + 0.5;
            const v = inclination(vertex2) / Math.PI + 0.5;
            uvBuffer.push(u, 1 - v);
          }
          correctUVs();
          correctSeam();
        }
        function correctSeam() {
          for (let i = 0; i < uvBuffer.length; i += 6) {
            const x0 = uvBuffer[i + 0];
            const x1 = uvBuffer[i + 2];
            const x2 = uvBuffer[i + 4];
            const max2 = Math.max(x0, x1, x2);
            const min = Math.min(x0, x1, x2);
            if (max2 > 0.9 && min < 0.1) {
              if (x0 < 0.2)
                uvBuffer[i + 0] += 1;
              if (x1 < 0.2)
                uvBuffer[i + 2] += 1;
              if (x2 < 0.2)
                uvBuffer[i + 4] += 1;
            }
          }
        }
        function pushVertex(vertex2) {
          vertexBuffer.push(vertex2.x, vertex2.y, vertex2.z);
        }
        function getVertexByIndex(index, vertex2) {
          const stride = index * 3;
          vertex2.x = vertices[stride + 0];
          vertex2.y = vertices[stride + 1];
          vertex2.z = vertices[stride + 2];
        }
        function correctUVs() {
          const a = new Vector32();
          const b = new Vector32();
          const c = new Vector32();
          const centroid = new Vector32();
          const uvA = new Vector22();
          const uvB = new Vector22();
          const uvC = new Vector22();
          for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
            a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
            b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
            c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
            uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
            uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
            uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
            centroid.copy(a).add(b).add(c).divideScalar(3);
            const azi = azimuth(centroid);
            correctUV(uvA, j + 0, a, azi);
            correctUV(uvB, j + 2, b, azi);
            correctUV(uvC, j + 4, c, azi);
          }
        }
        function correctUV(uv, stride, vector, azimuth2) {
          if (azimuth2 < 0 && uv.x === 1) {
            uvBuffer[stride] = uv.x - 1;
          }
          if (vector.x === 0 && vector.z === 0) {
            uvBuffer[stride] = azimuth2 / 2 / Math.PI + 0.5;
          }
        }
        function azimuth(vector) {
          return Math.atan2(vector.z, -vector.x);
        }
        function inclination(vector) {
          return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
      }
    };
    var DodecahedronGeometry = class extends PolyhedronGeometry {
      constructor(radius = 1, detail = 0) {
        const t = (1 + Math.sqrt(5)) / 2;
        const r = 1 / t;
        const vertices = [
          // (±1, ±1, ±1)
          -1,
          -1,
          -1,
          -1,
          -1,
          1,
          -1,
          1,
          -1,
          -1,
          1,
          1,
          1,
          -1,
          -1,
          1,
          -1,
          1,
          1,
          1,
          -1,
          1,
          1,
          1,
          // (0, ±1/φ, ±φ)
          0,
          -r,
          -t,
          0,
          -r,
          t,
          0,
          r,
          -t,
          0,
          r,
          t,
          // (±1/φ, ±φ, 0)
          -r,
          -t,
          0,
          -r,
          t,
          0,
          r,
          -t,
          0,
          r,
          t,
          0,
          // (±φ, 0, ±1/φ)
          -t,
          0,
          -r,
          t,
          0,
          -r,
          -t,
          0,
          r,
          t,
          0,
          r
        ];
        const indices = [
          3,
          11,
          7,
          3,
          7,
          15,
          3,
          15,
          13,
          7,
          19,
          17,
          7,
          17,
          6,
          7,
          6,
          15,
          17,
          4,
          8,
          17,
          8,
          10,
          17,
          10,
          6,
          8,
          0,
          16,
          8,
          16,
          2,
          8,
          2,
          10,
          0,
          12,
          1,
          0,
          1,
          18,
          0,
          18,
          16,
          6,
          10,
          2,
          6,
          2,
          13,
          6,
          13,
          15,
          2,
          16,
          18,
          2,
          18,
          3,
          2,
          3,
          13,
          18,
          1,
          9,
          18,
          9,
          11,
          18,
          11,
          3,
          4,
          14,
          12,
          4,
          12,
          0,
          4,
          0,
          8,
          11,
          9,
          5,
          11,
          5,
          19,
          11,
          19,
          7,
          19,
          5,
          14,
          19,
          14,
          4,
          19,
          4,
          17,
          1,
          12,
          14,
          1,
          14,
          5,
          1,
          5,
          9
        ];
        super(vertices, indices, radius, detail);
        this.type = "DodecahedronGeometry";
        this.parameters = {
          radius,
          detail
        };
      }
      static fromJSON(data) {
        return new DodecahedronGeometry(data.radius, data.detail);
      }
    };
    var _v0 = new Vector32();
    var _v1$1 = new Vector32();
    var _normal = new Vector32();
    var _triangle = new Triangle();
    var EdgesGeometry = class extends BufferGeometry2 {
      constructor(geometry = null, thresholdAngle = 1) {
        super();
        this.type = "EdgesGeometry";
        this.parameters = {
          geometry,
          thresholdAngle
        };
        if (geometry !== null) {
          const precisionPoints = 4;
          const precision = Math.pow(10, precisionPoints);
          const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
          const indexAttr = geometry.getIndex();
          const positionAttr = geometry.getAttribute("position");
          const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
          const indexArr = [0, 0, 0];
          const vertKeys = ["a", "b", "c"];
          const hashes = new Array(3);
          const edgeData = {};
          const vertices = [];
          for (let i = 0; i < indexCount; i += 3) {
            if (indexAttr) {
              indexArr[0] = indexAttr.getX(i);
              indexArr[1] = indexAttr.getX(i + 1);
              indexArr[2] = indexAttr.getX(i + 2);
            } else {
              indexArr[0] = i;
              indexArr[1] = i + 1;
              indexArr[2] = i + 2;
            }
            const { a, b, c } = _triangle;
            a.fromBufferAttribute(positionAttr, indexArr[0]);
            b.fromBufferAttribute(positionAttr, indexArr[1]);
            c.fromBufferAttribute(positionAttr, indexArr[2]);
            _triangle.getNormal(_normal);
            hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
            hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
            hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
            if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
              continue;
            }
            for (let j = 0; j < 3; j++) {
              const jNext = (j + 1) % 3;
              const vecHash0 = hashes[j];
              const vecHash1 = hashes[jNext];
              const v0 = _triangle[vertKeys[j]];
              const v1 = _triangle[vertKeys[jNext]];
              const hash = `${vecHash0}_${vecHash1}`;
              const reverseHash = `${vecHash1}_${vecHash0}`;
              if (reverseHash in edgeData && edgeData[reverseHash]) {
                if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
                  vertices.push(v0.x, v0.y, v0.z);
                  vertices.push(v1.x, v1.y, v1.z);
                }
                edgeData[reverseHash] = null;
              } else if (!(hash in edgeData)) {
                edgeData[hash] = {
                  index0: indexArr[j],
                  index1: indexArr[jNext],
                  normal: _normal.clone()
                };
              }
            }
          }
          for (const key in edgeData) {
            if (edgeData[key]) {
              const { index0, index1 } = edgeData[key];
              _v0.fromBufferAttribute(positionAttr, index0);
              _v1$1.fromBufferAttribute(positionAttr, index1);
              vertices.push(_v0.x, _v0.y, _v0.z);
              vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
            }
          }
          this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
    };
    var Shape = class extends Path {
      constructor(points) {
        super(points);
        this.uuid = generateUUID();
        this.type = "Shape";
        this.holes = [];
      }
      getPointsHoles(divisions) {
        const holesPts = [];
        for (let i = 0, l = this.holes.length; i < l; i++) {
          holesPts[i] = this.holes[i].getPoints(divisions);
        }
        return holesPts;
      }
      // get points of shape and holes (keypoints based on segments parameter)
      extractPoints(divisions) {
        return {
          shape: this.getPoints(divisions),
          holes: this.getPointsHoles(divisions)
        };
      }
      copy(source) {
        super.copy(source);
        this.holes = [];
        for (let i = 0, l = source.holes.length; i < l; i++) {
          const hole = source.holes[i];
          this.holes.push(hole.clone());
        }
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.uuid = this.uuid;
        data.holes = [];
        for (let i = 0, l = this.holes.length; i < l; i++) {
          const hole = this.holes[i];
          data.holes.push(hole.toJSON());
        }
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.uuid = json.uuid;
        this.holes = [];
        for (let i = 0, l = json.holes.length; i < l; i++) {
          const hole = json.holes[i];
          this.holes.push(new Path().fromJSON(hole));
        }
        return this;
      }
    };
    var Earcut = {
      triangulate: function(data, holeIndices, dim = 2) {
        const hasHoles = holeIndices && holeIndices.length;
        const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        let outerNode = linkedList(data, 0, outerLen, dim, true);
        const triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev)
          return triangles;
        let minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles)
          outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
        if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];
          for (let i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX)
              minX = x;
            if (y < minY)
              minY = y;
            if (x > maxX)
              maxX = x;
            if (y > maxY)
              maxY = y;
          }
          invSize = Math.max(maxX - minX, maxY - minY);
          invSize = invSize !== 0 ? 32767 / invSize : 0;
        }
        earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
        return triangles;
      }
    };
    function linkedList(data, start, end, dim, clockwise) {
      let i, last;
      if (clockwise === signedArea(data, start, end, dim) > 0) {
        for (i = start; i < end; i += dim)
          last = insertNode(i, data[i], data[i + 1], last);
      } else {
        for (i = end - dim; i >= start; i -= dim)
          last = insertNode(i, data[i], data[i + 1], last);
      }
      if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
      }
      return last;
    }
    function filterPoints(start, end) {
      if (!start)
        return start;
      if (!end)
        end = start;
      let p = start, again;
      do {
        again = false;
        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
          removeNode(p);
          p = end = p.prev;
          if (p === p.next)
            break;
          again = true;
        } else {
          p = p.next;
        }
      } while (again || p !== end);
      return end;
    }
    function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
      if (!ear)
        return;
      if (!pass && invSize)
        indexCurve(ear, minX, minY, invSize);
      let stop = ear, prev, next;
      while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
          triangles.push(prev.i / dim | 0);
          triangles.push(ear.i / dim | 0);
          triangles.push(next.i / dim | 0);
          removeNode(ear);
          ear = next.next;
          stop = next.next;
          continue;
        }
        ear = next;
        if (ear === stop) {
          if (!pass) {
            earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
          } else if (pass === 1) {
            ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
            earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
          } else if (pass === 2) {
            splitEarcut(ear, triangles, dim, minX, minY, invSize);
          }
          break;
        }
      }
    }
    function isEar(ear) {
      const a = ear.prev, b = ear, c = ear.next;
      if (area(a, b, c) >= 0)
        return false;
      const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
      const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
      let p = c.next;
      while (p !== a) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
          return false;
        p = p.next;
      }
      return true;
    }
    function isEarHashed(ear, minX, minY, invSize) {
      const a = ear.prev, b = ear, c = ear.next;
      if (area(a, b, c) >= 0)
        return false;
      const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
      const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
      const minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
      let p = ear.prevZ, n = ear.nextZ;
      while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
          return false;
        p = p.prevZ;
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
          return false;
        n = n.nextZ;
      }
      while (p && p.z >= minZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
          return false;
        p = p.prevZ;
      }
      while (n && n.z <= maxZ) {
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
          return false;
        n = n.nextZ;
      }
      return true;
    }
    function cureLocalIntersections(start, triangles, dim) {
      let p = start;
      do {
        const a = p.prev, b = p.next.next;
        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
          triangles.push(a.i / dim | 0);
          triangles.push(p.i / dim | 0);
          triangles.push(b.i / dim | 0);
          removeNode(p);
          removeNode(p.next);
          p = start = b;
        }
        p = p.next;
      } while (p !== start);
      return filterPoints(p);
    }
    function splitEarcut(start, triangles, dim, minX, minY, invSize) {
      let a = start;
      do {
        let b = a.next.next;
        while (b !== a.prev) {
          if (a.i !== b.i && isValidDiagonal(a, b)) {
            let c = splitPolygon(a, b);
            a = filterPoints(a, a.next);
            c = filterPoints(c, c.next);
            earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
            earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
            return;
          }
          b = b.next;
        }
        a = a.next;
      } while (a !== start);
    }
    function eliminateHoles(data, holeIndices, outerNode, dim) {
      const queue = [];
      let i, len, start, end, list;
      for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next)
          list.steiner = true;
        queue.push(getLeftmost(list));
      }
      queue.sort(compareX);
      for (i = 0; i < queue.length; i++) {
        outerNode = eliminateHole(queue[i], outerNode);
      }
      return outerNode;
    }
    function compareX(a, b) {
      return a.x - b.x;
    }
    function eliminateHole(hole, outerNode) {
      const bridge = findHoleBridge(hole, outerNode);
      if (!bridge) {
        return outerNode;
      }
      const bridgeReverse = splitPolygon(bridge, hole);
      filterPoints(bridgeReverse, bridgeReverse.next);
      return filterPoints(bridge, bridge.next);
    }
    function findHoleBridge(hole, outerNode) {
      let p = outerNode, qx = -Infinity, m;
      const hx = hole.x, hy = hole.y;
      do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
          const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
          if (x <= hx && x > qx) {
            qx = x;
            m = p.x < p.next.x ? p : p.next;
            if (x === hx)
              return m;
          }
        }
        p = p.next;
      } while (p !== outerNode);
      if (!m)
        return null;
      const stop = m, mx = m.x, my = m.y;
      let tanMin = Infinity, tan;
      p = m;
      do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
          tan = Math.abs(hy - p.y) / (hx - p.x);
          if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
            m = p;
            tanMin = tan;
          }
        }
        p = p.next;
      } while (p !== stop);
      return m;
    }
    function sectorContainsSector(m, p) {
      return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
    }
    function indexCurve(start, minX, minY, invSize) {
      let p = start;
      do {
        if (p.z === 0)
          p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
      } while (p !== start);
      p.prevZ.nextZ = null;
      p.prevZ = null;
      sortLinked(p);
    }
    function sortLinked(list) {
      let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
      do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while (p) {
          numMerges++;
          q = p;
          pSize = 0;
          for (i = 0; i < inSize; i++) {
            pSize++;
            q = q.nextZ;
            if (!q)
              break;
          }
          qSize = inSize;
          while (pSize > 0 || qSize > 0 && q) {
            if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
              e = p;
              p = p.nextZ;
              pSize--;
            } else {
              e = q;
              q = q.nextZ;
              qSize--;
            }
            if (tail)
              tail.nextZ = e;
            else
              list = e;
            e.prevZ = tail;
            tail = e;
          }
          p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
      } while (numMerges > 1);
      return list;
    }
    function zOrder(x, y, minX, minY, invSize) {
      x = (x - minX) * invSize | 0;
      y = (y - minY) * invSize | 0;
      x = (x | x << 8) & 16711935;
      x = (x | x << 4) & 252645135;
      x = (x | x << 2) & 858993459;
      x = (x | x << 1) & 1431655765;
      y = (y | y << 8) & 16711935;
      y = (y | y << 4) & 252645135;
      y = (y | y << 2) & 858993459;
      y = (y | y << 1) & 1431655765;
      return x | y << 1;
    }
    function getLeftmost(start) {
      let p = start, leftmost = start;
      do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
          leftmost = p;
        p = p.next;
      } while (p !== start);
      return leftmost;
    }
    function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
      return (cx - px2) * (ay - py2) >= (ax - px2) * (cy - py2) && (ax - px2) * (by - py2) >= (bx - px2) * (ay - py2) && (bx - px2) * (cy - py2) >= (cx - px2) * (by - py2);
    }
    function isValidDiagonal(a, b) {
      return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
      (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
      (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
      equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
    }
    function area(p, q, r) {
      return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    }
    function equals(p1, p2) {
      return p1.x === p2.x && p1.y === p2.y;
    }
    function intersects(p1, q1, p2, q2) {
      const o1 = sign(area(p1, q1, p2));
      const o2 = sign(area(p1, q1, q2));
      const o3 = sign(area(p2, q2, p1));
      const o4 = sign(area(p2, q2, q1));
      if (o1 !== o2 && o3 !== o4)
        return true;
      if (o1 === 0 && onSegment(p1, p2, q1))
        return true;
      if (o2 === 0 && onSegment(p1, q2, q1))
        return true;
      if (o3 === 0 && onSegment(p2, p1, q2))
        return true;
      if (o4 === 0 && onSegment(p2, q1, q2))
        return true;
      return false;
    }
    function onSegment(p, q, r) {
      return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
    }
    function sign(num) {
      return num > 0 ? 1 : num < 0 ? -1 : 0;
    }
    function intersectsPolygon(a, b) {
      let p = a;
      do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b))
          return true;
        p = p.next;
      } while (p !== a);
      return false;
    }
    function locallyInside(a, b) {
      return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
    }
    function middleInside(a, b) {
      let p = a, inside = false;
      const px2 = (a.x + b.x) / 2, py2 = (a.y + b.y) / 2;
      do {
        if (p.y > py2 !== p.next.y > py2 && p.next.y !== p.y && px2 < (p.next.x - p.x) * (py2 - p.y) / (p.next.y - p.y) + p.x)
          inside = !inside;
        p = p.next;
      } while (p !== a);
      return inside;
    }
    function splitPolygon(a, b) {
      const a2 = new Node2(a.i, a.x, a.y), b22 = new Node2(b.i, b.x, b.y), an = a.next, bp = b.prev;
      a.next = b;
      b.prev = a;
      a2.next = an;
      an.prev = a2;
      b22.next = a2;
      a2.prev = b22;
      bp.next = b22;
      b22.prev = bp;
      return b22;
    }
    function insertNode(i, x, y, last) {
      const p = new Node2(i, x, y);
      if (!last) {
        p.prev = p;
        p.next = p;
      } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
      }
      return p;
    }
    function removeNode(p) {
      p.next.prev = p.prev;
      p.prev.next = p.next;
      if (p.prevZ)
        p.prevZ.nextZ = p.nextZ;
      if (p.nextZ)
        p.nextZ.prevZ = p.prevZ;
    }
    function Node2(i, x, y) {
      this.i = i;
      this.x = x;
      this.y = y;
      this.prev = null;
      this.next = null;
      this.z = 0;
      this.prevZ = null;
      this.nextZ = null;
      this.steiner = false;
    }
    function signedArea(data, start, end, dim) {
      let sum = 0;
      for (let i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
      }
      return sum;
    }
    var ShapeUtils = class {
      // calculate area of the contour polygon
      static area(contour) {
        const n = contour.length;
        let a = 0;
        for (let p = n - 1, q = 0; q < n; p = q++) {
          a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
        }
        return a * 0.5;
      }
      static isClockWise(pts) {
        return ShapeUtils.area(pts) < 0;
      }
      static triangulateShape(contour, holes) {
        const vertices = [];
        const holeIndices = [];
        const faces = [];
        removeDupEndPts(contour);
        addContour(vertices, contour);
        let holeIndex = contour.length;
        holes.forEach(removeDupEndPts);
        for (let i = 0; i < holes.length; i++) {
          holeIndices.push(holeIndex);
          holeIndex += holes[i].length;
          addContour(vertices, holes[i]);
        }
        const triangles = Earcut.triangulate(vertices, holeIndices);
        for (let i = 0; i < triangles.length; i += 3) {
          faces.push(triangles.slice(i, i + 3));
        }
        return faces;
      }
    };
    function removeDupEndPts(points) {
      const l = points.length;
      if (l > 2 && points[l - 1].equals(points[0])) {
        points.pop();
      }
    }
    function addContour(vertices, contour) {
      for (let i = 0; i < contour.length; i++) {
        vertices.push(contour[i].x);
        vertices.push(contour[i].y);
      }
    }
    var ExtrudeGeometry = class extends BufferGeometry2 {
      constructor(shapes = new Shape([new Vector22(0.5, 0.5), new Vector22(-0.5, 0.5), new Vector22(-0.5, -0.5), new Vector22(0.5, -0.5)]), options = {}) {
        super();
        this.type = "ExtrudeGeometry";
        this.parameters = {
          shapes,
          options
        };
        shapes = Array.isArray(shapes) ? shapes : [shapes];
        const scope = this;
        const verticesArray = [];
        const uvArray = [];
        for (let i = 0, l = shapes.length; i < l; i++) {
          const shape = shapes[i];
          addShape(shape);
        }
        this.setAttribute("position", new Float32BufferAttribute2(verticesArray, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvArray, 2));
        this.computeVertexNormals();
        function addShape(shape) {
          const placeholder = [];
          const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
          const steps = options.steps !== void 0 ? options.steps : 1;
          const depth = options.depth !== void 0 ? options.depth : 1;
          let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
          let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 0.2;
          let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 0.1;
          let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
          let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
          const extrudePath = options.extrudePath;
          const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
          let extrudePts, extrudeByPath = false;
          let splineTube, binormal, normal, position2;
          if (extrudePath) {
            extrudePts = extrudePath.getSpacedPoints(steps);
            extrudeByPath = true;
            bevelEnabled = false;
            splineTube = extrudePath.computeFrenetFrames(steps, false);
            binormal = new Vector32();
            normal = new Vector32();
            position2 = new Vector32();
          }
          if (!bevelEnabled) {
            bevelSegments = 0;
            bevelThickness = 0;
            bevelSize = 0;
            bevelOffset = 0;
          }
          const shapePoints = shape.extractPoints(curveSegments);
          let vertices = shapePoints.shape;
          const holes = shapePoints.holes;
          const reverse = !ShapeUtils.isClockWise(vertices);
          if (reverse) {
            vertices = vertices.reverse();
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              if (ShapeUtils.isClockWise(ahole)) {
                holes[h] = ahole.reverse();
              }
            }
          }
          const faces = ShapeUtils.triangulateShape(vertices, holes);
          const contour = vertices;
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            vertices = vertices.concat(ahole);
          }
          function scalePt2(pt, vec, size) {
            if (!vec)
              console.error("THREE.ExtrudeGeometry: vec does not exist");
            return pt.clone().addScaledVector(vec, size);
          }
          const vlen = vertices.length, flen = faces.length;
          function getBevelVec(inPt, inPrev, inNext) {
            let v_trans_x, v_trans_y, shrink_by;
            const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
            const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
            const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
            const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
            if (Math.abs(collinear0) > Number.EPSILON) {
              const v_prev_len = Math.sqrt(v_prev_lensq);
              const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
              const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
              const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
              const ptNextShift_x = inNext.x - v_next_y / v_next_len;
              const ptNextShift_y = inNext.y + v_next_x / v_next_len;
              const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
              v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
              v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
              const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
              if (v_trans_lensq <= 2) {
                return new Vector22(v_trans_x, v_trans_y);
              } else {
                shrink_by = Math.sqrt(v_trans_lensq / 2);
              }
            } else {
              let direction_eq = false;
              if (v_prev_x > Number.EPSILON) {
                if (v_next_x > Number.EPSILON) {
                  direction_eq = true;
                }
              } else {
                if (v_prev_x < -Number.EPSILON) {
                  if (v_next_x < -Number.EPSILON) {
                    direction_eq = true;
                  }
                } else {
                  if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                    direction_eq = true;
                  }
                }
              }
              if (direction_eq) {
                v_trans_x = -v_prev_y;
                v_trans_y = v_prev_x;
                shrink_by = Math.sqrt(v_prev_lensq);
              } else {
                v_trans_x = v_prev_x;
                v_trans_y = v_prev_y;
                shrink_by = Math.sqrt(v_prev_lensq / 2);
              }
            }
            return new Vector22(v_trans_x / shrink_by, v_trans_y / shrink_by);
          }
          const contourMovements = [];
          for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
            if (j === il)
              j = 0;
            if (k === il)
              k = 0;
            contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
          }
          const holesMovements = [];
          let oneHoleMovements, verticesMovements = contourMovements.concat();
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            oneHoleMovements = [];
            for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
              if (j === il)
                j = 0;
              if (k === il)
                k = 0;
              oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
            }
            holesMovements.push(oneHoleMovements);
            verticesMovements = verticesMovements.concat(oneHoleMovements);
          }
          for (let b = 0; b < bevelSegments; b++) {
            const t = b / bevelSegments;
            const z = bevelThickness * Math.cos(t * Math.PI / 2);
            const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
            for (let i = 0, il = contour.length; i < il; i++) {
              const vert = scalePt2(contour[i], contourMovements[i], bs2);
              v(vert.x, vert.y, -z);
            }
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              oneHoleMovements = holesMovements[h];
              for (let i = 0, il = ahole.length; i < il; i++) {
                const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
                v(vert.x, vert.y, -z);
              }
            }
          }
          const bs = bevelSize + bevelOffset;
          for (let i = 0; i < vlen; i++) {
            const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
            if (!extrudeByPath) {
              v(vert.x, vert.y, 0);
            } else {
              normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
              binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
              position2.copy(extrudePts[0]).add(normal).add(binormal);
              v(position2.x, position2.y, position2.z);
            }
          }
          for (let s = 1; s <= steps; s++) {
            for (let i = 0; i < vlen; i++) {
              const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
              if (!extrudeByPath) {
                v(vert.x, vert.y, depth / steps * s);
              } else {
                normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
                binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
                position2.copy(extrudePts[s]).add(normal).add(binormal);
                v(position2.x, position2.y, position2.z);
              }
            }
          }
          for (let b = bevelSegments - 1; b >= 0; b--) {
            const t = b / bevelSegments;
            const z = bevelThickness * Math.cos(t * Math.PI / 2);
            const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
            for (let i = 0, il = contour.length; i < il; i++) {
              const vert = scalePt2(contour[i], contourMovements[i], bs2);
              v(vert.x, vert.y, depth + z);
            }
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              oneHoleMovements = holesMovements[h];
              for (let i = 0, il = ahole.length; i < il; i++) {
                const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
                if (!extrudeByPath) {
                  v(vert.x, vert.y, depth + z);
                } else {
                  v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
                }
              }
            }
          }
          buildLidFaces();
          buildSideFaces();
          function buildLidFaces() {
            const start = verticesArray.length / 3;
            if (bevelEnabled) {
              let layer = 0;
              let offset = vlen * layer;
              for (let i = 0; i < flen; i++) {
                const face = faces[i];
                f3(face[2] + offset, face[1] + offset, face[0] + offset);
              }
              layer = steps + bevelSegments * 2;
              offset = vlen * layer;
              for (let i = 0; i < flen; i++) {
                const face = faces[i];
                f3(face[0] + offset, face[1] + offset, face[2] + offset);
              }
            } else {
              for (let i = 0; i < flen; i++) {
                const face = faces[i];
                f3(face[2], face[1], face[0]);
              }
              for (let i = 0; i < flen; i++) {
                const face = faces[i];
                f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
              }
            }
            scope.addGroup(start, verticesArray.length / 3 - start, 0);
          }
          function buildSideFaces() {
            const start = verticesArray.length / 3;
            let layeroffset = 0;
            sidewalls(contour, layeroffset);
            layeroffset += contour.length;
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              sidewalls(ahole, layeroffset);
              layeroffset += ahole.length;
            }
            scope.addGroup(start, verticesArray.length / 3 - start, 1);
          }
          function sidewalls(contour2, layeroffset) {
            let i = contour2.length;
            while (--i >= 0) {
              const j = i;
              let k = i - 1;
              if (k < 0)
                k = contour2.length - 1;
              for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
                const slen1 = vlen * s;
                const slen2 = vlen * (s + 1);
                const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
                f4(a, b, c, d);
              }
            }
          }
          function v(x, y, z) {
            placeholder.push(x);
            placeholder.push(y);
            placeholder.push(z);
          }
          function f3(a, b, c) {
            addVertex(a);
            addVertex(b);
            addVertex(c);
            const nextIndex = verticesArray.length / 3;
            const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
            addUV(uvs[0]);
            addUV(uvs[1]);
            addUV(uvs[2]);
          }
          function f4(a, b, c, d) {
            addVertex(a);
            addVertex(b);
            addVertex(d);
            addVertex(b);
            addVertex(c);
            addVertex(d);
            const nextIndex = verticesArray.length / 3;
            const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
            addUV(uvs[0]);
            addUV(uvs[1]);
            addUV(uvs[3]);
            addUV(uvs[1]);
            addUV(uvs[2]);
            addUV(uvs[3]);
          }
          function addVertex(index) {
            verticesArray.push(placeholder[index * 3 + 0]);
            verticesArray.push(placeholder[index * 3 + 1]);
            verticesArray.push(placeholder[index * 3 + 2]);
          }
          function addUV(vector2) {
            uvArray.push(vector2.x);
            uvArray.push(vector2.y);
          }
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        const options = this.parameters.options;
        return toJSON$1(shapes, options, data);
      }
      static fromJSON(data, shapes) {
        const geometryShapes = [];
        for (let j = 0, jl = data.shapes.length; j < jl; j++) {
          const shape = shapes[data.shapes[j]];
          geometryShapes.push(shape);
        }
        const extrudePath = data.options.extrudePath;
        if (extrudePath !== void 0) {
          data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
        }
        return new ExtrudeGeometry(geometryShapes, data.options);
      }
    };
    var WorldUVGenerator = {
      generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        return [
          new Vector22(a_x, a_y),
          new Vector22(b_x, b_y),
          new Vector22(c_x, c_y)
        ];
      },
      generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const a_z = vertices[indexA * 3 + 2];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const b_z = vertices[indexB * 3 + 2];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        const c_z = vertices[indexC * 3 + 2];
        const d_x = vertices[indexD * 3];
        const d_y = vertices[indexD * 3 + 1];
        const d_z = vertices[indexD * 3 + 2];
        if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
          return [
            new Vector22(a_x, 1 - a_z),
            new Vector22(b_x, 1 - b_z),
            new Vector22(c_x, 1 - c_z),
            new Vector22(d_x, 1 - d_z)
          ];
        } else {
          return [
            new Vector22(a_y, 1 - a_z),
            new Vector22(b_y, 1 - b_z),
            new Vector22(c_y, 1 - c_z),
            new Vector22(d_y, 1 - d_z)
          ];
        }
      }
    };
    function toJSON$1(shapes, options, data) {
      data.shapes = [];
      if (Array.isArray(shapes)) {
        for (let i = 0, l = shapes.length; i < l; i++) {
          const shape = shapes[i];
          data.shapes.push(shape.uuid);
        }
      } else {
        data.shapes.push(shapes.uuid);
      }
      data.options = Object.assign({}, options);
      if (options.extrudePath !== void 0)
        data.options.extrudePath = options.extrudePath.toJSON();
      return data;
    }
    var IcosahedronGeometry = class extends PolyhedronGeometry {
      constructor(radius = 1, detail = 0) {
        const t = (1 + Math.sqrt(5)) / 2;
        const vertices = [
          -1,
          t,
          0,
          1,
          t,
          0,
          -1,
          -t,
          0,
          1,
          -t,
          0,
          0,
          -1,
          t,
          0,
          1,
          t,
          0,
          -1,
          -t,
          0,
          1,
          -t,
          t,
          0,
          -1,
          t,
          0,
          1,
          -t,
          0,
          -1,
          -t,
          0,
          1
        ];
        const indices = [
          0,
          11,
          5,
          0,
          5,
          1,
          0,
          1,
          7,
          0,
          7,
          10,
          0,
          10,
          11,
          1,
          5,
          9,
          5,
          11,
          4,
          11,
          10,
          2,
          10,
          7,
          6,
          7,
          1,
          8,
          3,
          9,
          4,
          3,
          4,
          2,
          3,
          2,
          6,
          3,
          6,
          8,
          3,
          8,
          9,
          4,
          9,
          5,
          2,
          4,
          11,
          6,
          2,
          10,
          8,
          6,
          7,
          9,
          8,
          1
        ];
        super(vertices, indices, radius, detail);
        this.type = "IcosahedronGeometry";
        this.parameters = {
          radius,
          detail
        };
      }
      static fromJSON(data) {
        return new IcosahedronGeometry(data.radius, data.detail);
      }
    };
    var OctahedronGeometry = class extends PolyhedronGeometry {
      constructor(radius = 1, detail = 0) {
        const vertices = [
          1,
          0,
          0,
          -1,
          0,
          0,
          0,
          1,
          0,
          0,
          -1,
          0,
          0,
          0,
          1,
          0,
          0,
          -1
        ];
        const indices = [
          0,
          2,
          4,
          0,
          4,
          3,
          0,
          3,
          5,
          0,
          5,
          2,
          1,
          2,
          5,
          1,
          5,
          3,
          1,
          3,
          4,
          1,
          4,
          2
        ];
        super(vertices, indices, radius, detail);
        this.type = "OctahedronGeometry";
        this.parameters = {
          radius,
          detail
        };
      }
      static fromJSON(data) {
        return new OctahedronGeometry(data.radius, data.detail);
      }
    };
    var RingGeometry = class extends BufferGeometry2 {
      constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
        super();
        this.type = "RingGeometry";
        this.parameters = {
          innerRadius,
          outerRadius,
          thetaSegments,
          phiSegments,
          thetaStart,
          thetaLength
        };
        thetaSegments = Math.max(3, thetaSegments);
        phiSegments = Math.max(1, phiSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        let radius = innerRadius;
        const radiusStep = (outerRadius - innerRadius) / phiSegments;
        const vertex2 = new Vector32();
        const uv = new Vector22();
        for (let j = 0; j <= phiSegments; j++) {
          for (let i = 0; i <= thetaSegments; i++) {
            const segment = thetaStart + i / thetaSegments * thetaLength;
            vertex2.x = radius * Math.cos(segment);
            vertex2.y = radius * Math.sin(segment);
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
            normals.push(0, 0, 1);
            uv.x = (vertex2.x / outerRadius + 1) / 2;
            uv.y = (vertex2.y / outerRadius + 1) / 2;
            uvs.push(uv.x, uv.y);
          }
          radius += radiusStep;
        }
        for (let j = 0; j < phiSegments; j++) {
          const thetaSegmentLevel = j * (thetaSegments + 1);
          for (let i = 0; i < thetaSegments; i++) {
            const segment = i + thetaSegmentLevel;
            const a = segment;
            const b = segment + thetaSegments + 1;
            const c = segment + thetaSegments + 2;
            const d = segment + 1;
            indices.push(a, b, d);
            indices.push(b, c, d);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
      }
    };
    var ShapeGeometry = class extends BufferGeometry2 {
      constructor(shapes = new Shape([new Vector22(0, 0.5), new Vector22(-0.5, -0.5), new Vector22(0.5, -0.5)]), curveSegments = 12) {
        super();
        this.type = "ShapeGeometry";
        this.parameters = {
          shapes,
          curveSegments
        };
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        let groupStart = 0;
        let groupCount = 0;
        if (Array.isArray(shapes) === false) {
          addShape(shapes);
        } else {
          for (let i = 0; i < shapes.length; i++) {
            addShape(shapes[i]);
            this.addGroup(groupStart, groupCount, i);
            groupStart += groupCount;
            groupCount = 0;
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
        function addShape(shape) {
          const indexOffset = vertices.length / 3;
          const points = shape.extractPoints(curveSegments);
          let shapeVertices = points.shape;
          const shapeHoles = points.holes;
          if (ShapeUtils.isClockWise(shapeVertices) === false) {
            shapeVertices = shapeVertices.reverse();
          }
          for (let i = 0, l = shapeHoles.length; i < l; i++) {
            const shapeHole = shapeHoles[i];
            if (ShapeUtils.isClockWise(shapeHole) === true) {
              shapeHoles[i] = shapeHole.reverse();
            }
          }
          const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
          for (let i = 0, l = shapeHoles.length; i < l; i++) {
            const shapeHole = shapeHoles[i];
            shapeVertices = shapeVertices.concat(shapeHole);
          }
          for (let i = 0, l = shapeVertices.length; i < l; i++) {
            const vertex2 = shapeVertices[i];
            vertices.push(vertex2.x, vertex2.y, 0);
            normals.push(0, 0, 1);
            uvs.push(vertex2.x, vertex2.y);
          }
          for (let i = 0, l = faces.length; i < l; i++) {
            const face = faces[i];
            const a = face[0] + indexOffset;
            const b = face[1] + indexOffset;
            const c = face[2] + indexOffset;
            indices.push(a, b, c);
            groupCount += 3;
          }
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        return toJSON(shapes, data);
      }
      static fromJSON(data, shapes) {
        const geometryShapes = [];
        for (let j = 0, jl = data.shapes.length; j < jl; j++) {
          const shape = shapes[data.shapes[j]];
          geometryShapes.push(shape);
        }
        return new ShapeGeometry(geometryShapes, data.curveSegments);
      }
    };
    function toJSON(shapes, data) {
      data.shapes = [];
      if (Array.isArray(shapes)) {
        for (let i = 0, l = shapes.length; i < l; i++) {
          const shape = shapes[i];
          data.shapes.push(shape.uuid);
        }
      } else {
        data.shapes.push(shapes.uuid);
      }
      return data;
    }
    var SphereGeometry = class extends BufferGeometry2 {
      constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
        super();
        this.type = "SphereGeometry";
        this.parameters = {
          radius,
          widthSegments,
          heightSegments,
          phiStart,
          phiLength,
          thetaStart,
          thetaLength
        };
        widthSegments = Math.max(3, Math.floor(widthSegments));
        heightSegments = Math.max(2, Math.floor(heightSegments));
        const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
        let index = 0;
        const grid = [];
        const vertex2 = new Vector32();
        const normal = new Vector32();
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        for (let iy = 0; iy <= heightSegments; iy++) {
          const verticesRow = [];
          const v = iy / heightSegments;
          let uOffset = 0;
          if (iy === 0 && thetaStart === 0) {
            uOffset = 0.5 / widthSegments;
          } else if (iy === heightSegments && thetaEnd === Math.PI) {
            uOffset = -0.5 / widthSegments;
          }
          for (let ix = 0; ix <= widthSegments; ix++) {
            const u = ix / widthSegments;
            vertex2.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
            vertex2.y = radius * Math.cos(thetaStart + v * thetaLength);
            vertex2.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
            normal.copy(vertex2).normalize();
            normals.push(normal.x, normal.y, normal.z);
            uvs.push(u + uOffset, 1 - v);
            verticesRow.push(index++);
          }
          grid.push(verticesRow);
        }
        for (let iy = 0; iy < heightSegments; iy++) {
          for (let ix = 0; ix < widthSegments; ix++) {
            const a = grid[iy][ix + 1];
            const b = grid[iy][ix];
            const c = grid[iy + 1][ix];
            const d = grid[iy + 1][ix + 1];
            if (iy !== 0 || thetaStart > 0)
              indices.push(a, b, d);
            if (iy !== heightSegments - 1 || thetaEnd < Math.PI)
              indices.push(b, c, d);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
      }
    };
    var TetrahedronGeometry = class extends PolyhedronGeometry {
      constructor(radius = 1, detail = 0) {
        const vertices = [
          1,
          1,
          1,
          -1,
          -1,
          1,
          -1,
          1,
          -1,
          1,
          -1,
          -1
        ];
        const indices = [
          2,
          1,
          0,
          0,
          3,
          2,
          1,
          3,
          0,
          2,
          3,
          1
        ];
        super(vertices, indices, radius, detail);
        this.type = "TetrahedronGeometry";
        this.parameters = {
          radius,
          detail
        };
      }
      static fromJSON(data) {
        return new TetrahedronGeometry(data.radius, data.detail);
      }
    };
    var TorusGeometry = class extends BufferGeometry2 {
      constructor(radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2) {
        super();
        this.type = "TorusGeometry";
        this.parameters = {
          radius,
          tube,
          radialSegments,
          tubularSegments,
          arc
        };
        radialSegments = Math.floor(radialSegments);
        tubularSegments = Math.floor(tubularSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        const center = new Vector32();
        const vertex2 = new Vector32();
        const normal = new Vector32();
        for (let j = 0; j <= radialSegments; j++) {
          for (let i = 0; i <= tubularSegments; i++) {
            const u = i / tubularSegments * arc;
            const v = j / radialSegments * Math.PI * 2;
            vertex2.x = (radius + tube * Math.cos(v)) * Math.cos(u);
            vertex2.y = (radius + tube * Math.cos(v)) * Math.sin(u);
            vertex2.z = tube * Math.sin(v);
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
            center.x = radius * Math.cos(u);
            center.y = radius * Math.sin(u);
            normal.subVectors(vertex2, center).normalize();
            normals.push(normal.x, normal.y, normal.z);
            uvs.push(i / tubularSegments);
            uvs.push(j / radialSegments);
          }
        }
        for (let j = 1; j <= radialSegments; j++) {
          for (let i = 1; i <= tubularSegments; i++) {
            const a = (tubularSegments + 1) * j + i - 1;
            const b = (tubularSegments + 1) * (j - 1) + i - 1;
            const c = (tubularSegments + 1) * (j - 1) + i;
            const d = (tubularSegments + 1) * j + i;
            indices.push(a, b, d);
            indices.push(b, c, d);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
      }
    };
    var TorusKnotGeometry = class extends BufferGeometry2 {
      constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
        super();
        this.type = "TorusKnotGeometry";
        this.parameters = {
          radius,
          tube,
          tubularSegments,
          radialSegments,
          p,
          q
        };
        tubularSegments = Math.floor(tubularSegments);
        radialSegments = Math.floor(radialSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        const vertex2 = new Vector32();
        const normal = new Vector32();
        const P1 = new Vector32();
        const P2 = new Vector32();
        const B = new Vector32();
        const T = new Vector32();
        const N = new Vector32();
        for (let i = 0; i <= tubularSegments; ++i) {
          const u = i / tubularSegments * p * Math.PI * 2;
          calculatePositionOnCurve(u, p, q, radius, P1);
          calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
          T.subVectors(P2, P1);
          N.addVectors(P2, P1);
          B.crossVectors(T, N);
          N.crossVectors(B, T);
          B.normalize();
          N.normalize();
          for (let j = 0; j <= radialSegments; ++j) {
            const v = j / radialSegments * Math.PI * 2;
            const cx = -tube * Math.cos(v);
            const cy = tube * Math.sin(v);
            vertex2.x = P1.x + (cx * N.x + cy * B.x);
            vertex2.y = P1.y + (cx * N.y + cy * B.y);
            vertex2.z = P1.z + (cx * N.z + cy * B.z);
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
            normal.subVectors(vertex2, P1).normalize();
            normals.push(normal.x, normal.y, normal.z);
            uvs.push(i / tubularSegments);
            uvs.push(j / radialSegments);
          }
        }
        for (let j = 1; j <= tubularSegments; j++) {
          for (let i = 1; i <= radialSegments; i++) {
            const a = (radialSegments + 1) * (j - 1) + (i - 1);
            const b = (radialSegments + 1) * j + (i - 1);
            const c = (radialSegments + 1) * j + i;
            const d = (radialSegments + 1) * (j - 1) + i;
            indices.push(a, b, d);
            indices.push(b, c, d);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
        function calculatePositionOnCurve(u, p2, q2, radius2, position) {
          const cu = Math.cos(u);
          const su = Math.sin(u);
          const quOverP = q2 / p2 * u;
          const cs = Math.cos(quOverP);
          position.x = radius2 * (2 + cs) * 0.5 * cu;
          position.y = radius2 * (2 + cs) * su * 0.5;
          position.z = radius2 * Math.sin(quOverP) * 0.5;
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
      }
    };
    var TubeGeometry = class extends BufferGeometry2 {
      constructor(path = new QuadraticBezierCurve3(new Vector32(-1, -1, 0), new Vector32(-1, 1, 0), new Vector32(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
        super();
        this.type = "TubeGeometry";
        this.parameters = {
          path,
          tubularSegments,
          radius,
          radialSegments,
          closed
        };
        const frames = path.computeFrenetFrames(tubularSegments, closed);
        this.tangents = frames.tangents;
        this.normals = frames.normals;
        this.binormals = frames.binormals;
        const vertex2 = new Vector32();
        const normal = new Vector32();
        const uv = new Vector22();
        let P = new Vector32();
        const vertices = [];
        const normals = [];
        const uvs = [];
        const indices = [];
        generateBufferData();
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
        function generateBufferData() {
          for (let i = 0; i < tubularSegments; i++) {
            generateSegment(i);
          }
          generateSegment(closed === false ? tubularSegments : 0);
          generateUVs();
          generateIndices();
        }
        function generateSegment(i) {
          P = path.getPointAt(i / tubularSegments, P);
          const N = frames.normals[i];
          const B = frames.binormals[i];
          for (let j = 0; j <= radialSegments; j++) {
            const v = j / radialSegments * Math.PI * 2;
            const sin = Math.sin(v);
            const cos = -Math.cos(v);
            normal.x = cos * N.x + sin * B.x;
            normal.y = cos * N.y + sin * B.y;
            normal.z = cos * N.z + sin * B.z;
            normal.normalize();
            normals.push(normal.x, normal.y, normal.z);
            vertex2.x = P.x + radius * normal.x;
            vertex2.y = P.y + radius * normal.y;
            vertex2.z = P.z + radius * normal.z;
            vertices.push(vertex2.x, vertex2.y, vertex2.z);
          }
        }
        function generateIndices() {
          for (let j = 1; j <= tubularSegments; j++) {
            for (let i = 1; i <= radialSegments; i++) {
              const a = (radialSegments + 1) * (j - 1) + (i - 1);
              const b = (radialSegments + 1) * j + (i - 1);
              const c = (radialSegments + 1) * j + i;
              const d = (radialSegments + 1) * (j - 1) + i;
              indices.push(a, b, d);
              indices.push(b, c, d);
            }
          }
        }
        function generateUVs() {
          for (let i = 0; i <= tubularSegments; i++) {
            for (let j = 0; j <= radialSegments; j++) {
              uv.x = i / tubularSegments;
              uv.y = j / radialSegments;
              uvs.push(uv.x, uv.y);
            }
          }
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.path = this.parameters.path.toJSON();
        return data;
      }
      static fromJSON(data) {
        return new TubeGeometry(
          new Curves[data.path.type]().fromJSON(data.path),
          data.tubularSegments,
          data.radius,
          data.radialSegments,
          data.closed
        );
      }
    };
    var WireframeGeometry = class extends BufferGeometry2 {
      constructor(geometry = null) {
        super();
        this.type = "WireframeGeometry";
        this.parameters = {
          geometry
        };
        if (geometry !== null) {
          const vertices = [];
          const edges = /* @__PURE__ */ new Set();
          const start = new Vector32();
          const end = new Vector32();
          if (geometry.index !== null) {
            const position = geometry.attributes.position;
            const indices = geometry.index;
            let groups = geometry.groups;
            if (groups.length === 0) {
              groups = [{ start: 0, count: indices.count, materialIndex: 0 }];
            }
            for (let o = 0, ol = groups.length; o < ol; ++o) {
              const group = groups[o];
              const groupStart = group.start;
              const groupCount = group.count;
              for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {
                for (let j = 0; j < 3; j++) {
                  const index1 = indices.getX(i + j);
                  const index2 = indices.getX(i + (j + 1) % 3);
                  start.fromBufferAttribute(position, index1);
                  end.fromBufferAttribute(position, index2);
                  if (isUniqueEdge(start, end, edges) === true) {
                    vertices.push(start.x, start.y, start.z);
                    vertices.push(end.x, end.y, end.z);
                  }
                }
              }
            }
          } else {
            const position = geometry.attributes.position;
            for (let i = 0, l = position.count / 3; i < l; i++) {
              for (let j = 0; j < 3; j++) {
                const index1 = 3 * i + j;
                const index2 = 3 * i + (j + 1) % 3;
                start.fromBufferAttribute(position, index1);
                end.fromBufferAttribute(position, index2);
                if (isUniqueEdge(start, end, edges) === true) {
                  vertices.push(start.x, start.y, start.z);
                  vertices.push(end.x, end.y, end.z);
                }
              }
            }
          }
          this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
    };
    function isUniqueEdge(start, end, edges) {
      const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
      const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;
      if (edges.has(hash1) === true || edges.has(hash2) === true) {
        return false;
      } else {
        edges.add(hash1);
        edges.add(hash2);
        return true;
      }
    }
    var Geometries = Object.freeze({
      __proto__: null,
      BoxGeometry,
      CapsuleGeometry,
      CircleGeometry,
      ConeGeometry,
      CylinderGeometry,
      DodecahedronGeometry,
      EdgesGeometry,
      ExtrudeGeometry,
      IcosahedronGeometry,
      LatheGeometry,
      OctahedronGeometry,
      PlaneGeometry,
      PolyhedronGeometry,
      RingGeometry,
      ShapeGeometry,
      SphereGeometry,
      TetrahedronGeometry,
      TorusGeometry,
      TorusKnotGeometry,
      TubeGeometry,
      WireframeGeometry
    });
    var ShadowMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isShadowMaterial = true;
        this.type = "ShadowMaterial";
        this.color = new Color2(0);
        this.transparent = true;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.fog = source.fog;
        return this;
      }
    };
    var RawShaderMaterial = class extends ShaderMaterial {
      constructor(parameters) {
        super(parameters);
        this.isRawShaderMaterial = true;
        this.type = "RawShaderMaterial";
      }
    };
    var MeshStandardMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshStandardMaterial = true;
        this.defines = { "STANDARD": "" };
        this.type = "MeshStandardMaterial";
        this.color = new Color2(16777215);
        this.roughness = 1;
        this.metalness = 0;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color2(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector22(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.roughnessMap = null;
        this.metalnessMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.envMapIntensity = 1;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.defines = { "STANDARD": "" };
        this.color.copy(source.color);
        this.roughness = source.roughness;
        this.metalness = source.metalness;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.roughnessMap = source.roughnessMap;
        this.metalnessMap = source.metalnessMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.envMapIntensity = source.envMapIntensity;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
      }
    };
    var MeshPhysicalMaterial = class extends MeshStandardMaterial {
      constructor(parameters) {
        super();
        this.isMeshPhysicalMaterial = true;
        this.defines = {
          "STANDARD": "",
          "PHYSICAL": ""
        };
        this.type = "MeshPhysicalMaterial";
        this.clearcoatMap = null;
        this.clearcoatRoughness = 0;
        this.clearcoatRoughnessMap = null;
        this.clearcoatNormalScale = new Vector22(1, 1);
        this.clearcoatNormalMap = null;
        this.ior = 1.5;
        Object.defineProperty(this, "reflectivity", {
          get: function() {
            return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
          },
          set: function(reflectivity) {
            this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
          }
        });
        this.iridescenceMap = null;
        this.iridescenceIOR = 1.3;
        this.iridescenceThicknessRange = [100, 400];
        this.iridescenceThicknessMap = null;
        this.sheenColor = new Color2(0);
        this.sheenColorMap = null;
        this.sheenRoughness = 1;
        this.sheenRoughnessMap = null;
        this.transmissionMap = null;
        this.thickness = 0;
        this.thicknessMap = null;
        this.attenuationDistance = Infinity;
        this.attenuationColor = new Color2(1, 1, 1);
        this.specularIntensity = 1;
        this.specularIntensityMap = null;
        this.specularColor = new Color2(1, 1, 1);
        this.specularColorMap = null;
        this._sheen = 0;
        this._clearcoat = 0;
        this._iridescence = 0;
        this._transmission = 0;
        this.setValues(parameters);
      }
      get sheen() {
        return this._sheen;
      }
      set sheen(value) {
        if (this._sheen > 0 !== value > 0) {
          this.version++;
        }
        this._sheen = value;
      }
      get clearcoat() {
        return this._clearcoat;
      }
      set clearcoat(value) {
        if (this._clearcoat > 0 !== value > 0) {
          this.version++;
        }
        this._clearcoat = value;
      }
      get iridescence() {
        return this._iridescence;
      }
      set iridescence(value) {
        if (this._iridescence > 0 !== value > 0) {
          this.version++;
        }
        this._iridescence = value;
      }
      get transmission() {
        return this._transmission;
      }
      set transmission(value) {
        if (this._transmission > 0 !== value > 0) {
          this.version++;
        }
        this._transmission = value;
      }
      copy(source) {
        super.copy(source);
        this.defines = {
          "STANDARD": "",
          "PHYSICAL": ""
        };
        this.clearcoat = source.clearcoat;
        this.clearcoatMap = source.clearcoatMap;
        this.clearcoatRoughness = source.clearcoatRoughness;
        this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
        this.clearcoatNormalMap = source.clearcoatNormalMap;
        this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
        this.ior = source.ior;
        this.iridescence = source.iridescence;
        this.iridescenceMap = source.iridescenceMap;
        this.iridescenceIOR = source.iridescenceIOR;
        this.iridescenceThicknessRange = [...source.iridescenceThicknessRange];
        this.iridescenceThicknessMap = source.iridescenceThicknessMap;
        this.sheen = source.sheen;
        this.sheenColor.copy(source.sheenColor);
        this.sheenColorMap = source.sheenColorMap;
        this.sheenRoughness = source.sheenRoughness;
        this.sheenRoughnessMap = source.sheenRoughnessMap;
        this.transmission = source.transmission;
        this.transmissionMap = source.transmissionMap;
        this.thickness = source.thickness;
        this.thicknessMap = source.thicknessMap;
        this.attenuationDistance = source.attenuationDistance;
        this.attenuationColor.copy(source.attenuationColor);
        this.specularIntensity = source.specularIntensity;
        this.specularIntensityMap = source.specularIntensityMap;
        this.specularColor.copy(source.specularColor);
        this.specularColorMap = source.specularColorMap;
        return this;
      }
    };
    var MeshPhongMaterial2 = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshPhongMaterial = true;
        this.type = "MeshPhongMaterial";
        this.color = new Color2(16777215);
        this.specular = new Color2(1118481);
        this.shininess = 30;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color2(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector22(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.specular.copy(source.specular);
        this.shininess = source.shininess;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
      }
    };
    var MeshToonMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshToonMaterial = true;
        this.defines = { "TOON": "" };
        this.type = "MeshToonMaterial";
        this.color = new Color2(16777215);
        this.map = null;
        this.gradientMap = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color2(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector22(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.gradientMap = source.gradientMap;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.alphaMap = source.alphaMap;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.fog = source.fog;
        return this;
      }
    };
    var MeshNormalMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshNormalMaterial = true;
        this.type = "MeshNormalMaterial";
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector22(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.flatShading = false;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.flatShading = source.flatShading;
        return this;
      }
    };
    var MeshLambertMaterial2 = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshLambertMaterial = true;
        this.type = "MeshLambertMaterial";
        this.color = new Color2(16777215);
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color2(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector22(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
      }
    };
    var MeshMatcapMaterial = class extends Material2 {
      constructor(parameters) {
        super();
        this.isMeshMatcapMaterial = true;
        this.defines = { "MATCAP": "" };
        this.type = "MeshMatcapMaterial";
        this.color = new Color2(16777215);
        this.matcap = null;
        this.map = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector22(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.defines = { "MATCAP": "" };
        this.color.copy(source.color);
        this.matcap = source.matcap;
        this.map = source.map;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.alphaMap = source.alphaMap;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
      }
    };
    var LineDashedMaterial = class extends LineBasicMaterial2 {
      constructor(parameters) {
        super();
        this.isLineDashedMaterial = true;
        this.type = "LineDashedMaterial";
        this.scale = 1;
        this.dashSize = 3;
        this.gapSize = 1;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.scale = source.scale;
        this.dashSize = source.dashSize;
        this.gapSize = source.gapSize;
        return this;
      }
    };
    function arraySlice(array, from, to) {
      if (isTypedArray(array)) {
        return new array.constructor(array.subarray(from, to !== void 0 ? to : array.length));
      }
      return array.slice(from, to);
    }
    function convertArray(array, type, forceClone) {
      if (!array || // let 'undefined' and 'null' pass
      !forceClone && array.constructor === type)
        return array;
      if (typeof type.BYTES_PER_ELEMENT === "number") {
        return new type(array);
      }
      return Array.prototype.slice.call(array);
    }
    function isTypedArray(object) {
      return ArrayBuffer.isView(object) && !(object instanceof DataView);
    }
    function getKeyframeOrder(times) {
      function compareTime(i, j) {
        return times[i] - times[j];
      }
      const n = times.length;
      const result = new Array(n);
      for (let i = 0; i !== n; ++i)
        result[i] = i;
      result.sort(compareTime);
      return result;
    }
    function sortedArray(values, stride, order) {
      const nValues = values.length;
      const result = new values.constructor(nValues);
      for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
        const srcOffset = order[i] * stride;
        for (let j = 0; j !== stride; ++j) {
          result[dstOffset++] = values[srcOffset + j];
        }
      }
      return result;
    }
    function flattenJSON(jsonKeys, times, values, valuePropertyName) {
      let i = 1, key = jsonKeys[0];
      while (key !== void 0 && key[valuePropertyName] === void 0) {
        key = jsonKeys[i++];
      }
      if (key === void 0)
        return;
      let value = key[valuePropertyName];
      if (value === void 0)
        return;
      if (Array.isArray(value)) {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            values.push.apply(values, value);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      } else if (value.toArray !== void 0) {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            value.toArray(values, values.length);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      } else {
        do {
          value = key[valuePropertyName];
          if (value !== void 0) {
            times.push(key.time);
            values.push(value);
          }
          key = jsonKeys[i++];
        } while (key !== void 0);
      }
    }
    function subclip(sourceClip, name, startFrame, endFrame, fps = 30) {
      const clip = sourceClip.clone();
      clip.name = name;
      const tracks = [];
      for (let i = 0; i < clip.tracks.length; ++i) {
        const track = clip.tracks[i];
        const valueSize = track.getValueSize();
        const times = [];
        const values = [];
        for (let j = 0; j < track.times.length; ++j) {
          const frame = track.times[j] * fps;
          if (frame < startFrame || frame >= endFrame)
            continue;
          times.push(track.times[j]);
          for (let k = 0; k < valueSize; ++k) {
            values.push(track.values[j * valueSize + k]);
          }
        }
        if (times.length === 0)
          continue;
        track.times = convertArray(times, track.times.constructor);
        track.values = convertArray(values, track.values.constructor);
        tracks.push(track);
      }
      clip.tracks = tracks;
      let minStartTime = Infinity;
      for (let i = 0; i < clip.tracks.length; ++i) {
        if (minStartTime > clip.tracks[i].times[0]) {
          minStartTime = clip.tracks[i].times[0];
        }
      }
      for (let i = 0; i < clip.tracks.length; ++i) {
        clip.tracks[i].shift(-1 * minStartTime);
      }
      clip.resetDuration();
      return clip;
    }
    function makeClipAdditive(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
      if (fps <= 0)
        fps = 30;
      const numTracks = referenceClip.tracks.length;
      const referenceTime = referenceFrame / fps;
      for (let i = 0; i < numTracks; ++i) {
        const referenceTrack = referenceClip.tracks[i];
        const referenceTrackType = referenceTrack.ValueTypeName;
        if (referenceTrackType === "bool" || referenceTrackType === "string")
          continue;
        const targetTrack = targetClip.tracks.find(function(track) {
          return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
        });
        if (targetTrack === void 0)
          continue;
        let referenceOffset = 0;
        const referenceValueSize = referenceTrack.getValueSize();
        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
          referenceOffset = referenceValueSize / 3;
        }
        let targetOffset = 0;
        const targetValueSize = targetTrack.getValueSize();
        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
          targetOffset = targetValueSize / 3;
        }
        const lastIndex = referenceTrack.times.length - 1;
        let referenceValue;
        if (referenceTime <= referenceTrack.times[0]) {
          const startIndex = referenceOffset;
          const endIndex = referenceValueSize - referenceOffset;
          referenceValue = arraySlice(referenceTrack.values, startIndex, endIndex);
        } else if (referenceTime >= referenceTrack.times[lastIndex]) {
          const startIndex = lastIndex * referenceValueSize + referenceOffset;
          const endIndex = startIndex + referenceValueSize - referenceOffset;
          referenceValue = arraySlice(referenceTrack.values, startIndex, endIndex);
        } else {
          const interpolant = referenceTrack.createInterpolant();
          const startIndex = referenceOffset;
          const endIndex = referenceValueSize - referenceOffset;
          interpolant.evaluate(referenceTime);
          referenceValue = arraySlice(interpolant.resultBuffer, startIndex, endIndex);
        }
        if (referenceTrackType === "quaternion") {
          const referenceQuat = new Quaternion2().fromArray(referenceValue).normalize().conjugate();
          referenceQuat.toArray(referenceValue);
        }
        const numTimes = targetTrack.times.length;
        for (let j = 0; j < numTimes; ++j) {
          const valueStart = j * targetValueSize + targetOffset;
          if (referenceTrackType === "quaternion") {
            Quaternion2.multiplyQuaternionsFlat(
              targetTrack.values,
              valueStart,
              referenceValue,
              0,
              targetTrack.values,
              valueStart
            );
          } else {
            const valueEnd = targetValueSize - targetOffset * 2;
            for (let k = 0; k < valueEnd; ++k) {
              targetTrack.values[valueStart + k] -= referenceValue[k];
            }
          }
        }
      }
      targetClip.blendMode = AdditiveAnimationBlendMode;
      return targetClip;
    }
    var AnimationUtils = {
      arraySlice,
      convertArray,
      isTypedArray,
      getKeyframeOrder,
      sortedArray,
      flattenJSON,
      subclip,
      makeClipAdditive
    };
    var Interpolant = class {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        this.parameterPositions = parameterPositions;
        this._cachedIndex = 0;
        this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
        this.sampleValues = sampleValues;
        this.valueSize = sampleSize;
        this.settings = null;
        this.DefaultSettings_ = {};
      }
      evaluate(t) {
        const pp = this.parameterPositions;
        let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
        validate_interval: {
          seek: {
            let right;
            linear_scan: {
              forward_scan:
                if (!(t < t1)) {
                  for (let giveUpAt = i1 + 2; ; ) {
                    if (t1 === void 0) {
                      if (t < t0)
                        break forward_scan;
                      i1 = pp.length;
                      this._cachedIndex = i1;
                      return this.copySampleValue_(i1 - 1);
                    }
                    if (i1 === giveUpAt)
                      break;
                    t0 = t1;
                    t1 = pp[++i1];
                    if (t < t1) {
                      break seek;
                    }
                  }
                  right = pp.length;
                  break linear_scan;
                }
              if (!(t >= t0)) {
                const t1global = pp[1];
                if (t < t1global) {
                  i1 = 2;
                  t0 = t1global;
                }
                for (let giveUpAt = i1 - 2; ; ) {
                  if (t0 === void 0) {
                    this._cachedIndex = 0;
                    return this.copySampleValue_(0);
                  }
                  if (i1 === giveUpAt)
                    break;
                  t1 = t0;
                  t0 = pp[--i1 - 1];
                  if (t >= t0) {
                    break seek;
                  }
                }
                right = i1;
                i1 = 0;
                break linear_scan;
              }
              break validate_interval;
            }
            while (i1 < right) {
              const mid = i1 + right >>> 1;
              if (t < pp[mid]) {
                right = mid;
              } else {
                i1 = mid + 1;
              }
            }
            t1 = pp[i1];
            t0 = pp[i1 - 1];
            if (t0 === void 0) {
              this._cachedIndex = 0;
              return this.copySampleValue_(0);
            }
            if (t1 === void 0) {
              i1 = pp.length;
              this._cachedIndex = i1;
              return this.copySampleValue_(i1 - 1);
            }
          }
          this._cachedIndex = i1;
          this.intervalChanged_(i1, t0, t1);
        }
        return this.interpolate_(i1, t0, t, t1);
      }
      getSettings_() {
        return this.settings || this.DefaultSettings_;
      }
      copySampleValue_(index) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
        for (let i = 0; i !== stride; ++i) {
          result[i] = values[offset + i];
        }
        return result;
      }
      // Template methods for derived classes:
      interpolate_() {
        throw new Error("call to abstract method");
      }
      intervalChanged_() {
      }
    };
    var CubicInterpolant = class extends Interpolant {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
        this._weightPrev = -0;
        this._offsetPrev = -0;
        this._weightNext = -0;
        this._offsetNext = -0;
        this.DefaultSettings_ = {
          endingStart: ZeroCurvatureEnding,
          endingEnd: ZeroCurvatureEnding
        };
      }
      intervalChanged_(i1, t0, t1) {
        const pp = this.parameterPositions;
        let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
        if (tPrev === void 0) {
          switch (this.getSettings_().endingStart) {
            case ZeroSlopeEnding:
              iPrev = i1;
              tPrev = 2 * t0 - t1;
              break;
            case WrapAroundEnding:
              iPrev = pp.length - 2;
              tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
              break;
            default:
              iPrev = i1;
              tPrev = t1;
          }
        }
        if (tNext === void 0) {
          switch (this.getSettings_().endingEnd) {
            case ZeroSlopeEnding:
              iNext = i1;
              tNext = 2 * t1 - t0;
              break;
            case WrapAroundEnding:
              iNext = 1;
              tNext = t1 + pp[1] - pp[0];
              break;
            default:
              iNext = i1 - 1;
              tNext = t0;
          }
        }
        const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
        this._weightPrev = halfDt / (t0 - tPrev);
        this._weightNext = halfDt / (tNext - t1);
        this._offsetPrev = iPrev * stride;
        this._offsetNext = iNext * stride;
      }
      interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
        const sP = -wP * ppp + 2 * wP * pp - wP * p;
        const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
        const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
        const sN = wN * ppp - wN * pp;
        for (let i = 0; i !== stride; ++i) {
          result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
        }
        return result;
      }
    };
    var LinearInterpolant = class extends Interpolant {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      }
      interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
        for (let i = 0; i !== stride; ++i) {
          result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
        }
        return result;
      }
    };
    var DiscreteInterpolant = class extends Interpolant {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      }
      interpolate_(i1) {
        return this.copySampleValue_(i1 - 1);
      }
    };
    var KeyframeTrack = class {
      constructor(name, times, values, interpolation) {
        if (name === void 0)
          throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (times === void 0 || times.length === 0)
          throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
        this.name = name;
        this.times = convertArray(times, this.TimeBufferType);
        this.values = convertArray(values, this.ValueBufferType);
        this.setInterpolation(interpolation || this.DefaultInterpolation);
      }
      // Serialization (in static context, because of constructor invocation
      // and automatic invocation of .toJSON):
      static toJSON(track) {
        const trackType = track.constructor;
        let json;
        if (trackType.toJSON !== this.toJSON) {
          json = trackType.toJSON(track);
        } else {
          json = {
            "name": track.name,
            "times": convertArray(track.times, Array),
            "values": convertArray(track.values, Array)
          };
          const interpolation = track.getInterpolation();
          if (interpolation !== track.DefaultInterpolation) {
            json.interpolation = interpolation;
          }
        }
        json.type = track.ValueTypeName;
        return json;
      }
      InterpolantFactoryMethodDiscrete(result) {
        return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
      }
      InterpolantFactoryMethodLinear(result) {
        return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
      }
      InterpolantFactoryMethodSmooth(result) {
        return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
      }
      setInterpolation(interpolation) {
        let factoryMethod;
        switch (interpolation) {
          case InterpolateDiscrete:
            factoryMethod = this.InterpolantFactoryMethodDiscrete;
            break;
          case InterpolateLinear:
            factoryMethod = this.InterpolantFactoryMethodLinear;
            break;
          case InterpolateSmooth:
            factoryMethod = this.InterpolantFactoryMethodSmooth;
            break;
        }
        if (factoryMethod === void 0) {
          const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
          if (this.createInterpolant === void 0) {
            if (interpolation !== this.DefaultInterpolation) {
              this.setInterpolation(this.DefaultInterpolation);
            } else {
              throw new Error(message);
            }
          }
          console.warn("THREE.KeyframeTrack:", message);
          return this;
        }
        this.createInterpolant = factoryMethod;
        return this;
      }
      getInterpolation() {
        switch (this.createInterpolant) {
          case this.InterpolantFactoryMethodDiscrete:
            return InterpolateDiscrete;
          case this.InterpolantFactoryMethodLinear:
            return InterpolateLinear;
          case this.InterpolantFactoryMethodSmooth:
            return InterpolateSmooth;
        }
      }
      getValueSize() {
        return this.values.length / this.times.length;
      }
      // move all keyframes either forwards or backwards in time
      shift(timeOffset) {
        if (timeOffset !== 0) {
          const times = this.times;
          for (let i = 0, n = times.length; i !== n; ++i) {
            times[i] += timeOffset;
          }
        }
        return this;
      }
      // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
      scale(timeScale) {
        if (timeScale !== 1) {
          const times = this.times;
          for (let i = 0, n = times.length; i !== n; ++i) {
            times[i] *= timeScale;
          }
        }
        return this;
      }
      // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
      // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
      trim(startTime, endTime) {
        const times = this.times, nKeys = times.length;
        let from = 0, to = nKeys - 1;
        while (from !== nKeys && times[from] < startTime) {
          ++from;
        }
        while (to !== -1 && times[to] > endTime) {
          --to;
        }
        ++to;
        if (from !== 0 || to !== nKeys) {
          if (from >= to) {
            to = Math.max(to, 1);
            from = to - 1;
          }
          const stride = this.getValueSize();
          this.times = arraySlice(times, from, to);
          this.values = arraySlice(this.values, from * stride, to * stride);
        }
        return this;
      }
      // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
      validate() {
        let valid = true;
        const valueSize = this.getValueSize();
        if (valueSize - Math.floor(valueSize) !== 0) {
          console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
          valid = false;
        }
        const times = this.times, values = this.values, nKeys = times.length;
        if (nKeys === 0) {
          console.error("THREE.KeyframeTrack: Track is empty.", this);
          valid = false;
        }
        let prevTime = null;
        for (let i = 0; i !== nKeys; i++) {
          const currTime = times[i];
          if (typeof currTime === "number" && isNaN(currTime)) {
            console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
            valid = false;
            break;
          }
          if (prevTime !== null && prevTime > currTime) {
            console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
            valid = false;
            break;
          }
          prevTime = currTime;
        }
        if (values !== void 0) {
          if (isTypedArray(values)) {
            for (let i = 0, n = values.length; i !== n; ++i) {
              const value = values[i];
              if (isNaN(value)) {
                console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
                valid = false;
                break;
              }
            }
          }
        }
        return valid;
      }
      // removes equivalent sequential keys as common in morph target sequences
      // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
      optimize() {
        const times = arraySlice(this.times), values = arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
        let writeIndex = 1;
        for (let i = 1; i < lastIndex; ++i) {
          let keep = false;
          const time = times[i];
          const timeNext = times[i + 1];
          if (time !== timeNext && (i !== 1 || time !== times[0])) {
            if (!smoothInterpolation) {
              const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
              for (let j = 0; j !== stride; ++j) {
                const value = values[offset + j];
                if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                  keep = true;
                  break;
                }
              }
            } else {
              keep = true;
            }
          }
          if (keep) {
            if (i !== writeIndex) {
              times[writeIndex] = times[i];
              const readOffset = i * stride, writeOffset = writeIndex * stride;
              for (let j = 0; j !== stride; ++j) {
                values[writeOffset + j] = values[readOffset + j];
              }
            }
            ++writeIndex;
          }
        }
        if (lastIndex > 0) {
          times[writeIndex] = times[lastIndex];
          for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
            values[writeOffset + j] = values[readOffset + j];
          }
          ++writeIndex;
        }
        if (writeIndex !== times.length) {
          this.times = arraySlice(times, 0, writeIndex);
          this.values = arraySlice(values, 0, writeIndex * stride);
        } else {
          this.times = times;
          this.values = values;
        }
        return this;
      }
      clone() {
        const times = arraySlice(this.times, 0);
        const values = arraySlice(this.values, 0);
        const TypedKeyframeTrack = this.constructor;
        const track = new TypedKeyframeTrack(this.name, times, values);
        track.createInterpolant = this.createInterpolant;
        return track;
      }
    };
    KeyframeTrack.prototype.TimeBufferType = Float32Array;
    KeyframeTrack.prototype.ValueBufferType = Float32Array;
    KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
    var BooleanKeyframeTrack = class extends KeyframeTrack {
    };
    BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
    BooleanKeyframeTrack.prototype.ValueBufferType = Array;
    BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
    BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
    BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
    var ColorKeyframeTrack = class extends KeyframeTrack {
    };
    ColorKeyframeTrack.prototype.ValueTypeName = "color";
    var NumberKeyframeTrack2 = class extends KeyframeTrack {
    };
    NumberKeyframeTrack2.prototype.ValueTypeName = "number";
    var QuaternionLinearInterpolant = class extends Interpolant {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      }
      interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
        let offset = i1 * stride;
        for (let end = offset + stride; offset !== end; offset += 4) {
          Quaternion2.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
        }
        return result;
      }
    };
    var QuaternionKeyframeTrack2 = class extends KeyframeTrack {
      InterpolantFactoryMethodLinear(result) {
        return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
      }
    };
    QuaternionKeyframeTrack2.prototype.ValueTypeName = "quaternion";
    QuaternionKeyframeTrack2.prototype.DefaultInterpolation = InterpolateLinear;
    QuaternionKeyframeTrack2.prototype.InterpolantFactoryMethodSmooth = void 0;
    var StringKeyframeTrack = class extends KeyframeTrack {
    };
    StringKeyframeTrack.prototype.ValueTypeName = "string";
    StringKeyframeTrack.prototype.ValueBufferType = Array;
    StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
    StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
    StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
    var VectorKeyframeTrack2 = class extends KeyframeTrack {
    };
    VectorKeyframeTrack2.prototype.ValueTypeName = "vector";
    var AnimationClip2 = class {
      constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {
        this.name = name;
        this.tracks = tracks;
        this.duration = duration;
        this.blendMode = blendMode;
        this.uuid = generateUUID();
        if (this.duration < 0) {
          this.resetDuration();
        }
      }
      static parse(json) {
        const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
        for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
          tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
        }
        const clip = new this(json.name, json.duration, tracks, json.blendMode);
        clip.uuid = json.uuid;
        return clip;
      }
      static toJSON(clip) {
        const tracks = [], clipTracks = clip.tracks;
        const json = {
          "name": clip.name,
          "duration": clip.duration,
          "tracks": tracks,
          "uuid": clip.uuid,
          "blendMode": clip.blendMode
        };
        for (let i = 0, n = clipTracks.length; i !== n; ++i) {
          tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
        }
        return json;
      }
      static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
        const numMorphTargets = morphTargetSequence.length;
        const tracks = [];
        for (let i = 0; i < numMorphTargets; i++) {
          let times = [];
          let values = [];
          times.push(
            (i + numMorphTargets - 1) % numMorphTargets,
            i,
            (i + 1) % numMorphTargets
          );
          values.push(0, 1, 0);
          const order = getKeyframeOrder(times);
          times = sortedArray(times, 1, order);
          values = sortedArray(values, 1, order);
          if (!noLoop && times[0] === 0) {
            times.push(numMorphTargets);
            values.push(values[0]);
          }
          tracks.push(
            new NumberKeyframeTrack2(
              ".morphTargetInfluences[" + morphTargetSequence[i].name + "]",
              times,
              values
            ).scale(1 / fps)
          );
        }
        return new this(name, -1, tracks);
      }
      static findByName(objectOrClipArray, name) {
        let clipArray = objectOrClipArray;
        if (!Array.isArray(objectOrClipArray)) {
          const o = objectOrClipArray;
          clipArray = o.geometry && o.geometry.animations || o.animations;
        }
        for (let i = 0; i < clipArray.length; i++) {
          if (clipArray[i].name === name) {
            return clipArray[i];
          }
        }
        return null;
      }
      static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
        const animationToMorphTargets = {};
        const pattern = /^([\w-]*?)([\d]+)$/;
        for (let i = 0, il = morphTargets.length; i < il; i++) {
          const morphTarget = morphTargets[i];
          const parts = morphTarget.name.match(pattern);
          if (parts && parts.length > 1) {
            const name = parts[1];
            let animationMorphTargets = animationToMorphTargets[name];
            if (!animationMorphTargets) {
              animationToMorphTargets[name] = animationMorphTargets = [];
            }
            animationMorphTargets.push(morphTarget);
          }
        }
        const clips = [];
        for (const name in animationToMorphTargets) {
          clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
        }
        return clips;
      }
      // parse the animation.hierarchy format
      static parseAnimation(animation, bones) {
        if (!animation) {
          console.error("THREE.AnimationClip: No animation in JSONLoader data.");
          return null;
        }
        const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
          if (animationKeys.length !== 0) {
            const times = [];
            const values = [];
            flattenJSON(animationKeys, times, values, propertyName);
            if (times.length !== 0) {
              destTracks.push(new trackType(trackName, times, values));
            }
          }
        };
        const tracks = [];
        const clipName = animation.name || "default";
        const fps = animation.fps || 30;
        const blendMode = animation.blendMode;
        let duration = animation.length || -1;
        const hierarchyTracks = animation.hierarchy || [];
        for (let h = 0; h < hierarchyTracks.length; h++) {
          const animationKeys = hierarchyTracks[h].keys;
          if (!animationKeys || animationKeys.length === 0)
            continue;
          if (animationKeys[0].morphTargets) {
            const morphTargetNames = {};
            let k;
            for (k = 0; k < animationKeys.length; k++) {
              if (animationKeys[k].morphTargets) {
                for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
                  morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                }
              }
            }
            for (const morphTargetName in morphTargetNames) {
              const times = [];
              const values = [];
              for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
                const animationKey = animationKeys[k];
                times.push(animationKey.time);
                values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
              }
              tracks.push(new NumberKeyframeTrack2(".morphTargetInfluence[" + morphTargetName + "]", times, values));
            }
            duration = morphTargetNames.length * fps;
          } else {
            const boneName = ".bones[" + bones[h].name + "]";
            addNonemptyTrack(
              VectorKeyframeTrack2,
              boneName + ".position",
              animationKeys,
              "pos",
              tracks
            );
            addNonemptyTrack(
              QuaternionKeyframeTrack2,
              boneName + ".quaternion",
              animationKeys,
              "rot",
              tracks
            );
            addNonemptyTrack(
              VectorKeyframeTrack2,
              boneName + ".scale",
              animationKeys,
              "scl",
              tracks
            );
          }
        }
        if (tracks.length === 0) {
          return null;
        }
        const clip = new this(clipName, duration, tracks, blendMode);
        return clip;
      }
      resetDuration() {
        const tracks = this.tracks;
        let duration = 0;
        for (let i = 0, n = tracks.length; i !== n; ++i) {
          const track = this.tracks[i];
          duration = Math.max(duration, track.times[track.times.length - 1]);
        }
        this.duration = duration;
        return this;
      }
      trim() {
        for (let i = 0; i < this.tracks.length; i++) {
          this.tracks[i].trim(0, this.duration);
        }
        return this;
      }
      validate() {
        let valid = true;
        for (let i = 0; i < this.tracks.length; i++) {
          valid = valid && this.tracks[i].validate();
        }
        return valid;
      }
      optimize() {
        for (let i = 0; i < this.tracks.length; i++) {
          this.tracks[i].optimize();
        }
        return this;
      }
      clone() {
        const tracks = [];
        for (let i = 0; i < this.tracks.length; i++) {
          tracks.push(this.tracks[i].clone());
        }
        return new this.constructor(this.name, this.duration, tracks, this.blendMode);
      }
      toJSON() {
        return this.constructor.toJSON(this);
      }
    };
    function getTrackTypeForValueTypeName(typeName) {
      switch (typeName.toLowerCase()) {
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
          return NumberKeyframeTrack2;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
          return VectorKeyframeTrack2;
        case "color":
          return ColorKeyframeTrack;
        case "quaternion":
          return QuaternionKeyframeTrack2;
        case "bool":
        case "boolean":
          return BooleanKeyframeTrack;
        case "string":
          return StringKeyframeTrack;
      }
      throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
    }
    function parseKeyframeTrack(json) {
      if (json.type === void 0) {
        throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
      }
      const trackType = getTrackTypeForValueTypeName(json.type);
      if (json.times === void 0) {
        const times = [], values = [];
        flattenJSON(json.keys, times, values, "value");
        json.times = times;
        json.values = values;
      }
      if (trackType.parse !== void 0) {
        return trackType.parse(json);
      } else {
        return new trackType(json.name, json.times, json.values, json.interpolation);
      }
    }
    var Cache = {
      enabled: false,
      files: {},
      add: function(key, file) {
        if (this.enabled === false)
          return;
        this.files[key] = file;
      },
      get: function(key) {
        if (this.enabled === false)
          return;
        return this.files[key];
      },
      remove: function(key) {
        delete this.files[key];
      },
      clear: function() {
        this.files = {};
      }
    };
    var LoadingManager = class {
      constructor(onLoad, onProgress, onError) {
        const scope = this;
        let isLoading = false;
        let itemsLoaded = 0;
        let itemsTotal = 0;
        let urlModifier = void 0;
        const handlers = [];
        this.onStart = void 0;
        this.onLoad = onLoad;
        this.onProgress = onProgress;
        this.onError = onError;
        this.itemStart = function(url) {
          itemsTotal++;
          if (isLoading === false) {
            if (scope.onStart !== void 0) {
              scope.onStart(url, itemsLoaded, itemsTotal);
            }
          }
          isLoading = true;
        };
        this.itemEnd = function(url) {
          itemsLoaded++;
          if (scope.onProgress !== void 0) {
            scope.onProgress(url, itemsLoaded, itemsTotal);
          }
          if (itemsLoaded === itemsTotal) {
            isLoading = false;
            if (scope.onLoad !== void 0) {
              scope.onLoad();
            }
          }
        };
        this.itemError = function(url) {
          if (scope.onError !== void 0) {
            scope.onError(url);
          }
        };
        this.resolveURL = function(url) {
          if (urlModifier) {
            return urlModifier(url);
          }
          return url;
        };
        this.setURLModifier = function(transform) {
          urlModifier = transform;
          return this;
        };
        this.addHandler = function(regex, loader) {
          handlers.push(regex, loader);
          return this;
        };
        this.removeHandler = function(regex) {
          const index = handlers.indexOf(regex);
          if (index !== -1) {
            handlers.splice(index, 2);
          }
          return this;
        };
        this.getHandler = function(file) {
          for (let i = 0, l = handlers.length; i < l; i += 2) {
            const regex = handlers[i];
            const loader = handlers[i + 1];
            if (regex.global)
              regex.lastIndex = 0;
            if (regex.test(file)) {
              return loader;
            }
          }
          return null;
        };
      }
    };
    var DefaultLoadingManager = new LoadingManager();
    var Loader2 = class {
      constructor(manager) {
        this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
        this.crossOrigin = "anonymous";
        this.withCredentials = false;
        this.path = "";
        this.resourcePath = "";
        this.requestHeader = {};
      }
      load() {
      }
      loadAsync(url, onProgress) {
        const scope = this;
        return new Promise(function(resolve, reject) {
          scope.load(url, resolve, onProgress, reject);
        });
      }
      parse() {
      }
      setCrossOrigin(crossOrigin) {
        this.crossOrigin = crossOrigin;
        return this;
      }
      setWithCredentials(value) {
        this.withCredentials = value;
        return this;
      }
      setPath(path) {
        this.path = path;
        return this;
      }
      setResourcePath(resourcePath) {
        this.resourcePath = resourcePath;
        return this;
      }
      setRequestHeader(requestHeader) {
        this.requestHeader = requestHeader;
        return this;
      }
    };
    var loading = {};
    var HttpError = class extends Error {
      constructor(message, response) {
        super(message);
        this.response = response;
      }
    };
    var FileLoader2 = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        if (url === void 0)
          url = "";
        if (this.path !== void 0)
          url = this.path + url;
        url = this.manager.resolveURL(url);
        const cached = Cache.get(url);
        if (cached !== void 0) {
          this.manager.itemStart(url);
          setTimeout(() => {
            if (onLoad)
              onLoad(cached);
            this.manager.itemEnd(url);
          }, 0);
          return cached;
        }
        if (loading[url] !== void 0) {
          loading[url].push({
            onLoad,
            onProgress,
            onError
          });
          return;
        }
        loading[url] = [];
        loading[url].push({
          onLoad,
          onProgress,
          onError
        });
        const req = new Request(url, {
          headers: new Headers(this.requestHeader),
          credentials: this.withCredentials ? "include" : "same-origin"
          // An abort controller could be added within a future PR
        });
        const mimeType = this.mimeType;
        const responseType = this.responseType;
        fetch(req).then((response) => {
          if (response.status === 200 || response.status === 0) {
            if (response.status === 0) {
              console.warn("THREE.FileLoader: HTTP Status 0 received.");
            }
            if (typeof ReadableStream === "undefined" || response.body === void 0 || response.body.getReader === void 0) {
              return response;
            }
            const callbacks = loading[url];
            const reader = response.body.getReader();
            const contentLength = response.headers.get("Content-Length") || response.headers.get("X-File-Size");
            const total = contentLength ? parseInt(contentLength) : 0;
            const lengthComputable = total !== 0;
            let loaded = 0;
            const stream = new ReadableStream({
              start(controller) {
                readData();
                function readData() {
                  reader.read().then(({ done, value }) => {
                    if (done) {
                      controller.close();
                    } else {
                      loaded += value.byteLength;
                      const event = new ProgressEvent("progress", { lengthComputable, loaded, total });
                      for (let i = 0, il = callbacks.length; i < il; i++) {
                        const callback = callbacks[i];
                        if (callback.onProgress)
                          callback.onProgress(event);
                      }
                      controller.enqueue(value);
                      readData();
                    }
                  });
                }
              }
            });
            return new Response(stream);
          } else {
            throw new HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response);
          }
        }).then((response) => {
          switch (responseType) {
            case "arraybuffer":
              return response.arrayBuffer();
            case "blob":
              return response.blob();
            case "document":
              return response.text().then((text) => {
                const parser = new DOMParser();
                return parser.parseFromString(text, mimeType);
              });
            case "json":
              return response.json();
            default:
              if (mimeType === void 0) {
                return response.text();
              } else {
                const re = /charset="?([^;"\s]*)"?/i;
                const exec = re.exec(mimeType);
                const label = exec && exec[1] ? exec[1].toLowerCase() : void 0;
                const decoder = new TextDecoder(label);
                return response.arrayBuffer().then((ab) => decoder.decode(ab));
              }
          }
        }).then((data) => {
          Cache.add(url, data);
          const callbacks = loading[url];
          delete loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onLoad)
              callback.onLoad(data);
          }
        }).catch((err) => {
          const callbacks = loading[url];
          if (callbacks === void 0) {
            this.manager.itemError(url);
            throw err;
          }
          delete loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onError)
              callback.onError(err);
          }
          this.manager.itemError(url);
        }).finally(() => {
          this.manager.itemEnd(url);
        });
        this.manager.itemStart(url);
      }
      setResponseType(value) {
        this.responseType = value;
        return this;
      }
      setMimeType(value) {
        this.mimeType = value;
        return this;
      }
    };
    var AnimationLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader2(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
          try {
            onLoad(scope.parse(JSON.parse(text)));
          } catch (e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }, onProgress, onError);
      }
      parse(json) {
        const animations = [];
        for (let i = 0; i < json.length; i++) {
          const clip = AnimationClip2.parse(json[i]);
          animations.push(clip);
        }
        return animations;
      }
    };
    var CompressedTextureLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const images = [];
        const texture = new CompressedTexture();
        const loader = new FileLoader2(this.manager);
        loader.setPath(this.path);
        loader.setResponseType("arraybuffer");
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        let loaded = 0;
        function loadTexture(i) {
          loader.load(url[i], function(buffer) {
            const texDatas = scope.parse(buffer, true);
            images[i] = {
              width: texDatas.width,
              height: texDatas.height,
              format: texDatas.format,
              mipmaps: texDatas.mipmaps
            };
            loaded += 1;
            if (loaded === 6) {
              if (texDatas.mipmapCount === 1)
                texture.minFilter = LinearFilter;
              texture.image = images;
              texture.format = texDatas.format;
              texture.needsUpdate = true;
              if (onLoad)
                onLoad(texture);
            }
          }, onProgress, onError);
        }
        if (Array.isArray(url)) {
          for (let i = 0, il = url.length; i < il; ++i) {
            loadTexture(i);
          }
        } else {
          loader.load(url, function(buffer) {
            const texDatas = scope.parse(buffer, true);
            if (texDatas.isCubemap) {
              const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
              for (let f = 0; f < faces; f++) {
                images[f] = { mipmaps: [] };
                for (let i = 0; i < texDatas.mipmapCount; i++) {
                  images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                  images[f].format = texDatas.format;
                  images[f].width = texDatas.width;
                  images[f].height = texDatas.height;
                }
              }
              texture.image = images;
            } else {
              texture.image.width = texDatas.width;
              texture.image.height = texDatas.height;
              texture.mipmaps = texDatas.mipmaps;
            }
            if (texDatas.mipmapCount === 1) {
              texture.minFilter = LinearFilter;
            }
            texture.format = texDatas.format;
            texture.needsUpdate = true;
            if (onLoad)
              onLoad(texture);
          }, onProgress, onError);
        }
        return texture;
      }
    };
    var ImageLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        if (this.path !== void 0)
          url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = Cache.get(url);
        if (cached !== void 0) {
          scope.manager.itemStart(url);
          setTimeout(function() {
            if (onLoad)
              onLoad(cached);
            scope.manager.itemEnd(url);
          }, 0);
          return cached;
        }
        const image = createElementNS("img");
        function onImageLoad() {
          removeEventListeners();
          Cache.add(url, this);
          if (onLoad)
            onLoad(this);
          scope.manager.itemEnd(url);
        }
        function onImageError(event) {
          removeEventListeners();
          if (onError)
            onError(event);
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }
        function removeEventListeners() {
          image.removeEventListener("load", onImageLoad, false);
          image.removeEventListener("error", onImageError, false);
        }
        image.addEventListener("load", onImageLoad, false);
        image.addEventListener("error", onImageError, false);
        if (url.slice(0, 5) !== "data:") {
          if (this.crossOrigin !== void 0)
            image.crossOrigin = this.crossOrigin;
        }
        scope.manager.itemStart(url);
        image.src = url;
        return image;
      }
    };
    var CubeTextureLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(urls, onLoad, onProgress, onError) {
        const texture = new CubeTexture();
        const loader = new ImageLoader(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        let loaded = 0;
        function loadTexture(i) {
          loader.load(urls[i], function(image) {
            texture.images[i] = image;
            loaded++;
            if (loaded === 6) {
              texture.needsUpdate = true;
              if (onLoad)
                onLoad(texture);
            }
          }, void 0, onError);
        }
        for (let i = 0; i < urls.length; ++i) {
          loadTexture(i);
        }
        return texture;
      }
    };
    var DataTextureLoader2 = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const texture = new DataTexture();
        const loader = new FileLoader2(this.manager);
        loader.setResponseType("arraybuffer");
        loader.setRequestHeader(this.requestHeader);
        loader.setPath(this.path);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(buffer) {
          const texData = scope.parse(buffer);
          if (!texData)
            return;
          if (texData.image !== void 0) {
            texture.image = texData.image;
          } else if (texData.data !== void 0) {
            texture.image.width = texData.width;
            texture.image.height = texData.height;
            texture.image.data = texData.data;
          }
          texture.wrapS = texData.wrapS !== void 0 ? texData.wrapS : ClampToEdgeWrapping2;
          texture.wrapT = texData.wrapT !== void 0 ? texData.wrapT : ClampToEdgeWrapping2;
          texture.magFilter = texData.magFilter !== void 0 ? texData.magFilter : LinearFilter;
          texture.minFilter = texData.minFilter !== void 0 ? texData.minFilter : LinearFilter;
          texture.anisotropy = texData.anisotropy !== void 0 ? texData.anisotropy : 1;
          if (texData.encoding !== void 0) {
            texture.encoding = texData.encoding;
          }
          if (texData.flipY !== void 0) {
            texture.flipY = texData.flipY;
          }
          if (texData.format !== void 0) {
            texture.format = texData.format;
          }
          if (texData.type !== void 0) {
            texture.type = texData.type;
          }
          if (texData.mipmaps !== void 0) {
            texture.mipmaps = texData.mipmaps;
            texture.minFilter = LinearMipmapLinearFilter2;
          }
          if (texData.mipmapCount === 1) {
            texture.minFilter = LinearFilter;
          }
          if (texData.generateMipmaps !== void 0) {
            texture.generateMipmaps = texData.generateMipmaps;
          }
          texture.needsUpdate = true;
          if (onLoad)
            onLoad(texture, texData);
        }, onProgress, onError);
        return texture;
      }
    };
    var TextureLoader2 = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const texture = new Texture2();
        const loader = new ImageLoader(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        loader.load(url, function(image) {
          texture.image = image;
          texture.needsUpdate = true;
          if (onLoad !== void 0) {
            onLoad(texture);
          }
        }, onProgress, onError);
        return texture;
      }
    };
    var Light = class extends Object3D2 {
      constructor(color, intensity = 1) {
        super();
        this.isLight = true;
        this.type = "Light";
        this.color = new Color2(color);
        this.intensity = intensity;
      }
      dispose() {
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.color.copy(source.color);
        this.intensity = source.intensity;
        return this;
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.color = this.color.getHex();
        data.object.intensity = this.intensity;
        if (this.groundColor !== void 0)
          data.object.groundColor = this.groundColor.getHex();
        if (this.distance !== void 0)
          data.object.distance = this.distance;
        if (this.angle !== void 0)
          data.object.angle = this.angle;
        if (this.decay !== void 0)
          data.object.decay = this.decay;
        if (this.penumbra !== void 0)
          data.object.penumbra = this.penumbra;
        if (this.shadow !== void 0)
          data.object.shadow = this.shadow.toJSON();
        return data;
      }
    };
    var HemisphereLight = class extends Light {
      constructor(skyColor, groundColor, intensity) {
        super(skyColor, intensity);
        this.isHemisphereLight = true;
        this.type = "HemisphereLight";
        this.position.copy(Object3D2.DEFAULT_UP);
        this.updateMatrix();
        this.groundColor = new Color2(groundColor);
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.groundColor.copy(source.groundColor);
        return this;
      }
    };
    var _projScreenMatrix$1 = new Matrix42();
    var _lightPositionWorld$1 = new Vector32();
    var _lookTarget$1 = new Vector32();
    var LightShadow = class {
      constructor(camera) {
        this.camera = camera;
        this.bias = 0;
        this.normalBias = 0;
        this.radius = 1;
        this.blurSamples = 8;
        this.mapSize = new Vector22(512, 512);
        this.map = null;
        this.mapPass = null;
        this.matrix = new Matrix42();
        this.autoUpdate = true;
        this.needsUpdate = false;
        this._frustum = new Frustum();
        this._frameExtents = new Vector22(1, 1);
        this._viewportCount = 1;
        this._viewports = [
          new Vector42(0, 0, 1, 1)
        ];
      }
      getViewportCount() {
        return this._viewportCount;
      }
      getFrustum() {
        return this._frustum;
      }
      updateMatrices(light) {
        const shadowCamera = this.camera;
        const shadowMatrix = this.matrix;
        _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
        shadowCamera.position.copy(_lightPositionWorld$1);
        _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
        shadowCamera.lookAt(_lookTarget$1);
        shadowCamera.updateMatrixWorld();
        _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
        shadowMatrix.set(
          0.5,
          0,
          0,
          0.5,
          0,
          0.5,
          0,
          0.5,
          0,
          0,
          0.5,
          0.5,
          0,
          0,
          0,
          1
        );
        shadowMatrix.multiply(_projScreenMatrix$1);
      }
      getViewport(viewportIndex) {
        return this._viewports[viewportIndex];
      }
      getFrameExtents() {
        return this._frameExtents;
      }
      dispose() {
        if (this.map) {
          this.map.dispose();
        }
        if (this.mapPass) {
          this.mapPass.dispose();
        }
      }
      copy(source) {
        this.camera = source.camera.clone();
        this.bias = source.bias;
        this.radius = source.radius;
        this.mapSize.copy(source.mapSize);
        return this;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      toJSON() {
        const object = {};
        if (this.bias !== 0)
          object.bias = this.bias;
        if (this.normalBias !== 0)
          object.normalBias = this.normalBias;
        if (this.radius !== 1)
          object.radius = this.radius;
        if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
          object.mapSize = this.mapSize.toArray();
        object.camera = this.camera.toJSON(false).object;
        delete object.camera.matrix;
        return object;
      }
    };
    var SpotLightShadow = class extends LightShadow {
      constructor() {
        super(new PerspectiveCamera2(50, 1, 0.5, 500));
        this.isSpotLightShadow = true;
        this.focus = 1;
      }
      updateMatrices(light) {
        const camera = this.camera;
        const fov2 = RAD2DEG * 2 * light.angle * this.focus;
        const aspect2 = this.mapSize.width / this.mapSize.height;
        const far = light.distance || camera.far;
        if (fov2 !== camera.fov || aspect2 !== camera.aspect || far !== camera.far) {
          camera.fov = fov2;
          camera.aspect = aspect2;
          camera.far = far;
          camera.updateProjectionMatrix();
        }
        super.updateMatrices(light);
      }
      copy(source) {
        super.copy(source);
        this.focus = source.focus;
        return this;
      }
    };
    var SpotLight2 = class extends Light {
      constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2) {
        super(color, intensity);
        this.isSpotLight = true;
        this.type = "SpotLight";
        this.position.copy(Object3D2.DEFAULT_UP);
        this.updateMatrix();
        this.target = new Object3D2();
        this.distance = distance;
        this.angle = angle;
        this.penumbra = penumbra;
        this.decay = decay;
        this.map = null;
        this.shadow = new SpotLightShadow();
      }
      get power() {
        return this.intensity * Math.PI;
      }
      set power(power) {
        this.intensity = power / Math.PI;
      }
      dispose() {
        this.shadow.dispose();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.distance = source.distance;
        this.angle = source.angle;
        this.penumbra = source.penumbra;
        this.decay = source.decay;
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
      }
    };
    var _projScreenMatrix = new Matrix42();
    var _lightPositionWorld = new Vector32();
    var _lookTarget = new Vector32();
    var PointLightShadow = class extends LightShadow {
      constructor() {
        super(new PerspectiveCamera2(90, 1, 0.5, 500));
        this.isPointLightShadow = true;
        this._frameExtents = new Vector22(4, 2);
        this._viewportCount = 6;
        this._viewports = [
          // These viewports map a cube-map onto a 2D texture with the
          // following orientation:
          //
          //  xzXZ
          //   y Y
          //
          // X - Positive x direction
          // x - Negative x direction
          // Y - Positive y direction
          // y - Negative y direction
          // Z - Positive z direction
          // z - Negative z direction
          // positive X
          new Vector42(2, 1, 1, 1),
          // negative X
          new Vector42(0, 1, 1, 1),
          // positive Z
          new Vector42(3, 1, 1, 1),
          // negative Z
          new Vector42(1, 1, 1, 1),
          // positive Y
          new Vector42(3, 0, 1, 1),
          // negative Y
          new Vector42(1, 0, 1, 1)
        ];
        this._cubeDirections = [
          new Vector32(1, 0, 0),
          new Vector32(-1, 0, 0),
          new Vector32(0, 0, 1),
          new Vector32(0, 0, -1),
          new Vector32(0, 1, 0),
          new Vector32(0, -1, 0)
        ];
        this._cubeUps = [
          new Vector32(0, 1, 0),
          new Vector32(0, 1, 0),
          new Vector32(0, 1, 0),
          new Vector32(0, 1, 0),
          new Vector32(0, 0, 1),
          new Vector32(0, 0, -1)
        ];
      }
      updateMatrices(light, viewportIndex = 0) {
        const camera = this.camera;
        const shadowMatrix = this.matrix;
        const far = light.distance || camera.far;
        if (far !== camera.far) {
          camera.far = far;
          camera.updateProjectionMatrix();
        }
        _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
        camera.position.copy(_lightPositionWorld);
        _lookTarget.copy(camera.position);
        _lookTarget.add(this._cubeDirections[viewportIndex]);
        camera.up.copy(this._cubeUps[viewportIndex]);
        camera.lookAt(_lookTarget);
        camera.updateMatrixWorld();
        shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix(_projScreenMatrix);
      }
    };
    var PointLight2 = class extends Light {
      constructor(color, intensity, distance = 0, decay = 2) {
        super(color, intensity);
        this.isPointLight = true;
        this.type = "PointLight";
        this.distance = distance;
        this.decay = decay;
        this.shadow = new PointLightShadow();
      }
      get power() {
        return this.intensity * 4 * Math.PI;
      }
      set power(power) {
        this.intensity = power / (4 * Math.PI);
      }
      dispose() {
        this.shadow.dispose();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.distance = source.distance;
        this.decay = source.decay;
        this.shadow = source.shadow.clone();
        return this;
      }
    };
    var DirectionalLightShadow = class extends LightShadow {
      constructor() {
        super(new OrthographicCamera2(-5, 5, 5, -5, 0.5, 500));
        this.isDirectionalLightShadow = true;
      }
    };
    var DirectionalLight2 = class extends Light {
      constructor(color, intensity) {
        super(color, intensity);
        this.isDirectionalLight = true;
        this.type = "DirectionalLight";
        this.position.copy(Object3D2.DEFAULT_UP);
        this.updateMatrix();
        this.target = new Object3D2();
        this.shadow = new DirectionalLightShadow();
      }
      dispose() {
        this.shadow.dispose();
      }
      copy(source) {
        super.copy(source);
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
      }
    };
    var AmbientLight2 = class extends Light {
      constructor(color, intensity) {
        super(color, intensity);
        this.isAmbientLight = true;
        this.type = "AmbientLight";
      }
    };
    var RectAreaLight = class extends Light {
      constructor(color, intensity, width = 10, height = 10) {
        super(color, intensity);
        this.isRectAreaLight = true;
        this.type = "RectAreaLight";
        this.width = width;
        this.height = height;
      }
      get power() {
        return this.intensity * this.width * this.height * Math.PI;
      }
      set power(power) {
        this.intensity = power / (this.width * this.height * Math.PI);
      }
      copy(source) {
        super.copy(source);
        this.width = source.width;
        this.height = source.height;
        return this;
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.width = this.width;
        data.object.height = this.height;
        return data;
      }
    };
    var SphericalHarmonics3 = class {
      constructor() {
        this.isSphericalHarmonics3 = true;
        this.coefficients = [];
        for (let i = 0; i < 9; i++) {
          this.coefficients.push(new Vector32());
        }
      }
      set(coefficients) {
        for (let i = 0; i < 9; i++) {
          this.coefficients[i].copy(coefficients[i]);
        }
        return this;
      }
      zero() {
        for (let i = 0; i < 9; i++) {
          this.coefficients[i].set(0, 0, 0);
        }
        return this;
      }
      // get the radiance in the direction of the normal
      // target is a Vector3
      getAt(normal, target) {
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        target.copy(coeff[0]).multiplyScalar(0.282095);
        target.addScaledVector(coeff[1], 0.488603 * y);
        target.addScaledVector(coeff[2], 0.488603 * z);
        target.addScaledVector(coeff[3], 0.488603 * x);
        target.addScaledVector(coeff[4], 1.092548 * (x * y));
        target.addScaledVector(coeff[5], 1.092548 * (y * z));
        target.addScaledVector(coeff[6], 0.315392 * (3 * z * z - 1));
        target.addScaledVector(coeff[7], 1.092548 * (x * z));
        target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
        return target;
      }
      // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
      // target is a Vector3
      // https://graphics.stanford.edu/papers/envmap/envmap.pdf
      getIrradianceAt(normal, target) {
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        target.copy(coeff[0]).multiplyScalar(0.886227);
        target.addScaledVector(coeff[1], 2 * 0.511664 * y);
        target.addScaledVector(coeff[2], 2 * 0.511664 * z);
        target.addScaledVector(coeff[3], 2 * 0.511664 * x);
        target.addScaledVector(coeff[4], 2 * 0.429043 * x * y);
        target.addScaledVector(coeff[5], 2 * 0.429043 * y * z);
        target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708);
        target.addScaledVector(coeff[7], 2 * 0.429043 * x * z);
        target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y));
        return target;
      }
      add(sh) {
        for (let i = 0; i < 9; i++) {
          this.coefficients[i].add(sh.coefficients[i]);
        }
        return this;
      }
      addScaledSH(sh, s) {
        for (let i = 0; i < 9; i++) {
          this.coefficients[i].addScaledVector(sh.coefficients[i], s);
        }
        return this;
      }
      scale(s) {
        for (let i = 0; i < 9; i++) {
          this.coefficients[i].multiplyScalar(s);
        }
        return this;
      }
      lerp(sh, alpha) {
        for (let i = 0; i < 9; i++) {
          this.coefficients[i].lerp(sh.coefficients[i], alpha);
        }
        return this;
      }
      equals(sh) {
        for (let i = 0; i < 9; i++) {
          if (!this.coefficients[i].equals(sh.coefficients[i])) {
            return false;
          }
        }
        return true;
      }
      copy(sh) {
        return this.set(sh.coefficients);
      }
      clone() {
        return new this.constructor().copy(this);
      }
      fromArray(array, offset = 0) {
        const coefficients = this.coefficients;
        for (let i = 0; i < 9; i++) {
          coefficients[i].fromArray(array, offset + i * 3);
        }
        return this;
      }
      toArray(array = [], offset = 0) {
        const coefficients = this.coefficients;
        for (let i = 0; i < 9; i++) {
          coefficients[i].toArray(array, offset + i * 3);
        }
        return array;
      }
      // evaluate the basis functions
      // shBasis is an Array[ 9 ]
      static getBasisAt(normal, shBasis) {
        const x = normal.x, y = normal.y, z = normal.z;
        shBasis[0] = 0.282095;
        shBasis[1] = 0.488603 * y;
        shBasis[2] = 0.488603 * z;
        shBasis[3] = 0.488603 * x;
        shBasis[4] = 1.092548 * x * y;
        shBasis[5] = 1.092548 * y * z;
        shBasis[6] = 0.315392 * (3 * z * z - 1);
        shBasis[7] = 1.092548 * x * z;
        shBasis[8] = 0.546274 * (x * x - y * y);
      }
    };
    var LightProbe = class extends Light {
      constructor(sh = new SphericalHarmonics3(), intensity = 1) {
        super(void 0, intensity);
        this.isLightProbe = true;
        this.sh = sh;
      }
      copy(source) {
        super.copy(source);
        this.sh.copy(source.sh);
        return this;
      }
      fromJSON(json) {
        this.intensity = json.intensity;
        this.sh.fromArray(json.sh);
        return this;
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.sh = this.sh.toArray();
        return data;
      }
    };
    var MaterialLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
        this.textures = {};
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader2(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
          try {
            onLoad(scope.parse(JSON.parse(text)));
          } catch (e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }, onProgress, onError);
      }
      parse(json) {
        const textures = this.textures;
        function getTexture(name) {
          if (textures[name] === void 0) {
            console.warn("THREE.MaterialLoader: Undefined texture", name);
          }
          return textures[name];
        }
        const material = MaterialLoader.createMaterialFromType(json.type);
        if (json.uuid !== void 0)
          material.uuid = json.uuid;
        if (json.name !== void 0)
          material.name = json.name;
        if (json.color !== void 0 && material.color !== void 0)
          material.color.setHex(json.color);
        if (json.roughness !== void 0)
          material.roughness = json.roughness;
        if (json.metalness !== void 0)
          material.metalness = json.metalness;
        if (json.sheen !== void 0)
          material.sheen = json.sheen;
        if (json.sheenColor !== void 0)
          material.sheenColor = new Color2().setHex(json.sheenColor);
        if (json.sheenRoughness !== void 0)
          material.sheenRoughness = json.sheenRoughness;
        if (json.emissive !== void 0 && material.emissive !== void 0)
          material.emissive.setHex(json.emissive);
        if (json.specular !== void 0 && material.specular !== void 0)
          material.specular.setHex(json.specular);
        if (json.specularIntensity !== void 0)
          material.specularIntensity = json.specularIntensity;
        if (json.specularColor !== void 0 && material.specularColor !== void 0)
          material.specularColor.setHex(json.specularColor);
        if (json.shininess !== void 0)
          material.shininess = json.shininess;
        if (json.clearcoat !== void 0)
          material.clearcoat = json.clearcoat;
        if (json.clearcoatRoughness !== void 0)
          material.clearcoatRoughness = json.clearcoatRoughness;
        if (json.iridescence !== void 0)
          material.iridescence = json.iridescence;
        if (json.iridescenceIOR !== void 0)
          material.iridescenceIOR = json.iridescenceIOR;
        if (json.iridescenceThicknessRange !== void 0)
          material.iridescenceThicknessRange = json.iridescenceThicknessRange;
        if (json.transmission !== void 0)
          material.transmission = json.transmission;
        if (json.thickness !== void 0)
          material.thickness = json.thickness;
        if (json.attenuationDistance !== void 0)
          material.attenuationDistance = json.attenuationDistance;
        if (json.attenuationColor !== void 0 && material.attenuationColor !== void 0)
          material.attenuationColor.setHex(json.attenuationColor);
        if (json.fog !== void 0)
          material.fog = json.fog;
        if (json.flatShading !== void 0)
          material.flatShading = json.flatShading;
        if (json.blending !== void 0)
          material.blending = json.blending;
        if (json.combine !== void 0)
          material.combine = json.combine;
        if (json.side !== void 0)
          material.side = json.side;
        if (json.shadowSide !== void 0)
          material.shadowSide = json.shadowSide;
        if (json.opacity !== void 0)
          material.opacity = json.opacity;
        if (json.transparent !== void 0)
          material.transparent = json.transparent;
        if (json.alphaTest !== void 0)
          material.alphaTest = json.alphaTest;
        if (json.depthTest !== void 0)
          material.depthTest = json.depthTest;
        if (json.depthWrite !== void 0)
          material.depthWrite = json.depthWrite;
        if (json.colorWrite !== void 0)
          material.colorWrite = json.colorWrite;
        if (json.stencilWrite !== void 0)
          material.stencilWrite = json.stencilWrite;
        if (json.stencilWriteMask !== void 0)
          material.stencilWriteMask = json.stencilWriteMask;
        if (json.stencilFunc !== void 0)
          material.stencilFunc = json.stencilFunc;
        if (json.stencilRef !== void 0)
          material.stencilRef = json.stencilRef;
        if (json.stencilFuncMask !== void 0)
          material.stencilFuncMask = json.stencilFuncMask;
        if (json.stencilFail !== void 0)
          material.stencilFail = json.stencilFail;
        if (json.stencilZFail !== void 0)
          material.stencilZFail = json.stencilZFail;
        if (json.stencilZPass !== void 0)
          material.stencilZPass = json.stencilZPass;
        if (json.wireframe !== void 0)
          material.wireframe = json.wireframe;
        if (json.wireframeLinewidth !== void 0)
          material.wireframeLinewidth = json.wireframeLinewidth;
        if (json.wireframeLinecap !== void 0)
          material.wireframeLinecap = json.wireframeLinecap;
        if (json.wireframeLinejoin !== void 0)
          material.wireframeLinejoin = json.wireframeLinejoin;
        if (json.rotation !== void 0)
          material.rotation = json.rotation;
        if (json.linewidth !== 1)
          material.linewidth = json.linewidth;
        if (json.dashSize !== void 0)
          material.dashSize = json.dashSize;
        if (json.gapSize !== void 0)
          material.gapSize = json.gapSize;
        if (json.scale !== void 0)
          material.scale = json.scale;
        if (json.polygonOffset !== void 0)
          material.polygonOffset = json.polygonOffset;
        if (json.polygonOffsetFactor !== void 0)
          material.polygonOffsetFactor = json.polygonOffsetFactor;
        if (json.polygonOffsetUnits !== void 0)
          material.polygonOffsetUnits = json.polygonOffsetUnits;
        if (json.dithering !== void 0)
          material.dithering = json.dithering;
        if (json.alphaToCoverage !== void 0)
          material.alphaToCoverage = json.alphaToCoverage;
        if (json.premultipliedAlpha !== void 0)
          material.premultipliedAlpha = json.premultipliedAlpha;
        if (json.forceSinglePass !== void 0)
          material.forceSinglePass = json.forceSinglePass;
        if (json.visible !== void 0)
          material.visible = json.visible;
        if (json.toneMapped !== void 0)
          material.toneMapped = json.toneMapped;
        if (json.userData !== void 0)
          material.userData = json.userData;
        if (json.vertexColors !== void 0) {
          if (typeof json.vertexColors === "number") {
            material.vertexColors = json.vertexColors > 0 ? true : false;
          } else {
            material.vertexColors = json.vertexColors;
          }
        }
        if (json.uniforms !== void 0) {
          for (const name in json.uniforms) {
            const uniform = json.uniforms[name];
            material.uniforms[name] = {};
            switch (uniform.type) {
              case "t":
                material.uniforms[name].value = getTexture(uniform.value);
                break;
              case "c":
                material.uniforms[name].value = new Color2().setHex(uniform.value);
                break;
              case "v2":
                material.uniforms[name].value = new Vector22().fromArray(uniform.value);
                break;
              case "v3":
                material.uniforms[name].value = new Vector32().fromArray(uniform.value);
                break;
              case "v4":
                material.uniforms[name].value = new Vector42().fromArray(uniform.value);
                break;
              case "m3":
                material.uniforms[name].value = new Matrix32().fromArray(uniform.value);
                break;
              case "m4":
                material.uniforms[name].value = new Matrix42().fromArray(uniform.value);
                break;
              default:
                material.uniforms[name].value = uniform.value;
            }
          }
        }
        if (json.defines !== void 0)
          material.defines = json.defines;
        if (json.vertexShader !== void 0)
          material.vertexShader = json.vertexShader;
        if (json.fragmentShader !== void 0)
          material.fragmentShader = json.fragmentShader;
        if (json.glslVersion !== void 0)
          material.glslVersion = json.glslVersion;
        if (json.extensions !== void 0) {
          for (const key in json.extensions) {
            material.extensions[key] = json.extensions[key];
          }
        }
        if (json.size !== void 0)
          material.size = json.size;
        if (json.sizeAttenuation !== void 0)
          material.sizeAttenuation = json.sizeAttenuation;
        if (json.map !== void 0)
          material.map = getTexture(json.map);
        if (json.matcap !== void 0)
          material.matcap = getTexture(json.matcap);
        if (json.alphaMap !== void 0)
          material.alphaMap = getTexture(json.alphaMap);
        if (json.bumpMap !== void 0)
          material.bumpMap = getTexture(json.bumpMap);
        if (json.bumpScale !== void 0)
          material.bumpScale = json.bumpScale;
        if (json.normalMap !== void 0)
          material.normalMap = getTexture(json.normalMap);
        if (json.normalMapType !== void 0)
          material.normalMapType = json.normalMapType;
        if (json.normalScale !== void 0) {
          let normalScale = json.normalScale;
          if (Array.isArray(normalScale) === false) {
            normalScale = [normalScale, normalScale];
          }
          material.normalScale = new Vector22().fromArray(normalScale);
        }
        if (json.displacementMap !== void 0)
          material.displacementMap = getTexture(json.displacementMap);
        if (json.displacementScale !== void 0)
          material.displacementScale = json.displacementScale;
        if (json.displacementBias !== void 0)
          material.displacementBias = json.displacementBias;
        if (json.roughnessMap !== void 0)
          material.roughnessMap = getTexture(json.roughnessMap);
        if (json.metalnessMap !== void 0)
          material.metalnessMap = getTexture(json.metalnessMap);
        if (json.emissiveMap !== void 0)
          material.emissiveMap = getTexture(json.emissiveMap);
        if (json.emissiveIntensity !== void 0)
          material.emissiveIntensity = json.emissiveIntensity;
        if (json.specularMap !== void 0)
          material.specularMap = getTexture(json.specularMap);
        if (json.specularIntensityMap !== void 0)
          material.specularIntensityMap = getTexture(json.specularIntensityMap);
        if (json.specularColorMap !== void 0)
          material.specularColorMap = getTexture(json.specularColorMap);
        if (json.envMap !== void 0)
          material.envMap = getTexture(json.envMap);
        if (json.envMapIntensity !== void 0)
          material.envMapIntensity = json.envMapIntensity;
        if (json.reflectivity !== void 0)
          material.reflectivity = json.reflectivity;
        if (json.refractionRatio !== void 0)
          material.refractionRatio = json.refractionRatio;
        if (json.lightMap !== void 0)
          material.lightMap = getTexture(json.lightMap);
        if (json.lightMapIntensity !== void 0)
          material.lightMapIntensity = json.lightMapIntensity;
        if (json.aoMap !== void 0)
          material.aoMap = getTexture(json.aoMap);
        if (json.aoMapIntensity !== void 0)
          material.aoMapIntensity = json.aoMapIntensity;
        if (json.gradientMap !== void 0)
          material.gradientMap = getTexture(json.gradientMap);
        if (json.clearcoatMap !== void 0)
          material.clearcoatMap = getTexture(json.clearcoatMap);
        if (json.clearcoatRoughnessMap !== void 0)
          material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
        if (json.clearcoatNormalMap !== void 0)
          material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
        if (json.clearcoatNormalScale !== void 0)
          material.clearcoatNormalScale = new Vector22().fromArray(json.clearcoatNormalScale);
        if (json.iridescenceMap !== void 0)
          material.iridescenceMap = getTexture(json.iridescenceMap);
        if (json.iridescenceThicknessMap !== void 0)
          material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);
        if (json.transmissionMap !== void 0)
          material.transmissionMap = getTexture(json.transmissionMap);
        if (json.thicknessMap !== void 0)
          material.thicknessMap = getTexture(json.thicknessMap);
        if (json.sheenColorMap !== void 0)
          material.sheenColorMap = getTexture(json.sheenColorMap);
        if (json.sheenRoughnessMap !== void 0)
          material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
        return material;
      }
      setTextures(value) {
        this.textures = value;
        return this;
      }
      static createMaterialFromType(type) {
        const materialLib = {
          ShadowMaterial,
          SpriteMaterial,
          RawShaderMaterial,
          ShaderMaterial,
          PointsMaterial: PointsMaterial2,
          MeshPhysicalMaterial,
          MeshStandardMaterial,
          MeshPhongMaterial: MeshPhongMaterial2,
          MeshToonMaterial,
          MeshNormalMaterial,
          MeshLambertMaterial: MeshLambertMaterial2,
          MeshDepthMaterial,
          MeshDistanceMaterial,
          MeshBasicMaterial: MeshBasicMaterial2,
          MeshMatcapMaterial,
          LineDashedMaterial,
          LineBasicMaterial: LineBasicMaterial2,
          Material: Material2
        };
        return new materialLib[type]();
      }
    };
    var LoaderUtils2 = class {
      static decodeText(array) {
        if (typeof TextDecoder !== "undefined") {
          return new TextDecoder().decode(array);
        }
        let s = "";
        for (let i = 0, il = array.length; i < il; i++) {
          s += String.fromCharCode(array[i]);
        }
        try {
          return decodeURIComponent(escape(s));
        } catch (e) {
          return s;
        }
      }
      static extractUrlBase(url) {
        const index = url.lastIndexOf("/");
        if (index === -1)
          return "./";
        return url.slice(0, index + 1);
      }
      static resolveURL(url, path) {
        if (typeof url !== "string" || url === "")
          return "";
        if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
          path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
        }
        if (/^(https?:)?\/\//i.test(url))
          return url;
        if (/^data:.*,.*$/i.test(url))
          return url;
        if (/^blob:.*$/i.test(url))
          return url;
        return path + url;
      }
    };
    var InstancedBufferGeometry = class extends BufferGeometry2 {
      constructor() {
        super();
        this.isInstancedBufferGeometry = true;
        this.type = "InstancedBufferGeometry";
        this.instanceCount = Infinity;
      }
      copy(source) {
        super.copy(source);
        this.instanceCount = source.instanceCount;
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.instanceCount = this.instanceCount;
        data.isInstancedBufferGeometry = true;
        return data;
      }
    };
    var BufferGeometryLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader2(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
          try {
            onLoad(scope.parse(JSON.parse(text)));
          } catch (e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }, onProgress, onError);
      }
      parse(json) {
        const interleavedBufferMap = {};
        const arrayBufferMap = {};
        function getInterleavedBuffer(json2, uuid) {
          if (interleavedBufferMap[uuid] !== void 0)
            return interleavedBufferMap[uuid];
          const interleavedBuffers = json2.interleavedBuffers;
          const interleavedBuffer = interleavedBuffers[uuid];
          const buffer = getArrayBuffer(json2, interleavedBuffer.buffer);
          const array = getTypedArray(interleavedBuffer.type, buffer);
          const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
          ib.uuid = interleavedBuffer.uuid;
          interleavedBufferMap[uuid] = ib;
          return ib;
        }
        function getArrayBuffer(json2, uuid) {
          if (arrayBufferMap[uuid] !== void 0)
            return arrayBufferMap[uuid];
          const arrayBuffers = json2.arrayBuffers;
          const arrayBuffer = arrayBuffers[uuid];
          const ab = new Uint32Array(arrayBuffer).buffer;
          arrayBufferMap[uuid] = ab;
          return ab;
        }
        const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry2();
        const index = json.data.index;
        if (index !== void 0) {
          const typedArray = getTypedArray(index.type, index.array);
          geometry.setIndex(new BufferAttribute(typedArray, 1));
        }
        const attributes = json.data.attributes;
        for (const key in attributes) {
          const attribute = attributes[key];
          let bufferAttribute;
          if (attribute.isInterleavedBufferAttribute) {
            const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
            bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
          } else {
            const typedArray = getTypedArray(attribute.type, attribute.array);
            const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
            bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
          }
          if (attribute.name !== void 0)
            bufferAttribute.name = attribute.name;
          if (attribute.usage !== void 0)
            bufferAttribute.setUsage(attribute.usage);
          if (attribute.updateRange !== void 0) {
            bufferAttribute.updateRange.offset = attribute.updateRange.offset;
            bufferAttribute.updateRange.count = attribute.updateRange.count;
          }
          geometry.setAttribute(key, bufferAttribute);
        }
        const morphAttributes = json.data.morphAttributes;
        if (morphAttributes) {
          for (const key in morphAttributes) {
            const attributeArray = morphAttributes[key];
            const array = [];
            for (let i = 0, il = attributeArray.length; i < il; i++) {
              const attribute = attributeArray[i];
              let bufferAttribute;
              if (attribute.isInterleavedBufferAttribute) {
                const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
                bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
              } else {
                const typedArray = getTypedArray(attribute.type, attribute.array);
                bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
              }
              if (attribute.name !== void 0)
                bufferAttribute.name = attribute.name;
              array.push(bufferAttribute);
            }
            geometry.morphAttributes[key] = array;
          }
        }
        const morphTargetsRelative = json.data.morphTargetsRelative;
        if (morphTargetsRelative) {
          geometry.morphTargetsRelative = true;
        }
        const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
        if (groups !== void 0) {
          for (let i = 0, n = groups.length; i !== n; ++i) {
            const group = groups[i];
            geometry.addGroup(group.start, group.count, group.materialIndex);
          }
        }
        const boundingSphere = json.data.boundingSphere;
        if (boundingSphere !== void 0) {
          const center = new Vector32();
          if (boundingSphere.center !== void 0) {
            center.fromArray(boundingSphere.center);
          }
          geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
        }
        if (json.name)
          geometry.name = json.name;
        if (json.userData)
          geometry.userData = json.userData;
        return geometry;
      }
    };
    var ObjectLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const path = this.path === "" ? LoaderUtils2.extractUrlBase(url) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new FileLoader2(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
          let json = null;
          try {
            json = JSON.parse(text);
          } catch (error) {
            if (onError !== void 0)
              onError(error);
            console.error("THREE:ObjectLoader: Can't parse " + url + ".", error.message);
            return;
          }
          const metadata = json.metadata;
          if (metadata === void 0 || metadata.type === void 0 || metadata.type.toLowerCase() === "geometry") {
            if (onError !== void 0)
              onError(new Error("THREE.ObjectLoader: Can't load " + url));
            console.error("THREE.ObjectLoader: Can't load " + url);
            return;
          }
          scope.parse(json, onLoad);
        }, onProgress, onError);
      }
      async loadAsync(url, onProgress) {
        const scope = this;
        const path = this.path === "" ? LoaderUtils2.extractUrlBase(url) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new FileLoader2(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        const text = await loader.loadAsync(url, onProgress);
        const json = JSON.parse(text);
        const metadata = json.metadata;
        if (metadata === void 0 || metadata.type === void 0 || metadata.type.toLowerCase() === "geometry") {
          throw new Error("THREE.ObjectLoader: Can't load " + url);
        }
        return await scope.parseAsync(json);
      }
      parse(json, onLoad) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = this.parseImages(json.images, function() {
          if (onLoad !== void 0)
            onLoad(object);
        });
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        if (onLoad !== void 0) {
          let hasImages = false;
          for (const uuid in images) {
            if (images[uuid].data instanceof HTMLImageElement) {
              hasImages = true;
              break;
            }
          }
          if (hasImages === false)
            onLoad(object);
        }
        return object;
      }
      async parseAsync(json) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = await this.parseImagesAsync(json.images);
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        return object;
      }
      parseShapes(json) {
        const shapes = {};
        if (json !== void 0) {
          for (let i = 0, l = json.length; i < l; i++) {
            const shape = new Shape().fromJSON(json[i]);
            shapes[shape.uuid] = shape;
          }
        }
        return shapes;
      }
      parseSkeletons(json, object) {
        const skeletons = {};
        const bones = {};
        object.traverse(function(child) {
          if (child.isBone)
            bones[child.uuid] = child;
        });
        if (json !== void 0) {
          for (let i = 0, l = json.length; i < l; i++) {
            const skeleton = new Skeleton2().fromJSON(json[i], bones);
            skeletons[skeleton.uuid] = skeleton;
          }
        }
        return skeletons;
      }
      parseGeometries(json, shapes) {
        const geometries = {};
        if (json !== void 0) {
          const bufferGeometryLoader = new BufferGeometryLoader();
          for (let i = 0, l = json.length; i < l; i++) {
            let geometry;
            const data = json[i];
            switch (data.type) {
              case "BufferGeometry":
              case "InstancedBufferGeometry":
                geometry = bufferGeometryLoader.parse(data);
                break;
              default:
                if (data.type in Geometries) {
                  geometry = Geometries[data.type].fromJSON(data, shapes);
                } else {
                  console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
                }
            }
            geometry.uuid = data.uuid;
            if (data.name !== void 0)
              geometry.name = data.name;
            if (data.userData !== void 0)
              geometry.userData = data.userData;
            geometries[data.uuid] = geometry;
          }
        }
        return geometries;
      }
      parseMaterials(json, textures) {
        const cache = {};
        const materials = {};
        if (json !== void 0) {
          const loader = new MaterialLoader();
          loader.setTextures(textures);
          for (let i = 0, l = json.length; i < l; i++) {
            const data = json[i];
            if (cache[data.uuid] === void 0) {
              cache[data.uuid] = loader.parse(data);
            }
            materials[data.uuid] = cache[data.uuid];
          }
        }
        return materials;
      }
      parseAnimations(json) {
        const animations = {};
        if (json !== void 0) {
          for (let i = 0; i < json.length; i++) {
            const data = json[i];
            const clip = AnimationClip2.parse(data);
            animations[clip.uuid] = clip;
          }
        }
        return animations;
      }
      parseImages(json, onLoad) {
        const scope = this;
        const images = {};
        let loader;
        function loadImage(url) {
          scope.manager.itemStart(url);
          return loader.load(url, function() {
            scope.manager.itemEnd(url);
          }, void 0, function() {
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
          });
        }
        function deserializeImage(image) {
          if (typeof image === "string") {
            const url = image;
            const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
            return loadImage(path);
          } else {
            if (image.data) {
              return {
                data: getTypedArray(image.type, image.data),
                width: image.width,
                height: image.height
              };
            } else {
              return null;
            }
          }
        }
        if (json !== void 0 && json.length > 0) {
          const manager = new LoadingManager(onLoad);
          loader = new ImageLoader(manager);
          loader.setCrossOrigin(this.crossOrigin);
          for (let i = 0, il = json.length; i < il; i++) {
            const image = json[i];
            const url = image.url;
            if (Array.isArray(url)) {
              const imageArray = [];
              for (let j = 0, jl = url.length; j < jl; j++) {
                const currentUrl = url[j];
                const deserializedImage = deserializeImage(currentUrl);
                if (deserializedImage !== null) {
                  if (deserializedImage instanceof HTMLImageElement) {
                    imageArray.push(deserializedImage);
                  } else {
                    imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                  }
                }
              }
              images[image.uuid] = new Source(imageArray);
            } else {
              const deserializedImage = deserializeImage(image.url);
              images[image.uuid] = new Source(deserializedImage);
            }
          }
        }
        return images;
      }
      async parseImagesAsync(json) {
        const scope = this;
        const images = {};
        let loader;
        async function deserializeImage(image) {
          if (typeof image === "string") {
            const url = image;
            const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
            return await loader.loadAsync(path);
          } else {
            if (image.data) {
              return {
                data: getTypedArray(image.type, image.data),
                width: image.width,
                height: image.height
              };
            } else {
              return null;
            }
          }
        }
        if (json !== void 0 && json.length > 0) {
          loader = new ImageLoader(this.manager);
          loader.setCrossOrigin(this.crossOrigin);
          for (let i = 0, il = json.length; i < il; i++) {
            const image = json[i];
            const url = image.url;
            if (Array.isArray(url)) {
              const imageArray = [];
              for (let j = 0, jl = url.length; j < jl; j++) {
                const currentUrl = url[j];
                const deserializedImage = await deserializeImage(currentUrl);
                if (deserializedImage !== null) {
                  if (deserializedImage instanceof HTMLImageElement) {
                    imageArray.push(deserializedImage);
                  } else {
                    imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                  }
                }
              }
              images[image.uuid] = new Source(imageArray);
            } else {
              const deserializedImage = await deserializeImage(image.url);
              images[image.uuid] = new Source(deserializedImage);
            }
          }
        }
        return images;
      }
      parseTextures(json, images) {
        function parseConstant(value, type) {
          if (typeof value === "number")
            return value;
          console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value);
          return type[value];
        }
        const textures = {};
        if (json !== void 0) {
          for (let i = 0, l = json.length; i < l; i++) {
            const data = json[i];
            if (data.image === void 0) {
              console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
            }
            if (images[data.image] === void 0) {
              console.warn("THREE.ObjectLoader: Undefined image", data.image);
            }
            const source = images[data.image];
            const image = source.data;
            let texture;
            if (Array.isArray(image)) {
              texture = new CubeTexture();
              if (image.length === 6)
                texture.needsUpdate = true;
            } else {
              if (image && image.data) {
                texture = new DataTexture();
              } else {
                texture = new Texture2();
              }
              if (image)
                texture.needsUpdate = true;
            }
            texture.source = source;
            texture.uuid = data.uuid;
            if (data.name !== void 0)
              texture.name = data.name;
            if (data.mapping !== void 0)
              texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
            if (data.channel !== void 0)
              texture.channel = data.channel;
            if (data.offset !== void 0)
              texture.offset.fromArray(data.offset);
            if (data.repeat !== void 0)
              texture.repeat.fromArray(data.repeat);
            if (data.center !== void 0)
              texture.center.fromArray(data.center);
            if (data.rotation !== void 0)
              texture.rotation = data.rotation;
            if (data.wrap !== void 0) {
              texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
              texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
            }
            if (data.format !== void 0)
              texture.format = data.format;
            if (data.internalFormat !== void 0)
              texture.internalFormat = data.internalFormat;
            if (data.type !== void 0)
              texture.type = data.type;
            if (data.encoding !== void 0)
              texture.encoding = data.encoding;
            if (data.minFilter !== void 0)
              texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
            if (data.magFilter !== void 0)
              texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
            if (data.anisotropy !== void 0)
              texture.anisotropy = data.anisotropy;
            if (data.flipY !== void 0)
              texture.flipY = data.flipY;
            if (data.generateMipmaps !== void 0)
              texture.generateMipmaps = data.generateMipmaps;
            if (data.premultiplyAlpha !== void 0)
              texture.premultiplyAlpha = data.premultiplyAlpha;
            if (data.unpackAlignment !== void 0)
              texture.unpackAlignment = data.unpackAlignment;
            if (data.userData !== void 0)
              texture.userData = data.userData;
            textures[data.uuid] = texture;
          }
        }
        return textures;
      }
      parseObject(data, geometries, materials, textures, animations) {
        let object;
        function getGeometry(name) {
          if (geometries[name] === void 0) {
            console.warn("THREE.ObjectLoader: Undefined geometry", name);
          }
          return geometries[name];
        }
        function getMaterial(name) {
          if (name === void 0)
            return void 0;
          if (Array.isArray(name)) {
            const array = [];
            for (let i = 0, l = name.length; i < l; i++) {
              const uuid = name[i];
              if (materials[uuid] === void 0) {
                console.warn("THREE.ObjectLoader: Undefined material", uuid);
              }
              array.push(materials[uuid]);
            }
            return array;
          }
          if (materials[name] === void 0) {
            console.warn("THREE.ObjectLoader: Undefined material", name);
          }
          return materials[name];
        }
        function getTexture(uuid) {
          if (textures[uuid] === void 0) {
            console.warn("THREE.ObjectLoader: Undefined texture", uuid);
          }
          return textures[uuid];
        }
        let geometry, material;
        switch (data.type) {
          case "Scene":
            object = new Scene2();
            if (data.background !== void 0) {
              if (Number.isInteger(data.background)) {
                object.background = new Color2(data.background);
              } else {
                object.background = getTexture(data.background);
              }
            }
            if (data.environment !== void 0) {
              object.environment = getTexture(data.environment);
            }
            if (data.fog !== void 0) {
              if (data.fog.type === "Fog") {
                object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
              } else if (data.fog.type === "FogExp2") {
                object.fog = new FogExp2(data.fog.color, data.fog.density);
              }
            }
            if (data.backgroundBlurriness !== void 0)
              object.backgroundBlurriness = data.backgroundBlurriness;
            if (data.backgroundIntensity !== void 0)
              object.backgroundIntensity = data.backgroundIntensity;
            break;
          case "PerspectiveCamera":
            object = new PerspectiveCamera2(data.fov, data.aspect, data.near, data.far);
            if (data.focus !== void 0)
              object.focus = data.focus;
            if (data.zoom !== void 0)
              object.zoom = data.zoom;
            if (data.filmGauge !== void 0)
              object.filmGauge = data.filmGauge;
            if (data.filmOffset !== void 0)
              object.filmOffset = data.filmOffset;
            if (data.view !== void 0)
              object.view = Object.assign({}, data.view);
            break;
          case "OrthographicCamera":
            object = new OrthographicCamera2(data.left, data.right, data.top, data.bottom, data.near, data.far);
            if (data.zoom !== void 0)
              object.zoom = data.zoom;
            if (data.view !== void 0)
              object.view = Object.assign({}, data.view);
            break;
          case "AmbientLight":
            object = new AmbientLight2(data.color, data.intensity);
            break;
          case "DirectionalLight":
            object = new DirectionalLight2(data.color, data.intensity);
            break;
          case "PointLight":
            object = new PointLight2(data.color, data.intensity, data.distance, data.decay);
            break;
          case "RectAreaLight":
            object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
            break;
          case "SpotLight":
            object = new SpotLight2(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
            break;
          case "HemisphereLight":
            object = new HemisphereLight(data.color, data.groundColor, data.intensity);
            break;
          case "LightProbe":
            object = new LightProbe().fromJSON(data);
            break;
          case "SkinnedMesh":
            geometry = getGeometry(data.geometry);
            material = getMaterial(data.material);
            object = new SkinnedMesh2(geometry, material);
            if (data.bindMode !== void 0)
              object.bindMode = data.bindMode;
            if (data.bindMatrix !== void 0)
              object.bindMatrix.fromArray(data.bindMatrix);
            if (data.skeleton !== void 0)
              object.skeleton = data.skeleton;
            break;
          case "Mesh":
            geometry = getGeometry(data.geometry);
            material = getMaterial(data.material);
            object = new Mesh2(geometry, material);
            break;
          case "InstancedMesh":
            geometry = getGeometry(data.geometry);
            material = getMaterial(data.material);
            const count = data.count;
            const instanceMatrix = data.instanceMatrix;
            const instanceColor = data.instanceColor;
            object = new InstancedMesh(geometry, material, count);
            object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);
            if (instanceColor !== void 0)
              object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
            break;
          case "LOD":
            object = new LOD();
            break;
          case "Line":
            object = new Line2(getGeometry(data.geometry), getMaterial(data.material));
            break;
          case "LineLoop":
            object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
            break;
          case "LineSegments":
            object = new LineSegments2(getGeometry(data.geometry), getMaterial(data.material));
            break;
          case "PointCloud":
          case "Points":
            object = new Points2(getGeometry(data.geometry), getMaterial(data.material));
            break;
          case "Sprite":
            object = new Sprite(getMaterial(data.material));
            break;
          case "Group":
            object = new Group2();
            break;
          case "Bone":
            object = new Bone2();
            break;
          default:
            object = new Object3D2();
        }
        object.uuid = data.uuid;
        if (data.name !== void 0)
          object.name = data.name;
        if (data.matrix !== void 0) {
          object.matrix.fromArray(data.matrix);
          if (data.matrixAutoUpdate !== void 0)
            object.matrixAutoUpdate = data.matrixAutoUpdate;
          if (object.matrixAutoUpdate)
            object.matrix.decompose(object.position, object.quaternion, object.scale);
        } else {
          if (data.position !== void 0)
            object.position.fromArray(data.position);
          if (data.rotation !== void 0)
            object.rotation.fromArray(data.rotation);
          if (data.quaternion !== void 0)
            object.quaternion.fromArray(data.quaternion);
          if (data.scale !== void 0)
            object.scale.fromArray(data.scale);
        }
        if (data.up !== void 0)
          object.up.fromArray(data.up);
        if (data.castShadow !== void 0)
          object.castShadow = data.castShadow;
        if (data.receiveShadow !== void 0)
          object.receiveShadow = data.receiveShadow;
        if (data.shadow) {
          if (data.shadow.bias !== void 0)
            object.shadow.bias = data.shadow.bias;
          if (data.shadow.normalBias !== void 0)
            object.shadow.normalBias = data.shadow.normalBias;
          if (data.shadow.radius !== void 0)
            object.shadow.radius = data.shadow.radius;
          if (data.shadow.mapSize !== void 0)
            object.shadow.mapSize.fromArray(data.shadow.mapSize);
          if (data.shadow.camera !== void 0)
            object.shadow.camera = this.parseObject(data.shadow.camera);
        }
        if (data.visible !== void 0)
          object.visible = data.visible;
        if (data.frustumCulled !== void 0)
          object.frustumCulled = data.frustumCulled;
        if (data.renderOrder !== void 0)
          object.renderOrder = data.renderOrder;
        if (data.userData !== void 0)
          object.userData = data.userData;
        if (data.layers !== void 0)
          object.layers.mask = data.layers;
        if (data.children !== void 0) {
          const children = data.children;
          for (let i = 0; i < children.length; i++) {
            object.add(this.parseObject(children[i], geometries, materials, textures, animations));
          }
        }
        if (data.animations !== void 0) {
          const objectAnimations = data.animations;
          for (let i = 0; i < objectAnimations.length; i++) {
            const uuid = objectAnimations[i];
            object.animations.push(animations[uuid]);
          }
        }
        if (data.type === "LOD") {
          if (data.autoUpdate !== void 0)
            object.autoUpdate = data.autoUpdate;
          const levels = data.levels;
          for (let l = 0; l < levels.length; l++) {
            const level = levels[l];
            const child = object.getObjectByProperty("uuid", level.object);
            if (child !== void 0) {
              object.addLevel(child, level.distance, level.hysteresis);
            }
          }
        }
        return object;
      }
      bindSkeletons(object, skeletons) {
        if (Object.keys(skeletons).length === 0)
          return;
        object.traverse(function(child) {
          if (child.isSkinnedMesh === true && child.skeleton !== void 0) {
            const skeleton = skeletons[child.skeleton];
            if (skeleton === void 0) {
              console.warn("THREE.ObjectLoader: No skeleton found with UUID:", child.skeleton);
            } else {
              child.bind(skeleton, child.bindMatrix);
            }
          }
        });
      }
    };
    var TEXTURE_MAPPING = {
      UVMapping,
      CubeReflectionMapping,
      CubeRefractionMapping,
      EquirectangularReflectionMapping: EquirectangularReflectionMapping2,
      EquirectangularRefractionMapping,
      CubeUVReflectionMapping
    };
    var TEXTURE_WRAPPING = {
      RepeatWrapping: RepeatWrapping2,
      ClampToEdgeWrapping: ClampToEdgeWrapping2,
      MirroredRepeatWrapping
    };
    var TEXTURE_FILTER = {
      NearestFilter,
      NearestMipmapNearestFilter,
      NearestMipmapLinearFilter,
      LinearFilter,
      LinearMipmapNearestFilter,
      LinearMipmapLinearFilter: LinearMipmapLinearFilter2
    };
    var ImageBitmapLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
        this.isImageBitmapLoader = true;
        if (typeof createImageBitmap === "undefined") {
          console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
        }
        if (typeof fetch === "undefined") {
          console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
        }
        this.options = { premultiplyAlpha: "none" };
      }
      setOptions(options) {
        this.options = options;
        return this;
      }
      load(url, onLoad, onProgress, onError) {
        if (url === void 0)
          url = "";
        if (this.path !== void 0)
          url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = Cache.get(url);
        if (cached !== void 0) {
          scope.manager.itemStart(url);
          setTimeout(function() {
            if (onLoad)
              onLoad(cached);
            scope.manager.itemEnd(url);
          }, 0);
          return cached;
        }
        const fetchOptions = {};
        fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
        fetchOptions.headers = this.requestHeader;
        fetch(url, fetchOptions).then(function(res) {
          return res.blob();
        }).then(function(blob) {
          return createImageBitmap(blob, Object.assign(scope.options, { colorSpaceConversion: "none" }));
        }).then(function(imageBitmap) {
          Cache.add(url, imageBitmap);
          if (onLoad)
            onLoad(imageBitmap);
          scope.manager.itemEnd(url);
        }).catch(function(e) {
          if (onError)
            onError(e);
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        });
        scope.manager.itemStart(url);
      }
    };
    var _context;
    var AudioContext = class {
      static getContext() {
        if (_context === void 0) {
          _context = new (window.AudioContext || window.webkitAudioContext)();
        }
        return _context;
      }
      static setContext(value) {
        _context = value;
      }
    };
    var AudioLoader = class extends Loader2 {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader2(this.manager);
        loader.setResponseType("arraybuffer");
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(buffer) {
          try {
            const bufferCopy = buffer.slice(0);
            const context = AudioContext.getContext();
            context.decodeAudioData(bufferCopy, function(audioBuffer) {
              onLoad(audioBuffer);
            });
          } catch (e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }, onProgress, onError);
      }
    };
    var HemisphereLightProbe = class extends LightProbe {
      constructor(skyColor, groundColor, intensity = 1) {
        super(void 0, intensity);
        this.isHemisphereLightProbe = true;
        const color1 = new Color2().set(skyColor);
        const color2 = new Color2().set(groundColor);
        const sky = new Vector32(color1.r, color1.g, color1.b);
        const ground = new Vector32(color2.r, color2.g, color2.b);
        const c0 = Math.sqrt(Math.PI);
        const c1 = c0 * Math.sqrt(0.75);
        this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
        this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
      }
    };
    var AmbientLightProbe = class extends LightProbe {
      constructor(color, intensity = 1) {
        super(void 0, intensity);
        this.isAmbientLightProbe = true;
        const color1 = new Color2().set(color);
        this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
      }
    };
    var _eyeRight = new Matrix42();
    var _eyeLeft = new Matrix42();
    var _projectionMatrix = new Matrix42();
    var StereoCamera = class {
      constructor() {
        this.type = "StereoCamera";
        this.aspect = 1;
        this.eyeSep = 0.064;
        this.cameraL = new PerspectiveCamera2();
        this.cameraL.layers.enable(1);
        this.cameraL.matrixAutoUpdate = false;
        this.cameraR = new PerspectiveCamera2();
        this.cameraR.layers.enable(2);
        this.cameraR.matrixAutoUpdate = false;
        this._cache = {
          focus: null,
          fov: null,
          aspect: null,
          near: null,
          far: null,
          zoom: null,
          eyeSep: null
        };
      }
      update(camera) {
        const cache = this._cache;
        const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
        if (needsUpdate) {
          cache.focus = camera.focus;
          cache.fov = camera.fov;
          cache.aspect = camera.aspect * this.aspect;
          cache.near = camera.near;
          cache.far = camera.far;
          cache.zoom = camera.zoom;
          cache.eyeSep = this.eyeSep;
          _projectionMatrix.copy(camera.projectionMatrix);
          const eyeSepHalf = cache.eyeSep / 2;
          const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
          const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;
          let xmin, xmax;
          _eyeLeft.elements[12] = -eyeSepHalf;
          _eyeRight.elements[12] = eyeSepHalf;
          xmin = -ymax * cache.aspect + eyeSepOnProjection;
          xmax = ymax * cache.aspect + eyeSepOnProjection;
          _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
          _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
          this.cameraL.projectionMatrix.copy(_projectionMatrix);
          xmin = -ymax * cache.aspect - eyeSepOnProjection;
          xmax = ymax * cache.aspect - eyeSepOnProjection;
          _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
          _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
          this.cameraR.projectionMatrix.copy(_projectionMatrix);
        }
        this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
        this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
      }
    };
    var Clock = class {
      constructor(autoStart = true) {
        this.autoStart = autoStart;
        this.startTime = 0;
        this.oldTime = 0;
        this.elapsedTime = 0;
        this.running = false;
      }
      start() {
        this.startTime = now();
        this.oldTime = this.startTime;
        this.elapsedTime = 0;
        this.running = true;
      }
      stop() {
        this.getElapsedTime();
        this.running = false;
        this.autoStart = false;
      }
      getElapsedTime() {
        this.getDelta();
        return this.elapsedTime;
      }
      getDelta() {
        let diff = 0;
        if (this.autoStart && !this.running) {
          this.start();
          return 0;
        }
        if (this.running) {
          const newTime = now();
          diff = (newTime - this.oldTime) / 1e3;
          this.oldTime = newTime;
          this.elapsedTime += diff;
        }
        return diff;
      }
    };
    function now() {
      return (typeof performance === "undefined" ? Date : performance).now();
    }
    var _position$1 = new Vector32();
    var _quaternion$1 = new Quaternion2();
    var _scale$1 = new Vector32();
    var _orientation$1 = new Vector32();
    var AudioListener = class extends Object3D2 {
      constructor() {
        super();
        this.type = "AudioListener";
        this.context = AudioContext.getContext();
        this.gain = this.context.createGain();
        this.gain.connect(this.context.destination);
        this.filter = null;
        this.timeDelta = 0;
        this._clock = new Clock();
      }
      getInput() {
        return this.gain;
      }
      removeFilter() {
        if (this.filter !== null) {
          this.gain.disconnect(this.filter);
          this.filter.disconnect(this.context.destination);
          this.gain.connect(this.context.destination);
          this.filter = null;
        }
        return this;
      }
      getFilter() {
        return this.filter;
      }
      setFilter(value) {
        if (this.filter !== null) {
          this.gain.disconnect(this.filter);
          this.filter.disconnect(this.context.destination);
        } else {
          this.gain.disconnect(this.context.destination);
        }
        this.filter = value;
        this.gain.connect(this.filter);
        this.filter.connect(this.context.destination);
        return this;
      }
      getMasterVolume() {
        return this.gain.gain.value;
      }
      setMasterVolume(value) {
        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
        return this;
      }
      updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        const listener = this.context.listener;
        const up = this.up;
        this.timeDelta = this._clock.getDelta();
        this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);
        _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);
        if (listener.positionX) {
          const endTime = this.context.currentTime + this.timeDelta;
          listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
          listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
          listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);
          listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);
          listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);
          listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);
          listener.upX.linearRampToValueAtTime(up.x, endTime);
          listener.upY.linearRampToValueAtTime(up.y, endTime);
          listener.upZ.linearRampToValueAtTime(up.z, endTime);
        } else {
          listener.setPosition(_position$1.x, _position$1.y, _position$1.z);
          listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
        }
      }
    };
    var Audio = class extends Object3D2 {
      constructor(listener) {
        super();
        this.type = "Audio";
        this.listener = listener;
        this.context = listener.context;
        this.gain = this.context.createGain();
        this.gain.connect(listener.getInput());
        this.autoplay = false;
        this.buffer = null;
        this.detune = 0;
        this.loop = false;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.offset = 0;
        this.duration = void 0;
        this.playbackRate = 1;
        this.isPlaying = false;
        this.hasPlaybackControl = true;
        this.source = null;
        this.sourceType = "empty";
        this._startedAt = 0;
        this._progress = 0;
        this._connected = false;
        this.filters = [];
      }
      getOutput() {
        return this.gain;
      }
      setNodeSource(audioNode) {
        this.hasPlaybackControl = false;
        this.sourceType = "audioNode";
        this.source = audioNode;
        this.connect();
        return this;
      }
      setMediaElementSource(mediaElement) {
        this.hasPlaybackControl = false;
        this.sourceType = "mediaNode";
        this.source = this.context.createMediaElementSource(mediaElement);
        this.connect();
        return this;
      }
      setMediaStreamSource(mediaStream) {
        this.hasPlaybackControl = false;
        this.sourceType = "mediaStreamNode";
        this.source = this.context.createMediaStreamSource(mediaStream);
        this.connect();
        return this;
      }
      setBuffer(audioBuffer) {
        this.buffer = audioBuffer;
        this.sourceType = "buffer";
        if (this.autoplay)
          this.play();
        return this;
      }
      play(delay = 0) {
        if (this.isPlaying === true) {
          console.warn("THREE.Audio: Audio is already playing.");
          return;
        }
        if (this.hasPlaybackControl === false) {
          console.warn("THREE.Audio: this Audio has no playback control.");
          return;
        }
        this._startedAt = this.context.currentTime + delay;
        const source = this.context.createBufferSource();
        source.buffer = this.buffer;
        source.loop = this.loop;
        source.loopStart = this.loopStart;
        source.loopEnd = this.loopEnd;
        source.onended = this.onEnded.bind(this);
        source.start(this._startedAt, this._progress + this.offset, this.duration);
        this.isPlaying = true;
        this.source = source;
        this.setDetune(this.detune);
        this.setPlaybackRate(this.playbackRate);
        return this.connect();
      }
      pause() {
        if (this.hasPlaybackControl === false) {
          console.warn("THREE.Audio: this Audio has no playback control.");
          return;
        }
        if (this.isPlaying === true) {
          this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
          if (this.loop === true) {
            this._progress = this._progress % (this.duration || this.buffer.duration);
          }
          this.source.stop();
          this.source.onended = null;
          this.isPlaying = false;
        }
        return this;
      }
      stop() {
        if (this.hasPlaybackControl === false) {
          console.warn("THREE.Audio: this Audio has no playback control.");
          return;
        }
        this._progress = 0;
        if (this.source !== null) {
          this.source.stop();
          this.source.onended = null;
        }
        this.isPlaying = false;
        return this;
      }
      connect() {
        if (this.filters.length > 0) {
          this.source.connect(this.filters[0]);
          for (let i = 1, l = this.filters.length; i < l; i++) {
            this.filters[i - 1].connect(this.filters[i]);
          }
          this.filters[this.filters.length - 1].connect(this.getOutput());
        } else {
          this.source.connect(this.getOutput());
        }
        this._connected = true;
        return this;
      }
      disconnect() {
        if (this.filters.length > 0) {
          this.source.disconnect(this.filters[0]);
          for (let i = 1, l = this.filters.length; i < l; i++) {
            this.filters[i - 1].disconnect(this.filters[i]);
          }
          this.filters[this.filters.length - 1].disconnect(this.getOutput());
        } else {
          this.source.disconnect(this.getOutput());
        }
        this._connected = false;
        return this;
      }
      getFilters() {
        return this.filters;
      }
      setFilters(value) {
        if (!value)
          value = [];
        if (this._connected === true) {
          this.disconnect();
          this.filters = value.slice();
          this.connect();
        } else {
          this.filters = value.slice();
        }
        return this;
      }
      setDetune(value) {
        this.detune = value;
        if (this.source.detune === void 0)
          return;
        if (this.isPlaying === true) {
          this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
        }
        return this;
      }
      getDetune() {
        return this.detune;
      }
      getFilter() {
        return this.getFilters()[0];
      }
      setFilter(filter) {
        return this.setFilters(filter ? [filter] : []);
      }
      setPlaybackRate(value) {
        if (this.hasPlaybackControl === false) {
          console.warn("THREE.Audio: this Audio has no playback control.");
          return;
        }
        this.playbackRate = value;
        if (this.isPlaying === true) {
          this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
        }
        return this;
      }
      getPlaybackRate() {
        return this.playbackRate;
      }
      onEnded() {
        this.isPlaying = false;
      }
      getLoop() {
        if (this.hasPlaybackControl === false) {
          console.warn("THREE.Audio: this Audio has no playback control.");
          return false;
        }
        return this.loop;
      }
      setLoop(value) {
        if (this.hasPlaybackControl === false) {
          console.warn("THREE.Audio: this Audio has no playback control.");
          return;
        }
        this.loop = value;
        if (this.isPlaying === true) {
          this.source.loop = this.loop;
        }
        return this;
      }
      setLoopStart(value) {
        this.loopStart = value;
        return this;
      }
      setLoopEnd(value) {
        this.loopEnd = value;
        return this;
      }
      getVolume() {
        return this.gain.gain.value;
      }
      setVolume(value) {
        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
        return this;
      }
    };
    var _position = new Vector32();
    var _quaternion = new Quaternion2();
    var _scale = new Vector32();
    var _orientation = new Vector32();
    var PositionalAudio = class extends Audio {
      constructor(listener) {
        super(listener);
        this.panner = this.context.createPanner();
        this.panner.panningModel = "HRTF";
        this.panner.connect(this.gain);
      }
      disconnect() {
        super.disconnect();
        this.panner.disconnect(this.gain);
      }
      getOutput() {
        return this.panner;
      }
      getRefDistance() {
        return this.panner.refDistance;
      }
      setRefDistance(value) {
        this.panner.refDistance = value;
        return this;
      }
      getRolloffFactor() {
        return this.panner.rolloffFactor;
      }
      setRolloffFactor(value) {
        this.panner.rolloffFactor = value;
        return this;
      }
      getDistanceModel() {
        return this.panner.distanceModel;
      }
      setDistanceModel(value) {
        this.panner.distanceModel = value;
        return this;
      }
      getMaxDistance() {
        return this.panner.maxDistance;
      }
      setMaxDistance(value) {
        this.panner.maxDistance = value;
        return this;
      }
      setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
        this.panner.coneInnerAngle = coneInnerAngle;
        this.panner.coneOuterAngle = coneOuterAngle;
        this.panner.coneOuterGain = coneOuterGain;
        return this;
      }
      updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.hasPlaybackControl === true && this.isPlaying === false)
          return;
        this.matrixWorld.decompose(_position, _quaternion, _scale);
        _orientation.set(0, 0, 1).applyQuaternion(_quaternion);
        const panner = this.panner;
        if (panner.positionX) {
          const endTime = this.context.currentTime + this.listener.timeDelta;
          panner.positionX.linearRampToValueAtTime(_position.x, endTime);
          panner.positionY.linearRampToValueAtTime(_position.y, endTime);
          panner.positionZ.linearRampToValueAtTime(_position.z, endTime);
          panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);
          panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);
          panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);
        } else {
          panner.setPosition(_position.x, _position.y, _position.z);
          panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
        }
      }
    };
    var AudioAnalyser = class {
      constructor(audio, fftSize = 2048) {
        this.analyser = audio.context.createAnalyser();
        this.analyser.fftSize = fftSize;
        this.data = new Uint8Array(this.analyser.frequencyBinCount);
        audio.getOutput().connect(this.analyser);
      }
      getFrequencyData() {
        this.analyser.getByteFrequencyData(this.data);
        return this.data;
      }
      getAverageFrequency() {
        let value = 0;
        const data = this.getFrequencyData();
        for (let i = 0; i < data.length; i++) {
          value += data[i];
        }
        return value / data.length;
      }
    };
    var PropertyMixer = class {
      constructor(binding, typeName, valueSize) {
        this.binding = binding;
        this.valueSize = valueSize;
        let mixFunction, mixFunctionAdditive, setIdentity;
        switch (typeName) {
          case "quaternion":
            mixFunction = this._slerp;
            mixFunctionAdditive = this._slerpAdditive;
            setIdentity = this._setAdditiveIdentityQuaternion;
            this.buffer = new Float64Array(valueSize * 6);
            this._workIndex = 5;
            break;
          case "string":
          case "bool":
            mixFunction = this._select;
            mixFunctionAdditive = this._select;
            setIdentity = this._setAdditiveIdentityOther;
            this.buffer = new Array(valueSize * 5);
            break;
          default:
            mixFunction = this._lerp;
            mixFunctionAdditive = this._lerpAdditive;
            setIdentity = this._setAdditiveIdentityNumeric;
            this.buffer = new Float64Array(valueSize * 5);
        }
        this._mixBufferRegion = mixFunction;
        this._mixBufferRegionAdditive = mixFunctionAdditive;
        this._setIdentity = setIdentity;
        this._origIndex = 3;
        this._addIndex = 4;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        this.useCount = 0;
        this.referenceCount = 0;
      }
      // accumulate data in the 'incoming' region into 'accu<i>'
      accumulate(accuIndex, weight) {
        const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
        let currentWeight = this.cumulativeWeight;
        if (currentWeight === 0) {
          for (let i = 0; i !== stride; ++i) {
            buffer[offset + i] = buffer[i];
          }
          currentWeight = weight;
        } else {
          currentWeight += weight;
          const mix = weight / currentWeight;
          this._mixBufferRegion(buffer, offset, 0, mix, stride);
        }
        this.cumulativeWeight = currentWeight;
      }
      // accumulate data in the 'incoming' region into 'add'
      accumulateAdditive(weight) {
        const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
        if (this.cumulativeWeightAdditive === 0) {
          this._setIdentity();
        }
        this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
        this.cumulativeWeightAdditive += weight;
      }
      // apply the state of 'accu<i>' to the binding when accus differ
      apply(accuIndex) {
        const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        if (weight < 1) {
          const originalValueOffset = stride * this._origIndex;
          this._mixBufferRegion(
            buffer,
            offset,
            originalValueOffset,
            1 - weight,
            stride
          );
        }
        if (weightAdditive > 0) {
          this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
        }
        for (let i = stride, e = stride + stride; i !== e; ++i) {
          if (buffer[i] !== buffer[i + stride]) {
            binding.setValue(buffer, offset);
            break;
          }
        }
      }
      // remember the state of the bound property and copy it to both accus
      saveOriginalState() {
        const binding = this.binding;
        const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
        binding.getValue(buffer, originalValueOffset);
        for (let i = stride, e = originalValueOffset; i !== e; ++i) {
          buffer[i] = buffer[originalValueOffset + i % stride];
        }
        this._setIdentity();
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
      }
      // apply the state previously taken via 'saveOriginalState' to the binding
      restoreOriginalState() {
        const originalValueOffset = this.valueSize * 3;
        this.binding.setValue(this.buffer, originalValueOffset);
      }
      _setAdditiveIdentityNumeric() {
        const startIndex = this._addIndex * this.valueSize;
        const endIndex = startIndex + this.valueSize;
        for (let i = startIndex; i < endIndex; i++) {
          this.buffer[i] = 0;
        }
      }
      _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric();
        this.buffer[this._addIndex * this.valueSize + 3] = 1;
      }
      _setAdditiveIdentityOther() {
        const startIndex = this._origIndex * this.valueSize;
        const targetIndex = this._addIndex * this.valueSize;
        for (let i = 0; i < this.valueSize; i++) {
          this.buffer[targetIndex + i] = this.buffer[startIndex + i];
        }
      }
      // mix functions
      _select(buffer, dstOffset, srcOffset, t, stride) {
        if (t >= 0.5) {
          for (let i = 0; i !== stride; ++i) {
            buffer[dstOffset + i] = buffer[srcOffset + i];
          }
        }
      }
      _slerp(buffer, dstOffset, srcOffset, t) {
        Quaternion2.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
      }
      _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
        const workOffset = this._workIndex * stride;
        Quaternion2.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
        Quaternion2.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
      }
      _lerp(buffer, dstOffset, srcOffset, t, stride) {
        const s = 1 - t;
        for (let i = 0; i !== stride; ++i) {
          const j = dstOffset + i;
          buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
        }
      }
      _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
        for (let i = 0; i !== stride; ++i) {
          const j = dstOffset + i;
          buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
        }
      }
    };
    var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
    var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
    var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
    var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
    var _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
    var _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
    var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
    var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
    var _trackRe = new RegExp(
      "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
    );
    var _supportedObjectNames = ["material", "materials", "bones", "map"];
    var Composite = class {
      constructor(targetGroup, path, optionalParsedPath) {
        const parsedPath = optionalParsedPath || PropertyBinding2.parseTrackName(path);
        this._targetGroup = targetGroup;
        this._bindings = targetGroup.subscribe_(path, parsedPath);
      }
      getValue(array, offset) {
        this.bind();
        const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
        if (binding !== void 0)
          binding.getValue(array, offset);
      }
      setValue(array, offset) {
        const bindings = this._bindings;
        for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
          bindings[i].setValue(array, offset);
        }
      }
      bind() {
        const bindings = this._bindings;
        for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
          bindings[i].bind();
        }
      }
      unbind() {
        const bindings = this._bindings;
        for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
          bindings[i].unbind();
        }
      }
    };
    var PropertyBinding2 = class {
      constructor(rootNode, path, parsedPath) {
        this.path = path;
        this.parsedPath = parsedPath || PropertyBinding2.parseTrackName(path);
        this.node = PropertyBinding2.findNode(rootNode, this.parsedPath.nodeName);
        this.rootNode = rootNode;
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
      }
      static create(root, path, parsedPath) {
        if (!(root && root.isAnimationObjectGroup)) {
          return new PropertyBinding2(root, path, parsedPath);
        } else {
          return new PropertyBinding2.Composite(root, path, parsedPath);
        }
      }
      /**
       * Replaces spaces with underscores and removes unsupported characters from
       * node names, to ensure compatibility with parseTrackName().
       *
       * @param {string} name Node name to be sanitized.
       * @return {string}
       */
      static sanitizeNodeName(name) {
        return name.replace(/\s/g, "_").replace(_reservedRe, "");
      }
      static parseTrackName(trackName) {
        const matches = _trackRe.exec(trackName);
        if (matches === null) {
          throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
        }
        const results = {
          // directoryName: matches[ 1 ], // (tschw) currently unused
          nodeName: matches[2],
          objectName: matches[3],
          objectIndex: matches[4],
          propertyName: matches[5],
          // required
          propertyIndex: matches[6]
        };
        const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
        if (lastDot !== void 0 && lastDot !== -1) {
          const objectName = results.nodeName.substring(lastDot + 1);
          if (_supportedObjectNames.indexOf(objectName) !== -1) {
            results.nodeName = results.nodeName.substring(0, lastDot);
            results.objectName = objectName;
          }
        }
        if (results.propertyName === null || results.propertyName.length === 0) {
          throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
        }
        return results;
      }
      static findNode(root, nodeName) {
        if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
          return root;
        }
        if (root.skeleton) {
          const bone = root.skeleton.getBoneByName(nodeName);
          if (bone !== void 0) {
            return bone;
          }
        }
        if (root.children) {
          const searchNodeSubtree = function(children) {
            for (let i = 0; i < children.length; i++) {
              const childNode = children[i];
              if (childNode.name === nodeName || childNode.uuid === nodeName) {
                return childNode;
              }
              const result = searchNodeSubtree(childNode.children);
              if (result)
                return result;
            }
            return null;
          };
          const subTreeNode = searchNodeSubtree(root.children);
          if (subTreeNode) {
            return subTreeNode;
          }
        }
        return null;
      }
      // these are used to "bind" a nonexistent property
      _getValue_unavailable() {
      }
      _setValue_unavailable() {
      }
      // Getters
      _getValue_direct(buffer, offset) {
        buffer[offset] = this.targetObject[this.propertyName];
      }
      _getValue_array(buffer, offset) {
        const source = this.resolvedProperty;
        for (let i = 0, n = source.length; i !== n; ++i) {
          buffer[offset++] = source[i];
        }
      }
      _getValue_arrayElement(buffer, offset) {
        buffer[offset] = this.resolvedProperty[this.propertyIndex];
      }
      _getValue_toArray(buffer, offset) {
        this.resolvedProperty.toArray(buffer, offset);
      }
      // Direct
      _setValue_direct(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
      }
      _setValue_direct_setNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.needsUpdate = true;
      }
      _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
      // EntireArray
      _setValue_array(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
      }
      _setValue_array_setNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
        this.targetObject.needsUpdate = true;
      }
      _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
      // ArrayElement
      _setValue_arrayElement(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
      }
      _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.needsUpdate = true;
      }
      _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
      // HasToFromArray
      _setValue_fromArray(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
      }
      _setValue_fromArray_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.needsUpdate = true;
      }
      _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
      _getValue_unbound(targetArray, offset) {
        this.bind();
        this.getValue(targetArray, offset);
      }
      _setValue_unbound(sourceArray, offset) {
        this.bind();
        this.setValue(sourceArray, offset);
      }
      // create getter / setter pair for a property in the scene graph
      bind() {
        let targetObject = this.node;
        const parsedPath = this.parsedPath;
        const objectName = parsedPath.objectName;
        const propertyName = parsedPath.propertyName;
        let propertyIndex = parsedPath.propertyIndex;
        if (!targetObject) {
          targetObject = PropertyBinding2.findNode(this.rootNode, parsedPath.nodeName);
          this.node = targetObject;
        }
        this.getValue = this._getValue_unavailable;
        this.setValue = this._setValue_unavailable;
        if (!targetObject) {
          console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
          return;
        }
        if (objectName) {
          let objectIndex = parsedPath.objectIndex;
          switch (objectName) {
            case "materials":
              if (!targetObject.material) {
                console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                return;
              }
              if (!targetObject.material.materials) {
                console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                return;
              }
              targetObject = targetObject.material.materials;
              break;
            case "bones":
              if (!targetObject.skeleton) {
                console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                return;
              }
              targetObject = targetObject.skeleton.bones;
              for (let i = 0; i < targetObject.length; i++) {
                if (targetObject[i].name === objectIndex) {
                  objectIndex = i;
                  break;
                }
              }
              break;
            case "map":
              if ("map" in targetObject) {
                targetObject = targetObject.map;
                break;
              }
              if (!targetObject.material) {
                console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                return;
              }
              if (!targetObject.material.map) {
                console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
                return;
              }
              targetObject = targetObject.material.map;
              break;
            default:
              if (targetObject[objectName] === void 0) {
                console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                return;
              }
              targetObject = targetObject[objectName];
          }
          if (objectIndex !== void 0) {
            if (targetObject[objectIndex] === void 0) {
              console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
              return;
            }
            targetObject = targetObject[objectIndex];
          }
        }
        const nodeProperty = targetObject[propertyName];
        if (nodeProperty === void 0) {
          const nodeName = parsedPath.nodeName;
          console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
          return;
        }
        let versioning = this.Versioning.None;
        this.targetObject = targetObject;
        if (targetObject.needsUpdate !== void 0) {
          versioning = this.Versioning.NeedsUpdate;
        } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
          versioning = this.Versioning.MatrixWorldNeedsUpdate;
        }
        let bindingType = this.BindingType.Direct;
        if (propertyIndex !== void 0) {
          if (propertyName === "morphTargetInfluences") {
            if (!targetObject.geometry) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
              return;
            }
            if (!targetObject.geometry.morphAttributes) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
              return;
            }
            if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
            }
          }
          bindingType = this.BindingType.ArrayElement;
          this.resolvedProperty = nodeProperty;
          this.propertyIndex = propertyIndex;
        } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
          bindingType = this.BindingType.HasFromToArray;
          this.resolvedProperty = nodeProperty;
        } else if (Array.isArray(nodeProperty)) {
          bindingType = this.BindingType.EntireArray;
          this.resolvedProperty = nodeProperty;
        } else {
          this.propertyName = propertyName;
        }
        this.getValue = this.GetterByBindingType[bindingType];
        this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
      }
      unbind() {
        this.node = null;
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
      }
    };
    PropertyBinding2.Composite = Composite;
    PropertyBinding2.prototype.BindingType = {
      Direct: 0,
      EntireArray: 1,
      ArrayElement: 2,
      HasFromToArray: 3
    };
    PropertyBinding2.prototype.Versioning = {
      None: 0,
      NeedsUpdate: 1,
      MatrixWorldNeedsUpdate: 2
    };
    PropertyBinding2.prototype.GetterByBindingType = [
      PropertyBinding2.prototype._getValue_direct,
      PropertyBinding2.prototype._getValue_array,
      PropertyBinding2.prototype._getValue_arrayElement,
      PropertyBinding2.prototype._getValue_toArray
    ];
    PropertyBinding2.prototype.SetterByBindingTypeAndVersioning = [
      [
        // Direct
        PropertyBinding2.prototype._setValue_direct,
        PropertyBinding2.prototype._setValue_direct_setNeedsUpdate,
        PropertyBinding2.prototype._setValue_direct_setMatrixWorldNeedsUpdate
      ],
      [
        // EntireArray
        PropertyBinding2.prototype._setValue_array,
        PropertyBinding2.prototype._setValue_array_setNeedsUpdate,
        PropertyBinding2.prototype._setValue_array_setMatrixWorldNeedsUpdate
      ],
      [
        // ArrayElement
        PropertyBinding2.prototype._setValue_arrayElement,
        PropertyBinding2.prototype._setValue_arrayElement_setNeedsUpdate,
        PropertyBinding2.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
      ],
      [
        // HasToFromArray
        PropertyBinding2.prototype._setValue_fromArray,
        PropertyBinding2.prototype._setValue_fromArray_setNeedsUpdate,
        PropertyBinding2.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
      ]
    ];
    var AnimationObjectGroup = class {
      constructor() {
        this.isAnimationObjectGroup = true;
        this.uuid = generateUUID();
        this._objects = Array.prototype.slice.call(arguments);
        this.nCachedObjects_ = 0;
        const indices = {};
        this._indicesByUUID = indices;
        for (let i = 0, n = arguments.length; i !== n; ++i) {
          indices[arguments[i].uuid] = i;
        }
        this._paths = [];
        this._parsedPaths = [];
        this._bindings = [];
        this._bindingsIndicesByPath = {};
        const scope = this;
        this.stats = {
          objects: {
            get total() {
              return scope._objects.length;
            },
            get inUse() {
              return this.total - scope.nCachedObjects_;
            }
          },
          get bindingsPerObject() {
            return scope._bindings.length;
          }
        };
      }
      add() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
        let knownObject = void 0, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
        for (let i = 0, n = arguments.length; i !== n; ++i) {
          const object = arguments[i], uuid = object.uuid;
          let index = indicesByUUID[uuid];
          if (index === void 0) {
            index = nObjects++;
            indicesByUUID[uuid] = index;
            objects.push(object);
            for (let j = 0, m = nBindings; j !== m; ++j) {
              bindings[j].push(new PropertyBinding2(object, paths[j], parsedPaths[j]));
            }
          } else if (index < nCachedObjects) {
            knownObject = objects[index];
            const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
            indicesByUUID[lastCachedObject.uuid] = index;
            objects[index] = lastCachedObject;
            indicesByUUID[uuid] = firstActiveIndex;
            objects[firstActiveIndex] = object;
            for (let j = 0, m = nBindings; j !== m; ++j) {
              const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
              let binding = bindingsForPath[index];
              bindingsForPath[index] = lastCached;
              if (binding === void 0) {
                binding = new PropertyBinding2(object, paths[j], parsedPaths[j]);
              }
              bindingsForPath[firstActiveIndex] = binding;
            }
          } else if (objects[index] !== knownObject) {
            console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
          }
        }
        this.nCachedObjects_ = nCachedObjects;
      }
      remove() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_;
        for (let i = 0, n = arguments.length; i !== n; ++i) {
          const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
          if (index !== void 0 && index >= nCachedObjects) {
            const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
            indicesByUUID[firstActiveObject.uuid] = index;
            objects[index] = firstActiveObject;
            indicesByUUID[uuid] = lastCachedIndex;
            objects[lastCachedIndex] = object;
            for (let j = 0, m = nBindings; j !== m; ++j) {
              const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
              bindingsForPath[index] = firstActive;
              bindingsForPath[lastCachedIndex] = binding;
            }
          }
        }
        this.nCachedObjects_ = nCachedObjects;
      }
      // remove & forget
      uncache() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
        for (let i = 0, n = arguments.length; i !== n; ++i) {
          const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
          if (index !== void 0) {
            delete indicesByUUID[uuid];
            if (index < nCachedObjects) {
              const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
              indicesByUUID[lastCachedObject.uuid] = index;
              objects[index] = lastCachedObject;
              indicesByUUID[lastObject.uuid] = firstActiveIndex;
              objects[firstActiveIndex] = lastObject;
              objects.pop();
              for (let j = 0, m = nBindings; j !== m; ++j) {
                const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
                bindingsForPath[index] = lastCached;
                bindingsForPath[firstActiveIndex] = last;
                bindingsForPath.pop();
              }
            } else {
              const lastIndex = --nObjects, lastObject = objects[lastIndex];
              if (lastIndex > 0) {
                indicesByUUID[lastObject.uuid] = index;
              }
              objects[index] = lastObject;
              objects.pop();
              for (let j = 0, m = nBindings; j !== m; ++j) {
                const bindingsForPath = bindings[j];
                bindingsForPath[index] = bindingsForPath[lastIndex];
                bindingsForPath.pop();
              }
            }
          }
        }
        this.nCachedObjects_ = nCachedObjects;
      }
      // Internal interface used by befriended PropertyBinding.Composite:
      subscribe_(path, parsedPath) {
        const indicesByPath = this._bindingsIndicesByPath;
        let index = indicesByPath[path];
        const bindings = this._bindings;
        if (index !== void 0)
          return bindings[index];
        const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
        index = bindings.length;
        indicesByPath[path] = index;
        paths.push(path);
        parsedPaths.push(parsedPath);
        bindings.push(bindingsForPath);
        for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
          const object = objects[i];
          bindingsForPath[i] = new PropertyBinding2(object, path, parsedPath);
        }
        return bindingsForPath;
      }
      unsubscribe_(path) {
        const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
        if (index !== void 0) {
          const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
          indicesByPath[lastBindingsPath] = index;
          bindings[index] = lastBindings;
          bindings.pop();
          parsedPaths[index] = parsedPaths[lastBindingsIndex];
          parsedPaths.pop();
          paths[index] = paths[lastBindingsIndex];
          paths.pop();
        }
      }
    };
    var AnimationAction = class {
      constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
        this._mixer = mixer;
        this._clip = clip;
        this._localRoot = localRoot;
        this.blendMode = blendMode;
        const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
        const interpolantSettings = {
          endingStart: ZeroCurvatureEnding,
          endingEnd: ZeroCurvatureEnding
        };
        for (let i = 0; i !== nTracks; ++i) {
          const interpolant = tracks[i].createInterpolant(null);
          interpolants[i] = interpolant;
          interpolant.settings = interpolantSettings;
        }
        this._interpolantSettings = interpolantSettings;
        this._interpolants = interpolants;
        this._propertyBindings = new Array(nTracks);
        this._cacheIndex = null;
        this._byClipCacheIndex = null;
        this._timeScaleInterpolant = null;
        this._weightInterpolant = null;
        this.loop = LoopRepeat;
        this._loopCount = -1;
        this._startTime = null;
        this.time = 0;
        this.timeScale = 1;
        this._effectiveTimeScale = 1;
        this.weight = 1;
        this._effectiveWeight = 1;
        this.repetitions = Infinity;
        this.paused = false;
        this.enabled = true;
        this.clampWhenFinished = false;
        this.zeroSlopeAtStart = true;
        this.zeroSlopeAtEnd = true;
      }
      // State & Scheduling
      play() {
        this._mixer._activateAction(this);
        return this;
      }
      stop() {
        this._mixer._deactivateAction(this);
        return this.reset();
      }
      reset() {
        this.paused = false;
        this.enabled = true;
        this.time = 0;
        this._loopCount = -1;
        this._startTime = null;
        return this.stopFading().stopWarping();
      }
      isRunning() {
        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
      }
      // return true when play has been called
      isScheduled() {
        return this._mixer._isActiveAction(this);
      }
      startAt(time) {
        this._startTime = time;
        return this;
      }
      setLoop(mode, repetitions) {
        this.loop = mode;
        this.repetitions = repetitions;
        return this;
      }
      // Weight
      // set the weight stopping any scheduled fading
      // although .enabled = false yields an effective weight of zero, this
      // method does *not* change .enabled, because it would be confusing
      setEffectiveWeight(weight) {
        this.weight = weight;
        this._effectiveWeight = this.enabled ? weight : 0;
        return this.stopFading();
      }
      // return the weight considering fading and .enabled
      getEffectiveWeight() {
        return this._effectiveWeight;
      }
      fadeIn(duration) {
        return this._scheduleFading(duration, 0, 1);
      }
      fadeOut(duration) {
        return this._scheduleFading(duration, 1, 0);
      }
      crossFadeFrom(fadeOutAction, duration, warp) {
        fadeOutAction.fadeOut(duration);
        this.fadeIn(duration);
        if (warp) {
          const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
          fadeOutAction.warp(1, startEndRatio, duration);
          this.warp(endStartRatio, 1, duration);
        }
        return this;
      }
      crossFadeTo(fadeInAction, duration, warp) {
        return fadeInAction.crossFadeFrom(this, duration, warp);
      }
      stopFading() {
        const weightInterpolant = this._weightInterpolant;
        if (weightInterpolant !== null) {
          this._weightInterpolant = null;
          this._mixer._takeBackControlInterpolant(weightInterpolant);
        }
        return this;
      }
      // Time Scale Control
      // set the time scale stopping any scheduled warping
      // although .paused = true yields an effective time scale of zero, this
      // method does *not* change .paused, because it would be confusing
      setEffectiveTimeScale(timeScale) {
        this.timeScale = timeScale;
        this._effectiveTimeScale = this.paused ? 0 : timeScale;
        return this.stopWarping();
      }
      // return the time scale considering warping and .paused
      getEffectiveTimeScale() {
        return this._effectiveTimeScale;
      }
      setDuration(duration) {
        this.timeScale = this._clip.duration / duration;
        return this.stopWarping();
      }
      syncWith(action) {
        this.time = action.time;
        this.timeScale = action.timeScale;
        return this.stopWarping();
      }
      halt(duration) {
        return this.warp(this._effectiveTimeScale, 0, duration);
      }
      warp(startTimeScale, endTimeScale, duration) {
        const mixer = this._mixer, now2 = mixer.time, timeScale = this.timeScale;
        let interpolant = this._timeScaleInterpolant;
        if (interpolant === null) {
          interpolant = mixer._lendControlInterpolant();
          this._timeScaleInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now2;
        times[1] = now2 + duration;
        values[0] = startTimeScale / timeScale;
        values[1] = endTimeScale / timeScale;
        return this;
      }
      stopWarping() {
        const timeScaleInterpolant = this._timeScaleInterpolant;
        if (timeScaleInterpolant !== null) {
          this._timeScaleInterpolant = null;
          this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
        }
        return this;
      }
      // Object Accessors
      getMixer() {
        return this._mixer;
      }
      getClip() {
        return this._clip;
      }
      getRoot() {
        return this._localRoot || this._mixer._root;
      }
      // Interna
      _update(time, deltaTime, timeDirection, accuIndex) {
        if (!this.enabled) {
          this._updateWeight(time);
          return;
        }
        const startTime = this._startTime;
        if (startTime !== null) {
          const timeRunning = (time - startTime) * timeDirection;
          if (timeRunning < 0 || timeDirection === 0) {
            deltaTime = 0;
          } else {
            this._startTime = null;
            deltaTime = timeDirection * timeRunning;
          }
        }
        deltaTime *= this._updateTimeScale(time);
        const clipTime = this._updateTime(deltaTime);
        const weight = this._updateWeight(time);
        if (weight > 0) {
          const interpolants = this._interpolants;
          const propertyMixers = this._propertyBindings;
          switch (this.blendMode) {
            case AdditiveAnimationBlendMode:
              for (let j = 0, m = interpolants.length; j !== m; ++j) {
                interpolants[j].evaluate(clipTime);
                propertyMixers[j].accumulateAdditive(weight);
              }
              break;
            case NormalAnimationBlendMode:
            default:
              for (let j = 0, m = interpolants.length; j !== m; ++j) {
                interpolants[j].evaluate(clipTime);
                propertyMixers[j].accumulate(accuIndex, weight);
              }
          }
        }
      }
      _updateWeight(time) {
        let weight = 0;
        if (this.enabled) {
          weight = this.weight;
          const interpolant = this._weightInterpolant;
          if (interpolant !== null) {
            const interpolantValue = interpolant.evaluate(time)[0];
            weight *= interpolantValue;
            if (time > interpolant.parameterPositions[1]) {
              this.stopFading();
              if (interpolantValue === 0) {
                this.enabled = false;
              }
            }
          }
        }
        this._effectiveWeight = weight;
        return weight;
      }
      _updateTimeScale(time) {
        let timeScale = 0;
        if (!this.paused) {
          timeScale = this.timeScale;
          const interpolant = this._timeScaleInterpolant;
          if (interpolant !== null) {
            const interpolantValue = interpolant.evaluate(time)[0];
            timeScale *= interpolantValue;
            if (time > interpolant.parameterPositions[1]) {
              this.stopWarping();
              if (timeScale === 0) {
                this.paused = true;
              } else {
                this.timeScale = timeScale;
              }
            }
          }
        }
        this._effectiveTimeScale = timeScale;
        return timeScale;
      }
      _updateTime(deltaTime) {
        const duration = this._clip.duration;
        const loop = this.loop;
        let time = this.time + deltaTime;
        let loopCount = this._loopCount;
        const pingPong = loop === LoopPingPong;
        if (deltaTime === 0) {
          if (loopCount === -1)
            return time;
          return pingPong && (loopCount & 1) === 1 ? duration - time : time;
        }
        if (loop === LoopOnce) {
          if (loopCount === -1) {
            this._loopCount = 0;
            this._setEndings(true, true, false);
          }
          handle_stop: {
            if (time >= duration) {
              time = duration;
            } else if (time < 0) {
              time = 0;
            } else {
              this.time = time;
              break handle_stop;
            }
            if (this.clampWhenFinished)
              this.paused = true;
            else
              this.enabled = false;
            this.time = time;
            this._mixer.dispatchEvent({
              type: "finished",
              action: this,
              direction: deltaTime < 0 ? -1 : 1
            });
          }
        } else {
          if (loopCount === -1) {
            if (deltaTime >= 0) {
              loopCount = 0;
              this._setEndings(true, this.repetitions === 0, pingPong);
            } else {
              this._setEndings(this.repetitions === 0, true, pingPong);
            }
          }
          if (time >= duration || time < 0) {
            const loopDelta = Math.floor(time / duration);
            time -= duration * loopDelta;
            loopCount += Math.abs(loopDelta);
            const pending = this.repetitions - loopCount;
            if (pending <= 0) {
              if (this.clampWhenFinished)
                this.paused = true;
              else
                this.enabled = false;
              time = deltaTime > 0 ? duration : 0;
              this.time = time;
              this._mixer.dispatchEvent({
                type: "finished",
                action: this,
                direction: deltaTime > 0 ? 1 : -1
              });
            } else {
              if (pending === 1) {
                const atStart = deltaTime < 0;
                this._setEndings(atStart, !atStart, pingPong);
              } else {
                this._setEndings(false, false, pingPong);
              }
              this._loopCount = loopCount;
              this.time = time;
              this._mixer.dispatchEvent({
                type: "loop",
                action: this,
                loopDelta
              });
            }
          } else {
            this.time = time;
          }
          if (pingPong && (loopCount & 1) === 1) {
            return duration - time;
          }
        }
        return time;
      }
      _setEndings(atStart, atEnd, pingPong) {
        const settings = this._interpolantSettings;
        if (pingPong) {
          settings.endingStart = ZeroSlopeEnding;
          settings.endingEnd = ZeroSlopeEnding;
        } else {
          if (atStart) {
            settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
          } else {
            settings.endingStart = WrapAroundEnding;
          }
          if (atEnd) {
            settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
          } else {
            settings.endingEnd = WrapAroundEnding;
          }
        }
      }
      _scheduleFading(duration, weightNow, weightThen) {
        const mixer = this._mixer, now2 = mixer.time;
        let interpolant = this._weightInterpolant;
        if (interpolant === null) {
          interpolant = mixer._lendControlInterpolant();
          this._weightInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now2;
        values[0] = weightNow;
        times[1] = now2 + duration;
        values[1] = weightThen;
        return this;
      }
    };
    var _controlInterpolantsResultBuffer = new Float32Array(1);
    var AnimationMixer = class extends EventDispatcher2 {
      constructor(root) {
        super();
        this._root = root;
        this._initMemoryManager();
        this._accuIndex = 0;
        this.time = 0;
        this.timeScale = 1;
      }
      _bindAction(action, prototypeAction) {
        const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
        let bindingsByName = bindingsByRoot[rootUuid];
        if (bindingsByName === void 0) {
          bindingsByName = {};
          bindingsByRoot[rootUuid] = bindingsByName;
        }
        for (let i = 0; i !== nTracks; ++i) {
          const track = tracks[i], trackName = track.name;
          let binding = bindingsByName[trackName];
          if (binding !== void 0) {
            ++binding.referenceCount;
            bindings[i] = binding;
          } else {
            binding = bindings[i];
            if (binding !== void 0) {
              if (binding._cacheIndex === null) {
                ++binding.referenceCount;
                this._addInactiveBinding(binding, rootUuid, trackName);
              }
              continue;
            }
            const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
            binding = new PropertyMixer(
              PropertyBinding2.create(root, trackName, path),
              track.ValueTypeName,
              track.getValueSize()
            );
            ++binding.referenceCount;
            this._addInactiveBinding(binding, rootUuid, trackName);
            bindings[i] = binding;
          }
          interpolants[i].resultBuffer = binding.buffer;
        }
      }
      _activateAction(action) {
        if (!this._isActiveAction(action)) {
          if (action._cacheIndex === null) {
            const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
            this._bindAction(
              action,
              actionsForClip && actionsForClip.knownActions[0]
            );
            this._addInactiveAction(action, clipUuid, rootUuid);
          }
          const bindings = action._propertyBindings;
          for (let i = 0, n = bindings.length; i !== n; ++i) {
            const binding = bindings[i];
            if (binding.useCount++ === 0) {
              this._lendBinding(binding);
              binding.saveOriginalState();
            }
          }
          this._lendAction(action);
        }
      }
      _deactivateAction(action) {
        if (this._isActiveAction(action)) {
          const bindings = action._propertyBindings;
          for (let i = 0, n = bindings.length; i !== n; ++i) {
            const binding = bindings[i];
            if (--binding.useCount === 0) {
              binding.restoreOriginalState();
              this._takeBackBinding(binding);
            }
          }
          this._takeBackAction(action);
        }
      }
      // Memory manager
      _initMemoryManager() {
        this._actions = [];
        this._nActiveActions = 0;
        this._actionsByClip = {};
        this._bindings = [];
        this._nActiveBindings = 0;
        this._bindingsByRootAndName = {};
        this._controlInterpolants = [];
        this._nActiveControlInterpolants = 0;
        const scope = this;
        this.stats = {
          actions: {
            get total() {
              return scope._actions.length;
            },
            get inUse() {
              return scope._nActiveActions;
            }
          },
          bindings: {
            get total() {
              return scope._bindings.length;
            },
            get inUse() {
              return scope._nActiveBindings;
            }
          },
          controlInterpolants: {
            get total() {
              return scope._controlInterpolants.length;
            },
            get inUse() {
              return scope._nActiveControlInterpolants;
            }
          }
        };
      }
      // Memory management for AnimationAction objects
      _isActiveAction(action) {
        const index = action._cacheIndex;
        return index !== null && index < this._nActiveActions;
      }
      _addInactiveAction(action, clipUuid, rootUuid) {
        const actions = this._actions, actionsByClip = this._actionsByClip;
        let actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip === void 0) {
          actionsForClip = {
            knownActions: [action],
            actionByRoot: {}
          };
          action._byClipCacheIndex = 0;
          actionsByClip[clipUuid] = actionsForClip;
        } else {
          const knownActions = actionsForClip.knownActions;
          action._byClipCacheIndex = knownActions.length;
          knownActions.push(action);
        }
        action._cacheIndex = actions.length;
        actions.push(action);
        actionsForClip.actionByRoot[rootUuid] = action;
      }
      _removeInactiveAction(action) {
        const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
        lastInactiveAction._cacheIndex = cacheIndex;
        actions[cacheIndex] = lastInactiveAction;
        actions.pop();
        action._cacheIndex = null;
        const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
        lastKnownAction._byClipCacheIndex = byClipCacheIndex;
        knownActionsForClip[byClipCacheIndex] = lastKnownAction;
        knownActionsForClip.pop();
        action._byClipCacheIndex = null;
        const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
        delete actionByRoot[rootUuid];
        if (knownActionsForClip.length === 0) {
          delete actionsByClip[clipUuid];
        }
        this._removeInactiveBindingsForAction(action);
      }
      _removeInactiveBindingsForAction(action) {
        const bindings = action._propertyBindings;
        for (let i = 0, n = bindings.length; i !== n; ++i) {
          const binding = bindings[i];
          if (--binding.referenceCount === 0) {
            this._removeInactiveBinding(binding);
          }
        }
      }
      _lendAction(action) {
        const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
        action._cacheIndex = lastActiveIndex;
        actions[lastActiveIndex] = action;
        firstInactiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = firstInactiveAction;
      }
      _takeBackAction(action) {
        const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
        action._cacheIndex = firstInactiveIndex;
        actions[firstInactiveIndex] = action;
        lastActiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = lastActiveAction;
      }
      // Memory management for PropertyMixer objects
      _addInactiveBinding(binding, rootUuid, trackName) {
        const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
        let bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName === void 0) {
          bindingByName = {};
          bindingsByRoot[rootUuid] = bindingByName;
        }
        bindingByName[trackName] = binding;
        binding._cacheIndex = bindings.length;
        bindings.push(binding);
      }
      _removeInactiveBinding(binding) {
        const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
        lastInactiveBinding._cacheIndex = cacheIndex;
        bindings[cacheIndex] = lastInactiveBinding;
        bindings.pop();
        delete bindingByName[trackName];
        if (Object.keys(bindingByName).length === 0) {
          delete bindingsByRoot[rootUuid];
        }
      }
      _lendBinding(binding) {
        const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
        binding._cacheIndex = lastActiveIndex;
        bindings[lastActiveIndex] = binding;
        firstInactiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = firstInactiveBinding;
      }
      _takeBackBinding(binding) {
        const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
        binding._cacheIndex = firstInactiveIndex;
        bindings[firstInactiveIndex] = binding;
        lastActiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = lastActiveBinding;
      }
      // Memory management of Interpolants for weight and time scale
      _lendControlInterpolant() {
        const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
        let interpolant = interpolants[lastActiveIndex];
        if (interpolant === void 0) {
          interpolant = new LinearInterpolant(
            new Float32Array(2),
            new Float32Array(2),
            1,
            _controlInterpolantsResultBuffer
          );
          interpolant.__cacheIndex = lastActiveIndex;
          interpolants[lastActiveIndex] = interpolant;
        }
        return interpolant;
      }
      _takeBackControlInterpolant(interpolant) {
        const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
        interpolant.__cacheIndex = firstInactiveIndex;
        interpolants[firstInactiveIndex] = interpolant;
        lastActiveInterpolant.__cacheIndex = prevIndex;
        interpolants[prevIndex] = lastActiveInterpolant;
      }
      // return an action for a clip optionally using a custom root target
      // object (this method allocates a lot of dynamic memory in case a
      // previously unknown clip/root combination is specified)
      clipAction(clip, optionalRoot, blendMode) {
        const root = optionalRoot || this._root, rootUuid = root.uuid;
        let clipObject = typeof clip === "string" ? AnimationClip2.findByName(root, clip) : clip;
        const clipUuid = clipObject !== null ? clipObject.uuid : clip;
        const actionsForClip = this._actionsByClip[clipUuid];
        let prototypeAction = null;
        if (blendMode === void 0) {
          if (clipObject !== null) {
            blendMode = clipObject.blendMode;
          } else {
            blendMode = NormalAnimationBlendMode;
          }
        }
        if (actionsForClip !== void 0) {
          const existingAction = actionsForClip.actionByRoot[rootUuid];
          if (existingAction !== void 0 && existingAction.blendMode === blendMode) {
            return existingAction;
          }
          prototypeAction = actionsForClip.knownActions[0];
          if (clipObject === null)
            clipObject = prototypeAction._clip;
        }
        if (clipObject === null)
          return null;
        const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
        this._bindAction(newAction, prototypeAction);
        this._addInactiveAction(newAction, clipUuid, rootUuid);
        return newAction;
      }
      // get an existing action
      existingAction(clip, optionalRoot) {
        const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? AnimationClip2.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
        if (actionsForClip !== void 0) {
          return actionsForClip.actionByRoot[rootUuid] || null;
        }
        return null;
      }
      // deactivates all previously scheduled actions
      stopAllAction() {
        const actions = this._actions, nActions = this._nActiveActions;
        for (let i = nActions - 1; i >= 0; --i) {
          actions[i].stop();
        }
        return this;
      }
      // advance the time and update apply the animation
      update(deltaTime) {
        deltaTime *= this.timeScale;
        const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
        for (let i = 0; i !== nActions; ++i) {
          const action = actions[i];
          action._update(time, deltaTime, timeDirection, accuIndex);
        }
        const bindings = this._bindings, nBindings = this._nActiveBindings;
        for (let i = 0; i !== nBindings; ++i) {
          bindings[i].apply(accuIndex);
        }
        return this;
      }
      // Allows you to seek to a specific time in an animation.
      setTime(timeInSeconds) {
        this.time = 0;
        for (let i = 0; i < this._actions.length; i++) {
          this._actions[i].time = 0;
        }
        return this.update(timeInSeconds);
      }
      // return this mixer's root target object
      getRoot() {
        return this._root;
      }
      // free all resources specific to a particular clip
      uncacheClip(clip) {
        const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip !== void 0) {
          const actionsToRemove = actionsForClip.knownActions;
          for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
            const action = actionsToRemove[i];
            this._deactivateAction(action);
            const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
            action._cacheIndex = null;
            action._byClipCacheIndex = null;
            lastInactiveAction._cacheIndex = cacheIndex;
            actions[cacheIndex] = lastInactiveAction;
            actions.pop();
            this._removeInactiveBindingsForAction(action);
          }
          delete actionsByClip[clipUuid];
        }
      }
      // free all resources specific to a particular root target object
      uncacheRoot(root) {
        const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
        for (const clipUuid in actionsByClip) {
          const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
          if (action !== void 0) {
            this._deactivateAction(action);
            this._removeInactiveAction(action);
          }
        }
        const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName !== void 0) {
          for (const trackName in bindingByName) {
            const binding = bindingByName[trackName];
            binding.restoreOriginalState();
            this._removeInactiveBinding(binding);
          }
        }
      }
      // remove a targeted clip from the cache
      uncacheAction(clip, optionalRoot) {
        const action = this.existingAction(clip, optionalRoot);
        if (action !== null) {
          this._deactivateAction(action);
          this._removeInactiveAction(action);
        }
      }
    };
    var Uniform = class {
      constructor(value) {
        this.value = value;
      }
      clone() {
        return new Uniform(this.value.clone === void 0 ? this.value : this.value.clone());
      }
    };
    var id = 0;
    var UniformsGroup = class extends EventDispatcher2 {
      constructor() {
        super();
        this.isUniformsGroup = true;
        Object.defineProperty(this, "id", { value: id++ });
        this.name = "";
        this.usage = StaticDrawUsage;
        this.uniforms = [];
      }
      add(uniform) {
        this.uniforms.push(uniform);
        return this;
      }
      remove(uniform) {
        const index = this.uniforms.indexOf(uniform);
        if (index !== -1)
          this.uniforms.splice(index, 1);
        return this;
      }
      setName(name) {
        this.name = name;
        return this;
      }
      setUsage(value) {
        this.usage = value;
        return this;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
        return this;
      }
      copy(source) {
        this.name = source.name;
        this.usage = source.usage;
        const uniformsSource = source.uniforms;
        this.uniforms.length = 0;
        for (let i = 0, l = uniformsSource.length; i < l; i++) {
          this.uniforms.push(uniformsSource[i].clone());
        }
        return this;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    var InstancedInterleavedBuffer = class extends InterleavedBuffer {
      constructor(array, stride, meshPerAttribute = 1) {
        super(array, stride);
        this.isInstancedInterleavedBuffer = true;
        this.meshPerAttribute = meshPerAttribute;
      }
      copy(source) {
        super.copy(source);
        this.meshPerAttribute = source.meshPerAttribute;
        return this;
      }
      clone(data) {
        const ib = super.clone(data);
        ib.meshPerAttribute = this.meshPerAttribute;
        return ib;
      }
      toJSON(data) {
        const json = super.toJSON(data);
        json.isInstancedInterleavedBuffer = true;
        json.meshPerAttribute = this.meshPerAttribute;
        return json;
      }
    };
    var GLBufferAttribute = class {
      constructor(buffer, type, itemSize, elementSize, count) {
        this.isGLBufferAttribute = true;
        this.name = "";
        this.buffer = buffer;
        this.type = type;
        this.itemSize = itemSize;
        this.elementSize = elementSize;
        this.count = count;
        this.version = 0;
      }
      set needsUpdate(value) {
        if (value === true)
          this.version++;
      }
      setBuffer(buffer) {
        this.buffer = buffer;
        return this;
      }
      setType(type, elementSize) {
        this.type = type;
        this.elementSize = elementSize;
        return this;
      }
      setItemSize(itemSize) {
        this.itemSize = itemSize;
        return this;
      }
      setCount(count) {
        this.count = count;
        return this;
      }
    };
    var Raycaster = class {
      constructor(origin, direction, near = 0, far = Infinity) {
        this.ray = new Ray(origin, direction);
        this.near = near;
        this.far = far;
        this.camera = null;
        this.layers = new Layers();
        this.params = {
          Mesh: {},
          Line: { threshold: 1 },
          LOD: {},
          Points: { threshold: 1 },
          Sprite: {}
        };
      }
      set(origin, direction) {
        this.ray.set(origin, direction);
      }
      setFromCamera(coords, camera) {
        if (camera.isPerspectiveCamera) {
          this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
          this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
          this.camera = camera;
        } else if (camera.isOrthographicCamera) {
          this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);
          this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
          this.camera = camera;
        } else {
          console.error("THREE.Raycaster: Unsupported camera type: " + camera.type);
        }
      }
      intersectObject(object, recursive = true, intersects2 = []) {
        intersectObject(object, this, intersects2, recursive);
        intersects2.sort(ascSort);
        return intersects2;
      }
      intersectObjects(objects, recursive = true, intersects2 = []) {
        for (let i = 0, l = objects.length; i < l; i++) {
          intersectObject(objects[i], this, intersects2, recursive);
        }
        intersects2.sort(ascSort);
        return intersects2;
      }
    };
    function ascSort(a, b) {
      return a.distance - b.distance;
    }
    function intersectObject(object, raycaster, intersects2, recursive) {
      if (object.layers.test(raycaster.layers)) {
        object.raycast(raycaster, intersects2);
      }
      if (recursive === true) {
        const children = object.children;
        for (let i = 0, l = children.length; i < l; i++) {
          intersectObject(children[i], raycaster, intersects2, true);
        }
      }
    }
    var Spherical2 = class {
      constructor(radius = 1, phi = 0, theta = 0) {
        this.radius = radius;
        this.phi = phi;
        this.theta = theta;
        return this;
      }
      set(radius, phi, theta) {
        this.radius = radius;
        this.phi = phi;
        this.theta = theta;
        return this;
      }
      copy(other) {
        this.radius = other.radius;
        this.phi = other.phi;
        this.theta = other.theta;
        return this;
      }
      // restrict phi to be between EPS and PI-EPS
      makeSafe() {
        const EPS = 1e-6;
        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
        return this;
      }
      setFromVector3(v) {
        return this.setFromCartesianCoords(v.x, v.y, v.z);
      }
      setFromCartesianCoords(x, y, z) {
        this.radius = Math.sqrt(x * x + y * y + z * z);
        if (this.radius === 0) {
          this.theta = 0;
          this.phi = 0;
        } else {
          this.theta = Math.atan2(x, z);
          this.phi = Math.acos(clamp(y / this.radius, -1, 1));
        }
        return this;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    var Cylindrical = class {
      constructor(radius = 1, theta = 0, y = 0) {
        this.radius = radius;
        this.theta = theta;
        this.y = y;
        return this;
      }
      set(radius, theta, y) {
        this.radius = radius;
        this.theta = theta;
        this.y = y;
        return this;
      }
      copy(other) {
        this.radius = other.radius;
        this.theta = other.theta;
        this.y = other.y;
        return this;
      }
      setFromVector3(v) {
        return this.setFromCartesianCoords(v.x, v.y, v.z);
      }
      setFromCartesianCoords(x, y, z) {
        this.radius = Math.sqrt(x * x + z * z);
        this.theta = Math.atan2(x, z);
        this.y = y;
        return this;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    var _vector$4 = new Vector22();
    var Box2 = class {
      constructor(min = new Vector22(Infinity, Infinity), max2 = new Vector22(-Infinity, -Infinity)) {
        this.isBox2 = true;
        this.min = min;
        this.max = max2;
      }
      set(min, max2) {
        this.min.copy(min);
        this.max.copy(max2);
        return this;
      }
      setFromPoints(points) {
        this.makeEmpty();
        for (let i = 0, il = points.length; i < il; i++) {
          this.expandByPoint(points[i]);
        }
        return this;
      }
      setFromCenterAndSize(center, size) {
        const halfSize = _vector$4.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
      }
      makeEmpty() {
        this.min.x = this.min.y = Infinity;
        this.max.x = this.max.y = -Infinity;
        return this;
      }
      isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y;
      }
      getCenter(target) {
        return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
      }
      getSize(target) {
        return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
      }
      expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
      }
      expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
      }
      expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
      }
      containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
      }
      containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
      }
      getParameter(point, target) {
        return target.set(
          (point.x - this.min.x) / (this.max.x - this.min.x),
          (point.y - this.min.y) / (this.max.y - this.min.y)
        );
      }
      intersectsBox(box) {
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
      }
      clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
      }
      distanceToPoint(point) {
        return this.clampPoint(point, _vector$4).distanceTo(point);
      }
      intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        if (this.isEmpty())
          this.makeEmpty();
        return this;
      }
      union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
      }
      translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
      }
      equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
      }
    };
    var _startP = new Vector32();
    var _startEnd = new Vector32();
    var Line3 = class {
      constructor(start = new Vector32(), end = new Vector32()) {
        this.start = start;
        this.end = end;
      }
      set(start, end) {
        this.start.copy(start);
        this.end.copy(end);
        return this;
      }
      copy(line) {
        this.start.copy(line.start);
        this.end.copy(line.end);
        return this;
      }
      getCenter(target) {
        return target.addVectors(this.start, this.end).multiplyScalar(0.5);
      }
      delta(target) {
        return target.subVectors(this.end, this.start);
      }
      distanceSq() {
        return this.start.distanceToSquared(this.end);
      }
      distance() {
        return this.start.distanceTo(this.end);
      }
      at(t, target) {
        return this.delta(target).multiplyScalar(t).add(this.start);
      }
      closestPointToPointParameter(point, clampToLine) {
        _startP.subVectors(point, this.start);
        _startEnd.subVectors(this.end, this.start);
        const startEnd2 = _startEnd.dot(_startEnd);
        const startEnd_startP = _startEnd.dot(_startP);
        let t = startEnd_startP / startEnd2;
        if (clampToLine) {
          t = clamp(t, 0, 1);
        }
        return t;
      }
      closestPointToPoint(point, clampToLine, target) {
        const t = this.closestPointToPointParameter(point, clampToLine);
        return this.delta(target).multiplyScalar(t).add(this.start);
      }
      applyMatrix4(matrix) {
        this.start.applyMatrix4(matrix);
        this.end.applyMatrix4(matrix);
        return this;
      }
      equals(line) {
        return line.start.equals(this.start) && line.end.equals(this.end);
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    var _vector$3 = new Vector32();
    var SpotLightHelper = class extends Object3D2 {
      constructor(light, color) {
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "SpotLightHelper";
        const geometry = new BufferGeometry2();
        const positions = [
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          1,
          0,
          0,
          0,
          -1,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          -1,
          1
        ];
        for (let i = 0, j = 1, l = 32; i < l; i++, j++) {
          const p1 = i / l * Math.PI * 2;
          const p2 = j / l * Math.PI * 2;
          positions.push(
            Math.cos(p1),
            Math.sin(p1),
            1,
            Math.cos(p2),
            Math.sin(p2),
            1
          );
        }
        geometry.setAttribute("position", new Float32BufferAttribute2(positions, 3));
        const material = new LineBasicMaterial2({ fog: false, toneMapped: false });
        this.cone = new LineSegments2(geometry, material);
        this.add(this.cone);
        this.update();
      }
      dispose() {
        this.cone.geometry.dispose();
        this.cone.material.dispose();
      }
      update() {
        this.light.updateWorldMatrix(true, false);
        this.light.target.updateWorldMatrix(true, false);
        const coneLength = this.light.distance ? this.light.distance : 1e3;
        const coneWidth = coneLength * Math.tan(this.light.angle);
        this.cone.scale.set(coneWidth, coneWidth, coneLength);
        _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
        this.cone.lookAt(_vector$3);
        if (this.color !== void 0) {
          this.cone.material.color.set(this.color);
        } else {
          this.cone.material.color.copy(this.light.color);
        }
      }
    };
    var _vector$2 = new Vector32();
    var _boneMatrix = new Matrix42();
    var _matrixWorldInv = new Matrix42();
    var SkeletonHelper = class extends LineSegments2 {
      constructor(object) {
        const bones = getBoneList(object);
        const geometry = new BufferGeometry2();
        const vertices = [];
        const colors = [];
        const color1 = new Color2(0, 0, 1);
        const color2 = new Color2(0, 1, 0);
        for (let i = 0; i < bones.length; i++) {
          const bone = bones[i];
          if (bone.parent && bone.parent.isBone) {
            vertices.push(0, 0, 0);
            vertices.push(0, 0, 0);
            colors.push(color1.r, color1.g, color1.b);
            colors.push(color2.r, color2.g, color2.b);
          }
        }
        geometry.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute2(colors, 3));
        const material = new LineBasicMaterial2({ vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true });
        super(geometry, material);
        this.isSkeletonHelper = true;
        this.type = "SkeletonHelper";
        this.root = object;
        this.bones = bones;
        this.matrix = object.matrixWorld;
        this.matrixAutoUpdate = false;
      }
      updateMatrixWorld(force) {
        const bones = this.bones;
        const geometry = this.geometry;
        const position = geometry.getAttribute("position");
        _matrixWorldInv.copy(this.root.matrixWorld).invert();
        for (let i = 0, j = 0; i < bones.length; i++) {
          const bone = bones[i];
          if (bone.parent && bone.parent.isBone) {
            _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
            _vector$2.setFromMatrixPosition(_boneMatrix);
            position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);
            _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
            _vector$2.setFromMatrixPosition(_boneMatrix);
            position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
            j += 2;
          }
        }
        geometry.getAttribute("position").needsUpdate = true;
        super.updateMatrixWorld(force);
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
      }
    };
    function getBoneList(object) {
      const boneList = [];
      if (object.isBone === true) {
        boneList.push(object);
      }
      for (let i = 0; i < object.children.length; i++) {
        boneList.push.apply(boneList, getBoneList(object.children[i]));
      }
      return boneList;
    }
    var PointLightHelper = class extends Mesh2 {
      constructor(light, sphereSize, color) {
        const geometry = new SphereGeometry(sphereSize, 4, 2);
        const material = new MeshBasicMaterial2({ wireframe: true, fog: false, toneMapped: false });
        super(geometry, material);
        this.light = light;
        this.color = color;
        this.type = "PointLightHelper";
        this.matrix = this.light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.update();
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
      }
      update() {
        this.light.updateWorldMatrix(true, false);
        if (this.color !== void 0) {
          this.material.color.set(this.color);
        } else {
          this.material.color.copy(this.light.color);
        }
      }
    };
    var _vector$1 = new Vector32();
    var _color1 = new Color2();
    var _color22 = new Color2();
    var HemisphereLightHelper = class extends Object3D2 {
      constructor(light, size, color) {
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "HemisphereLightHelper";
        const geometry = new OctahedronGeometry(size);
        geometry.rotateY(Math.PI * 0.5);
        this.material = new MeshBasicMaterial2({ wireframe: true, fog: false, toneMapped: false });
        if (this.color === void 0)
          this.material.vertexColors = true;
        const position = geometry.getAttribute("position");
        const colors = new Float32Array(position.count * 3);
        geometry.setAttribute("color", new BufferAttribute(colors, 3));
        this.add(new Mesh2(geometry, this.material));
        this.update();
      }
      dispose() {
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
      }
      update() {
        const mesh = this.children[0];
        if (this.color !== void 0) {
          this.material.color.set(this.color);
        } else {
          const colors = mesh.geometry.getAttribute("color");
          _color1.copy(this.light.color);
          _color22.copy(this.light.groundColor);
          for (let i = 0, l = colors.count; i < l; i++) {
            const color = i < l / 2 ? _color1 : _color22;
            colors.setXYZ(i, color.r, color.g, color.b);
          }
          colors.needsUpdate = true;
        }
        this.light.updateWorldMatrix(true, false);
        mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
      }
    };
    var GridHelper = class extends LineSegments2 {
      constructor(size = 10, divisions = 10, color1 = 4473924, color2 = 8947848) {
        color1 = new Color2(color1);
        color2 = new Color2(color2);
        const center = divisions / 2;
        const step = size / divisions;
        const halfSize = size / 2;
        const vertices = [], colors = [];
        for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
          vertices.push(-halfSize, 0, k, halfSize, 0, k);
          vertices.push(k, 0, -halfSize, k, 0, halfSize);
          const color = i === center ? color1 : color2;
          color.toArray(colors, j);
          j += 3;
          color.toArray(colors, j);
          j += 3;
          color.toArray(colors, j);
          j += 3;
          color.toArray(colors, j);
          j += 3;
        }
        const geometry = new BufferGeometry2();
        geometry.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute2(colors, 3));
        const material = new LineBasicMaterial2({ vertexColors: true, toneMapped: false });
        super(geometry, material);
        this.type = "GridHelper";
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
      }
    };
    var PolarGridHelper = class extends LineSegments2 {
      constructor(radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 4473924, color2 = 8947848) {
        color1 = new Color2(color1);
        color2 = new Color2(color2);
        const vertices = [];
        const colors = [];
        if (sectors > 1) {
          for (let i = 0; i < sectors; i++) {
            const v = i / sectors * (Math.PI * 2);
            const x = Math.sin(v) * radius;
            const z = Math.cos(v) * radius;
            vertices.push(0, 0, 0);
            vertices.push(x, 0, z);
            const color = i & 1 ? color1 : color2;
            colors.push(color.r, color.g, color.b);
            colors.push(color.r, color.g, color.b);
          }
        }
        for (let i = 0; i < rings; i++) {
          const color = i & 1 ? color1 : color2;
          const r = radius - radius / rings * i;
          for (let j = 0; j < divisions; j++) {
            let v = j / divisions * (Math.PI * 2);
            let x = Math.sin(v) * r;
            let z = Math.cos(v) * r;
            vertices.push(x, 0, z);
            colors.push(color.r, color.g, color.b);
            v = (j + 1) / divisions * (Math.PI * 2);
            x = Math.sin(v) * r;
            z = Math.cos(v) * r;
            vertices.push(x, 0, z);
            colors.push(color.r, color.g, color.b);
          }
        }
        const geometry = new BufferGeometry2();
        geometry.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute2(colors, 3));
        const material = new LineBasicMaterial2({ vertexColors: true, toneMapped: false });
        super(geometry, material);
        this.type = "PolarGridHelper";
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
      }
    };
    var _v1 = new Vector32();
    var _v2 = new Vector32();
    var _v3 = new Vector32();
    var DirectionalLightHelper = class extends Object3D2 {
      constructor(light, size, color) {
        super();
        this.light = light;
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        this.type = "DirectionalLightHelper";
        if (size === void 0)
          size = 1;
        let geometry = new BufferGeometry2();
        geometry.setAttribute("position", new Float32BufferAttribute2([
          -size,
          size,
          0,
          size,
          size,
          0,
          size,
          -size,
          0,
          -size,
          -size,
          0,
          -size,
          size,
          0
        ], 3));
        const material = new LineBasicMaterial2({ fog: false, toneMapped: false });
        this.lightPlane = new Line2(geometry, material);
        this.add(this.lightPlane);
        geometry = new BufferGeometry2();
        geometry.setAttribute("position", new Float32BufferAttribute2([0, 0, 0, 0, 0, 1], 3));
        this.targetLine = new Line2(geometry, material);
        this.add(this.targetLine);
        this.update();
      }
      dispose() {
        this.lightPlane.geometry.dispose();
        this.lightPlane.material.dispose();
        this.targetLine.geometry.dispose();
        this.targetLine.material.dispose();
      }
      update() {
        this.light.updateWorldMatrix(true, false);
        this.light.target.updateWorldMatrix(true, false);
        _v1.setFromMatrixPosition(this.light.matrixWorld);
        _v2.setFromMatrixPosition(this.light.target.matrixWorld);
        _v3.subVectors(_v2, _v1);
        this.lightPlane.lookAt(_v2);
        if (this.color !== void 0) {
          this.lightPlane.material.color.set(this.color);
          this.targetLine.material.color.set(this.color);
        } else {
          this.lightPlane.material.color.copy(this.light.color);
          this.targetLine.material.color.copy(this.light.color);
        }
        this.targetLine.lookAt(_v2);
        this.targetLine.scale.z = _v3.length();
      }
    };
    var _vector = new Vector32();
    var _camera = new Camera();
    var CameraHelper = class extends LineSegments2 {
      constructor(camera) {
        const geometry = new BufferGeometry2();
        const material = new LineBasicMaterial2({ color: 16777215, vertexColors: true, toneMapped: false });
        const vertices = [];
        const colors = [];
        const pointMap = {};
        addLine("n1", "n2");
        addLine("n2", "n4");
        addLine("n4", "n3");
        addLine("n3", "n1");
        addLine("f1", "f2");
        addLine("f2", "f4");
        addLine("f4", "f3");
        addLine("f3", "f1");
        addLine("n1", "f1");
        addLine("n2", "f2");
        addLine("n3", "f3");
        addLine("n4", "f4");
        addLine("p", "n1");
        addLine("p", "n2");
        addLine("p", "n3");
        addLine("p", "n4");
        addLine("u1", "u2");
        addLine("u2", "u3");
        addLine("u3", "u1");
        addLine("c", "t");
        addLine("p", "c");
        addLine("cn1", "cn2");
        addLine("cn3", "cn4");
        addLine("cf1", "cf2");
        addLine("cf3", "cf4");
        function addLine(a, b) {
          addPoint(a);
          addPoint(b);
        }
        function addPoint(id2) {
          vertices.push(0, 0, 0);
          colors.push(0, 0, 0);
          if (pointMap[id2] === void 0) {
            pointMap[id2] = [];
          }
          pointMap[id2].push(vertices.length / 3 - 1);
        }
        geometry.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute2(colors, 3));
        super(geometry, material);
        this.type = "CameraHelper";
        this.camera = camera;
        if (this.camera.updateProjectionMatrix)
          this.camera.updateProjectionMatrix();
        this.matrix = camera.matrixWorld;
        this.matrixAutoUpdate = false;
        this.pointMap = pointMap;
        this.update();
        const colorFrustum = new Color2(16755200);
        const colorCone = new Color2(16711680);
        const colorUp = new Color2(43775);
        const colorTarget = new Color2(16777215);
        const colorCross = new Color2(3355443);
        this.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);
      }
      setColors(frustum, cone, up, target, cross) {
        const geometry = this.geometry;
        const colorAttribute = geometry.getAttribute("color");
        colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b);
        colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(25, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(27, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(29, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(31, cone.r, cone.g, cone.b);
        colorAttribute.setXYZ(32, up.r, up.g, up.b);
        colorAttribute.setXYZ(33, up.r, up.g, up.b);
        colorAttribute.setXYZ(34, up.r, up.g, up.b);
        colorAttribute.setXYZ(35, up.r, up.g, up.b);
        colorAttribute.setXYZ(36, up.r, up.g, up.b);
        colorAttribute.setXYZ(37, up.r, up.g, up.b);
        colorAttribute.setXYZ(38, target.r, target.g, target.b);
        colorAttribute.setXYZ(39, target.r, target.g, target.b);
        colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(41, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(43, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(45, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(47, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);
        colorAttribute.setXYZ(49, cross.r, cross.g, cross.b);
        colorAttribute.needsUpdate = true;
      }
      update() {
        const geometry = this.geometry;
        const pointMap = this.pointMap;
        const w = 1, h = 1;
        _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
        setPoint("c", pointMap, geometry, _camera, 0, 0, -1);
        setPoint("t", pointMap, geometry, _camera, 0, 0, 1);
        setPoint("n1", pointMap, geometry, _camera, -w, -h, -1);
        setPoint("n2", pointMap, geometry, _camera, w, -h, -1);
        setPoint("n3", pointMap, geometry, _camera, -w, h, -1);
        setPoint("n4", pointMap, geometry, _camera, w, h, -1);
        setPoint("f1", pointMap, geometry, _camera, -w, -h, 1);
        setPoint("f2", pointMap, geometry, _camera, w, -h, 1);
        setPoint("f3", pointMap, geometry, _camera, -w, h, 1);
        setPoint("f4", pointMap, geometry, _camera, w, h, 1);
        setPoint("u1", pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
        setPoint("u2", pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
        setPoint("u3", pointMap, geometry, _camera, 0, h * 2, -1);
        setPoint("cf1", pointMap, geometry, _camera, -w, 0, 1);
        setPoint("cf2", pointMap, geometry, _camera, w, 0, 1);
        setPoint("cf3", pointMap, geometry, _camera, 0, -h, 1);
        setPoint("cf4", pointMap, geometry, _camera, 0, h, 1);
        setPoint("cn1", pointMap, geometry, _camera, -w, 0, -1);
        setPoint("cn2", pointMap, geometry, _camera, w, 0, -1);
        setPoint("cn3", pointMap, geometry, _camera, 0, -h, -1);
        setPoint("cn4", pointMap, geometry, _camera, 0, h, -1);
        geometry.getAttribute("position").needsUpdate = true;
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
      }
    };
    function setPoint(point, pointMap, geometry, camera, x, y, z) {
      _vector.set(x, y, z).unproject(camera);
      const points = pointMap[point];
      if (points !== void 0) {
        const position = geometry.getAttribute("position");
        for (let i = 0, l = points.length; i < l; i++) {
          position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);
        }
      }
    }
    var _box = new Box3();
    var BoxHelper = class extends LineSegments2 {
      constructor(object, color = 16776960) {
        const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
        const positions = new Float32Array(8 * 3);
        const geometry = new BufferGeometry2();
        geometry.setIndex(new BufferAttribute(indices, 1));
        geometry.setAttribute("position", new BufferAttribute(positions, 3));
        super(geometry, new LineBasicMaterial2({ color, toneMapped: false }));
        this.object = object;
        this.type = "BoxHelper";
        this.matrixAutoUpdate = false;
        this.update();
      }
      update(object) {
        if (object !== void 0) {
          console.warn("THREE.BoxHelper: .update() has no longer arguments.");
        }
        if (this.object !== void 0) {
          _box.setFromObject(this.object);
        }
        if (_box.isEmpty())
          return;
        const min = _box.min;
        const max2 = _box.max;
        const position = this.geometry.attributes.position;
        const array = position.array;
        array[0] = max2.x;
        array[1] = max2.y;
        array[2] = max2.z;
        array[3] = min.x;
        array[4] = max2.y;
        array[5] = max2.z;
        array[6] = min.x;
        array[7] = min.y;
        array[8] = max2.z;
        array[9] = max2.x;
        array[10] = min.y;
        array[11] = max2.z;
        array[12] = max2.x;
        array[13] = max2.y;
        array[14] = min.z;
        array[15] = min.x;
        array[16] = max2.y;
        array[17] = min.z;
        array[18] = min.x;
        array[19] = min.y;
        array[20] = min.z;
        array[21] = max2.x;
        array[22] = min.y;
        array[23] = min.z;
        position.needsUpdate = true;
        this.geometry.computeBoundingSphere();
      }
      setFromObject(object) {
        this.object = object;
        this.update();
        return this;
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.object = source.object;
        return this;
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
      }
    };
    var Box3Helper = class extends LineSegments2 {
      constructor(box, color = 16776960) {
        const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
        const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
        const geometry = new BufferGeometry2();
        geometry.setIndex(new BufferAttribute(indices, 1));
        geometry.setAttribute("position", new Float32BufferAttribute2(positions, 3));
        super(geometry, new LineBasicMaterial2({ color, toneMapped: false }));
        this.box = box;
        this.type = "Box3Helper";
        this.geometry.computeBoundingSphere();
      }
      updateMatrixWorld(force) {
        const box = this.box;
        if (box.isEmpty())
          return;
        box.getCenter(this.position);
        box.getSize(this.scale);
        this.scale.multiplyScalar(0.5);
        super.updateMatrixWorld(force);
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
      }
    };
    var PlaneHelper = class extends Line2 {
      constructor(plane, size = 1, hex = 16776960) {
        const color = hex;
        const positions = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];
        const geometry = new BufferGeometry2();
        geometry.setAttribute("position", new Float32BufferAttribute2(positions, 3));
        geometry.computeBoundingSphere();
        super(geometry, new LineBasicMaterial2({ color, toneMapped: false }));
        this.type = "PlaneHelper";
        this.plane = plane;
        this.size = size;
        const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];
        const geometry2 = new BufferGeometry2();
        geometry2.setAttribute("position", new Float32BufferAttribute2(positions2, 3));
        geometry2.computeBoundingSphere();
        this.add(new Mesh2(geometry2, new MeshBasicMaterial2({ color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false })));
      }
      updateMatrixWorld(force) {
        this.position.set(0, 0, 0);
        this.scale.set(0.5 * this.size, 0.5 * this.size, 1);
        this.lookAt(this.plane.normal);
        this.translateZ(-this.plane.constant);
        super.updateMatrixWorld(force);
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
      }
    };
    var _axis = new Vector32();
    var _lineGeometry;
    var _coneGeometry;
    var ArrowHelper = class extends Object3D2 {
      // dir is assumed to be normalized
      constructor(dir = new Vector32(0, 0, 1), origin = new Vector32(0, 0, 0), length = 1, color = 16776960, headLength = length * 0.2, headWidth = headLength * 0.2) {
        super();
        this.type = "ArrowHelper";
        if (_lineGeometry === void 0) {
          _lineGeometry = new BufferGeometry2();
          _lineGeometry.setAttribute("position", new Float32BufferAttribute2([0, 0, 0, 0, 1, 0], 3));
          _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);
          _coneGeometry.translate(0, -0.5, 0);
        }
        this.position.copy(origin);
        this.line = new Line2(_lineGeometry, new LineBasicMaterial2({ color, toneMapped: false }));
        this.line.matrixAutoUpdate = false;
        this.add(this.line);
        this.cone = new Mesh2(_coneGeometry, new MeshBasicMaterial2({ color, toneMapped: false }));
        this.cone.matrixAutoUpdate = false;
        this.add(this.cone);
        this.setDirection(dir);
        this.setLength(length, headLength, headWidth);
      }
      setDirection(dir) {
        if (dir.y > 0.99999) {
          this.quaternion.set(0, 0, 0, 1);
        } else if (dir.y < -0.99999) {
          this.quaternion.set(1, 0, 0, 0);
        } else {
          _axis.set(dir.z, 0, -dir.x).normalize();
          const radians = Math.acos(dir.y);
          this.quaternion.setFromAxisAngle(_axis, radians);
        }
      }
      setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
        this.line.scale.set(1, Math.max(1e-4, length - headLength), 1);
        this.line.updateMatrix();
        this.cone.scale.set(headWidth, headLength, headWidth);
        this.cone.position.y = length;
        this.cone.updateMatrix();
      }
      setColor(color) {
        this.line.material.color.set(color);
        this.cone.material.color.set(color);
      }
      copy(source) {
        super.copy(source, false);
        this.line.copy(source.line);
        this.cone.copy(source.cone);
        return this;
      }
      dispose() {
        this.line.geometry.dispose();
        this.line.material.dispose();
        this.cone.geometry.dispose();
        this.cone.material.dispose();
      }
    };
    var AxesHelper = class extends LineSegments2 {
      constructor(size = 1) {
        const vertices = [
          0,
          0,
          0,
          size,
          0,
          0,
          0,
          0,
          0,
          0,
          size,
          0,
          0,
          0,
          0,
          0,
          0,
          size
        ];
        const colors = [
          1,
          0,
          0,
          1,
          0.6,
          0,
          0,
          1,
          0,
          0.6,
          1,
          0,
          0,
          0,
          1,
          0,
          0.6,
          1
        ];
        const geometry = new BufferGeometry2();
        geometry.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
        geometry.setAttribute("color", new Float32BufferAttribute2(colors, 3));
        const material = new LineBasicMaterial2({ vertexColors: true, toneMapped: false });
        super(geometry, material);
        this.type = "AxesHelper";
      }
      setColors(xAxisColor, yAxisColor, zAxisColor) {
        const color = new Color2();
        const array = this.geometry.attributes.color.array;
        color.set(xAxisColor);
        color.toArray(array, 0);
        color.toArray(array, 3);
        color.set(yAxisColor);
        color.toArray(array, 6);
        color.toArray(array, 9);
        color.set(zAxisColor);
        color.toArray(array, 12);
        color.toArray(array, 15);
        this.geometry.attributes.color.needsUpdate = true;
        return this;
      }
      dispose() {
        this.geometry.dispose();
        this.material.dispose();
      }
    };
    var ShapePath = class {
      constructor() {
        this.type = "ShapePath";
        this.color = new Color2();
        this.subPaths = [];
        this.currentPath = null;
      }
      moveTo(x, y) {
        this.currentPath = new Path();
        this.subPaths.push(this.currentPath);
        this.currentPath.moveTo(x, y);
        return this;
      }
      lineTo(x, y) {
        this.currentPath.lineTo(x, y);
        return this;
      }
      quadraticCurveTo(aCPx, aCPy, aX, aY) {
        this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
        return this;
      }
      bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
        return this;
      }
      splineThru(pts) {
        this.currentPath.splineThru(pts);
        return this;
      }
      toShapes(isCCW) {
        function toShapesNoHoles(inSubpaths) {
          const shapes2 = [];
          for (let i = 0, l = inSubpaths.length; i < l; i++) {
            const tmpPath2 = inSubpaths[i];
            const tmpShape2 = new Shape();
            tmpShape2.curves = tmpPath2.curves;
            shapes2.push(tmpShape2);
          }
          return shapes2;
        }
        function isPointInsidePolygon(inPt, inPolygon) {
          const polyLen = inPolygon.length;
          let inside = false;
          for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
            let edgeLowPt = inPolygon[p];
            let edgeHighPt = inPolygon[q];
            let edgeDx = edgeHighPt.x - edgeLowPt.x;
            let edgeDy = edgeHighPt.y - edgeLowPt.y;
            if (Math.abs(edgeDy) > Number.EPSILON) {
              if (edgeDy < 0) {
                edgeLowPt = inPolygon[q];
                edgeDx = -edgeDx;
                edgeHighPt = inPolygon[p];
                edgeDy = -edgeDy;
              }
              if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y)
                continue;
              if (inPt.y === edgeLowPt.y) {
                if (inPt.x === edgeLowPt.x)
                  return true;
              } else {
                const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                if (perpEdge === 0)
                  return true;
                if (perpEdge < 0)
                  continue;
                inside = !inside;
              }
            } else {
              if (inPt.y !== edgeLowPt.y)
                continue;
              if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)
                return true;
            }
          }
          return inside;
        }
        const isClockWise = ShapeUtils.isClockWise;
        const subPaths = this.subPaths;
        if (subPaths.length === 0)
          return [];
        let solid, tmpPath, tmpShape;
        const shapes = [];
        if (subPaths.length === 1) {
          tmpPath = subPaths[0];
          tmpShape = new Shape();
          tmpShape.curves = tmpPath.curves;
          shapes.push(tmpShape);
          return shapes;
        }
        let holesFirst = !isClockWise(subPaths[0].getPoints());
        holesFirst = isCCW ? !holesFirst : holesFirst;
        const betterShapeHoles = [];
        const newShapes = [];
        let newShapeHoles = [];
        let mainIdx = 0;
        let tmpPoints;
        newShapes[mainIdx] = void 0;
        newShapeHoles[mainIdx] = [];
        for (let i = 0, l = subPaths.length; i < l; i++) {
          tmpPath = subPaths[i];
          tmpPoints = tmpPath.getPoints();
          solid = isClockWise(tmpPoints);
          solid = isCCW ? !solid : solid;
          if (solid) {
            if (!holesFirst && newShapes[mainIdx])
              mainIdx++;
            newShapes[mainIdx] = { s: new Shape(), p: tmpPoints };
            newShapes[mainIdx].s.curves = tmpPath.curves;
            if (holesFirst)
              mainIdx++;
            newShapeHoles[mainIdx] = [];
          } else {
            newShapeHoles[mainIdx].push({ h: tmpPath, p: tmpPoints[0] });
          }
        }
        if (!newShapes[0])
          return toShapesNoHoles(subPaths);
        if (newShapes.length > 1) {
          let ambiguous = false;
          let toChange = 0;
          for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
            betterShapeHoles[sIdx] = [];
          }
          for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
            const sho = newShapeHoles[sIdx];
            for (let hIdx = 0; hIdx < sho.length; hIdx++) {
              const ho = sho[hIdx];
              let hole_unassigned = true;
              for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
                if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                  if (sIdx !== s2Idx)
                    toChange++;
                  if (hole_unassigned) {
                    hole_unassigned = false;
                    betterShapeHoles[s2Idx].push(ho);
                  } else {
                    ambiguous = true;
                  }
                }
              }
              if (hole_unassigned) {
                betterShapeHoles[sIdx].push(ho);
              }
            }
          }
          if (toChange > 0 && ambiguous === false) {
            newShapeHoles = betterShapeHoles;
          }
        }
        let tmpHoles;
        for (let i = 0, il = newShapes.length; i < il; i++) {
          tmpShape = newShapes[i].s;
          shapes.push(tmpShape);
          tmpHoles = newShapeHoles[i];
          for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
            tmpShape.holes.push(tmpHoles[j].h);
          }
        }
        return shapes;
      }
    };
    var BoxBufferGeometry = class extends BoxGeometry {
      // @deprecated, r144
      constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {
        console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.");
        super(width, height, depth, widthSegments, heightSegments, depthSegments);
      }
    };
    var CapsuleBufferGeometry = class extends CapsuleGeometry {
      // @deprecated, r144
      constructor(radius, length, capSegments, radialSegments) {
        console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.");
        super(radius, length, capSegments, radialSegments);
      }
    };
    var CircleBufferGeometry = class extends CircleGeometry {
      // @deprecated, r144
      constructor(radius, segments, thetaStart, thetaLength) {
        console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.");
        super(radius, segments, thetaStart, thetaLength);
      }
    };
    var ConeBufferGeometry = class extends ConeGeometry {
      // @deprecated, r144
      constructor(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
        console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.");
        super(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
      }
    };
    var CylinderBufferGeometry = class extends CylinderGeometry {
      // @deprecated, r144
      constructor(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
        console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.");
        super(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
      }
    };
    var DodecahedronBufferGeometry = class extends DodecahedronGeometry {
      // @deprecated, r144
      constructor(radius, detail) {
        console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.");
        super(radius, detail);
      }
    };
    var ExtrudeBufferGeometry = class extends ExtrudeGeometry {
      // @deprecated, r144
      constructor(shapes, options) {
        console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.");
        super(shapes, options);
      }
    };
    var IcosahedronBufferGeometry = class extends IcosahedronGeometry {
      // @deprecated, r144
      constructor(radius, detail) {
        console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.");
        super(radius, detail);
      }
    };
    var LatheBufferGeometry = class extends LatheGeometry {
      // @deprecated, r144
      constructor(points, segments, phiStart, phiLength) {
        console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.");
        super(points, segments, phiStart, phiLength);
      }
    };
    var OctahedronBufferGeometry = class extends OctahedronGeometry {
      // @deprecated, r144
      constructor(radius, detail) {
        console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.");
        super(radius, detail);
      }
    };
    var PlaneBufferGeometry = class extends PlaneGeometry {
      // @deprecated, r144
      constructor(width, height, widthSegments, heightSegments) {
        console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.");
        super(width, height, widthSegments, heightSegments);
      }
    };
    var PolyhedronBufferGeometry = class extends PolyhedronGeometry {
      // @deprecated, r144
      constructor(vertices, indices, radius, detail) {
        console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.");
        super(vertices, indices, radius, detail);
      }
    };
    var RingBufferGeometry = class extends RingGeometry {
      // @deprecated, r144
      constructor(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
        console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.");
        super(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength);
      }
    };
    var ShapeBufferGeometry = class extends ShapeGeometry {
      // @deprecated, r144
      constructor(shapes, curveSegments) {
        console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.");
        super(shapes, curveSegments);
      }
    };
    var SphereBufferGeometry = class extends SphereGeometry {
      // @deprecated, r144
      constructor(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
        console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.");
        super(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);
      }
    };
    var TetrahedronBufferGeometry = class extends TetrahedronGeometry {
      // @deprecated, r144
      constructor(radius, detail) {
        console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.");
        super(radius, detail);
      }
    };
    var TorusBufferGeometry = class extends TorusGeometry {
      // @deprecated, r144
      constructor(radius, tube, radialSegments, tubularSegments, arc) {
        console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.");
        super(radius, tube, radialSegments, tubularSegments, arc);
      }
    };
    var TorusKnotBufferGeometry = class extends TorusKnotGeometry {
      // @deprecated, r144
      constructor(radius, tube, tubularSegments, radialSegments, p, q) {
        console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.");
        super(radius, tube, tubularSegments, radialSegments, p, q);
      }
    };
    var TubeBufferGeometry = class extends TubeGeometry {
      // @deprecated, r144
      constructor(path, tubularSegments, radius, radialSegments, closed) {
        console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.");
        super(path, tubularSegments, radius, radialSegments, closed);
      }
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
        revision: REVISION
      } }));
    }
    if (typeof window !== "undefined") {
      if (window.__THREE__) {
        console.warn("WARNING: Multiple instances of Three.js being imported.");
      } else {
        window.__THREE__ = REVISION;
      }
    }
    exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
    exports.AddEquation = AddEquation;
    exports.AddOperation = AddOperation;
    exports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;
    exports.AdditiveBlending = AdditiveBlending;
    exports.AlphaFormat = AlphaFormat;
    exports.AlwaysDepth = AlwaysDepth;
    exports.AlwaysStencilFunc = AlwaysStencilFunc;
    exports.AmbientLight = AmbientLight2;
    exports.AmbientLightProbe = AmbientLightProbe;
    exports.AnimationAction = AnimationAction;
    exports.AnimationClip = AnimationClip2;
    exports.AnimationLoader = AnimationLoader;
    exports.AnimationMixer = AnimationMixer;
    exports.AnimationObjectGroup = AnimationObjectGroup;
    exports.AnimationUtils = AnimationUtils;
    exports.ArcCurve = ArcCurve;
    exports.ArrayCamera = ArrayCamera;
    exports.ArrowHelper = ArrowHelper;
    exports.Audio = Audio;
    exports.AudioAnalyser = AudioAnalyser;
    exports.AudioContext = AudioContext;
    exports.AudioListener = AudioListener;
    exports.AudioLoader = AudioLoader;
    exports.AxesHelper = AxesHelper;
    exports.BackSide = BackSide;
    exports.BasicDepthPacking = BasicDepthPacking;
    exports.BasicShadowMap = BasicShadowMap;
    exports.Bone = Bone2;
    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
    exports.Box2 = Box2;
    exports.Box3 = Box3;
    exports.Box3Helper = Box3Helper;
    exports.BoxBufferGeometry = BoxBufferGeometry;
    exports.BoxGeometry = BoxGeometry;
    exports.BoxHelper = BoxHelper;
    exports.BufferAttribute = BufferAttribute;
    exports.BufferGeometry = BufferGeometry2;
    exports.BufferGeometryLoader = BufferGeometryLoader;
    exports.ByteType = ByteType;
    exports.Cache = Cache;
    exports.Camera = Camera;
    exports.CameraHelper = CameraHelper;
    exports.CanvasTexture = CanvasTexture;
    exports.CapsuleBufferGeometry = CapsuleBufferGeometry;
    exports.CapsuleGeometry = CapsuleGeometry;
    exports.CatmullRomCurve3 = CatmullRomCurve3;
    exports.CineonToneMapping = CineonToneMapping;
    exports.CircleBufferGeometry = CircleBufferGeometry;
    exports.CircleGeometry = CircleGeometry;
    exports.ClampToEdgeWrapping = ClampToEdgeWrapping2;
    exports.Clock = Clock;
    exports.Color = Color2;
    exports.ColorKeyframeTrack = ColorKeyframeTrack;
    exports.ColorManagement = ColorManagement;
    exports.CompressedArrayTexture = CompressedArrayTexture;
    exports.CompressedTexture = CompressedTexture;
    exports.CompressedTextureLoader = CompressedTextureLoader;
    exports.ConeBufferGeometry = ConeBufferGeometry;
    exports.ConeGeometry = ConeGeometry;
    exports.CubeCamera = CubeCamera;
    exports.CubeReflectionMapping = CubeReflectionMapping;
    exports.CubeRefractionMapping = CubeRefractionMapping;
    exports.CubeTexture = CubeTexture;
    exports.CubeTextureLoader = CubeTextureLoader;
    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
    exports.CubicBezierCurve = CubicBezierCurve;
    exports.CubicBezierCurve3 = CubicBezierCurve3;
    exports.CubicInterpolant = CubicInterpolant;
    exports.CullFaceBack = CullFaceBack;
    exports.CullFaceFront = CullFaceFront;
    exports.CullFaceFrontBack = CullFaceFrontBack;
    exports.CullFaceNone = CullFaceNone;
    exports.Curve = Curve2;
    exports.CurvePath = CurvePath;
    exports.CustomBlending = CustomBlending;
    exports.CustomToneMapping = CustomToneMapping;
    exports.CylinderBufferGeometry = CylinderBufferGeometry;
    exports.CylinderGeometry = CylinderGeometry;
    exports.Cylindrical = Cylindrical;
    exports.Data3DTexture = Data3DTexture;
    exports.DataArrayTexture = DataArrayTexture;
    exports.DataTexture = DataTexture;
    exports.DataTextureLoader = DataTextureLoader2;
    exports.DataUtils = DataUtils;
    exports.DecrementStencilOp = DecrementStencilOp;
    exports.DecrementWrapStencilOp = DecrementWrapStencilOp;
    exports.DefaultLoadingManager = DefaultLoadingManager;
    exports.DepthFormat = DepthFormat;
    exports.DepthStencilFormat = DepthStencilFormat;
    exports.DepthTexture = DepthTexture;
    exports.DirectionalLight = DirectionalLight2;
    exports.DirectionalLightHelper = DirectionalLightHelper;
    exports.DiscreteInterpolant = DiscreteInterpolant;
    exports.DisplayP3ColorSpace = DisplayP3ColorSpace;
    exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
    exports.DodecahedronGeometry = DodecahedronGeometry;
    exports.DoubleSide = DoubleSide2;
    exports.DstAlphaFactor = DstAlphaFactor;
    exports.DstColorFactor = DstColorFactor;
    exports.DynamicCopyUsage = DynamicCopyUsage;
    exports.DynamicDrawUsage = DynamicDrawUsage;
    exports.DynamicReadUsage = DynamicReadUsage;
    exports.EdgesGeometry = EdgesGeometry;
    exports.EllipseCurve = EllipseCurve;
    exports.EqualDepth = EqualDepth;
    exports.EqualStencilFunc = EqualStencilFunc;
    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping2;
    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
    exports.Euler = Euler2;
    exports.EventDispatcher = EventDispatcher2;
    exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
    exports.ExtrudeGeometry = ExtrudeGeometry;
    exports.FileLoader = FileLoader2;
    exports.Float16BufferAttribute = Float16BufferAttribute;
    exports.Float32BufferAttribute = Float32BufferAttribute2;
    exports.Float64BufferAttribute = Float64BufferAttribute;
    exports.FloatType = FloatType;
    exports.Fog = Fog;
    exports.FogExp2 = FogExp2;
    exports.FramebufferTexture = FramebufferTexture;
    exports.FrontSide = FrontSide2;
    exports.Frustum = Frustum;
    exports.GLBufferAttribute = GLBufferAttribute;
    exports.GLSL1 = GLSL1;
    exports.GLSL3 = GLSL3;
    exports.GreaterDepth = GreaterDepth;
    exports.GreaterEqualDepth = GreaterEqualDepth;
    exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;
    exports.GreaterStencilFunc = GreaterStencilFunc;
    exports.GridHelper = GridHelper;
    exports.Group = Group2;
    exports.HalfFloatType = HalfFloatType;
    exports.HemisphereLight = HemisphereLight;
    exports.HemisphereLightHelper = HemisphereLightHelper;
    exports.HemisphereLightProbe = HemisphereLightProbe;
    exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
    exports.IcosahedronGeometry = IcosahedronGeometry;
    exports.ImageBitmapLoader = ImageBitmapLoader;
    exports.ImageLoader = ImageLoader;
    exports.ImageUtils = ImageUtils;
    exports.IncrementStencilOp = IncrementStencilOp;
    exports.IncrementWrapStencilOp = IncrementWrapStencilOp;
    exports.InstancedBufferAttribute = InstancedBufferAttribute;
    exports.InstancedBufferGeometry = InstancedBufferGeometry;
    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
    exports.InstancedMesh = InstancedMesh;
    exports.Int16BufferAttribute = Int16BufferAttribute;
    exports.Int32BufferAttribute = Int32BufferAttribute;
    exports.Int8BufferAttribute = Int8BufferAttribute;
    exports.IntType = IntType;
    exports.InterleavedBuffer = InterleavedBuffer;
    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
    exports.Interpolant = Interpolant;
    exports.InterpolateDiscrete = InterpolateDiscrete;
    exports.InterpolateLinear = InterpolateLinear;
    exports.InterpolateSmooth = InterpolateSmooth;
    exports.InvertStencilOp = InvertStencilOp;
    exports.KeepStencilOp = KeepStencilOp;
    exports.KeyframeTrack = KeyframeTrack;
    exports.LOD = LOD;
    exports.LatheBufferGeometry = LatheBufferGeometry;
    exports.LatheGeometry = LatheGeometry;
    exports.Layers = Layers;
    exports.LessDepth = LessDepth;
    exports.LessEqualDepth = LessEqualDepth;
    exports.LessEqualStencilFunc = LessEqualStencilFunc;
    exports.LessStencilFunc = LessStencilFunc;
    exports.Light = Light;
    exports.LightProbe = LightProbe;
    exports.Line = Line2;
    exports.Line3 = Line3;
    exports.LineBasicMaterial = LineBasicMaterial2;
    exports.LineCurve = LineCurve;
    exports.LineCurve3 = LineCurve3;
    exports.LineDashedMaterial = LineDashedMaterial;
    exports.LineLoop = LineLoop;
    exports.LineSegments = LineSegments2;
    exports.LinearEncoding = LinearEncoding;
    exports.LinearFilter = LinearFilter;
    exports.LinearInterpolant = LinearInterpolant;
    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
    exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter2;
    exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;
    exports.LinearSRGBColorSpace = LinearSRGBColorSpace;
    exports.LinearToneMapping = LinearToneMapping;
    exports.Loader = Loader2;
    exports.LoaderUtils = LoaderUtils2;
    exports.LoadingManager = LoadingManager;
    exports.LoopOnce = LoopOnce;
    exports.LoopPingPong = LoopPingPong;
    exports.LoopRepeat = LoopRepeat;
    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
    exports.LuminanceFormat = LuminanceFormat;
    exports.MOUSE = MOUSE2;
    exports.Material = Material2;
    exports.MaterialLoader = MaterialLoader;
    exports.MathUtils = MathUtils2;
    exports.Matrix3 = Matrix32;
    exports.Matrix4 = Matrix42;
    exports.MaxEquation = MaxEquation;
    exports.Mesh = Mesh2;
    exports.MeshBasicMaterial = MeshBasicMaterial2;
    exports.MeshDepthMaterial = MeshDepthMaterial;
    exports.MeshDistanceMaterial = MeshDistanceMaterial;
    exports.MeshLambertMaterial = MeshLambertMaterial2;
    exports.MeshMatcapMaterial = MeshMatcapMaterial;
    exports.MeshNormalMaterial = MeshNormalMaterial;
    exports.MeshPhongMaterial = MeshPhongMaterial2;
    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
    exports.MeshStandardMaterial = MeshStandardMaterial;
    exports.MeshToonMaterial = MeshToonMaterial;
    exports.MinEquation = MinEquation;
    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
    exports.MixOperation = MixOperation;
    exports.MultiplyBlending = MultiplyBlending;
    exports.MultiplyOperation = MultiplyOperation;
    exports.NearestFilter = NearestFilter;
    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
    exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;
    exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;
    exports.NeverDepth = NeverDepth;
    exports.NeverStencilFunc = NeverStencilFunc;
    exports.NoBlending = NoBlending;
    exports.NoColorSpace = NoColorSpace;
    exports.NoToneMapping = NoToneMapping;
    exports.NormalAnimationBlendMode = NormalAnimationBlendMode;
    exports.NormalBlending = NormalBlending;
    exports.NotEqualDepth = NotEqualDepth;
    exports.NotEqualStencilFunc = NotEqualStencilFunc;
    exports.NumberKeyframeTrack = NumberKeyframeTrack2;
    exports.Object3D = Object3D2;
    exports.ObjectLoader = ObjectLoader;
    exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
    exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
    exports.OctahedronGeometry = OctahedronGeometry;
    exports.OneFactor = OneFactor;
    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
    exports.OrthographicCamera = OrthographicCamera2;
    exports.PCFShadowMap = PCFShadowMap;
    exports.PCFSoftShadowMap = PCFSoftShadowMap;
    exports.PMREMGenerator = PMREMGenerator;
    exports.Path = Path;
    exports.PerspectiveCamera = PerspectiveCamera2;
    exports.Plane = Plane;
    exports.PlaneBufferGeometry = PlaneBufferGeometry;
    exports.PlaneGeometry = PlaneGeometry;
    exports.PlaneHelper = PlaneHelper;
    exports.PointLight = PointLight2;
    exports.PointLightHelper = PointLightHelper;
    exports.Points = Points2;
    exports.PointsMaterial = PointsMaterial2;
    exports.PolarGridHelper = PolarGridHelper;
    exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
    exports.PolyhedronGeometry = PolyhedronGeometry;
    exports.PositionalAudio = PositionalAudio;
    exports.PropertyBinding = PropertyBinding2;
    exports.PropertyMixer = PropertyMixer;
    exports.QuadraticBezierCurve = QuadraticBezierCurve;
    exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
    exports.Quaternion = Quaternion2;
    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack2;
    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
    exports.RED_GREEN_RGTC2_Format = RED_GREEN_RGTC2_Format;
    exports.RED_RGTC1_Format = RED_RGTC1_Format;
    exports.REVISION = REVISION;
    exports.RGBADepthPacking = RGBADepthPacking;
    exports.RGBAFormat = RGBAFormat;
    exports.RGBAIntegerFormat = RGBAIntegerFormat;
    exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
    exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
    exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
    exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
    exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
    exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
    exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
    exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
    exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
    exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
    exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
    exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
    exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
    exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
    exports.RGBA_BPTC_Format = RGBA_BPTC_Format;
    exports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;
    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
    exports.RGB_ETC1_Format = RGB_ETC1_Format;
    exports.RGB_ETC2_Format = RGB_ETC2_Format;
    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
    exports.RGFormat = RGFormat;
    exports.RGIntegerFormat = RGIntegerFormat;
    exports.RawShaderMaterial = RawShaderMaterial;
    exports.Ray = Ray;
    exports.Raycaster = Raycaster;
    exports.RectAreaLight = RectAreaLight;
    exports.RedFormat = RedFormat;
    exports.RedIntegerFormat = RedIntegerFormat;
    exports.ReinhardToneMapping = ReinhardToneMapping;
    exports.RepeatWrapping = RepeatWrapping2;
    exports.ReplaceStencilOp = ReplaceStencilOp;
    exports.ReverseSubtractEquation = ReverseSubtractEquation;
    exports.RingBufferGeometry = RingBufferGeometry;
    exports.RingGeometry = RingGeometry;
    exports.SIGNED_RED_GREEN_RGTC2_Format = SIGNED_RED_GREEN_RGTC2_Format;
    exports.SIGNED_RED_RGTC1_Format = SIGNED_RED_RGTC1_Format;
    exports.SRGBColorSpace = SRGBColorSpace;
    exports.Scene = Scene2;
    exports.ShaderChunk = ShaderChunk;
    exports.ShaderLib = ShaderLib;
    exports.ShaderMaterial = ShaderMaterial;
    exports.ShadowMaterial = ShadowMaterial;
    exports.Shape = Shape;
    exports.ShapeBufferGeometry = ShapeBufferGeometry;
    exports.ShapeGeometry = ShapeGeometry;
    exports.ShapePath = ShapePath;
    exports.ShapeUtils = ShapeUtils;
    exports.ShortType = ShortType;
    exports.Skeleton = Skeleton2;
    exports.SkeletonHelper = SkeletonHelper;
    exports.SkinnedMesh = SkinnedMesh2;
    exports.Source = Source;
    exports.Sphere = Sphere;
    exports.SphereBufferGeometry = SphereBufferGeometry;
    exports.SphereGeometry = SphereGeometry;
    exports.Spherical = Spherical2;
    exports.SphericalHarmonics3 = SphericalHarmonics3;
    exports.SplineCurve = SplineCurve;
    exports.SpotLight = SpotLight2;
    exports.SpotLightHelper = SpotLightHelper;
    exports.Sprite = Sprite;
    exports.SpriteMaterial = SpriteMaterial;
    exports.SrcAlphaFactor = SrcAlphaFactor;
    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
    exports.SrcColorFactor = SrcColorFactor;
    exports.StaticCopyUsage = StaticCopyUsage;
    exports.StaticDrawUsage = StaticDrawUsage;
    exports.StaticReadUsage = StaticReadUsage;
    exports.StereoCamera = StereoCamera;
    exports.StreamCopyUsage = StreamCopyUsage;
    exports.StreamDrawUsage = StreamDrawUsage;
    exports.StreamReadUsage = StreamReadUsage;
    exports.StringKeyframeTrack = StringKeyframeTrack;
    exports.SubtractEquation = SubtractEquation;
    exports.SubtractiveBlending = SubtractiveBlending;
    exports.TOUCH = TOUCH2;
    exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
    exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
    exports.TetrahedronGeometry = TetrahedronGeometry;
    exports.Texture = Texture2;
    exports.TextureLoader = TextureLoader2;
    exports.TorusBufferGeometry = TorusBufferGeometry;
    exports.TorusGeometry = TorusGeometry;
    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
    exports.TorusKnotGeometry = TorusKnotGeometry;
    exports.Triangle = Triangle;
    exports.TriangleFanDrawMode = TriangleFanDrawMode;
    exports.TriangleStripDrawMode = TriangleStripDrawMode;
    exports.TrianglesDrawMode = TrianglesDrawMode;
    exports.TubeBufferGeometry = TubeBufferGeometry;
    exports.TubeGeometry = TubeGeometry;
    exports.TwoPassDoubleSide = TwoPassDoubleSide;
    exports.UVMapping = UVMapping;
    exports.Uint16BufferAttribute = Uint16BufferAttribute2;
    exports.Uint32BufferAttribute = Uint32BufferAttribute;
    exports.Uint8BufferAttribute = Uint8BufferAttribute;
    exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
    exports.Uniform = Uniform;
    exports.UniformsGroup = UniformsGroup;
    exports.UniformsLib = UniformsLib;
    exports.UniformsUtils = UniformsUtils;
    exports.UnsignedByteType = UnsignedByteType;
    exports.UnsignedInt248Type = UnsignedInt248Type;
    exports.UnsignedIntType = UnsignedIntType;
    exports.UnsignedShort4444Type = UnsignedShort4444Type;
    exports.UnsignedShort5551Type = UnsignedShort5551Type;
    exports.UnsignedShortType = UnsignedShortType;
    exports.VSMShadowMap = VSMShadowMap;
    exports.Vector2 = Vector22;
    exports.Vector3 = Vector32;
    exports.Vector4 = Vector42;
    exports.VectorKeyframeTrack = VectorKeyframeTrack2;
    exports.VideoTexture = VideoTexture;
    exports.WebGL1Renderer = WebGL1Renderer;
    exports.WebGL3DRenderTarget = WebGL3DRenderTarget;
    exports.WebGLArrayRenderTarget = WebGLArrayRenderTarget;
    exports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;
    exports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;
    exports.WebGLRenderTarget = WebGLRenderTarget;
    exports.WebGLRenderer = WebGLRenderer;
    exports.WebGLUtils = WebGLUtils;
    exports.WireframeGeometry = WireframeGeometry;
    exports.WrapAroundEnding = WrapAroundEnding;
    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
    exports.ZeroFactor = ZeroFactor;
    exports.ZeroSlopeEnding = ZeroSlopeEnding;
    exports.ZeroStencilOp = ZeroStencilOp;
    exports._SRGBAFormat = _SRGBAFormat;
    exports.sRGBEncoding = sRGBEncoding2;
  }
});

// node_modules/three/examples/jsm/controls/OrbitControls.js
var OrbitControls_exports = {};
__export(OrbitControls_exports, {
  OrbitControls: () => OrbitControls
});
var _changeEvent, _startEvent, _endEvent, OrbitControls;
var init_OrbitControls = __esm({
  "node_modules/three/examples/jsm/controls/OrbitControls.js"() {
    init_three_module();
    _changeEvent = { type: "change" };
    _startEvent = { type: "start" };
    _endEvent = { type: "end" };
    OrbitControls = class extends EventDispatcher {
      constructor(object, domElement) {
        super();
        this.object = object;
        this.domElement = domElement;
        this.domElement.style.touchAction = "none";
        this.enabled = true;
        this.target = new Vector3();
        this.minDistance = 0;
        this.maxDistance = Infinity;
        this.minZoom = 0;
        this.maxZoom = Infinity;
        this.minPolarAngle = 0;
        this.maxPolarAngle = Math.PI;
        this.minAzimuthAngle = -Infinity;
        this.maxAzimuthAngle = Infinity;
        this.enableDamping = false;
        this.dampingFactor = 0.05;
        this.enableZoom = true;
        this.zoomSpeed = 1;
        this.enableRotate = true;
        this.rotateSpeed = 1;
        this.enablePan = true;
        this.panSpeed = 1;
        this.screenSpacePanning = true;
        this.keyPanSpeed = 7;
        this.autoRotate = false;
        this.autoRotateSpeed = 2;
        this.keys = { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" };
        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };
        this.target0 = this.target.clone();
        this.position0 = this.object.position.clone();
        this.zoom0 = this.object.zoom;
        this._domElementKeyEvents = null;
        this.getPolarAngle = function() {
          return spherical.phi;
        };
        this.getAzimuthalAngle = function() {
          return spherical.theta;
        };
        this.getDistance = function() {
          return this.object.position.distanceTo(this.target);
        };
        this.listenToKeyEvents = function(domElement2) {
          domElement2.addEventListener("keydown", onKeyDown);
          this._domElementKeyEvents = domElement2;
        };
        this.stopListenToKeyEvents = function() {
          this._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
          this._domElementKeyEvents = null;
        };
        this.saveState = function() {
          scope.target0.copy(scope.target);
          scope.position0.copy(scope.object.position);
          scope.zoom0 = scope.object.zoom;
        };
        this.reset = function() {
          scope.target.copy(scope.target0);
          scope.object.position.copy(scope.position0);
          scope.object.zoom = scope.zoom0;
          scope.object.updateProjectionMatrix();
          scope.dispatchEvent(_changeEvent);
          scope.update();
          state = STATE.NONE;
        };
        this.update = function() {
          const offset = new Vector3();
          const quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));
          const quatInverse = quat.clone().invert();
          const lastPosition = new Vector3();
          const lastQuaternion = new Quaternion();
          const twoPI = 2 * Math.PI;
          return function update() {
            const position = scope.object.position;
            offset.copy(position).sub(scope.target);
            offset.applyQuaternion(quat);
            spherical.setFromVector3(offset);
            if (scope.autoRotate && state === STATE.NONE) {
              rotateLeft(getAutoRotationAngle());
            }
            if (scope.enableDamping) {
              spherical.theta += sphericalDelta.theta * scope.dampingFactor;
              spherical.phi += sphericalDelta.phi * scope.dampingFactor;
            } else {
              spherical.theta += sphericalDelta.theta;
              spherical.phi += sphericalDelta.phi;
            }
            let min = scope.minAzimuthAngle;
            let max2 = scope.maxAzimuthAngle;
            if (isFinite(min) && isFinite(max2)) {
              if (min < -Math.PI)
                min += twoPI;
              else if (min > Math.PI)
                min -= twoPI;
              if (max2 < -Math.PI)
                max2 += twoPI;
              else if (max2 > Math.PI)
                max2 -= twoPI;
              if (min <= max2) {
                spherical.theta = Math.max(min, Math.min(max2, spherical.theta));
              } else {
                spherical.theta = spherical.theta > (min + max2) / 2 ? Math.max(min, spherical.theta) : Math.min(max2, spherical.theta);
              }
            }
            spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
            spherical.makeSafe();
            spherical.radius *= scale;
            spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));
            if (scope.enableDamping === true) {
              scope.target.addScaledVector(panOffset, scope.dampingFactor);
            } else {
              scope.target.add(panOffset);
            }
            offset.setFromSpherical(spherical);
            offset.applyQuaternion(quatInverse);
            position.copy(scope.target).add(offset);
            scope.object.lookAt(scope.target);
            if (scope.enableDamping === true) {
              sphericalDelta.theta *= 1 - scope.dampingFactor;
              sphericalDelta.phi *= 1 - scope.dampingFactor;
              panOffset.multiplyScalar(1 - scope.dampingFactor);
            } else {
              sphericalDelta.set(0, 0, 0);
              panOffset.set(0, 0, 0);
            }
            scale = 1;
            if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {
              scope.dispatchEvent(_changeEvent);
              lastPosition.copy(scope.object.position);
              lastQuaternion.copy(scope.object.quaternion);
              zoomChanged = false;
              return true;
            }
            return false;
          };
        }();
        this.dispose = function() {
          scope.domElement.removeEventListener("contextmenu", onContextMenu);
          scope.domElement.removeEventListener("pointerdown", onPointerDown);
          scope.domElement.removeEventListener("pointercancel", onPointerUp);
          scope.domElement.removeEventListener("wheel", onMouseWheel);
          scope.domElement.removeEventListener("pointermove", onPointerMove);
          scope.domElement.removeEventListener("pointerup", onPointerUp);
          if (scope._domElementKeyEvents !== null) {
            scope._domElementKeyEvents.removeEventListener("keydown", onKeyDown);
            scope._domElementKeyEvents = null;
          }
        };
        const scope = this;
        const STATE = {
          NONE: -1,
          ROTATE: 0,
          DOLLY: 1,
          PAN: 2,
          TOUCH_ROTATE: 3,
          TOUCH_PAN: 4,
          TOUCH_DOLLY_PAN: 5,
          TOUCH_DOLLY_ROTATE: 6
        };
        let state = STATE.NONE;
        const EPS = 1e-6;
        const spherical = new Spherical();
        const sphericalDelta = new Spherical();
        let scale = 1;
        const panOffset = new Vector3();
        let zoomChanged = false;
        const rotateStart = new Vector2();
        const rotateEnd = new Vector2();
        const rotateDelta = new Vector2();
        const panStart = new Vector2();
        const panEnd = new Vector2();
        const panDelta = new Vector2();
        const dollyStart = new Vector2();
        const dollyEnd = new Vector2();
        const dollyDelta = new Vector2();
        const pointers = [];
        const pointerPositions = {};
        function getAutoRotationAngle() {
          return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
        }
        function getZoomScale() {
          return Math.pow(0.95, scope.zoomSpeed);
        }
        function rotateLeft(angle) {
          sphericalDelta.theta -= angle;
        }
        function rotateUp(angle) {
          sphericalDelta.phi -= angle;
        }
        const panLeft = function() {
          const v = new Vector3();
          return function panLeft2(distance, objectMatrix) {
            v.setFromMatrixColumn(objectMatrix, 0);
            v.multiplyScalar(-distance);
            panOffset.add(v);
          };
        }();
        const panUp = function() {
          const v = new Vector3();
          return function panUp2(distance, objectMatrix) {
            if (scope.screenSpacePanning === true) {
              v.setFromMatrixColumn(objectMatrix, 1);
            } else {
              v.setFromMatrixColumn(objectMatrix, 0);
              v.crossVectors(scope.object.up, v);
            }
            v.multiplyScalar(distance);
            panOffset.add(v);
          };
        }();
        const pan = function() {
          const offset = new Vector3();
          return function pan2(deltaX, deltaY) {
            const element = scope.domElement;
            if (scope.object.isPerspectiveCamera) {
              const position = scope.object.position;
              offset.copy(position).sub(scope.target);
              let targetDistance = offset.length();
              targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);
              panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
              panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
            } else if (scope.object.isOrthographicCamera) {
              panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
              panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
            } else {
              console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
              scope.enablePan = false;
            }
          };
        }();
        function dollyOut(dollyScale) {
          if (scope.object.isPerspectiveCamera) {
            scale /= dollyScale;
          } else if (scope.object.isOrthographicCamera) {
            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
            scope.object.updateProjectionMatrix();
            zoomChanged = true;
          } else {
            console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
            scope.enableZoom = false;
          }
        }
        function dollyIn(dollyScale) {
          if (scope.object.isPerspectiveCamera) {
            scale *= dollyScale;
          } else if (scope.object.isOrthographicCamera) {
            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
            scope.object.updateProjectionMatrix();
            zoomChanged = true;
          } else {
            console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
            scope.enableZoom = false;
          }
        }
        function handleMouseDownRotate(event) {
          rotateStart.set(event.clientX, event.clientY);
        }
        function handleMouseDownDolly(event) {
          dollyStart.set(event.clientX, event.clientY);
        }
        function handleMouseDownPan(event) {
          panStart.set(event.clientX, event.clientY);
        }
        function handleMouseMoveRotate(event) {
          rotateEnd.set(event.clientX, event.clientY);
          rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
          const element = scope.domElement;
          rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
          rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
          rotateStart.copy(rotateEnd);
          scope.update();
        }
        function handleMouseMoveDolly(event) {
          dollyEnd.set(event.clientX, event.clientY);
          dollyDelta.subVectors(dollyEnd, dollyStart);
          if (dollyDelta.y > 0) {
            dollyOut(getZoomScale());
          } else if (dollyDelta.y < 0) {
            dollyIn(getZoomScale());
          }
          dollyStart.copy(dollyEnd);
          scope.update();
        }
        function handleMouseMovePan(event) {
          panEnd.set(event.clientX, event.clientY);
          panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
          pan(panDelta.x, panDelta.y);
          panStart.copy(panEnd);
          scope.update();
        }
        function handleMouseWheel(event) {
          if (event.deltaY < 0) {
            dollyIn(getZoomScale());
          } else if (event.deltaY > 0) {
            dollyOut(getZoomScale());
          }
          scope.update();
        }
        function handleKeyDown(event) {
          let needsUpdate = false;
          switch (event.code) {
            case scope.keys.UP:
              if (event.ctrlKey || event.metaKey || event.shiftKey) {
                rotateUp(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
              } else {
                pan(0, scope.keyPanSpeed);
              }
              needsUpdate = true;
              break;
            case scope.keys.BOTTOM:
              if (event.ctrlKey || event.metaKey || event.shiftKey) {
                rotateUp(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
              } else {
                pan(0, -scope.keyPanSpeed);
              }
              needsUpdate = true;
              break;
            case scope.keys.LEFT:
              if (event.ctrlKey || event.metaKey || event.shiftKey) {
                rotateLeft(2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
              } else {
                pan(scope.keyPanSpeed, 0);
              }
              needsUpdate = true;
              break;
            case scope.keys.RIGHT:
              if (event.ctrlKey || event.metaKey || event.shiftKey) {
                rotateLeft(-2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight);
              } else {
                pan(-scope.keyPanSpeed, 0);
              }
              needsUpdate = true;
              break;
          }
          if (needsUpdate) {
            event.preventDefault();
            scope.update();
          }
        }
        function handleTouchStartRotate() {
          if (pointers.length === 1) {
            rotateStart.set(pointers[0].pageX, pointers[0].pageY);
          } else {
            const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
            const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
            rotateStart.set(x, y);
          }
        }
        function handleTouchStartPan() {
          if (pointers.length === 1) {
            panStart.set(pointers[0].pageX, pointers[0].pageY);
          } else {
            const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
            const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
            panStart.set(x, y);
          }
        }
        function handleTouchStartDolly() {
          const dx = pointers[0].pageX - pointers[1].pageX;
          const dy = pointers[0].pageY - pointers[1].pageY;
          const distance = Math.sqrt(dx * dx + dy * dy);
          dollyStart.set(0, distance);
        }
        function handleTouchStartDollyPan() {
          if (scope.enableZoom)
            handleTouchStartDolly();
          if (scope.enablePan)
            handleTouchStartPan();
        }
        function handleTouchStartDollyRotate() {
          if (scope.enableZoom)
            handleTouchStartDolly();
          if (scope.enableRotate)
            handleTouchStartRotate();
        }
        function handleTouchMoveRotate(event) {
          if (pointers.length == 1) {
            rotateEnd.set(event.pageX, event.pageY);
          } else {
            const position = getSecondPointerPosition(event);
            const x = 0.5 * (event.pageX + position.x);
            const y = 0.5 * (event.pageY + position.y);
            rotateEnd.set(x, y);
          }
          rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
          const element = scope.domElement;
          rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);
          rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
          rotateStart.copy(rotateEnd);
        }
        function handleTouchMovePan(event) {
          if (pointers.length === 1) {
            panEnd.set(event.pageX, event.pageY);
          } else {
            const position = getSecondPointerPosition(event);
            const x = 0.5 * (event.pageX + position.x);
            const y = 0.5 * (event.pageY + position.y);
            panEnd.set(x, y);
          }
          panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
          pan(panDelta.x, panDelta.y);
          panStart.copy(panEnd);
        }
        function handleTouchMoveDolly(event) {
          const position = getSecondPointerPosition(event);
          const dx = event.pageX - position.x;
          const dy = event.pageY - position.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          dollyEnd.set(0, distance);
          dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
          dollyOut(dollyDelta.y);
          dollyStart.copy(dollyEnd);
        }
        function handleTouchMoveDollyPan(event) {
          if (scope.enableZoom)
            handleTouchMoveDolly(event);
          if (scope.enablePan)
            handleTouchMovePan(event);
        }
        function handleTouchMoveDollyRotate(event) {
          if (scope.enableZoom)
            handleTouchMoveDolly(event);
          if (scope.enableRotate)
            handleTouchMoveRotate(event);
        }
        function onPointerDown(event) {
          if (scope.enabled === false)
            return;
          if (pointers.length === 0) {
            scope.domElement.setPointerCapture(event.pointerId);
            scope.domElement.addEventListener("pointermove", onPointerMove);
            scope.domElement.addEventListener("pointerup", onPointerUp);
          }
          addPointer(event);
          if (event.pointerType === "touch") {
            onTouchStart(event);
          } else {
            onMouseDown(event);
          }
        }
        function onPointerMove(event) {
          if (scope.enabled === false)
            return;
          if (event.pointerType === "touch") {
            onTouchMove(event);
          } else {
            onMouseMove(event);
          }
        }
        function onPointerUp(event) {
          removePointer(event);
          if (pointers.length === 0) {
            scope.domElement.releasePointerCapture(event.pointerId);
            scope.domElement.removeEventListener("pointermove", onPointerMove);
            scope.domElement.removeEventListener("pointerup", onPointerUp);
          }
          scope.dispatchEvent(_endEvent);
          state = STATE.NONE;
        }
        function onMouseDown(event) {
          let mouseAction;
          switch (event.button) {
            case 0:
              mouseAction = scope.mouseButtons.LEFT;
              break;
            case 1:
              mouseAction = scope.mouseButtons.MIDDLE;
              break;
            case 2:
              mouseAction = scope.mouseButtons.RIGHT;
              break;
            default:
              mouseAction = -1;
          }
          switch (mouseAction) {
            case MOUSE.DOLLY:
              if (scope.enableZoom === false)
                return;
              handleMouseDownDolly(event);
              state = STATE.DOLLY;
              break;
            case MOUSE.ROTATE:
              if (event.ctrlKey || event.metaKey || event.shiftKey) {
                if (scope.enablePan === false)
                  return;
                handleMouseDownPan(event);
                state = STATE.PAN;
              } else {
                if (scope.enableRotate === false)
                  return;
                handleMouseDownRotate(event);
                state = STATE.ROTATE;
              }
              break;
            case MOUSE.PAN:
              if (event.ctrlKey || event.metaKey || event.shiftKey) {
                if (scope.enableRotate === false)
                  return;
                handleMouseDownRotate(event);
                state = STATE.ROTATE;
              } else {
                if (scope.enablePan === false)
                  return;
                handleMouseDownPan(event);
                state = STATE.PAN;
              }
              break;
            default:
              state = STATE.NONE;
          }
          if (state !== STATE.NONE) {
            scope.dispatchEvent(_startEvent);
          }
        }
        function onMouseMove(event) {
          switch (state) {
            case STATE.ROTATE:
              if (scope.enableRotate === false)
                return;
              handleMouseMoveRotate(event);
              break;
            case STATE.DOLLY:
              if (scope.enableZoom === false)
                return;
              handleMouseMoveDolly(event);
              break;
            case STATE.PAN:
              if (scope.enablePan === false)
                return;
              handleMouseMovePan(event);
              break;
          }
        }
        function onMouseWheel(event) {
          if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE)
            return;
          event.preventDefault();
          scope.dispatchEvent(_startEvent);
          handleMouseWheel(event);
          scope.dispatchEvent(_endEvent);
        }
        function onKeyDown(event) {
          if (scope.enabled === false || scope.enablePan === false)
            return;
          handleKeyDown(event);
        }
        function onTouchStart(event) {
          trackPointer(event);
          switch (pointers.length) {
            case 1:
              switch (scope.touches.ONE) {
                case TOUCH.ROTATE:
                  if (scope.enableRotate === false)
                    return;
                  handleTouchStartRotate();
                  state = STATE.TOUCH_ROTATE;
                  break;
                case TOUCH.PAN:
                  if (scope.enablePan === false)
                    return;
                  handleTouchStartPan();
                  state = STATE.TOUCH_PAN;
                  break;
                default:
                  state = STATE.NONE;
              }
              break;
            case 2:
              switch (scope.touches.TWO) {
                case TOUCH.DOLLY_PAN:
                  if (scope.enableZoom === false && scope.enablePan === false)
                    return;
                  handleTouchStartDollyPan();
                  state = STATE.TOUCH_DOLLY_PAN;
                  break;
                case TOUCH.DOLLY_ROTATE:
                  if (scope.enableZoom === false && scope.enableRotate === false)
                    return;
                  handleTouchStartDollyRotate();
                  state = STATE.TOUCH_DOLLY_ROTATE;
                  break;
                default:
                  state = STATE.NONE;
              }
              break;
            default:
              state = STATE.NONE;
          }
          if (state !== STATE.NONE) {
            scope.dispatchEvent(_startEvent);
          }
        }
        function onTouchMove(event) {
          trackPointer(event);
          switch (state) {
            case STATE.TOUCH_ROTATE:
              if (scope.enableRotate === false)
                return;
              handleTouchMoveRotate(event);
              scope.update();
              break;
            case STATE.TOUCH_PAN:
              if (scope.enablePan === false)
                return;
              handleTouchMovePan(event);
              scope.update();
              break;
            case STATE.TOUCH_DOLLY_PAN:
              if (scope.enableZoom === false && scope.enablePan === false)
                return;
              handleTouchMoveDollyPan(event);
              scope.update();
              break;
            case STATE.TOUCH_DOLLY_ROTATE:
              if (scope.enableZoom === false && scope.enableRotate === false)
                return;
              handleTouchMoveDollyRotate(event);
              scope.update();
              break;
            default:
              state = STATE.NONE;
          }
        }
        function onContextMenu(event) {
          if (scope.enabled === false)
            return;
          event.preventDefault();
        }
        function addPointer(event) {
          pointers.push(event);
        }
        function removePointer(event) {
          delete pointerPositions[event.pointerId];
          for (let i = 0; i < pointers.length; i++) {
            if (pointers[i].pointerId == event.pointerId) {
              pointers.splice(i, 1);
              return;
            }
          }
        }
        function trackPointer(event) {
          let position = pointerPositions[event.pointerId];
          if (position === void 0) {
            position = new Vector2();
            pointerPositions[event.pointerId] = position;
          }
          position.set(event.pageX, event.pageY);
        }
        function getSecondPointerPosition(event) {
          const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
          return pointerPositions[pointer.pointerId];
        }
        scope.domElement.addEventListener("contextmenu", onContextMenu);
        scope.domElement.addEventListener("pointerdown", onPointerDown);
        scope.domElement.addEventListener("pointercancel", onPointerUp);
        scope.domElement.addEventListener("wheel", onMouseWheel, { passive: false });
        this.update();
      }
    };
  }
});

// node_modules/three/examples/jsm/loaders/OBJLoader.js
var OBJLoader_exports = {};
__export(OBJLoader_exports, {
  OBJLoader: () => OBJLoader
});
function ParserState() {
  const state = {
    objects: [],
    object: {},
    vertices: [],
    normals: [],
    colors: [],
    uvs: [],
    materials: {},
    materialLibraries: [],
    startObject: function(name, fromDeclaration) {
      if (this.object && this.object.fromDeclaration === false) {
        this.object.name = name;
        this.object.fromDeclaration = fromDeclaration !== false;
        return;
      }
      const previousMaterial = this.object && typeof this.object.currentMaterial === "function" ? this.object.currentMaterial() : void 0;
      if (this.object && typeof this.object._finalize === "function") {
        this.object._finalize(true);
      }
      this.object = {
        name: name || "",
        fromDeclaration: fromDeclaration !== false,
        geometry: {
          vertices: [],
          normals: [],
          colors: [],
          uvs: [],
          hasUVIndices: false
        },
        materials: [],
        smooth: true,
        startMaterial: function(name2, libraries) {
          const previous = this._finalize(false);
          if (previous && (previous.inherited || previous.groupCount <= 0)) {
            this.materials.splice(previous.index, 1);
          }
          const material = {
            index: this.materials.length,
            name: name2 || "",
            mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : "",
            smooth: previous !== void 0 ? previous.smooth : this.smooth,
            groupStart: previous !== void 0 ? previous.groupEnd : 0,
            groupEnd: -1,
            groupCount: -1,
            inherited: false,
            clone: function(index) {
              const cloned = {
                index: typeof index === "number" ? index : this.index,
                name: this.name,
                mtllib: this.mtllib,
                smooth: this.smooth,
                groupStart: 0,
                groupEnd: -1,
                groupCount: -1,
                inherited: false
              };
              cloned.clone = this.clone.bind(cloned);
              return cloned;
            }
          };
          this.materials.push(material);
          return material;
        },
        currentMaterial: function() {
          if (this.materials.length > 0) {
            return this.materials[this.materials.length - 1];
          }
          return void 0;
        },
        _finalize: function(end) {
          const lastMultiMaterial = this.currentMaterial();
          if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {
            lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;
            lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;
            lastMultiMaterial.inherited = false;
          }
          if (end && this.materials.length > 1) {
            for (let mi = this.materials.length - 1; mi >= 0; mi--) {
              if (this.materials[mi].groupCount <= 0) {
                this.materials.splice(mi, 1);
              }
            }
          }
          if (end && this.materials.length === 0) {
            this.materials.push({
              name: "",
              smooth: this.smooth
            });
          }
          return lastMultiMaterial;
        }
      };
      if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === "function") {
        const declared = previousMaterial.clone(0);
        declared.inherited = true;
        this.object.materials.push(declared);
      }
      this.objects.push(this.object);
    },
    finalize: function() {
      if (this.object && typeof this.object._finalize === "function") {
        this.object._finalize(true);
      }
    },
    parseVertexIndex: function(value, len) {
      const index = parseInt(value, 10);
      return (index >= 0 ? index - 1 : index + len / 3) * 3;
    },
    parseNormalIndex: function(value, len) {
      const index = parseInt(value, 10);
      return (index >= 0 ? index - 1 : index + len / 3) * 3;
    },
    parseUVIndex: function(value, len) {
      const index = parseInt(value, 10);
      return (index >= 0 ? index - 1 : index + len / 2) * 2;
    },
    addVertex: function(a, b, c) {
      const src = this.vertices;
      const dst = this.object.geometry.vertices;
      dst.push(src[a + 0], src[a + 1], src[a + 2]);
      dst.push(src[b + 0], src[b + 1], src[b + 2]);
      dst.push(src[c + 0], src[c + 1], src[c + 2]);
    },
    addVertexPoint: function(a) {
      const src = this.vertices;
      const dst = this.object.geometry.vertices;
      dst.push(src[a + 0], src[a + 1], src[a + 2]);
    },
    addVertexLine: function(a) {
      const src = this.vertices;
      const dst = this.object.geometry.vertices;
      dst.push(src[a + 0], src[a + 1], src[a + 2]);
    },
    addNormal: function(a, b, c) {
      const src = this.normals;
      const dst = this.object.geometry.normals;
      dst.push(src[a + 0], src[a + 1], src[a + 2]);
      dst.push(src[b + 0], src[b + 1], src[b + 2]);
      dst.push(src[c + 0], src[c + 1], src[c + 2]);
    },
    addFaceNormal: function(a, b, c) {
      const src = this.vertices;
      const dst = this.object.geometry.normals;
      _vA.fromArray(src, a);
      _vB.fromArray(src, b);
      _vC.fromArray(src, c);
      _cb.subVectors(_vC, _vB);
      _ab.subVectors(_vA, _vB);
      _cb.cross(_ab);
      _cb.normalize();
      dst.push(_cb.x, _cb.y, _cb.z);
      dst.push(_cb.x, _cb.y, _cb.z);
      dst.push(_cb.x, _cb.y, _cb.z);
    },
    addColor: function(a, b, c) {
      const src = this.colors;
      const dst = this.object.geometry.colors;
      if (src[a] !== void 0)
        dst.push(src[a + 0], src[a + 1], src[a + 2]);
      if (src[b] !== void 0)
        dst.push(src[b + 0], src[b + 1], src[b + 2]);
      if (src[c] !== void 0)
        dst.push(src[c + 0], src[c + 1], src[c + 2]);
    },
    addUV: function(a, b, c) {
      const src = this.uvs;
      const dst = this.object.geometry.uvs;
      dst.push(src[a + 0], src[a + 1]);
      dst.push(src[b + 0], src[b + 1]);
      dst.push(src[c + 0], src[c + 1]);
    },
    addDefaultUV: function() {
      const dst = this.object.geometry.uvs;
      dst.push(0, 0);
      dst.push(0, 0);
      dst.push(0, 0);
    },
    addUVLine: function(a) {
      const src = this.uvs;
      const dst = this.object.geometry.uvs;
      dst.push(src[a + 0], src[a + 1]);
    },
    addFace: function(a, b, c, ua, ub, uc, na, nb, nc) {
      const vLen = this.vertices.length;
      let ia = this.parseVertexIndex(a, vLen);
      let ib = this.parseVertexIndex(b, vLen);
      let ic = this.parseVertexIndex(c, vLen);
      this.addVertex(ia, ib, ic);
      this.addColor(ia, ib, ic);
      if (na !== void 0 && na !== "") {
        const nLen = this.normals.length;
        ia = this.parseNormalIndex(na, nLen);
        ib = this.parseNormalIndex(nb, nLen);
        ic = this.parseNormalIndex(nc, nLen);
        this.addNormal(ia, ib, ic);
      } else {
        this.addFaceNormal(ia, ib, ic);
      }
      if (ua !== void 0 && ua !== "") {
        const uvLen = this.uvs.length;
        ia = this.parseUVIndex(ua, uvLen);
        ib = this.parseUVIndex(ub, uvLen);
        ic = this.parseUVIndex(uc, uvLen);
        this.addUV(ia, ib, ic);
        this.object.geometry.hasUVIndices = true;
      } else {
        this.addDefaultUV();
      }
    },
    addPointGeometry: function(vertices) {
      this.object.geometry.type = "Points";
      const vLen = this.vertices.length;
      for (let vi = 0, l = vertices.length; vi < l; vi++) {
        const index = this.parseVertexIndex(vertices[vi], vLen);
        this.addVertexPoint(index);
        this.addColor(index);
      }
    },
    addLineGeometry: function(vertices, uvs) {
      this.object.geometry.type = "Line";
      const vLen = this.vertices.length;
      const uvLen = this.uvs.length;
      for (let vi = 0, l = vertices.length; vi < l; vi++) {
        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));
      }
      for (let uvi = 0, l = uvs.length; uvi < l; uvi++) {
        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));
      }
    }
  };
  state.startObject("", false);
  return state;
}
var _object_pattern, _material_library_pattern, _material_use_pattern, _map_use_pattern, _face_vertex_data_separator_pattern, _vA, _vB, _vC, _ab, _cb, _color, OBJLoader;
var init_OBJLoader = __esm({
  "node_modules/three/examples/jsm/loaders/OBJLoader.js"() {
    init_three_module();
    _object_pattern = /^[og]\s*(.+)?/;
    _material_library_pattern = /^mtllib /;
    _material_use_pattern = /^usemtl /;
    _map_use_pattern = /^usemap /;
    _face_vertex_data_separator_pattern = /\s+/;
    _vA = new Vector3();
    _vB = new Vector3();
    _vC = new Vector3();
    _ab = new Vector3();
    _cb = new Vector3();
    _color = new Color();
    OBJLoader = class extends Loader {
      constructor(manager) {
        super(manager);
        this.materials = null;
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
          try {
            onLoad(scope.parse(text));
          } catch (e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }, onProgress, onError);
      }
      setMaterials(materials) {
        this.materials = materials;
        return this;
      }
      parse(text) {
        const state = new ParserState();
        if (text.indexOf("\r\n") !== -1) {
          text = text.replace(/\r\n/g, "\n");
        }
        if (text.indexOf("\\\n") !== -1) {
          text = text.replace(/\\\n/g, "");
        }
        const lines = text.split("\n");
        let result = [];
        for (let i = 0, l = lines.length; i < l; i++) {
          const line = lines[i].trimStart();
          if (line.length === 0)
            continue;
          const lineFirstChar = line.charAt(0);
          if (lineFirstChar === "#")
            continue;
          if (lineFirstChar === "v") {
            const data = line.split(_face_vertex_data_separator_pattern);
            switch (data[0]) {
              case "v":
                state.vertices.push(
                  parseFloat(data[1]),
                  parseFloat(data[2]),
                  parseFloat(data[3])
                );
                if (data.length >= 7) {
                  _color.setRGB(
                    parseFloat(data[4]),
                    parseFloat(data[5]),
                    parseFloat(data[6])
                  ).convertSRGBToLinear();
                  state.colors.push(_color.r, _color.g, _color.b);
                } else {
                  state.colors.push(void 0, void 0, void 0);
                }
                break;
              case "vn":
                state.normals.push(
                  parseFloat(data[1]),
                  parseFloat(data[2]),
                  parseFloat(data[3])
                );
                break;
              case "vt":
                state.uvs.push(
                  parseFloat(data[1]),
                  parseFloat(data[2])
                );
                break;
            }
          } else if (lineFirstChar === "f") {
            const lineData = line.slice(1).trim();
            const vertexData = lineData.split(_face_vertex_data_separator_pattern);
            const faceVertices = [];
            for (let j = 0, jl = vertexData.length; j < jl; j++) {
              const vertex = vertexData[j];
              if (vertex.length > 0) {
                const vertexParts = vertex.split("/");
                faceVertices.push(vertexParts);
              }
            }
            const v1 = faceVertices[0];
            for (let j = 1, jl = faceVertices.length - 1; j < jl; j++) {
              const v2 = faceVertices[j];
              const v3 = faceVertices[j + 1];
              state.addFace(
                v1[0],
                v2[0],
                v3[0],
                v1[1],
                v2[1],
                v3[1],
                v1[2],
                v2[2],
                v3[2]
              );
            }
          } else if (lineFirstChar === "l") {
            const lineParts = line.substring(1).trim().split(" ");
            let lineVertices = [];
            const lineUVs = [];
            if (line.indexOf("/") === -1) {
              lineVertices = lineParts;
            } else {
              for (let li = 0, llen = lineParts.length; li < llen; li++) {
                const parts = lineParts[li].split("/");
                if (parts[0] !== "")
                  lineVertices.push(parts[0]);
                if (parts[1] !== "")
                  lineUVs.push(parts[1]);
              }
            }
            state.addLineGeometry(lineVertices, lineUVs);
          } else if (lineFirstChar === "p") {
            const lineData = line.slice(1).trim();
            const pointData = lineData.split(" ");
            state.addPointGeometry(pointData);
          } else if ((result = _object_pattern.exec(line)) !== null) {
            const name = (" " + result[0].slice(1).trim()).slice(1);
            state.startObject(name);
          } else if (_material_use_pattern.test(line)) {
            state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);
          } else if (_material_library_pattern.test(line)) {
            state.materialLibraries.push(line.substring(7).trim());
          } else if (_map_use_pattern.test(line)) {
            console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');
          } else if (lineFirstChar === "s") {
            result = line.split(" ");
            if (result.length > 1) {
              const value = result[1].trim().toLowerCase();
              state.object.smooth = value !== "0" && value !== "off";
            } else {
              state.object.smooth = true;
            }
            const material = state.object.currentMaterial();
            if (material)
              material.smooth = state.object.smooth;
          } else {
            if (line === "\0")
              continue;
            console.warn('THREE.OBJLoader: Unexpected line: "' + line + '"');
          }
        }
        state.finalize();
        const container = new Group();
        container.materialLibraries = [].concat(state.materialLibraries);
        const hasPrimitives = !(state.objects.length === 1 && state.objects[0].geometry.vertices.length === 0);
        if (hasPrimitives === true) {
          for (let i = 0, l = state.objects.length; i < l; i++) {
            const object = state.objects[i];
            const geometry = object.geometry;
            const materials = object.materials;
            const isLine = geometry.type === "Line";
            const isPoints = geometry.type === "Points";
            let hasVertexColors = false;
            if (geometry.vertices.length === 0)
              continue;
            const buffergeometry = new BufferGeometry();
            buffergeometry.setAttribute("position", new Float32BufferAttribute(geometry.vertices, 3));
            if (geometry.normals.length > 0) {
              buffergeometry.setAttribute("normal", new Float32BufferAttribute(geometry.normals, 3));
            }
            if (geometry.colors.length > 0) {
              hasVertexColors = true;
              buffergeometry.setAttribute("color", new Float32BufferAttribute(geometry.colors, 3));
            }
            if (geometry.hasUVIndices === true) {
              buffergeometry.setAttribute("uv", new Float32BufferAttribute(geometry.uvs, 2));
            }
            const createdMaterials = [];
            for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {
              const sourceMaterial = materials[mi];
              const materialHash = sourceMaterial.name + "_" + sourceMaterial.smooth + "_" + hasVertexColors;
              let material = state.materials[materialHash];
              if (this.materials !== null) {
                material = this.materials.create(sourceMaterial.name);
                if (isLine && material && !(material instanceof LineBasicMaterial)) {
                  const materialLine = new LineBasicMaterial();
                  Material.prototype.copy.call(materialLine, material);
                  materialLine.color.copy(material.color);
                  material = materialLine;
                } else if (isPoints && material && !(material instanceof PointsMaterial)) {
                  const materialPoints = new PointsMaterial({ size: 10, sizeAttenuation: false });
                  Material.prototype.copy.call(materialPoints, material);
                  materialPoints.color.copy(material.color);
                  materialPoints.map = material.map;
                  material = materialPoints;
                }
              }
              if (material === void 0) {
                if (isLine) {
                  material = new LineBasicMaterial();
                } else if (isPoints) {
                  material = new PointsMaterial({ size: 1, sizeAttenuation: false });
                } else {
                  material = new MeshPhongMaterial();
                }
                material.name = sourceMaterial.name;
                material.flatShading = sourceMaterial.smooth ? false : true;
                material.vertexColors = hasVertexColors;
                state.materials[materialHash] = material;
              }
              createdMaterials.push(material);
            }
            let mesh;
            if (createdMaterials.length > 1) {
              for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {
                const sourceMaterial = materials[mi];
                buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);
              }
              if (isLine) {
                mesh = new LineSegments(buffergeometry, createdMaterials);
              } else if (isPoints) {
                mesh = new Points(buffergeometry, createdMaterials);
              } else {
                mesh = new Mesh(buffergeometry, createdMaterials);
              }
            } else {
              if (isLine) {
                mesh = new LineSegments(buffergeometry, createdMaterials[0]);
              } else if (isPoints) {
                mesh = new Points(buffergeometry, createdMaterials[0]);
              } else {
                mesh = new Mesh(buffergeometry, createdMaterials[0]);
              }
            }
            mesh.name = object.name;
            container.add(mesh);
          }
        } else {
          if (state.vertices.length > 0) {
            const material = new PointsMaterial({ size: 1, sizeAttenuation: false });
            const buffergeometry = new BufferGeometry();
            buffergeometry.setAttribute("position", new Float32BufferAttribute(state.vertices, 3));
            if (state.colors.length > 0 && state.colors[0] !== void 0) {
              buffergeometry.setAttribute("color", new Float32BufferAttribute(state.colors, 3));
              material.vertexColors = true;
            }
            const points = new Points(buffergeometry, material);
            container.add(points);
          }
        }
        return container;
      }
    };
  }
});

// node_modules/three/examples/jsm/loaders/TGALoader.js
var TGALoader;
var init_TGALoader = __esm({
  "node_modules/three/examples/jsm/loaders/TGALoader.js"() {
    init_three_module();
    TGALoader = class extends DataTextureLoader {
      constructor(manager) {
        super(manager);
      }
      parse(buffer) {
        function tgaCheckHeader(header2) {
          switch (header2.image_type) {
            case TGA_TYPE_INDEXED:
            case TGA_TYPE_RLE_INDEXED:
              if (header2.colormap_length > 256 || header2.colormap_size !== 24 || header2.colormap_type !== 1) {
                console.error("THREE.TGALoader: Invalid type colormap data for indexed type.");
              }
              break;
            case TGA_TYPE_RGB:
            case TGA_TYPE_GREY:
            case TGA_TYPE_RLE_RGB:
            case TGA_TYPE_RLE_GREY:
              if (header2.colormap_type) {
                console.error("THREE.TGALoader: Invalid type colormap data for colormap type.");
              }
              break;
            case TGA_TYPE_NO_DATA:
              console.error("THREE.TGALoader: No data.");
            default:
              console.error('THREE.TGALoader: Invalid type "%s".', header2.image_type);
          }
          if (header2.width <= 0 || header2.height <= 0) {
            console.error("THREE.TGALoader: Invalid image size.");
          }
          if (header2.pixel_size !== 8 && header2.pixel_size !== 16 && header2.pixel_size !== 24 && header2.pixel_size !== 32) {
            console.error('THREE.TGALoader: Invalid pixel size "%s".', header2.pixel_size);
          }
        }
        function tgaParse(use_rle2, use_pal2, header2, offset2, data) {
          let pixel_data, palettes;
          const pixel_size = header2.pixel_size >> 3;
          const pixel_total = header2.width * header2.height * pixel_size;
          if (use_pal2) {
            palettes = data.subarray(offset2, offset2 += header2.colormap_length * (header2.colormap_size >> 3));
          }
          if (use_rle2) {
            pixel_data = new Uint8Array(pixel_total);
            let c, count, i;
            let shift = 0;
            const pixels = new Uint8Array(pixel_size);
            while (shift < pixel_total) {
              c = data[offset2++];
              count = (c & 127) + 1;
              if (c & 128) {
                for (i = 0; i < pixel_size; ++i) {
                  pixels[i] = data[offset2++];
                }
                for (i = 0; i < count; ++i) {
                  pixel_data.set(pixels, shift + i * pixel_size);
                }
                shift += pixel_size * count;
              } else {
                count *= pixel_size;
                for (i = 0; i < count; ++i) {
                  pixel_data[shift + i] = data[offset2++];
                }
                shift += count;
              }
            }
          } else {
            pixel_data = data.subarray(
              offset2,
              offset2 += use_pal2 ? header2.width * header2.height : pixel_total
            );
          }
          return {
            pixel_data,
            palettes
          };
        }
        function tgaGetImageData8bits(imageData2, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {
          const colormap = palettes;
          let color, i = 0, x, y;
          const width = header.width;
          for (y = y_start; y !== y_end; y += y_step) {
            for (x = x_start; x !== x_end; x += x_step, i++) {
              color = image[i];
              imageData2[(x + width * y) * 4 + 3] = 255;
              imageData2[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];
              imageData2[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];
              imageData2[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];
            }
          }
          return imageData2;
        }
        function tgaGetImageData16bits(imageData2, y_start, y_step, y_end, x_start, x_step, x_end, image) {
          let color, i = 0, x, y;
          const width = header.width;
          for (y = y_start; y !== y_end; y += y_step) {
            for (x = x_start; x !== x_end; x += x_step, i += 2) {
              color = image[i + 0] + (image[i + 1] << 8);
              imageData2[(x + width * y) * 4 + 0] = (color & 31744) >> 7;
              imageData2[(x + width * y) * 4 + 1] = (color & 992) >> 2;
              imageData2[(x + width * y) * 4 + 2] = (color & 31) << 3;
              imageData2[(x + width * y) * 4 + 3] = color & 32768 ? 0 : 255;
            }
          }
          return imageData2;
        }
        function tgaGetImageData24bits(imageData2, y_start, y_step, y_end, x_start, x_step, x_end, image) {
          let i = 0, x, y;
          const width = header.width;
          for (y = y_start; y !== y_end; y += y_step) {
            for (x = x_start; x !== x_end; x += x_step, i += 3) {
              imageData2[(x + width * y) * 4 + 3] = 255;
              imageData2[(x + width * y) * 4 + 2] = image[i + 0];
              imageData2[(x + width * y) * 4 + 1] = image[i + 1];
              imageData2[(x + width * y) * 4 + 0] = image[i + 2];
            }
          }
          return imageData2;
        }
        function tgaGetImageData32bits(imageData2, y_start, y_step, y_end, x_start, x_step, x_end, image) {
          let i = 0, x, y;
          const width = header.width;
          for (y = y_start; y !== y_end; y += y_step) {
            for (x = x_start; x !== x_end; x += x_step, i += 4) {
              imageData2[(x + width * y) * 4 + 2] = image[i + 0];
              imageData2[(x + width * y) * 4 + 1] = image[i + 1];
              imageData2[(x + width * y) * 4 + 0] = image[i + 2];
              imageData2[(x + width * y) * 4 + 3] = image[i + 3];
            }
          }
          return imageData2;
        }
        function tgaGetImageDataGrey8bits(imageData2, y_start, y_step, y_end, x_start, x_step, x_end, image) {
          let color, i = 0, x, y;
          const width = header.width;
          for (y = y_start; y !== y_end; y += y_step) {
            for (x = x_start; x !== x_end; x += x_step, i++) {
              color = image[i];
              imageData2[(x + width * y) * 4 + 0] = color;
              imageData2[(x + width * y) * 4 + 1] = color;
              imageData2[(x + width * y) * 4 + 2] = color;
              imageData2[(x + width * y) * 4 + 3] = 255;
            }
          }
          return imageData2;
        }
        function tgaGetImageDataGrey16bits(imageData2, y_start, y_step, y_end, x_start, x_step, x_end, image) {
          let i = 0, x, y;
          const width = header.width;
          for (y = y_start; y !== y_end; y += y_step) {
            for (x = x_start; x !== x_end; x += x_step, i += 2) {
              imageData2[(x + width * y) * 4 + 0] = image[i + 0];
              imageData2[(x + width * y) * 4 + 1] = image[i + 0];
              imageData2[(x + width * y) * 4 + 2] = image[i + 0];
              imageData2[(x + width * y) * 4 + 3] = image[i + 1];
            }
          }
          return imageData2;
        }
        function getTgaRGBA(data, width, height, image, palette) {
          let x_start, y_start, x_step, y_step, x_end, y_end;
          switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {
            default:
            case TGA_ORIGIN_UL:
              x_start = 0;
              x_step = 1;
              x_end = width;
              y_start = 0;
              y_step = 1;
              y_end = height;
              break;
            case TGA_ORIGIN_BL:
              x_start = 0;
              x_step = 1;
              x_end = width;
              y_start = height - 1;
              y_step = -1;
              y_end = -1;
              break;
            case TGA_ORIGIN_UR:
              x_start = width - 1;
              x_step = -1;
              x_end = -1;
              y_start = 0;
              y_step = 1;
              y_end = height;
              break;
            case TGA_ORIGIN_BR:
              x_start = width - 1;
              x_step = -1;
              x_end = -1;
              y_start = height - 1;
              y_step = -1;
              y_end = -1;
              break;
          }
          if (use_grey) {
            switch (header.pixel_size) {
              case 8:
                tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                break;
              case 16:
                tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                break;
              default:
                console.error("THREE.TGALoader: Format not supported.");
                break;
            }
          } else {
            switch (header.pixel_size) {
              case 8:
                tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);
                break;
              case 16:
                tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                break;
              case 24:
                tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                break;
              case 32:
                tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);
                break;
              default:
                console.error("THREE.TGALoader: Format not supported.");
                break;
            }
          }
          return data;
        }
        const TGA_TYPE_NO_DATA = 0, TGA_TYPE_INDEXED = 1, TGA_TYPE_RGB = 2, TGA_TYPE_GREY = 3, TGA_TYPE_RLE_INDEXED = 9, TGA_TYPE_RLE_RGB = 10, TGA_TYPE_RLE_GREY = 11, TGA_ORIGIN_MASK = 48, TGA_ORIGIN_SHIFT = 4, TGA_ORIGIN_BL = 0, TGA_ORIGIN_BR = 1, TGA_ORIGIN_UL = 2, TGA_ORIGIN_UR = 3;
        if (buffer.length < 19)
          console.error("THREE.TGALoader: Not enough data to contain header.");
        let offset = 0;
        const content = new Uint8Array(buffer), header = {
          id_length: content[offset++],
          colormap_type: content[offset++],
          image_type: content[offset++],
          colormap_index: content[offset++] | content[offset++] << 8,
          colormap_length: content[offset++] | content[offset++] << 8,
          colormap_size: content[offset++],
          origin: [
            content[offset++] | content[offset++] << 8,
            content[offset++] | content[offset++] << 8
          ],
          width: content[offset++] | content[offset++] << 8,
          height: content[offset++] | content[offset++] << 8,
          pixel_size: content[offset++],
          flags: content[offset++]
        };
        tgaCheckHeader(header);
        if (header.id_length + offset > buffer.length) {
          console.error("THREE.TGALoader: No data.");
        }
        offset += header.id_length;
        let use_rle = false, use_pal = false, use_grey = false;
        switch (header.image_type) {
          case TGA_TYPE_RLE_INDEXED:
            use_rle = true;
            use_pal = true;
            break;
          case TGA_TYPE_INDEXED:
            use_pal = true;
            break;
          case TGA_TYPE_RLE_RGB:
            use_rle = true;
            break;
          case TGA_TYPE_RGB:
            break;
          case TGA_TYPE_RLE_GREY:
            use_rle = true;
            use_grey = true;
            break;
          case TGA_TYPE_GREY:
            use_grey = true;
            break;
        }
        const imageData = new Uint8Array(header.width * header.height * 4);
        const result = tgaParse(use_rle, use_pal, header, offset, content);
        getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);
        return {
          data: imageData,
          width: header.width,
          height: header.height,
          flipY: true,
          generateMipmaps: true,
          minFilter: LinearMipmapLinearFilter
        };
      }
    };
  }
});

// node_modules/three/examples/jsm/loaders/ColladaLoader.js
var ColladaLoader_exports = {};
__export(ColladaLoader_exports, {
  ColladaLoader: () => ColladaLoader
});
var ColladaLoader;
var init_ColladaLoader = __esm({
  "node_modules/three/examples/jsm/loaders/ColladaLoader.js"() {
    init_three_module();
    init_TGALoader();
    ColladaLoader = class extends Loader {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const path = scope.path === "" ? LoaderUtils.extractUrlBase(url) : scope.path;
        const loader = new FileLoader(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
          try {
            onLoad(scope.parse(text, path));
          } catch (e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }, onProgress, onError);
      }
      parse(text, path) {
        function getElementsByTagName(xml2, name) {
          const array = [];
          const childNodes = xml2.childNodes;
          for (let i = 0, l = childNodes.length; i < l; i++) {
            const child = childNodes[i];
            if (child.nodeName === name) {
              array.push(child);
            }
          }
          return array;
        }
        function parseStrings(text2) {
          if (text2.length === 0)
            return [];
          const parts = text2.trim().split(/\s+/);
          const array = new Array(parts.length);
          for (let i = 0, l = parts.length; i < l; i++) {
            array[i] = parts[i];
          }
          return array;
        }
        function parseFloats(text2) {
          if (text2.length === 0)
            return [];
          const parts = text2.trim().split(/\s+/);
          const array = new Array(parts.length);
          for (let i = 0, l = parts.length; i < l; i++) {
            array[i] = parseFloat(parts[i]);
          }
          return array;
        }
        function parseInts(text2) {
          if (text2.length === 0)
            return [];
          const parts = text2.trim().split(/\s+/);
          const array = new Array(parts.length);
          for (let i = 0, l = parts.length; i < l; i++) {
            array[i] = parseInt(parts[i]);
          }
          return array;
        }
        function parseId(text2) {
          return text2.substring(1);
        }
        function generateId() {
          return "three_default_" + count++;
        }
        function isEmpty(object) {
          return Object.keys(object).length === 0;
        }
        function parseAsset(xml2) {
          return {
            unit: parseAssetUnit(getElementsByTagName(xml2, "unit")[0]),
            upAxis: parseAssetUpAxis(getElementsByTagName(xml2, "up_axis")[0])
          };
        }
        function parseAssetUnit(xml2) {
          if (xml2 !== void 0 && xml2.hasAttribute("meter") === true) {
            return parseFloat(xml2.getAttribute("meter"));
          } else {
            return 1;
          }
        }
        function parseAssetUpAxis(xml2) {
          return xml2 !== void 0 ? xml2.textContent : "Y_UP";
        }
        function parseLibrary(xml2, libraryName, nodeName, parser) {
          const library2 = getElementsByTagName(xml2, libraryName)[0];
          if (library2 !== void 0) {
            const elements = getElementsByTagName(library2, nodeName);
            for (let i = 0; i < elements.length; i++) {
              parser(elements[i]);
            }
          }
        }
        function buildLibrary(data, builder) {
          for (const name in data) {
            const object = data[name];
            object.build = builder(data[name]);
          }
        }
        function getBuild(data, builder) {
          if (data.build !== void 0)
            return data.build;
          data.build = builder(data);
          return data.build;
        }
        function parseAnimation(xml2) {
          const data = {
            sources: {},
            samplers: {},
            channels: {}
          };
          let hasChildren = false;
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            let id;
            switch (child.nodeName) {
              case "source":
                id = child.getAttribute("id");
                data.sources[id] = parseSource(child);
                break;
              case "sampler":
                id = child.getAttribute("id");
                data.samplers[id] = parseAnimationSampler(child);
                break;
              case "channel":
                id = child.getAttribute("target");
                data.channels[id] = parseAnimationChannel(child);
                break;
              case "animation":
                parseAnimation(child);
                hasChildren = true;
                break;
              default:
                console.log(child);
            }
          }
          if (hasChildren === false) {
            library.animations[xml2.getAttribute("id") || MathUtils.generateUUID()] = data;
          }
        }
        function parseAnimationSampler(xml2) {
          const data = {
            inputs: {}
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "input":
                const id = parseId(child.getAttribute("source"));
                const semantic = child.getAttribute("semantic");
                data.inputs[semantic] = id;
                break;
            }
          }
          return data;
        }
        function parseAnimationChannel(xml2) {
          const data = {};
          const target = xml2.getAttribute("target");
          let parts = target.split("/");
          const id = parts.shift();
          let sid = parts.shift();
          const arraySyntax = sid.indexOf("(") !== -1;
          const memberSyntax = sid.indexOf(".") !== -1;
          if (memberSyntax) {
            parts = sid.split(".");
            sid = parts.shift();
            data.member = parts.shift();
          } else if (arraySyntax) {
            const indices = sid.split("(");
            sid = indices.shift();
            for (let i = 0; i < indices.length; i++) {
              indices[i] = parseInt(indices[i].replace(/\)/, ""));
            }
            data.indices = indices;
          }
          data.id = id;
          data.sid = sid;
          data.arraySyntax = arraySyntax;
          data.memberSyntax = memberSyntax;
          data.sampler = parseId(xml2.getAttribute("source"));
          return data;
        }
        function buildAnimation(data) {
          const tracks = [];
          const channels = data.channels;
          const samplers = data.samplers;
          const sources = data.sources;
          for (const target in channels) {
            if (channels.hasOwnProperty(target)) {
              const channel = channels[target];
              const sampler = samplers[channel.sampler];
              const inputId = sampler.inputs.INPUT;
              const outputId = sampler.inputs.OUTPUT;
              const inputSource = sources[inputId];
              const outputSource = sources[outputId];
              const animation = buildAnimationChannel(channel, inputSource, outputSource);
              createKeyframeTracks(animation, tracks);
            }
          }
          return tracks;
        }
        function getAnimation(id) {
          return getBuild(library.animations[id], buildAnimation);
        }
        function buildAnimationChannel(channel, inputSource, outputSource) {
          const node = library.nodes[channel.id];
          const object3D = getNode(node.id);
          const transform = node.transforms[channel.sid];
          const defaultMatrix = node.matrix.clone().transpose();
          let time, stride;
          let i, il, j, jl;
          const data = {};
          switch (transform) {
            case "matrix":
              for (i = 0, il = inputSource.array.length; i < il; i++) {
                time = inputSource.array[i];
                stride = i * outputSource.stride;
                if (data[time] === void 0)
                  data[time] = {};
                if (channel.arraySyntax === true) {
                  const value = outputSource.array[stride];
                  const index = channel.indices[0] + 4 * channel.indices[1];
                  data[time][index] = value;
                } else {
                  for (j = 0, jl = outputSource.stride; j < jl; j++) {
                    data[time][j] = outputSource.array[stride + j];
                  }
                }
              }
              break;
            case "translate":
              console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
              break;
            case "rotate":
              console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
              break;
            case "scale":
              console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
              break;
          }
          const keyframes = prepareAnimationData(data, defaultMatrix);
          const animation = {
            name: object3D.uuid,
            keyframes
          };
          return animation;
        }
        function prepareAnimationData(data, defaultMatrix) {
          const keyframes = [];
          for (const time in data) {
            keyframes.push({ time: parseFloat(time), value: data[time] });
          }
          keyframes.sort(ascending);
          for (let i = 0; i < 16; i++) {
            transformAnimationData(keyframes, i, defaultMatrix.elements[i]);
          }
          return keyframes;
          function ascending(a, b) {
            return a.time - b.time;
          }
        }
        const position = new Vector3();
        const scale = new Vector3();
        const quaternion = new Quaternion();
        function createKeyframeTracks(animation, tracks) {
          const keyframes = animation.keyframes;
          const name = animation.name;
          const times = [];
          const positionData = [];
          const quaternionData = [];
          const scaleData = [];
          for (let i = 0, l = keyframes.length; i < l; i++) {
            const keyframe = keyframes[i];
            const time = keyframe.time;
            const value = keyframe.value;
            matrix.fromArray(value).transpose();
            matrix.decompose(position, quaternion, scale);
            times.push(time);
            positionData.push(position.x, position.y, position.z);
            quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
            scaleData.push(scale.x, scale.y, scale.z);
          }
          if (positionData.length > 0)
            tracks.push(new VectorKeyframeTrack(name + ".position", times, positionData));
          if (quaternionData.length > 0)
            tracks.push(new QuaternionKeyframeTrack(name + ".quaternion", times, quaternionData));
          if (scaleData.length > 0)
            tracks.push(new VectorKeyframeTrack(name + ".scale", times, scaleData));
          return tracks;
        }
        function transformAnimationData(keyframes, property, defaultValue) {
          let keyframe;
          let empty = true;
          let i, l;
          for (i = 0, l = keyframes.length; i < l; i++) {
            keyframe = keyframes[i];
            if (keyframe.value[property] === void 0) {
              keyframe.value[property] = null;
            } else {
              empty = false;
            }
          }
          if (empty === true) {
            for (i = 0, l = keyframes.length; i < l; i++) {
              keyframe = keyframes[i];
              keyframe.value[property] = defaultValue;
            }
          } else {
            createMissingKeyframes(keyframes, property);
          }
        }
        function createMissingKeyframes(keyframes, property) {
          let prev, next;
          for (let i = 0, l = keyframes.length; i < l; i++) {
            const keyframe = keyframes[i];
            if (keyframe.value[property] === null) {
              prev = getPrev(keyframes, i, property);
              next = getNext(keyframes, i, property);
              if (prev === null) {
                keyframe.value[property] = next.value[property];
                continue;
              }
              if (next === null) {
                keyframe.value[property] = prev.value[property];
                continue;
              }
              interpolate(keyframe, prev, next, property);
            }
          }
        }
        function getPrev(keyframes, i, property) {
          while (i >= 0) {
            const keyframe = keyframes[i];
            if (keyframe.value[property] !== null)
              return keyframe;
            i--;
          }
          return null;
        }
        function getNext(keyframes, i, property) {
          while (i < keyframes.length) {
            const keyframe = keyframes[i];
            if (keyframe.value[property] !== null)
              return keyframe;
            i++;
          }
          return null;
        }
        function interpolate(key, prev, next, property) {
          if (next.time - prev.time === 0) {
            key.value[property] = prev.value[property];
            return;
          }
          key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];
        }
        function parseAnimationClip(xml2) {
          const data = {
            name: xml2.getAttribute("id") || "default",
            start: parseFloat(xml2.getAttribute("start") || 0),
            end: parseFloat(xml2.getAttribute("end") || 0),
            animations: []
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "instance_animation":
                data.animations.push(parseId(child.getAttribute("url")));
                break;
            }
          }
          library.clips[xml2.getAttribute("id")] = data;
        }
        function buildAnimationClip(data) {
          const tracks = [];
          const name = data.name;
          const duration = data.end - data.start || -1;
          const animations2 = data.animations;
          for (let i = 0, il = animations2.length; i < il; i++) {
            const animationTracks = getAnimation(animations2[i]);
            for (let j = 0, jl = animationTracks.length; j < jl; j++) {
              tracks.push(animationTracks[j]);
            }
          }
          return new AnimationClip(name, duration, tracks);
        }
        function getAnimationClip(id) {
          return getBuild(library.clips[id], buildAnimationClip);
        }
        function parseController(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "skin":
                data.id = parseId(child.getAttribute("source"));
                data.skin = parseSkin(child);
                break;
              case "morph":
                data.id = parseId(child.getAttribute("source"));
                console.warn("THREE.ColladaLoader: Morph target animation not supported yet.");
                break;
            }
          }
          library.controllers[xml2.getAttribute("id")] = data;
        }
        function parseSkin(xml2) {
          const data = {
            sources: {}
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "bind_shape_matrix":
                data.bindShapeMatrix = parseFloats(child.textContent);
                break;
              case "source":
                const id = child.getAttribute("id");
                data.sources[id] = parseSource(child);
                break;
              case "joints":
                data.joints = parseJoints(child);
                break;
              case "vertex_weights":
                data.vertexWeights = parseVertexWeights(child);
                break;
            }
          }
          return data;
        }
        function parseJoints(xml2) {
          const data = {
            inputs: {}
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "input":
                const semantic = child.getAttribute("semantic");
                const id = parseId(child.getAttribute("source"));
                data.inputs[semantic] = id;
                break;
            }
          }
          return data;
        }
        function parseVertexWeights(xml2) {
          const data = {
            inputs: {}
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "input":
                const semantic = child.getAttribute("semantic");
                const id = parseId(child.getAttribute("source"));
                const offset = parseInt(child.getAttribute("offset"));
                data.inputs[semantic] = { id, offset };
                break;
              case "vcount":
                data.vcount = parseInts(child.textContent);
                break;
              case "v":
                data.v = parseInts(child.textContent);
                break;
            }
          }
          return data;
        }
        function buildController(data) {
          const build = {
            id: data.id
          };
          const geometry = library.geometries[build.id];
          if (data.skin !== void 0) {
            build.skin = buildSkin(data.skin);
            geometry.sources.skinIndices = build.skin.indices;
            geometry.sources.skinWeights = build.skin.weights;
          }
          return build;
        }
        function buildSkin(data) {
          const BONE_LIMIT = 4;
          const build = {
            joints: [],
            // this must be an array to preserve the joint order
            indices: {
              array: [],
              stride: BONE_LIMIT
            },
            weights: {
              array: [],
              stride: BONE_LIMIT
            }
          };
          const sources = data.sources;
          const vertexWeights = data.vertexWeights;
          const vcount = vertexWeights.vcount;
          const v = vertexWeights.v;
          const jointOffset = vertexWeights.inputs.JOINT.offset;
          const weightOffset = vertexWeights.inputs.WEIGHT.offset;
          const jointSource = data.sources[data.joints.inputs.JOINT];
          const inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];
          const weights = sources[vertexWeights.inputs.WEIGHT.id].array;
          let stride = 0;
          let i, j, l;
          for (i = 0, l = vcount.length; i < l; i++) {
            const jointCount = vcount[i];
            const vertexSkinData = [];
            for (j = 0; j < jointCount; j++) {
              const skinIndex = v[stride + jointOffset];
              const weightId = v[stride + weightOffset];
              const skinWeight = weights[weightId];
              vertexSkinData.push({ index: skinIndex, weight: skinWeight });
              stride += 2;
            }
            vertexSkinData.sort(descending);
            for (j = 0; j < BONE_LIMIT; j++) {
              const d = vertexSkinData[j];
              if (d !== void 0) {
                build.indices.array.push(d.index);
                build.weights.array.push(d.weight);
              } else {
                build.indices.array.push(0);
                build.weights.array.push(0);
              }
            }
          }
          if (data.bindShapeMatrix) {
            build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();
          } else {
            build.bindMatrix = new Matrix4().identity();
          }
          for (i = 0, l = jointSource.array.length; i < l; i++) {
            const name = jointSource.array[i];
            const boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();
            build.joints.push({ name, boneInverse });
          }
          return build;
          function descending(a, b) {
            return b.weight - a.weight;
          }
        }
        function getController(id) {
          return getBuild(library.controllers[id], buildController);
        }
        function parseImage(xml2) {
          const data = {
            init_from: getElementsByTagName(xml2, "init_from")[0].textContent
          };
          library.images[xml2.getAttribute("id")] = data;
        }
        function buildImage(data) {
          if (data.build !== void 0)
            return data.build;
          return data.init_from;
        }
        function getImage(id) {
          const data = library.images[id];
          if (data !== void 0) {
            return getBuild(data, buildImage);
          }
          console.warn("THREE.ColladaLoader: Couldn't find image with ID:", id);
          return null;
        }
        function parseEffect(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "profile_COMMON":
                data.profile = parseEffectProfileCOMMON(child);
                break;
            }
          }
          library.effects[xml2.getAttribute("id")] = data;
        }
        function parseEffectProfileCOMMON(xml2) {
          const data = {
            surfaces: {},
            samplers: {}
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "newparam":
                parseEffectNewparam(child, data);
                break;
              case "technique":
                data.technique = parseEffectTechnique(child);
                break;
              case "extra":
                data.extra = parseEffectExtra(child);
                break;
            }
          }
          return data;
        }
        function parseEffectNewparam(xml2, data) {
          const sid = xml2.getAttribute("sid");
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "surface":
                data.surfaces[sid] = parseEffectSurface(child);
                break;
              case "sampler2D":
                data.samplers[sid] = parseEffectSampler(child);
                break;
            }
          }
        }
        function parseEffectSurface(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "init_from":
                data.init_from = child.textContent;
                break;
            }
          }
          return data;
        }
        function parseEffectSampler(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "source":
                data.source = child.textContent;
                break;
            }
          }
          return data;
        }
        function parseEffectTechnique(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "constant":
              case "lambert":
              case "blinn":
              case "phong":
                data.type = child.nodeName;
                data.parameters = parseEffectParameters(child);
                break;
              case "extra":
                data.extra = parseEffectExtra(child);
                break;
            }
          }
          return data;
        }
        function parseEffectParameters(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "emission":
              case "diffuse":
              case "specular":
              case "bump":
              case "ambient":
              case "shininess":
              case "transparency":
                data[child.nodeName] = parseEffectParameter(child);
                break;
              case "transparent":
                data[child.nodeName] = {
                  opaque: child.hasAttribute("opaque") ? child.getAttribute("opaque") : "A_ONE",
                  data: parseEffectParameter(child)
                };
                break;
            }
          }
          return data;
        }
        function parseEffectParameter(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "color":
                data[child.nodeName] = parseFloats(child.textContent);
                break;
              case "float":
                data[child.nodeName] = parseFloat(child.textContent);
                break;
              case "texture":
                data[child.nodeName] = { id: child.getAttribute("texture"), extra: parseEffectParameterTexture(child) };
                break;
            }
          }
          return data;
        }
        function parseEffectParameterTexture(xml2) {
          const data = {
            technique: {}
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "extra":
                parseEffectParameterTextureExtra(child, data);
                break;
            }
          }
          return data;
        }
        function parseEffectParameterTextureExtra(xml2, data) {
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "technique":
                parseEffectParameterTextureExtraTechnique(child, data);
                break;
            }
          }
        }
        function parseEffectParameterTextureExtraTechnique(xml2, data) {
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "repeatU":
              case "repeatV":
              case "offsetU":
              case "offsetV":
                data.technique[child.nodeName] = parseFloat(child.textContent);
                break;
              case "wrapU":
              case "wrapV":
                if (child.textContent.toUpperCase() === "TRUE") {
                  data.technique[child.nodeName] = 1;
                } else if (child.textContent.toUpperCase() === "FALSE") {
                  data.technique[child.nodeName] = 0;
                } else {
                  data.technique[child.nodeName] = parseInt(child.textContent);
                }
                break;
              case "bump":
                data[child.nodeName] = parseEffectExtraTechniqueBump(child);
                break;
            }
          }
        }
        function parseEffectExtra(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "technique":
                data.technique = parseEffectExtraTechnique(child);
                break;
            }
          }
          return data;
        }
        function parseEffectExtraTechnique(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "double_sided":
                data[child.nodeName] = parseInt(child.textContent);
                break;
              case "bump":
                data[child.nodeName] = parseEffectExtraTechniqueBump(child);
                break;
            }
          }
          return data;
        }
        function parseEffectExtraTechniqueBump(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "texture":
                data[child.nodeName] = { id: child.getAttribute("texture"), texcoord: child.getAttribute("texcoord"), extra: parseEffectParameterTexture(child) };
                break;
            }
          }
          return data;
        }
        function buildEffect(data) {
          return data;
        }
        function getEffect(id) {
          return getBuild(library.effects[id], buildEffect);
        }
        function parseMaterial(xml2) {
          const data = {
            name: xml2.getAttribute("name")
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "instance_effect":
                data.url = parseId(child.getAttribute("url"));
                break;
            }
          }
          library.materials[xml2.getAttribute("id")] = data;
        }
        function getTextureLoader(image) {
          let loader;
          let extension = image.slice((image.lastIndexOf(".") - 1 >>> 0) + 2);
          extension = extension.toLowerCase();
          switch (extension) {
            case "tga":
              loader = tgaLoader;
              break;
            default:
              loader = textureLoader;
          }
          return loader;
        }
        function buildMaterial(data) {
          const effect = getEffect(data.url);
          const technique = effect.profile.technique;
          let material;
          switch (technique.type) {
            case "phong":
            case "blinn":
              material = new MeshPhongMaterial();
              break;
            case "lambert":
              material = new MeshLambertMaterial();
              break;
            default:
              material = new MeshBasicMaterial();
              break;
          }
          material.name = data.name || "";
          function getTexture(textureObject, encoding = null) {
            const sampler = effect.profile.samplers[textureObject.id];
            let image = null;
            if (sampler !== void 0) {
              const surface = effect.profile.surfaces[sampler.source];
              image = getImage(surface.init_from);
            } else {
              console.warn("THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).");
              image = getImage(textureObject.id);
            }
            if (image !== null) {
              const loader = getTextureLoader(image);
              if (loader !== void 0) {
                const texture = loader.load(image);
                const extra = textureObject.extra;
                if (extra !== void 0 && extra.technique !== void 0 && isEmpty(extra.technique) === false) {
                  const technique2 = extra.technique;
                  texture.wrapS = technique2.wrapU ? RepeatWrapping : ClampToEdgeWrapping;
                  texture.wrapT = technique2.wrapV ? RepeatWrapping : ClampToEdgeWrapping;
                  texture.offset.set(technique2.offsetU || 0, technique2.offsetV || 0);
                  texture.repeat.set(technique2.repeatU || 1, technique2.repeatV || 1);
                } else {
                  texture.wrapS = RepeatWrapping;
                  texture.wrapT = RepeatWrapping;
                }
                if (encoding !== null) {
                  texture.encoding = encoding;
                }
                return texture;
              } else {
                console.warn("THREE.ColladaLoader: Loader for texture %s not found.", image);
                return null;
              }
            } else {
              console.warn("THREE.ColladaLoader: Couldn't create texture with ID:", textureObject.id);
              return null;
            }
          }
          const parameters = technique.parameters;
          for (const key in parameters) {
            const parameter = parameters[key];
            switch (key) {
              case "diffuse":
                if (parameter.color)
                  material.color.fromArray(parameter.color);
                if (parameter.texture)
                  material.map = getTexture(parameter.texture, sRGBEncoding);
                break;
              case "specular":
                if (parameter.color && material.specular)
                  material.specular.fromArray(parameter.color);
                if (parameter.texture)
                  material.specularMap = getTexture(parameter.texture);
                break;
              case "bump":
                if (parameter.texture)
                  material.normalMap = getTexture(parameter.texture);
                break;
              case "ambient":
                if (parameter.texture)
                  material.lightMap = getTexture(parameter.texture, sRGBEncoding);
                break;
              case "shininess":
                if (parameter.float && material.shininess)
                  material.shininess = parameter.float;
                break;
              case "emission":
                if (parameter.color && material.emissive)
                  material.emissive.fromArray(parameter.color);
                if (parameter.texture)
                  material.emissiveMap = getTexture(parameter.texture, sRGBEncoding);
                break;
            }
          }
          material.color.convertSRGBToLinear();
          if (material.specular)
            material.specular.convertSRGBToLinear();
          if (material.emissive)
            material.emissive.convertSRGBToLinear();
          let transparent = parameters["transparent"];
          let transparency = parameters["transparency"];
          if (transparency === void 0 && transparent) {
            transparency = {
              float: 1
            };
          }
          if (transparent === void 0 && transparency) {
            transparent = {
              opaque: "A_ONE",
              data: {
                color: [1, 1, 1, 1]
              }
            };
          }
          if (transparent && transparency) {
            if (transparent.data.texture) {
              material.transparent = true;
            } else {
              const color = transparent.data.color;
              switch (transparent.opaque) {
                case "A_ONE":
                  material.opacity = color[3] * transparency.float;
                  break;
                case "RGB_ZERO":
                  material.opacity = 1 - color[0] * transparency.float;
                  break;
                case "A_ZERO":
                  material.opacity = 1 - color[3] * transparency.float;
                  break;
                case "RGB_ONE":
                  material.opacity = color[0] * transparency.float;
                  break;
                default:
                  console.warn('THREE.ColladaLoader: Invalid opaque type "%s" of transparent tag.', transparent.opaque);
              }
              if (material.opacity < 1)
                material.transparent = true;
            }
          }
          if (technique.extra !== void 0 && technique.extra.technique !== void 0) {
            const techniques = technique.extra.technique;
            for (const k in techniques) {
              const v = techniques[k];
              switch (k) {
                case "double_sided":
                  material.side = v === 1 ? DoubleSide : FrontSide;
                  break;
                case "bump":
                  material.normalMap = getTexture(v.texture);
                  material.normalScale = new Vector2(1, 1);
                  break;
              }
            }
          }
          return material;
        }
        function getMaterial(id) {
          return getBuild(library.materials[id], buildMaterial);
        }
        function parseCamera(xml2) {
          const data = {
            name: xml2.getAttribute("name")
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "optics":
                data.optics = parseCameraOptics(child);
                break;
            }
          }
          library.cameras[xml2.getAttribute("id")] = data;
        }
        function parseCameraOptics(xml2) {
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            switch (child.nodeName) {
              case "technique_common":
                return parseCameraTechnique(child);
            }
          }
          return {};
        }
        function parseCameraTechnique(xml2) {
          const data = {};
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            switch (child.nodeName) {
              case "perspective":
              case "orthographic":
                data.technique = child.nodeName;
                data.parameters = parseCameraParameters(child);
                break;
            }
          }
          return data;
        }
        function parseCameraParameters(xml2) {
          const data = {};
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            switch (child.nodeName) {
              case "xfov":
              case "yfov":
              case "xmag":
              case "ymag":
              case "znear":
              case "zfar":
              case "aspect_ratio":
                data[child.nodeName] = parseFloat(child.textContent);
                break;
            }
          }
          return data;
        }
        function buildCamera(data) {
          let camera;
          switch (data.optics.technique) {
            case "perspective":
              camera = new PerspectiveCamera(
                data.optics.parameters.yfov,
                data.optics.parameters.aspect_ratio,
                data.optics.parameters.znear,
                data.optics.parameters.zfar
              );
              break;
            case "orthographic":
              let ymag = data.optics.parameters.ymag;
              let xmag = data.optics.parameters.xmag;
              const aspectRatio = data.optics.parameters.aspect_ratio;
              xmag = xmag === void 0 ? ymag * aspectRatio : xmag;
              ymag = ymag === void 0 ? xmag / aspectRatio : ymag;
              xmag *= 0.5;
              ymag *= 0.5;
              camera = new OrthographicCamera(
                -xmag,
                xmag,
                ymag,
                -ymag,
                // left, right, top, bottom
                data.optics.parameters.znear,
                data.optics.parameters.zfar
              );
              break;
            default:
              camera = new PerspectiveCamera();
              break;
          }
          camera.name = data.name || "";
          return camera;
        }
        function getCamera(id) {
          const data = library.cameras[id];
          if (data !== void 0) {
            return getBuild(data, buildCamera);
          }
          console.warn("THREE.ColladaLoader: Couldn't find camera with ID:", id);
          return null;
        }
        function parseLight(xml2) {
          let data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "technique_common":
                data = parseLightTechnique(child);
                break;
            }
          }
          library.lights[xml2.getAttribute("id")] = data;
        }
        function parseLightTechnique(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "directional":
              case "point":
              case "spot":
              case "ambient":
                data.technique = child.nodeName;
                data.parameters = parseLightParameters(child);
            }
          }
          return data;
        }
        function parseLightParameters(xml2) {
          const data = {};
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "color":
                const array = parseFloats(child.textContent);
                data.color = new Color().fromArray(array).convertSRGBToLinear();
                break;
              case "falloff_angle":
                data.falloffAngle = parseFloat(child.textContent);
                break;
              case "quadratic_attenuation":
                const f = parseFloat(child.textContent);
                data.distance = f ? Math.sqrt(1 / f) : 0;
                break;
            }
          }
          return data;
        }
        function buildLight(data) {
          let light;
          switch (data.technique) {
            case "directional":
              light = new DirectionalLight();
              break;
            case "point":
              light = new PointLight();
              break;
            case "spot":
              light = new SpotLight();
              break;
            case "ambient":
              light = new AmbientLight();
              break;
          }
          if (data.parameters.color)
            light.color.copy(data.parameters.color);
          if (data.parameters.distance)
            light.distance = data.parameters.distance;
          return light;
        }
        function getLight(id) {
          const data = library.lights[id];
          if (data !== void 0) {
            return getBuild(data, buildLight);
          }
          console.warn("THREE.ColladaLoader: Couldn't find light with ID:", id);
          return null;
        }
        function parseGeometry(xml2) {
          const data = {
            name: xml2.getAttribute("name"),
            sources: {},
            vertices: {},
            primitives: []
          };
          const mesh = getElementsByTagName(xml2, "mesh")[0];
          if (mesh === void 0)
            return;
          for (let i = 0; i < mesh.childNodes.length; i++) {
            const child = mesh.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            const id = child.getAttribute("id");
            switch (child.nodeName) {
              case "source":
                data.sources[id] = parseSource(child);
                break;
              case "vertices":
                data.vertices = parseGeometryVertices(child);
                break;
              case "polygons":
                console.warn("THREE.ColladaLoader: Unsupported primitive type: ", child.nodeName);
                break;
              case "lines":
              case "linestrips":
              case "polylist":
              case "triangles":
                data.primitives.push(parseGeometryPrimitive(child));
                break;
              default:
                console.log(child);
            }
          }
          library.geometries[xml2.getAttribute("id")] = data;
        }
        function parseSource(xml2) {
          const data = {
            array: [],
            stride: 3
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "float_array":
                data.array = parseFloats(child.textContent);
                break;
              case "Name_array":
                data.array = parseStrings(child.textContent);
                break;
              case "technique_common":
                const accessor = getElementsByTagName(child, "accessor")[0];
                if (accessor !== void 0) {
                  data.stride = parseInt(accessor.getAttribute("stride"));
                }
                break;
            }
          }
          return data;
        }
        function parseGeometryVertices(xml2) {
          const data = {};
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            data[child.getAttribute("semantic")] = parseId(child.getAttribute("source"));
          }
          return data;
        }
        function parseGeometryPrimitive(xml2) {
          const primitive = {
            type: xml2.nodeName,
            material: xml2.getAttribute("material"),
            count: parseInt(xml2.getAttribute("count")),
            inputs: {},
            stride: 0,
            hasUV: false
          };
          for (let i = 0, l = xml2.childNodes.length; i < l; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "input":
                const id = parseId(child.getAttribute("source"));
                const semantic = child.getAttribute("semantic");
                const offset = parseInt(child.getAttribute("offset"));
                const set = parseInt(child.getAttribute("set"));
                const inputname = set > 0 ? semantic + set : semantic;
                primitive.inputs[inputname] = { id, offset };
                primitive.stride = Math.max(primitive.stride, offset + 1);
                if (semantic === "TEXCOORD")
                  primitive.hasUV = true;
                break;
              case "vcount":
                primitive.vcount = parseInts(child.textContent);
                break;
              case "p":
                primitive.p = parseInts(child.textContent);
                break;
            }
          }
          return primitive;
        }
        function groupPrimitives(primitives) {
          const build = {};
          for (let i = 0; i < primitives.length; i++) {
            const primitive = primitives[i];
            if (build[primitive.type] === void 0)
              build[primitive.type] = [];
            build[primitive.type].push(primitive);
          }
          return build;
        }
        function checkUVCoordinates(primitives) {
          let count2 = 0;
          for (let i = 0, l = primitives.length; i < l; i++) {
            const primitive = primitives[i];
            if (primitive.hasUV === true) {
              count2++;
            }
          }
          if (count2 > 0 && count2 < primitives.length) {
            primitives.uvsNeedsFix = true;
          }
        }
        function buildGeometry(data) {
          const build = {};
          const sources = data.sources;
          const vertices = data.vertices;
          const primitives = data.primitives;
          if (primitives.length === 0)
            return {};
          const groupedPrimitives = groupPrimitives(primitives);
          for (const type in groupedPrimitives) {
            const primitiveType = groupedPrimitives[type];
            checkUVCoordinates(primitiveType);
            build[type] = buildGeometryType(primitiveType, sources, vertices);
          }
          return build;
        }
        function buildGeometryType(primitives, sources, vertices) {
          const build = {};
          const position2 = { array: [], stride: 0 };
          const normal = { array: [], stride: 0 };
          const uv = { array: [], stride: 0 };
          const uv2 = { array: [], stride: 0 };
          const color = { array: [], stride: 0 };
          const skinIndex = { array: [], stride: 4 };
          const skinWeight = { array: [], stride: 4 };
          const geometry = new BufferGeometry();
          const materialKeys = [];
          let start = 0;
          for (let p = 0; p < primitives.length; p++) {
            const primitive = primitives[p];
            const inputs = primitive.inputs;
            let count2 = 0;
            switch (primitive.type) {
              case "lines":
              case "linestrips":
                count2 = primitive.count * 2;
                break;
              case "triangles":
                count2 = primitive.count * 3;
                break;
              case "polylist":
                for (let g = 0; g < primitive.count; g++) {
                  const vc = primitive.vcount[g];
                  switch (vc) {
                    case 3:
                      count2 += 3;
                      break;
                    case 4:
                      count2 += 6;
                      break;
                    default:
                      count2 += (vc - 2) * 3;
                      break;
                  }
                }
                break;
              default:
                console.warn("THREE.ColladaLoader: Unknow primitive type:", primitive.type);
            }
            geometry.addGroup(start, count2, p);
            start += count2;
            if (primitive.material) {
              materialKeys.push(primitive.material);
            }
            for (const name in inputs) {
              const input = inputs[name];
              switch (name) {
                case "VERTEX":
                  for (const key in vertices) {
                    const id = vertices[key];
                    switch (key) {
                      case "POSITION":
                        const prevLength = position2.array.length;
                        buildGeometryData(primitive, sources[id], input.offset, position2.array);
                        position2.stride = sources[id].stride;
                        if (sources.skinWeights && sources.skinIndices) {
                          buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);
                          buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);
                        }
                        if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {
                          const count3 = (position2.array.length - prevLength) / position2.stride;
                          for (let i = 0; i < count3; i++) {
                            uv.array.push(0, 0);
                          }
                        }
                        break;
                      case "NORMAL":
                        buildGeometryData(primitive, sources[id], input.offset, normal.array);
                        normal.stride = sources[id].stride;
                        break;
                      case "COLOR":
                        buildGeometryData(primitive, sources[id], input.offset, color.array);
                        color.stride = sources[id].stride;
                        break;
                      case "TEXCOORD":
                        buildGeometryData(primitive, sources[id], input.offset, uv.array);
                        uv.stride = sources[id].stride;
                        break;
                      case "TEXCOORD1":
                        buildGeometryData(primitive, sources[id], input.offset, uv2.array);
                        uv.stride = sources[id].stride;
                        break;
                      default:
                        console.warn('THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.', key);
                    }
                  }
                  break;
                case "NORMAL":
                  buildGeometryData(primitive, sources[input.id], input.offset, normal.array);
                  normal.stride = sources[input.id].stride;
                  break;
                case "COLOR":
                  buildGeometryData(primitive, sources[input.id], input.offset, color.array, true);
                  color.stride = sources[input.id].stride;
                  break;
                case "TEXCOORD":
                  buildGeometryData(primitive, sources[input.id], input.offset, uv.array);
                  uv.stride = sources[input.id].stride;
                  break;
                case "TEXCOORD1":
                  buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);
                  uv2.stride = sources[input.id].stride;
                  break;
              }
            }
          }
          if (position2.array.length > 0)
            geometry.setAttribute("position", new Float32BufferAttribute(position2.array, position2.stride));
          if (normal.array.length > 0)
            geometry.setAttribute("normal", new Float32BufferAttribute(normal.array, normal.stride));
          if (color.array.length > 0)
            geometry.setAttribute("color", new Float32BufferAttribute(color.array, color.stride));
          if (uv.array.length > 0)
            geometry.setAttribute("uv", new Float32BufferAttribute(uv.array, uv.stride));
          if (uv2.array.length > 0)
            geometry.setAttribute("uv2", new Float32BufferAttribute(uv2.array, uv2.stride));
          if (skinIndex.array.length > 0)
            geometry.setAttribute("skinIndex", new Float32BufferAttribute(skinIndex.array, skinIndex.stride));
          if (skinWeight.array.length > 0)
            geometry.setAttribute("skinWeight", new Float32BufferAttribute(skinWeight.array, skinWeight.stride));
          build.data = geometry;
          build.type = primitives[0].type;
          build.materialKeys = materialKeys;
          return build;
        }
        function buildGeometryData(primitive, source, offset, array, isColor = false) {
          const indices = primitive.p;
          const stride = primitive.stride;
          const vcount = primitive.vcount;
          function pushVector(i) {
            let index = indices[i + offset] * sourceStride;
            const length = index + sourceStride;
            for (; index < length; index++) {
              array.push(sourceArray[index]);
            }
            if (isColor) {
              const startIndex = array.length - sourceStride - 1;
              tempColor.setRGB(
                array[startIndex + 0],
                array[startIndex + 1],
                array[startIndex + 2]
              ).convertSRGBToLinear();
              array[startIndex + 0] = tempColor.r;
              array[startIndex + 1] = tempColor.g;
              array[startIndex + 2] = tempColor.b;
            }
          }
          const sourceArray = source.array;
          const sourceStride = source.stride;
          if (primitive.vcount !== void 0) {
            let index = 0;
            for (let i = 0, l = vcount.length; i < l; i++) {
              const count2 = vcount[i];
              if (count2 === 4) {
                const a = index + stride * 0;
                const b = index + stride * 1;
                const c = index + stride * 2;
                const d = index + stride * 3;
                pushVector(a);
                pushVector(b);
                pushVector(d);
                pushVector(b);
                pushVector(c);
                pushVector(d);
              } else if (count2 === 3) {
                const a = index + stride * 0;
                const b = index + stride * 1;
                const c = index + stride * 2;
                pushVector(a);
                pushVector(b);
                pushVector(c);
              } else if (count2 > 4) {
                for (let k = 1, kl = count2 - 2; k <= kl; k++) {
                  const a = index + stride * 0;
                  const b = index + stride * k;
                  const c = index + stride * (k + 1);
                  pushVector(a);
                  pushVector(b);
                  pushVector(c);
                }
              }
              index += stride * count2;
            }
          } else {
            for (let i = 0, l = indices.length; i < l; i += stride) {
              pushVector(i);
            }
          }
        }
        function getGeometry(id) {
          return getBuild(library.geometries[id], buildGeometry);
        }
        function parseKinematicsModel(xml2) {
          const data = {
            name: xml2.getAttribute("name") || "",
            joints: {},
            links: []
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "technique_common":
                parseKinematicsTechniqueCommon(child, data);
                break;
            }
          }
          library.kinematicsModels[xml2.getAttribute("id")] = data;
        }
        function buildKinematicsModel(data) {
          if (data.build !== void 0)
            return data.build;
          return data;
        }
        function getKinematicsModel(id) {
          return getBuild(library.kinematicsModels[id], buildKinematicsModel);
        }
        function parseKinematicsTechniqueCommon(xml2, data) {
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "joint":
                data.joints[child.getAttribute("sid")] = parseKinematicsJoint(child);
                break;
              case "link":
                data.links.push(parseKinematicsLink(child));
                break;
            }
          }
        }
        function parseKinematicsJoint(xml2) {
          let data;
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "prismatic":
              case "revolute":
                data = parseKinematicsJointParameter(child);
                break;
            }
          }
          return data;
        }
        function parseKinematicsJointParameter(xml2) {
          const data = {
            sid: xml2.getAttribute("sid"),
            name: xml2.getAttribute("name") || "",
            axis: new Vector3(),
            limits: {
              min: 0,
              max: 0
            },
            type: xml2.nodeName,
            static: false,
            zeroPosition: 0,
            middlePosition: 0
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "axis":
                const array = parseFloats(child.textContent);
                data.axis.fromArray(array);
                break;
              case "limits":
                const max2 = child.getElementsByTagName("max")[0];
                const min = child.getElementsByTagName("min")[0];
                data.limits.max = parseFloat(max2.textContent);
                data.limits.min = parseFloat(min.textContent);
                break;
            }
          }
          if (data.limits.min >= data.limits.max) {
            data.static = true;
          }
          data.middlePosition = (data.limits.min + data.limits.max) / 2;
          return data;
        }
        function parseKinematicsLink(xml2) {
          const data = {
            sid: xml2.getAttribute("sid"),
            name: xml2.getAttribute("name") || "",
            attachments: [],
            transforms: []
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "attachment_full":
                data.attachments.push(parseKinematicsAttachment(child));
                break;
              case "matrix":
              case "translate":
              case "rotate":
                data.transforms.push(parseKinematicsTransform(child));
                break;
            }
          }
          return data;
        }
        function parseKinematicsAttachment(xml2) {
          const data = {
            joint: xml2.getAttribute("joint").split("/").pop(),
            transforms: [],
            links: []
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "link":
                data.links.push(parseKinematicsLink(child));
                break;
              case "matrix":
              case "translate":
              case "rotate":
                data.transforms.push(parseKinematicsTransform(child));
                break;
            }
          }
          return data;
        }
        function parseKinematicsTransform(xml2) {
          const data = {
            type: xml2.nodeName
          };
          const array = parseFloats(xml2.textContent);
          switch (data.type) {
            case "matrix":
              data.obj = new Matrix4();
              data.obj.fromArray(array).transpose();
              break;
            case "translate":
              data.obj = new Vector3();
              data.obj.fromArray(array);
              break;
            case "rotate":
              data.obj = new Vector3();
              data.obj.fromArray(array);
              data.angle = MathUtils.degToRad(array[3]);
              break;
          }
          return data;
        }
        function parsePhysicsModel(xml2) {
          const data = {
            name: xml2.getAttribute("name") || "",
            rigidBodies: {}
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "rigid_body":
                data.rigidBodies[child.getAttribute("name")] = {};
                parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute("name")]);
                break;
            }
          }
          library.physicsModels[xml2.getAttribute("id")] = data;
        }
        function parsePhysicsRigidBody(xml2, data) {
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "technique_common":
                parsePhysicsTechniqueCommon(child, data);
                break;
            }
          }
        }
        function parsePhysicsTechniqueCommon(xml2, data) {
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "inertia":
                data.inertia = parseFloats(child.textContent);
                break;
              case "mass":
                data.mass = parseFloats(child.textContent)[0];
                break;
            }
          }
        }
        function parseKinematicsScene(xml2) {
          const data = {
            bindJointAxis: []
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "bind_joint_axis":
                data.bindJointAxis.push(parseKinematicsBindJointAxis(child));
                break;
            }
          }
          library.kinematicsScenes[parseId(xml2.getAttribute("url"))] = data;
        }
        function parseKinematicsBindJointAxis(xml2) {
          const data = {
            target: xml2.getAttribute("target").split("/").pop()
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            switch (child.nodeName) {
              case "axis":
                const param = child.getElementsByTagName("param")[0];
                data.axis = param.textContent;
                const tmpJointIndex = data.axis.split("inst_").pop().split("axis")[0];
                data.jointIndex = tmpJointIndex.substring(0, tmpJointIndex.length - 1);
                break;
            }
          }
          return data;
        }
        function buildKinematicsScene(data) {
          if (data.build !== void 0)
            return data.build;
          return data;
        }
        function getKinematicsScene(id) {
          return getBuild(library.kinematicsScenes[id], buildKinematicsScene);
        }
        function setupKinematics() {
          const kinematicsModelId = Object.keys(library.kinematicsModels)[0];
          const kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];
          const visualSceneId = Object.keys(library.visualScenes)[0];
          if (kinematicsModelId === void 0 || kinematicsSceneId === void 0)
            return;
          const kinematicsModel = getKinematicsModel(kinematicsModelId);
          const kinematicsScene = getKinematicsScene(kinematicsSceneId);
          const visualScene = getVisualScene(visualSceneId);
          const bindJointAxis = kinematicsScene.bindJointAxis;
          const jointMap = {};
          for (let i = 0, l = bindJointAxis.length; i < l; i++) {
            const axis = bindJointAxis[i];
            const targetElement = collada.querySelector('[sid="' + axis.target + '"]');
            if (targetElement) {
              const parentVisualElement = targetElement.parentElement;
              connect(axis.jointIndex, parentVisualElement);
            }
          }
          function connect(jointIndex, visualElement) {
            const visualElementName = visualElement.getAttribute("name");
            const joint = kinematicsModel.joints[jointIndex];
            visualScene.traverse(function(object) {
              if (object.name === visualElementName) {
                jointMap[jointIndex] = {
                  object,
                  transforms: buildTransformList(visualElement),
                  joint,
                  position: joint.zeroPosition
                };
              }
            });
          }
          const m0 = new Matrix4();
          kinematics = {
            joints: kinematicsModel && kinematicsModel.joints,
            getJointValue: function(jointIndex) {
              const jointData = jointMap[jointIndex];
              if (jointData) {
                return jointData.position;
              } else {
                console.warn("THREE.ColladaLoader: Joint " + jointIndex + " doesn't exist.");
              }
            },
            setJointValue: function(jointIndex, value) {
              const jointData = jointMap[jointIndex];
              if (jointData) {
                const joint = jointData.joint;
                if (value > joint.limits.max || value < joint.limits.min) {
                  console.warn("THREE.ColladaLoader: Joint " + jointIndex + " value " + value + " outside of limits (min: " + joint.limits.min + ", max: " + joint.limits.max + ").");
                } else if (joint.static) {
                  console.warn("THREE.ColladaLoader: Joint " + jointIndex + " is static.");
                } else {
                  const object = jointData.object;
                  const axis = joint.axis;
                  const transforms = jointData.transforms;
                  matrix.identity();
                  for (let i = 0; i < transforms.length; i++) {
                    const transform = transforms[i];
                    if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {
                      switch (joint.type) {
                        case "revolute":
                          matrix.multiply(m0.makeRotationAxis(axis, MathUtils.degToRad(value)));
                          break;
                        case "prismatic":
                          matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));
                          break;
                        default:
                          console.warn("THREE.ColladaLoader: Unknown joint type: " + joint.type);
                          break;
                      }
                    } else {
                      switch (transform.type) {
                        case "matrix":
                          matrix.multiply(transform.obj);
                          break;
                        case "translate":
                          matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));
                          break;
                        case "scale":
                          matrix.scale(transform.obj);
                          break;
                        case "rotate":
                          matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));
                          break;
                      }
                    }
                  }
                  object.matrix.copy(matrix);
                  object.matrix.decompose(object.position, object.quaternion, object.scale);
                  jointMap[jointIndex].position = value;
                }
              } else {
                console.log("THREE.ColladaLoader: " + jointIndex + " does not exist.");
              }
            }
          };
        }
        function buildTransformList(node) {
          const transforms = [];
          const xml2 = collada.querySelector('[id="' + node.id + '"]');
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            let array, vector2;
            switch (child.nodeName) {
              case "matrix":
                array = parseFloats(child.textContent);
                const matrix2 = new Matrix4().fromArray(array).transpose();
                transforms.push({
                  sid: child.getAttribute("sid"),
                  type: child.nodeName,
                  obj: matrix2
                });
                break;
              case "translate":
              case "scale":
                array = parseFloats(child.textContent);
                vector2 = new Vector3().fromArray(array);
                transforms.push({
                  sid: child.getAttribute("sid"),
                  type: child.nodeName,
                  obj: vector2
                });
                break;
              case "rotate":
                array = parseFloats(child.textContent);
                vector2 = new Vector3().fromArray(array);
                const angle = MathUtils.degToRad(array[3]);
                transforms.push({
                  sid: child.getAttribute("sid"),
                  type: child.nodeName,
                  obj: vector2,
                  angle
                });
                break;
            }
          }
          return transforms;
        }
        function prepareNodes(xml2) {
          const elements = xml2.getElementsByTagName("node");
          for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            if (element.hasAttribute("id") === false) {
              element.setAttribute("id", generateId());
            }
          }
        }
        const matrix = new Matrix4();
        const vector = new Vector3();
        function parseNode(xml2) {
          const data = {
            name: xml2.getAttribute("name") || "",
            type: xml2.getAttribute("type"),
            id: xml2.getAttribute("id"),
            sid: xml2.getAttribute("sid"),
            matrix: new Matrix4(),
            nodes: [],
            instanceCameras: [],
            instanceControllers: [],
            instanceLights: [],
            instanceGeometries: [],
            instanceNodes: [],
            transforms: {}
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            if (child.nodeType !== 1)
              continue;
            let array;
            switch (child.nodeName) {
              case "node":
                data.nodes.push(child.getAttribute("id"));
                parseNode(child);
                break;
              case "instance_camera":
                data.instanceCameras.push(parseId(child.getAttribute("url")));
                break;
              case "instance_controller":
                data.instanceControllers.push(parseNodeInstance(child));
                break;
              case "instance_light":
                data.instanceLights.push(parseId(child.getAttribute("url")));
                break;
              case "instance_geometry":
                data.instanceGeometries.push(parseNodeInstance(child));
                break;
              case "instance_node":
                data.instanceNodes.push(parseId(child.getAttribute("url")));
                break;
              case "matrix":
                array = parseFloats(child.textContent);
                data.matrix.multiply(matrix.fromArray(array).transpose());
                data.transforms[child.getAttribute("sid")] = child.nodeName;
                break;
              case "translate":
                array = parseFloats(child.textContent);
                vector.fromArray(array);
                data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));
                data.transforms[child.getAttribute("sid")] = child.nodeName;
                break;
              case "rotate":
                array = parseFloats(child.textContent);
                const angle = MathUtils.degToRad(array[3]);
                data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));
                data.transforms[child.getAttribute("sid")] = child.nodeName;
                break;
              case "scale":
                array = parseFloats(child.textContent);
                data.matrix.scale(vector.fromArray(array));
                data.transforms[child.getAttribute("sid")] = child.nodeName;
                break;
              case "extra":
                break;
              default:
                console.log(child);
            }
          }
          if (hasNode(data.id)) {
            console.warn("THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.", data.id);
          } else {
            library.nodes[data.id] = data;
          }
          return data;
        }
        function parseNodeInstance(xml2) {
          const data = {
            id: parseId(xml2.getAttribute("url")),
            materials: {},
            skeletons: []
          };
          for (let i = 0; i < xml2.childNodes.length; i++) {
            const child = xml2.childNodes[i];
            switch (child.nodeName) {
              case "bind_material":
                const instances = child.getElementsByTagName("instance_material");
                for (let j = 0; j < instances.length; j++) {
                  const instance = instances[j];
                  const symbol = instance.getAttribute("symbol");
                  const target = instance.getAttribute("target");
                  data.materials[symbol] = parseId(target);
                }
                break;
              case "skeleton":
                data.skeletons.push(parseId(child.textContent));
                break;
              default:
                break;
            }
          }
          return data;
        }
        function buildSkeleton(skeletons, joints) {
          const boneData = [];
          const sortedBoneData = [];
          let i, j, data;
          for (i = 0; i < skeletons.length; i++) {
            const skeleton = skeletons[i];
            let root;
            if (hasNode(skeleton)) {
              root = getNode(skeleton);
              buildBoneHierarchy(root, joints, boneData);
            } else if (hasVisualScene(skeleton)) {
              const visualScene = library.visualScenes[skeleton];
              const children = visualScene.children;
              for (let j2 = 0; j2 < children.length; j2++) {
                const child = children[j2];
                if (child.type === "JOINT") {
                  const root2 = getNode(child.id);
                  buildBoneHierarchy(root2, joints, boneData);
                }
              }
            } else {
              console.error("THREE.ColladaLoader: Unable to find root bone of skeleton with ID:", skeleton);
            }
          }
          for (i = 0; i < joints.length; i++) {
            for (j = 0; j < boneData.length; j++) {
              data = boneData[j];
              if (data.bone.name === joints[i].name) {
                sortedBoneData[i] = data;
                data.processed = true;
                break;
              }
            }
          }
          for (i = 0; i < boneData.length; i++) {
            data = boneData[i];
            if (data.processed === false) {
              sortedBoneData.push(data);
              data.processed = true;
            }
          }
          const bones = [];
          const boneInverses = [];
          for (i = 0; i < sortedBoneData.length; i++) {
            data = sortedBoneData[i];
            bones.push(data.bone);
            boneInverses.push(data.boneInverse);
          }
          return new Skeleton(bones, boneInverses);
        }
        function buildBoneHierarchy(root, joints, boneData) {
          root.traverse(function(object) {
            if (object.isBone === true) {
              let boneInverse;
              for (let i = 0; i < joints.length; i++) {
                const joint = joints[i];
                if (joint.name === object.name) {
                  boneInverse = joint.boneInverse;
                  break;
                }
              }
              if (boneInverse === void 0) {
                boneInverse = new Matrix4();
              }
              boneData.push({ bone: object, boneInverse, processed: false });
            }
          });
        }
        function buildNode(data) {
          const objects = [];
          const matrix2 = data.matrix;
          const nodes = data.nodes;
          const type = data.type;
          const instanceCameras = data.instanceCameras;
          const instanceControllers = data.instanceControllers;
          const instanceLights = data.instanceLights;
          const instanceGeometries = data.instanceGeometries;
          const instanceNodes = data.instanceNodes;
          for (let i = 0, l = nodes.length; i < l; i++) {
            objects.push(getNode(nodes[i]));
          }
          for (let i = 0, l = instanceCameras.length; i < l; i++) {
            const instanceCamera = getCamera(instanceCameras[i]);
            if (instanceCamera !== null) {
              objects.push(instanceCamera.clone());
            }
          }
          for (let i = 0, l = instanceControllers.length; i < l; i++) {
            const instance = instanceControllers[i];
            const controller = getController(instance.id);
            const geometries = getGeometry(controller.id);
            const newObjects = buildObjects(geometries, instance.materials);
            const skeletons = instance.skeletons;
            const joints = controller.skin.joints;
            const skeleton = buildSkeleton(skeletons, joints);
            for (let j = 0, jl = newObjects.length; j < jl; j++) {
              const object2 = newObjects[j];
              if (object2.isSkinnedMesh) {
                object2.bind(skeleton, controller.skin.bindMatrix);
                object2.normalizeSkinWeights();
              }
              objects.push(object2);
            }
          }
          for (let i = 0, l = instanceLights.length; i < l; i++) {
            const instanceLight = getLight(instanceLights[i]);
            if (instanceLight !== null) {
              objects.push(instanceLight.clone());
            }
          }
          for (let i = 0, l = instanceGeometries.length; i < l; i++) {
            const instance = instanceGeometries[i];
            const geometries = getGeometry(instance.id);
            const newObjects = buildObjects(geometries, instance.materials);
            for (let j = 0, jl = newObjects.length; j < jl; j++) {
              objects.push(newObjects[j]);
            }
          }
          for (let i = 0, l = instanceNodes.length; i < l; i++) {
            objects.push(getNode(instanceNodes[i]).clone());
          }
          let object;
          if (nodes.length === 0 && objects.length === 1) {
            object = objects[0];
          } else {
            object = type === "JOINT" ? new Bone() : new Group();
            for (let i = 0; i < objects.length; i++) {
              object.add(objects[i]);
            }
          }
          object.name = type === "JOINT" ? data.sid : data.name;
          object.matrix.copy(matrix2);
          object.matrix.decompose(object.position, object.quaternion, object.scale);
          return object;
        }
        const fallbackMaterial = new MeshBasicMaterial({ color: 16711935 });
        function resolveMaterialBinding(keys, instanceMaterials) {
          const materials = [];
          for (let i = 0, l = keys.length; i < l; i++) {
            const id = instanceMaterials[keys[i]];
            if (id === void 0) {
              console.warn("THREE.ColladaLoader: Material with key %s not found. Apply fallback material.", keys[i]);
              materials.push(fallbackMaterial);
            } else {
              materials.push(getMaterial(id));
            }
          }
          return materials;
        }
        function buildObjects(geometries, instanceMaterials) {
          const objects = [];
          for (const type in geometries) {
            const geometry = geometries[type];
            const materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials);
            if (materials.length === 0) {
              if (type === "lines" || type === "linestrips") {
                materials.push(new LineBasicMaterial());
              } else {
                materials.push(new MeshPhongMaterial());
              }
            }
            if (type === "lines" || type === "linestrips") {
              for (let i = 0, l = materials.length; i < l; i++) {
                const material2 = materials[i];
                if (material2.isMeshPhongMaterial === true || material2.isMeshLambertMaterial === true) {
                  const lineMaterial = new LineBasicMaterial();
                  lineMaterial.color.copy(material2.color);
                  lineMaterial.opacity = material2.opacity;
                  lineMaterial.transparent = material2.transparent;
                  materials[i] = lineMaterial;
                }
              }
            }
            const skinning = geometry.data.attributes.skinIndex !== void 0;
            const material = materials.length === 1 ? materials[0] : materials;
            let object;
            switch (type) {
              case "lines":
                object = new LineSegments(geometry.data, material);
                break;
              case "linestrips":
                object = new Line(geometry.data, material);
                break;
              case "triangles":
              case "polylist":
                if (skinning) {
                  object = new SkinnedMesh(geometry.data, material);
                } else {
                  object = new Mesh(geometry.data, material);
                }
                break;
            }
            objects.push(object);
          }
          return objects;
        }
        function hasNode(id) {
          return library.nodes[id] !== void 0;
        }
        function getNode(id) {
          return getBuild(library.nodes[id], buildNode);
        }
        function parseVisualScene(xml2) {
          const data = {
            name: xml2.getAttribute("name"),
            children: []
          };
          prepareNodes(xml2);
          const elements = getElementsByTagName(xml2, "node");
          for (let i = 0; i < elements.length; i++) {
            data.children.push(parseNode(elements[i]));
          }
          library.visualScenes[xml2.getAttribute("id")] = data;
        }
        function buildVisualScene(data) {
          const group = new Group();
          group.name = data.name;
          const children = data.children;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            group.add(getNode(child.id));
          }
          return group;
        }
        function hasVisualScene(id) {
          return library.visualScenes[id] !== void 0;
        }
        function getVisualScene(id) {
          return getBuild(library.visualScenes[id], buildVisualScene);
        }
        function parseScene(xml2) {
          const instance = getElementsByTagName(xml2, "instance_visual_scene")[0];
          return getVisualScene(parseId(instance.getAttribute("url")));
        }
        function setupAnimations() {
          const clips = library.clips;
          if (isEmpty(clips) === true) {
            if (isEmpty(library.animations) === false) {
              const tracks = [];
              for (const id in library.animations) {
                const animationTracks = getAnimation(id);
                for (let i = 0, l = animationTracks.length; i < l; i++) {
                  tracks.push(animationTracks[i]);
                }
              }
              animations.push(new AnimationClip("default", -1, tracks));
            }
          } else {
            for (const id in clips) {
              animations.push(getAnimationClip(id));
            }
          }
        }
        function parserErrorToText(parserError2) {
          let result = "";
          const stack = [parserError2];
          while (stack.length) {
            const node = stack.shift();
            if (node.nodeType === Node.TEXT_NODE) {
              result += node.textContent;
            } else {
              result += "\n";
              stack.push.apply(stack, node.childNodes);
            }
          }
          return result.trim();
        }
        if (text.length === 0) {
          return { scene: new Scene() };
        }
        const xml = new DOMParser().parseFromString(text, "application/xml");
        const collada = getElementsByTagName(xml, "COLLADA")[0];
        const parserError = xml.getElementsByTagName("parsererror")[0];
        if (parserError !== void 0) {
          const errorElement = getElementsByTagName(parserError, "div")[0];
          let errorText;
          if (errorElement) {
            errorText = errorElement.textContent;
          } else {
            errorText = parserErrorToText(parserError);
          }
          console.error("THREE.ColladaLoader: Failed to parse collada file.\n", errorText);
          return null;
        }
        const version = collada.getAttribute("version");
        console.debug("THREE.ColladaLoader: File version", version);
        const asset = parseAsset(getElementsByTagName(collada, "asset")[0]);
        const textureLoader = new TextureLoader(this.manager);
        textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
        let tgaLoader;
        if (TGALoader) {
          tgaLoader = new TGALoader(this.manager);
          tgaLoader.setPath(this.resourcePath || path);
        }
        const tempColor = new Color();
        const animations = [];
        let kinematics = {};
        let count = 0;
        const library = {
          animations: {},
          clips: {},
          controllers: {},
          images: {},
          effects: {},
          materials: {},
          cameras: {},
          lights: {},
          geometries: {},
          nodes: {},
          visualScenes: {},
          kinematicsModels: {},
          physicsModels: {},
          kinematicsScenes: {}
        };
        parseLibrary(collada, "library_animations", "animation", parseAnimation);
        parseLibrary(collada, "library_animation_clips", "animation_clip", parseAnimationClip);
        parseLibrary(collada, "library_controllers", "controller", parseController);
        parseLibrary(collada, "library_images", "image", parseImage);
        parseLibrary(collada, "library_effects", "effect", parseEffect);
        parseLibrary(collada, "library_materials", "material", parseMaterial);
        parseLibrary(collada, "library_cameras", "camera", parseCamera);
        parseLibrary(collada, "library_lights", "light", parseLight);
        parseLibrary(collada, "library_geometries", "geometry", parseGeometry);
        parseLibrary(collada, "library_nodes", "node", parseNode);
        parseLibrary(collada, "library_visual_scenes", "visual_scene", parseVisualScene);
        parseLibrary(collada, "library_kinematics_models", "kinematics_model", parseKinematicsModel);
        parseLibrary(collada, "library_physics_models", "physics_model", parsePhysicsModel);
        parseLibrary(collada, "scene", "instance_kinematics_scene", parseKinematicsScene);
        buildLibrary(library.animations, buildAnimation);
        buildLibrary(library.clips, buildAnimationClip);
        buildLibrary(library.controllers, buildController);
        buildLibrary(library.images, buildImage);
        buildLibrary(library.effects, buildEffect);
        buildLibrary(library.materials, buildMaterial);
        buildLibrary(library.cameras, buildCamera);
        buildLibrary(library.lights, buildLight);
        buildLibrary(library.geometries, buildGeometry);
        buildLibrary(library.visualScenes, buildVisualScene);
        setupAnimations();
        setupKinematics();
        const scene = parseScene(getElementsByTagName(collada, "scene")[0]);
        scene.animations = animations;
        if (asset.upAxis === "Z_UP") {
          console.warn("THREE.ColladaLoader: You are loading an asset with a Z-UP coordinate system. The loader just rotates the asset to transform it into Y-UP. The vertex data are not converted, see #24289.");
          scene.rotation.set(-Math.PI / 2, 0, 0);
        }
        scene.scale.multiplyScalar(asset.unit);
        return {
          get animations() {
            console.warn("THREE.ColladaLoader: Please access animations over scene.animations now.");
            return animations;
          },
          kinematics,
          library,
          scene
        };
      }
    };
  }
});

// node_modules/three/examples/jsm/libs/fflate.module.js
function AsyncCmpStrm(opts, cb) {
  if (!cb && typeof opts == "function")
    cb = opts, opts = {};
  this.ondata = cb;
  return opts;
}
function deflateSync(data, opts) {
  return dopt(data, opts || {}, 0, 0);
}
function inflateSync(data, out) {
  return inflt(data, out);
}
function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
}
function strToU8(str, latin1) {
  if (latin1) {
    var ar_1 = new u8(str.length);
    for (var i = 0; i < str.length; ++i)
      ar_1[i] = str.charCodeAt(i);
    return ar_1;
  }
  if (te)
    return te.encode(str);
  var l = str.length;
  var ar = new u8(str.length + (str.length >> 1));
  var ai = 0;
  var w = function(v) {
    ar[ai++] = v;
  };
  for (var i = 0; i < l; ++i) {
    if (ai + 5 > ar.length) {
      var n = new u8(ai + 8 + (l - i << 1));
      n.set(ar);
      ar = n;
    }
    var c = str.charCodeAt(i);
    if (c < 128 || latin1)
      w(c);
    else if (c < 2048)
      w(192 | c >> 6), w(128 | c & 63);
    else if (c > 55295 && c < 57344)
      c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >> 18), w(128 | c >> 12 & 63), w(128 | c >> 6 & 63), w(128 | c & 63);
    else
      w(224 | c >> 12), w(128 | c >> 6 & 63), w(128 | c & 63);
  }
  return slc(ar, 0, ai);
}
function strFromU8(dat, latin1) {
  if (latin1) {
    var r = "";
    for (var i = 0; i < dat.length; i += 16384)
      r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));
    return r;
  } else if (td)
    return td.decode(dat);
  else {
    var _a2 = dutf8(dat), out = _a2[0], ext = _a2[1];
    if (ext.length)
      throw "invalid utf-8 data";
    return out;
  }
}
var ch2, durl, cwk, wk, u8, u16, u32, fleb, fdeb, clim, freb, _a, fl, revfl, _b, fd, revfd, rev, x, i, hMap, flt, i, i, i, i, fdt, i, flm, flrm, fdm, fdrm, max, bits, bits16, shft, slc, inflt, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, deo, et, dflt, crct, crc, adler, dopt, mrg, wcln, ch, cbfs, wrkr, bInflt, bDflt, gze, guze, zle, zule, pbf, gu8, astrm, astrmify, b2, b4, b8, wbytes, gzh, gzs, gzl, gzhl, zlh, zlv, Deflate, AsyncDeflate, Inflate, AsyncInflate, Gzip, AsyncGzip, Gunzip, AsyncGunzip, Zlib, AsyncZlib, Unzlib, AsyncUnzlib, Decompress, AsyncDecompress, te, td, tds, dutf8, DecodeUTF8, EncodeUTF8, dbf, z64e, exfl, wzh, wzf, ZipPassThrough, ZipDeflate, AsyncZipDeflate, Zip, UnzipPassThrough, UnzipInflate, AsyncUnzipInflate, Unzip;
var init_fflate_module = __esm({
  "node_modules/three/examples/jsm/libs/fflate.module.js"() {
    ch2 = {};
    durl = function(c) {
      return URL.createObjectURL(new Blob([c], { type: "text/javascript" }));
    };
    cwk = function(u) {
      return new Worker(u);
    };
    try {
      URL.revokeObjectURL(durl(""));
    } catch (e) {
      durl = function(c) {
        return "data:application/javascript;charset=UTF-8," + encodeURI(c);
      };
      cwk = function(u) {
        return new Worker(u, { type: "module" });
      };
    }
    wk = function(c, id, msg, transfer, cb) {
      var w = cwk(ch2[id] || (ch2[id] = durl(c)));
      w.onerror = function(e) {
        return cb(e.error, null);
      };
      w.onmessage = function(e) {
        return cb(null, e.data);
      };
      w.postMessage(msg, transfer);
      return w;
    };
    u8 = Uint8Array;
    u16 = Uint16Array;
    u32 = Uint32Array;
    fleb = new u8([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0,
      /* unused */
      0,
      0,
      /* impossible */
      0
    ]);
    fdeb = new u8([
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13,
      /* unused */
      0,
      0
    ]);
    clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    freb = function(eb, start) {
      var b = new u16(31);
      for (var i = 0; i < 31; ++i) {
        b[i] = start += 1 << eb[i - 1];
      }
      var r = new u32(b[30]);
      for (var i = 1; i < 30; ++i) {
        for (var j = b[i]; j < b[i + 1]; ++j) {
          r[j] = j - b[i] << 5 | i;
        }
      }
      return [b, r];
    };
    _a = freb(fleb, 2);
    fl = _a[0];
    revfl = _a[1];
    fl[28] = 258, revfl[258] = 28;
    _b = freb(fdeb, 0);
    fd = _b[0];
    revfd = _b[1];
    rev = new u16(32768);
    for (i = 0; i < 32768; ++i) {
      x = (i & 43690) >>> 1 | (i & 21845) << 1;
      x = (x & 52428) >>> 2 | (x & 13107) << 2;
      x = (x & 61680) >>> 4 | (x & 3855) << 4;
      rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
    }
    hMap = function(cd, mb, r) {
      var s = cd.length;
      var i = 0;
      var l = new u16(mb);
      for (; i < s; ++i)
        ++l[cd[i] - 1];
      var le = new u16(mb);
      for (i = 0; i < mb; ++i) {
        le[i] = le[i - 1] + l[i - 1] << 1;
      }
      var co;
      if (r) {
        co = new u16(1 << mb);
        var rvb = 15 - mb;
        for (i = 0; i < s; ++i) {
          if (cd[i]) {
            var sv = i << 4 | cd[i];
            var r_1 = mb - cd[i];
            var v = le[cd[i] - 1]++ << r_1;
            for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
              co[rev[v] >>> rvb] = sv;
            }
          }
        }
      } else {
        co = new u16(s);
        for (i = 0; i < s; ++i) {
          if (cd[i]) {
            co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
          }
        }
      }
      return co;
    };
    flt = new u8(288);
    for (i = 0; i < 144; ++i)
      flt[i] = 8;
    for (i = 144; i < 256; ++i)
      flt[i] = 9;
    for (i = 256; i < 280; ++i)
      flt[i] = 7;
    for (i = 280; i < 288; ++i)
      flt[i] = 8;
    fdt = new u8(32);
    for (i = 0; i < 32; ++i)
      fdt[i] = 5;
    flm = hMap(flt, 9, 0);
    flrm = hMap(flt, 9, 1);
    fdm = hMap(fdt, 5, 0);
    fdrm = hMap(fdt, 5, 1);
    max = function(a) {
      var m = a[0];
      for (var i = 1; i < a.length; ++i) {
        if (a[i] > m)
          m = a[i];
      }
      return m;
    };
    bits = function(d, p, m) {
      var o = p / 8 | 0;
      return (d[o] | d[o + 1] << 8) >> (p & 7) & m;
    };
    bits16 = function(d, p) {
      var o = p / 8 | 0;
      return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);
    };
    shft = function(p) {
      return (p / 8 | 0) + (p & 7 && 1);
    };
    slc = function(v, s, e) {
      if (s == null || s < 0)
        s = 0;
      if (e == null || e > v.length)
        e = v.length;
      var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
      n.set(v.subarray(s, e));
      return n;
    };
    inflt = function(dat, buf, st) {
      var sl = dat.length;
      if (!sl || st && !st.l && sl < 5)
        return buf || new u8(0);
      var noBuf = !buf || st;
      var noSt = !st || st.i;
      if (!st)
        st = {};
      if (!buf)
        buf = new u8(sl * 3);
      var cbuf = function(l2) {
        var bl = buf.length;
        if (l2 > bl) {
          var nbuf = new u8(Math.max(bl * 2, l2));
          nbuf.set(buf);
          buf = nbuf;
        }
      };
      var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
      var tbts = sl * 8;
      do {
        if (!lm) {
          st.f = final = bits(dat, pos, 1);
          var type = bits(dat, pos + 1, 3);
          pos += 3;
          if (!type) {
            var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
            if (t > sl) {
              if (noSt)
                throw "unexpected EOF";
              break;
            }
            if (noBuf)
              cbuf(bt + l);
            buf.set(dat.subarray(s, t), bt);
            st.b = bt += l, st.p = pos = t * 8;
            continue;
          } else if (type == 1)
            lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
          else if (type == 2) {
            var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
            var tl = hLit + bits(dat, pos + 5, 31) + 1;
            pos += 14;
            var ldt = new u8(tl);
            var clt = new u8(19);
            for (var i = 0; i < hcLen; ++i) {
              clt[clim[i]] = bits(dat, pos + i * 3, 7);
            }
            pos += hcLen * 3;
            var clb = max(clt), clbmsk = (1 << clb) - 1;
            var clm = hMap(clt, clb, 1);
            for (var i = 0; i < tl; ) {
              var r = clm[bits(dat, pos, clbmsk)];
              pos += r & 15;
              var s = r >>> 4;
              if (s < 16) {
                ldt[i++] = s;
              } else {
                var c = 0, n = 0;
                if (s == 16)
                  n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                else if (s == 17)
                  n = 3 + bits(dat, pos, 7), pos += 3;
                else if (s == 18)
                  n = 11 + bits(dat, pos, 127), pos += 7;
                while (n--)
                  ldt[i++] = c;
              }
            }
            var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
            lbt = max(lt);
            dbt = max(dt);
            lm = hMap(lt, lbt, 1);
            dm = hMap(dt, dbt, 1);
          } else
            throw "invalid block type";
          if (pos > tbts) {
            if (noSt)
              throw "unexpected EOF";
            break;
          }
        }
        if (noBuf)
          cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var lpos = pos;
        for (; ; lpos = pos) {
          var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
          pos += c & 15;
          if (pos > tbts) {
            if (noSt)
              throw "unexpected EOF";
            break;
          }
          if (!c)
            throw "invalid length/literal";
          if (sym < 256)
            buf[bt++] = sym;
          else if (sym == 256) {
            lpos = pos, lm = null;
            break;
          } else {
            var add = sym - 254;
            if (sym > 264) {
              var i = sym - 257, b = fleb[i];
              add = bits(dat, pos, (1 << b) - 1) + fl[i];
              pos += b;
            }
            var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
            if (!d)
              throw "invalid distance";
            pos += d & 15;
            var dt = fd[dsym];
            if (dsym > 3) {
              var b = fdeb[dsym];
              dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
            }
            if (pos > tbts) {
              if (noSt)
                throw "unexpected EOF";
              break;
            }
            if (noBuf)
              cbuf(bt + 131072);
            var end = bt + add;
            for (; bt < end; bt += 4) {
              buf[bt] = buf[bt - dt];
              buf[bt + 1] = buf[bt + 1 - dt];
              buf[bt + 2] = buf[bt + 2 - dt];
              buf[bt + 3] = buf[bt + 3 - dt];
            }
            bt = end;
          }
        }
        st.l = lm, st.p = lpos, st.b = bt;
        if (lm)
          final = 1, st.m = lbt, st.d = dm, st.n = dbt;
      } while (!final);
      return bt == buf.length ? buf : slc(buf, 0, bt);
    };
    wbits = function(d, p, v) {
      v <<= p & 7;
      var o = p / 8 | 0;
      d[o] |= v;
      d[o + 1] |= v >>> 8;
    };
    wbits16 = function(d, p, v) {
      v <<= p & 7;
      var o = p / 8 | 0;
      d[o] |= v;
      d[o + 1] |= v >>> 8;
      d[o + 2] |= v >>> 16;
    };
    hTree = function(d, mb) {
      var t = [];
      for (var i = 0; i < d.length; ++i) {
        if (d[i])
          t.push({ s: i, f: d[i] });
      }
      var s = t.length;
      var t2 = t.slice();
      if (!s)
        return [et, 0];
      if (s == 1) {
        var v = new u8(t[0].s + 1);
        v[t[0].s] = 1;
        return [v, 1];
      }
      t.sort(function(a, b) {
        return a.f - b.f;
      });
      t.push({ s: -1, f: 25001 });
      var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
      t[0] = { s: -1, f: l.f + r.f, l, r };
      while (i1 != s - 1) {
        l = t[t[i0].f < t[i2].f ? i0++ : i2++];
        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
        t[i1++] = { s: -1, f: l.f + r.f, l, r };
      }
      var maxSym = t2[0].s;
      for (var i = 1; i < s; ++i) {
        if (t2[i].s > maxSym)
          maxSym = t2[i].s;
      }
      var tr = new u16(maxSym + 1);
      var mbt = ln(t[i1 - 1], tr, 0);
      if (mbt > mb) {
        var i = 0, dt = 0;
        var lft = mbt - mb, cst = 1 << lft;
        t2.sort(function(a, b) {
          return tr[b.s] - tr[a.s] || a.f - b.f;
        });
        for (; i < s; ++i) {
          var i2_1 = t2[i].s;
          if (tr[i2_1] > mb) {
            dt += cst - (1 << mbt - tr[i2_1]);
            tr[i2_1] = mb;
          } else
            break;
        }
        dt >>>= lft;
        while (dt > 0) {
          var i2_2 = t2[i].s;
          if (tr[i2_2] < mb)
            dt -= 1 << mb - tr[i2_2]++ - 1;
          else
            ++i;
        }
        for (; i >= 0 && dt; --i) {
          var i2_3 = t2[i].s;
          if (tr[i2_3] == mb) {
            --tr[i2_3];
            ++dt;
          }
        }
        mbt = mb;
      }
      return [new u8(tr), mbt];
    };
    ln = function(n, l, d) {
      return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
    };
    lc = function(c) {
      var s = c.length;
      while (s && !c[--s])
        ;
      var cl = new u16(++s);
      var cli = 0, cln = c[0], cls = 1;
      var w = function(v) {
        cl[cli++] = v;
      };
      for (var i = 1; i <= s; ++i) {
        if (c[i] == cln && i != s)
          ++cls;
        else {
          if (!cln && cls > 2) {
            for (; cls > 138; cls -= 138)
              w(32754);
            if (cls > 2) {
              w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
              cls = 0;
            }
          } else if (cls > 3) {
            w(cln), --cls;
            for (; cls > 6; cls -= 6)
              w(8304);
            if (cls > 2)
              w(cls - 3 << 5 | 8208), cls = 0;
          }
          while (cls--)
            w(cln);
          cls = 1;
          cln = c[i];
        }
      }
      return [cl.subarray(0, cli), s];
    };
    clen = function(cf, cl) {
      var l = 0;
      for (var i = 0; i < cl.length; ++i)
        l += cf[i] * cl[i];
      return l;
    };
    wfblk = function(out, pos, dat) {
      var s = dat.length;
      var o = shft(pos + 2);
      out[o] = s & 255;
      out[o + 1] = s >>> 8;
      out[o + 2] = out[o] ^ 255;
      out[o + 3] = out[o + 1] ^ 255;
      for (var i = 0; i < s; ++i)
        out[o + i + 4] = dat[i];
      return (o + 4 + s) * 8;
    };
    wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
      wbits(out, p++, final);
      ++lf[256];
      var _a2 = hTree(lf, 15), dlt = _a2[0], mlb = _a2[1];
      var _b2 = hTree(df, 15), ddt = _b2[0], mdb = _b2[1];
      var _c = lc(dlt), lclt = _c[0], nlc = _c[1];
      var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];
      var lcfreq = new u16(19);
      for (var i = 0; i < lclt.length; ++i)
        lcfreq[lclt[i] & 31]++;
      for (var i = 0; i < lcdt.length; ++i)
        lcfreq[lcdt[i] & 31]++;
      var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];
      var nlcc = 19;
      for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)
        ;
      var flen = bl + 5 << 3;
      var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
      var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
      if (flen <= ftlen && flen <= dtlen)
        return wfblk(out, p, dat.subarray(bs, bs + bl));
      var lm, ll, dm, dl;
      wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
      if (dtlen < ftlen) {
        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
        var llm = hMap(lct, mlcb, 0);
        wbits(out, p, nlc - 257);
        wbits(out, p + 5, ndc - 1);
        wbits(out, p + 10, nlcc - 4);
        p += 14;
        for (var i = 0; i < nlcc; ++i)
          wbits(out, p + 3 * i, lct[clim[i]]);
        p += 3 * nlcc;
        var lcts = [lclt, lcdt];
        for (var it = 0; it < 2; ++it) {
          var clct = lcts[it];
          for (var i = 0; i < clct.length; ++i) {
            var len = clct[i] & 31;
            wbits(out, p, llm[len]), p += lct[len];
            if (len > 15)
              wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;
          }
        }
      } else {
        lm = flm, ll = flt, dm = fdm, dl = fdt;
      }
      for (var i = 0; i < li; ++i) {
        if (syms[i] > 255) {
          var len = syms[i] >>> 18 & 31;
          wbits16(out, p, lm[len + 257]), p += ll[len + 257];
          if (len > 7)
            wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];
          var dst = syms[i] & 31;
          wbits16(out, p, dm[dst]), p += dl[dst];
          if (dst > 3)
            wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];
        } else {
          wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];
        }
      }
      wbits16(out, p, lm[256]);
      return p + ll[256];
    };
    deo = new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
    et = new u8(0);
    dflt = function(dat, lvl, plvl, pre, post, lst) {
      var s = dat.length;
      var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7e3)) + post);
      var w = o.subarray(pre, o.length - post);
      var pos = 0;
      if (!lvl || s < 8) {
        for (var i = 0; i <= s; i += 65535) {
          var e = i + 65535;
          if (e < s) {
            pos = wfblk(w, pos, dat.subarray(i, e));
          } else {
            w[i] = lst;
            pos = wfblk(w, pos, dat.subarray(i, s));
          }
        }
      } else {
        var opt = deo[lvl - 1];
        var n = opt >>> 13, c = opt & 8191;
        var msk_1 = (1 << plvl) - 1;
        var prev = new u16(32768), head = new u16(msk_1 + 1);
        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
        var hsh = function(i2) {
          return (dat[i2] ^ dat[i2 + 1] << bs1_1 ^ dat[i2 + 2] << bs2_1) & msk_1;
        };
        var syms = new u32(25e3);
        var lf = new u16(288), df = new u16(32);
        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;
        for (; i < s; ++i) {
          var hv = hsh(i);
          var imod = i & 32767, pimod = head[hv];
          prev[imod] = pimod;
          head[hv] = imod;
          if (wi <= i) {
            var rem = s - i;
            if ((lc_1 > 7e3 || li > 24576) && rem > 423) {
              pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
              li = lc_1 = eb = 0, bs = i;
              for (var j = 0; j < 286; ++j)
                lf[j] = 0;
              for (var j = 0; j < 30; ++j)
                df[j] = 0;
            }
            var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;
            if (rem > 2 && hv == hsh(i - dif)) {
              var maxn = Math.min(n, rem) - 1;
              var maxd = Math.min(32767, i);
              var ml = Math.min(258, rem);
              while (dif <= maxd && --ch_1 && imod != pimod) {
                if (dat[i + l] == dat[i + l - dif]) {
                  var nl = 0;
                  for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)
                    ;
                  if (nl > l) {
                    l = nl, d = dif;
                    if (nl > maxn)
                      break;
                    var mmd = Math.min(dif, nl - 2);
                    var md = 0;
                    for (var j = 0; j < mmd; ++j) {
                      var ti = i - dif + j + 32768 & 32767;
                      var pti = prev[ti];
                      var cd = ti - pti + 32768 & 32767;
                      if (cd > md)
                        md = cd, pimod = ti;
                    }
                  }
                }
                imod = pimod, pimod = prev[imod];
                dif += imod - pimod + 32768 & 32767;
              }
            }
            if (d) {
              syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
              var lin = revfl[l] & 31, din = revfd[d] & 31;
              eb += fleb[lin] + fdeb[din];
              ++lf[257 + lin];
              ++df[din];
              wi = i + l;
              ++lc_1;
            } else {
              syms[li++] = dat[i];
              ++lf[dat[i]];
            }
          }
        }
        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
        if (!lst && pos & 7)
          pos = wfblk(w, pos + 1, et);
      }
      return slc(o, 0, pre + shft(pos) + post);
    };
    crct = function() {
      var t = new u32(256);
      for (var i = 0; i < 256; ++i) {
        var c = i, k = 9;
        while (--k)
          c = (c & 1 && 3988292384) ^ c >>> 1;
        t[i] = c;
      }
      return t;
    }();
    crc = function() {
      var c = -1;
      return {
        p: function(d) {
          var cr = c;
          for (var i = 0; i < d.length; ++i)
            cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;
          c = cr;
        },
        d: function() {
          return ~c;
        }
      };
    };
    adler = function() {
      var a = 1, b = 0;
      return {
        p: function(d) {
          var n = a, m = b;
          var l = d.length;
          for (var i = 0; i != l; ) {
            var e = Math.min(i + 2655, l);
            for (; i < e; ++i)
              m += n += d[i];
            n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);
          }
          a = n, b = m;
        },
        d: function() {
          a %= 65521, b %= 65521;
          return (a & 255) << 24 | a >>> 8 << 16 | (b & 255) << 8 | b >>> 8;
        }
      };
    };
    dopt = function(dat, opt, pre, post, st) {
      return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);
    };
    mrg = function(a, b) {
      var o = {};
      for (var k in a)
        o[k] = a[k];
      for (var k in b)
        o[k] = b[k];
      return o;
    };
    wcln = function(fn, fnStr, td2) {
      var dt = fn();
      var st = fn.toString();
      var ks = st.slice(st.indexOf("[") + 1, st.lastIndexOf("]")).replace(/ /g, "").split(",");
      for (var i = 0; i < dt.length; ++i) {
        var v = dt[i], k = ks[i];
        if (typeof v == "function") {
          fnStr += ";" + k + "=";
          var st_1 = v.toString();
          if (v.prototype) {
            if (st_1.indexOf("[native code]") != -1) {
              var spInd = st_1.indexOf(" ", 8) + 1;
              fnStr += st_1.slice(spInd, st_1.indexOf("(", spInd));
            } else {
              fnStr += st_1;
              for (var t in v.prototype)
                fnStr += ";" + k + ".prototype." + t + "=" + v.prototype[t].toString();
            }
          } else
            fnStr += st_1;
        } else
          td2[k] = v;
      }
      return [fnStr, td2];
    };
    ch = [];
    cbfs = function(v) {
      var tl = [];
      for (var k in v) {
        if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32)
          tl.push((v[k] = new v[k].constructor(v[k])).buffer);
      }
      return tl;
    };
    wrkr = function(fns, init, id, cb) {
      var _a2;
      if (!ch[id]) {
        var fnStr = "", td_1 = {}, m = fns.length - 1;
        for (var i = 0; i < m; ++i)
          _a2 = wcln(fns[i], fnStr, td_1), fnStr = _a2[0], td_1 = _a2[1];
        ch[id] = wcln(fns[m], fnStr, td_1);
      }
      var td2 = mrg({}, ch[id][1]);
      return wk(ch[id][0] + ";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=" + init.toString() + "}", id, td2, cbfs(td2), cb);
    };
    bInflt = function() {
      return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, hMap, max, bits, bits16, shft, slc, inflt, inflateSync, pbf, gu8];
    };
    bDflt = function() {
      return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf];
    };
    gze = function() {
      return [gzh, gzhl, wbytes, crc, crct];
    };
    guze = function() {
      return [gzs, gzl];
    };
    zle = function() {
      return [zlh, wbytes, adler];
    };
    zule = function() {
      return [zlv];
    };
    pbf = function(msg) {
      return postMessage(msg, [msg.buffer]);
    };
    gu8 = function(o) {
      return o && o.size && new u8(o.size);
    };
    astrm = function(strm) {
      strm.ondata = function(dat, final) {
        return postMessage([dat, final], [dat.buffer]);
      };
      return function(ev) {
        return strm.push(ev.data[0], ev.data[1]);
      };
    };
    astrmify = function(fns, strm, opts, init, id) {
      var t;
      var w = wrkr(fns, init, id, function(err, dat) {
        if (err)
          w.terminate(), strm.ondata.call(strm, err);
        else {
          if (dat[1])
            w.terminate();
          strm.ondata.call(strm, err, dat[0], dat[1]);
        }
      });
      w.postMessage(opts);
      strm.push = function(d, f) {
        if (t)
          throw "stream finished";
        if (!strm.ondata)
          throw "no stream handler";
        w.postMessage([d, t = f], [d.buffer]);
      };
      strm.terminate = function() {
        w.terminate();
      };
    };
    b2 = function(d, b) {
      return d[b] | d[b + 1] << 8;
    };
    b4 = function(d, b) {
      return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;
    };
    b8 = function(d, b) {
      return b4(d, b) + b4(d, b + 4) * 4294967296;
    };
    wbytes = function(d, b, v) {
      for (; v; ++b)
        d[b] = v, v >>>= 8;
    };
    gzh = function(c, o) {
      var fn = o.filename;
      c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3;
      if (o.mtime != 0)
        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1e3));
      if (fn) {
        c[3] = 8;
        for (var i = 0; i <= fn.length; ++i)
          c[i + 10] = fn.charCodeAt(i);
      }
    };
    gzs = function(d) {
      if (d[0] != 31 || d[1] != 139 || d[2] != 8)
        throw "invalid gzip data";
      var flg = d[3];
      var st = 10;
      if (flg & 4)
        st += d[10] | (d[11] << 8) + 2;
      for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
        ;
      return st + (flg & 2);
    };
    gzl = function(d) {
      var l = d.length;
      return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;
    };
    gzhl = function(o) {
      return 10 + (o.filename && o.filename.length + 1 || 0);
    };
    zlh = function(c, o) {
      var lv = o.level, fl2 = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
      c[0] = 120, c[1] = fl2 << 6 | (fl2 ? 32 - 2 * fl2 : 1);
    };
    zlv = function(d) {
      if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)
        throw "invalid zlib data";
      if (d[1] & 32)
        throw "invalid zlib data: preset dictionaries not supported";
    };
    Deflate = function() {
      function Deflate2(opts, cb) {
        if (!cb && typeof opts == "function")
          cb = opts, opts = {};
        this.ondata = cb;
        this.o = opts || {};
      }
      Deflate2.prototype.p = function(c, f) {
        this.ondata(dopt(c, this.o, 0, 0, !f), f);
      };
      Deflate2.prototype.push = function(chunk, final) {
        if (this.d)
          throw "stream finished";
        if (!this.ondata)
          throw "no stream handler";
        this.d = final;
        this.p(chunk, final || false);
      };
      return Deflate2;
    }();
    AsyncDeflate = function() {
      function AsyncDeflate2(opts, cb) {
        astrmify([
          bDflt,
          function() {
            return [astrm, Deflate];
          }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
          var strm = new Deflate(ev.data);
          onmessage = astrm(strm);
        }, 6);
      }
      return AsyncDeflate2;
    }();
    Inflate = function() {
      function Inflate2(cb) {
        this.s = {};
        this.p = new u8(0);
        this.ondata = cb;
      }
      Inflate2.prototype.e = function(c) {
        if (this.d)
          throw "stream finished";
        if (!this.ondata)
          throw "no stream handler";
        var l = this.p.length;
        var n = new u8(l + c.length);
        n.set(this.p), n.set(c, l), this.p = n;
      };
      Inflate2.prototype.c = function(final) {
        this.d = this.s.i = final || false;
        var bts = this.s.b;
        var dt = inflt(this.p, this.o, this.s);
        this.ondata(slc(dt, bts, this.s.b), this.d);
        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
        this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
      };
      Inflate2.prototype.push = function(chunk, final) {
        this.e(chunk), this.c(final);
      };
      return Inflate2;
    }();
    AsyncInflate = function() {
      function AsyncInflate2(cb) {
        this.ondata = cb;
        astrmify([
          bInflt,
          function() {
            return [astrm, Inflate];
          }
        ], this, 0, function() {
          var strm = new Inflate();
          onmessage = astrm(strm);
        }, 7);
      }
      return AsyncInflate2;
    }();
    Gzip = function() {
      function Gzip2(opts, cb) {
        this.c = crc();
        this.l = 0;
        this.v = 1;
        Deflate.call(this, opts, cb);
      }
      Gzip2.prototype.push = function(chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
      };
      Gzip2.prototype.p = function(c, f) {
        this.c.p(c);
        this.l += c.length;
        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);
        if (this.v)
          gzh(raw, this.o), this.v = 0;
        if (f)
          wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
        this.ondata(raw, f);
      };
      return Gzip2;
    }();
    AsyncGzip = function() {
      function AsyncGzip2(opts, cb) {
        astrmify([
          bDflt,
          gze,
          function() {
            return [astrm, Deflate, Gzip];
          }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
          var strm = new Gzip(ev.data);
          onmessage = astrm(strm);
        }, 8);
      }
      return AsyncGzip2;
    }();
    Gunzip = function() {
      function Gunzip2(cb) {
        this.v = 1;
        Inflate.call(this, cb);
      }
      Gunzip2.prototype.push = function(chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
          var s = this.p.length > 3 ? gzs(this.p) : 4;
          if (s >= this.p.length && !final)
            return;
          this.p = this.p.subarray(s), this.v = 0;
        }
        if (final) {
          if (this.p.length < 8)
            throw "invalid gzip stream";
          this.p = this.p.subarray(0, -8);
        }
        Inflate.prototype.c.call(this, final);
      };
      return Gunzip2;
    }();
    AsyncGunzip = function() {
      function AsyncGunzip2(cb) {
        this.ondata = cb;
        astrmify([
          bInflt,
          guze,
          function() {
            return [astrm, Inflate, Gunzip];
          }
        ], this, 0, function() {
          var strm = new Gunzip();
          onmessage = astrm(strm);
        }, 9);
      }
      return AsyncGunzip2;
    }();
    Zlib = function() {
      function Zlib2(opts, cb) {
        this.c = adler();
        this.v = 1;
        Deflate.call(this, opts, cb);
      }
      Zlib2.prototype.push = function(chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
      };
      Zlib2.prototype.p = function(c, f) {
        this.c.p(c);
        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);
        if (this.v)
          zlh(raw, this.o), this.v = 0;
        if (f)
          wbytes(raw, raw.length - 4, this.c.d());
        this.ondata(raw, f);
      };
      return Zlib2;
    }();
    AsyncZlib = function() {
      function AsyncZlib2(opts, cb) {
        astrmify([
          bDflt,
          zle,
          function() {
            return [astrm, Deflate, Zlib];
          }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
          var strm = new Zlib(ev.data);
          onmessage = astrm(strm);
        }, 10);
      }
      return AsyncZlib2;
    }();
    Unzlib = function() {
      function Unzlib2(cb) {
        this.v = 1;
        Inflate.call(this, cb);
      }
      Unzlib2.prototype.push = function(chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
          if (this.p.length < 2 && !final)
            return;
          this.p = this.p.subarray(2), this.v = 0;
        }
        if (final) {
          if (this.p.length < 4)
            throw "invalid zlib stream";
          this.p = this.p.subarray(0, -4);
        }
        Inflate.prototype.c.call(this, final);
      };
      return Unzlib2;
    }();
    AsyncUnzlib = function() {
      function AsyncUnzlib2(cb) {
        this.ondata = cb;
        astrmify([
          bInflt,
          zule,
          function() {
            return [astrm, Inflate, Unzlib];
          }
        ], this, 0, function() {
          var strm = new Unzlib();
          onmessage = astrm(strm);
        }, 11);
      }
      return AsyncUnzlib2;
    }();
    Decompress = function() {
      function Decompress2(cb) {
        this.G = Gunzip;
        this.I = Inflate;
        this.Z = Unzlib;
        this.ondata = cb;
      }
      Decompress2.prototype.push = function(chunk, final) {
        if (!this.ondata)
          throw "no stream handler";
        if (!this.s) {
          if (this.p && this.p.length) {
            var n = new u8(this.p.length + chunk.length);
            n.set(this.p), n.set(chunk, this.p.length);
          } else
            this.p = chunk;
          if (this.p.length > 2) {
            var _this_1 = this;
            var cb = function() {
              _this_1.ondata.apply(_this_1, arguments);
            };
            this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(cb) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(cb) : new this.Z(cb);
            this.s.push(this.p, final);
            this.p = null;
          }
        } else
          this.s.push(chunk, final);
      };
      return Decompress2;
    }();
    AsyncDecompress = function() {
      function AsyncDecompress2(cb) {
        this.G = AsyncGunzip;
        this.I = AsyncInflate;
        this.Z = AsyncUnzlib;
        this.ondata = cb;
      }
      AsyncDecompress2.prototype.push = function(chunk, final) {
        Decompress.prototype.push.call(this, chunk, final);
      };
      return AsyncDecompress2;
    }();
    te = typeof TextEncoder != "undefined" && new TextEncoder();
    td = typeof TextDecoder != "undefined" && new TextDecoder();
    tds = 0;
    try {
      td.decode(et, { stream: true });
      tds = 1;
    } catch (e) {
    }
    dutf8 = function(d) {
      for (var r = "", i = 0; ; ) {
        var c = d[i++];
        var eb = (c > 127) + (c > 223) + (c > 239);
        if (i + eb > d.length)
          return [r, slc(d, i - 1)];
        if (!eb)
          r += String.fromCharCode(c);
        else if (eb == 3) {
          c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | d[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
        } else if (eb & 1)
          r += String.fromCharCode((c & 31) << 6 | d[i++] & 63);
        else
          r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | d[i++] & 63);
      }
    };
    DecodeUTF8 = function() {
      function DecodeUTF82(cb) {
        this.ondata = cb;
        if (tds)
          this.t = new TextDecoder();
        else
          this.p = et;
      }
      DecodeUTF82.prototype.push = function(chunk, final) {
        if (!this.ondata)
          throw "no callback";
        final = !!final;
        if (this.t) {
          this.ondata(this.t.decode(chunk, { stream: true }), final);
          if (final) {
            if (this.t.decode().length)
              throw "invalid utf-8 data";
            this.t = null;
          }
          return;
        }
        if (!this.p)
          throw "stream finished";
        var dat = new u8(this.p.length + chunk.length);
        dat.set(this.p);
        dat.set(chunk, this.p.length);
        var _a2 = dutf8(dat), ch3 = _a2[0], np = _a2[1];
        if (final) {
          if (np.length)
            throw "invalid utf-8 data";
          this.p = null;
        } else
          this.p = np;
        this.ondata(ch3, final);
      };
      return DecodeUTF82;
    }();
    EncodeUTF8 = function() {
      function EncodeUTF82(cb) {
        this.ondata = cb;
      }
      EncodeUTF82.prototype.push = function(chunk, final) {
        if (!this.ondata)
          throw "no callback";
        if (this.d)
          throw "stream finished";
        this.ondata(strToU8(chunk), this.d = final || false);
      };
      return EncodeUTF82;
    }();
    dbf = function(l) {
      return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0;
    };
    z64e = function(d, b) {
      for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))
        ;
      return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];
    };
    exfl = function(ex) {
      var le = 0;
      if (ex) {
        for (var k in ex) {
          var l = ex[k].length;
          if (l > 65535)
            throw "extra field too long";
          le += l + 4;
        }
      }
      return le;
    };
    wzh = function(d, b, f, fn, u, c, ce, co) {
      var fl2 = fn.length, ex = f.extra, col = co && co.length;
      var exl = exfl(ex);
      wbytes(d, b, ce != null ? 33639248 : 67324752), b += 4;
      if (ce != null)
        d[b++] = 20, d[b++] = f.os;
      d[b] = 20, b += 2;
      d[b++] = f.flag << 1 | (c == null && 8), d[b++] = u && 8;
      d[b++] = f.compression & 255, d[b++] = f.compression >> 8;
      var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;
      if (y < 0 || y > 119)
        throw "date not in range 1980-2099";
      wbytes(d, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >>> 1), b += 4;
      if (c != null) {
        wbytes(d, b, f.crc);
        wbytes(d, b + 4, c);
        wbytes(d, b + 8, f.size);
      }
      wbytes(d, b + 12, fl2);
      wbytes(d, b + 14, exl), b += 16;
      if (ce != null) {
        wbytes(d, b, col);
        wbytes(d, b + 6, f.attrs);
        wbytes(d, b + 10, ce), b += 14;
      }
      d.set(fn, b);
      b += fl2;
      if (exl) {
        for (var k in ex) {
          var exf = ex[k], l = exf.length;
          wbytes(d, b, +k);
          wbytes(d, b + 2, l);
          d.set(exf, b + 4), b += 4 + l;
        }
      }
      if (col)
        d.set(co, b), b += col;
      return b;
    };
    wzf = function(o, b, c, d, e) {
      wbytes(o, b, 101010256);
      wbytes(o, b + 8, c);
      wbytes(o, b + 10, c);
      wbytes(o, b + 12, d);
      wbytes(o, b + 16, e);
    };
    ZipPassThrough = function() {
      function ZipPassThrough2(filename) {
        this.filename = filename;
        this.c = crc();
        this.size = 0;
        this.compression = 0;
      }
      ZipPassThrough2.prototype.process = function(chunk, final) {
        this.ondata(null, chunk, final);
      };
      ZipPassThrough2.prototype.push = function(chunk, final) {
        if (!this.ondata)
          throw "no callback - add to ZIP archive before pushing";
        this.c.p(chunk);
        this.size += chunk.length;
        if (final)
          this.crc = this.c.d();
        this.process(chunk, final || false);
      };
      return ZipPassThrough2;
    }();
    ZipDeflate = function() {
      function ZipDeflate2(filename, opts) {
        var _this_1 = this;
        if (!opts)
          opts = {};
        ZipPassThrough.call(this, filename);
        this.d = new Deflate(opts, function(dat, final) {
          _this_1.ondata(null, dat, final);
        });
        this.compression = 8;
        this.flag = dbf(opts.level);
      }
      ZipDeflate2.prototype.process = function(chunk, final) {
        try {
          this.d.push(chunk, final);
        } catch (e) {
          this.ondata(e, null, final);
        }
      };
      ZipDeflate2.prototype.push = function(chunk, final) {
        ZipPassThrough.prototype.push.call(this, chunk, final);
      };
      return ZipDeflate2;
    }();
    AsyncZipDeflate = function() {
      function AsyncZipDeflate2(filename, opts) {
        var _this_1 = this;
        if (!opts)
          opts = {};
        ZipPassThrough.call(this, filename);
        this.d = new AsyncDeflate(opts, function(err, dat, final) {
          _this_1.ondata(err, dat, final);
        });
        this.compression = 8;
        this.flag = dbf(opts.level);
        this.terminate = this.d.terminate;
      }
      AsyncZipDeflate2.prototype.process = function(chunk, final) {
        this.d.push(chunk, final);
      };
      AsyncZipDeflate2.prototype.push = function(chunk, final) {
        ZipPassThrough.prototype.push.call(this, chunk, final);
      };
      return AsyncZipDeflate2;
    }();
    Zip = function() {
      function Zip2(cb) {
        this.ondata = cb;
        this.u = [];
        this.d = 1;
      }
      Zip2.prototype.add = function(file) {
        var _this_1 = this;
        if (this.d & 2)
          throw "stream finished";
        var f = strToU8(file.filename), fl2 = f.length;
        var com = file.comment, o = com && strToU8(com);
        var u = fl2 != file.filename.length || o && com.length != o.length;
        var hl = fl2 + exfl(file.extra) + 30;
        if (fl2 > 65535)
          throw "filename too long";
        var header = new u8(hl);
        wzh(header, 0, file, f, u);
        var chks = [header];
        var pAll = function() {
          for (var _i = 0, chks_1 = chks; _i < chks_1.length; _i++) {
            var chk = chks_1[_i];
            _this_1.ondata(null, chk, false);
          }
          chks = [];
        };
        var tr = this.d;
        this.d = 0;
        var ind = this.u.length;
        var uf = mrg(file, {
          f,
          u,
          o,
          t: function() {
            if (file.terminate)
              file.terminate();
          },
          r: function() {
            pAll();
            if (tr) {
              var nxt = _this_1.u[ind + 1];
              if (nxt)
                nxt.r();
              else
                _this_1.d = 1;
            }
            tr = 1;
          }
        });
        var cl = 0;
        file.ondata = function(err, dat, final) {
          if (err) {
            _this_1.ondata(err, dat, final);
            _this_1.terminate();
          } else {
            cl += dat.length;
            chks.push(dat);
            if (final) {
              var dd = new u8(16);
              wbytes(dd, 0, 134695760);
              wbytes(dd, 4, file.crc);
              wbytes(dd, 8, cl);
              wbytes(dd, 12, file.size);
              chks.push(dd);
              uf.c = cl, uf.b = hl + cl + 16, uf.crc = file.crc, uf.size = file.size;
              if (tr)
                uf.r();
              tr = 1;
            } else if (tr)
              pAll();
          }
        };
        this.u.push(uf);
      };
      Zip2.prototype.end = function() {
        var _this_1 = this;
        if (this.d & 2) {
          if (this.d & 1)
            throw "stream finishing";
          throw "stream finished";
        }
        if (this.d)
          this.e();
        else
          this.u.push({
            r: function() {
              if (!(_this_1.d & 1))
                return;
              _this_1.u.splice(-1, 1);
              _this_1.e();
            },
            t: function() {
            }
          });
        this.d = 3;
      };
      Zip2.prototype.e = function() {
        var bt = 0, l = 0, tl = 0;
        for (var _i = 0, _a2 = this.u; _i < _a2.length; _i++) {
          var f = _a2[_i];
          tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);
        }
        var out = new u8(tl + 22);
        for (var _b2 = 0, _c = this.u; _b2 < _c.length; _b2++) {
          var f = _c[_b2];
          wzh(out, bt, f, f.f, f.u, f.c, l, f.o);
          bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;
        }
        wzf(out, bt, this.u.length, tl, l);
        this.ondata(null, out, true);
        this.d = 2;
      };
      Zip2.prototype.terminate = function() {
        for (var _i = 0, _a2 = this.u; _i < _a2.length; _i++) {
          var f = _a2[_i];
          f.t();
        }
        this.d = 2;
      };
      return Zip2;
    }();
    UnzipPassThrough = function() {
      function UnzipPassThrough2() {
      }
      UnzipPassThrough2.prototype.push = function(data, final) {
        this.ondata(null, data, final);
      };
      UnzipPassThrough2.compression = 0;
      return UnzipPassThrough2;
    }();
    UnzipInflate = function() {
      function UnzipInflate2() {
        var _this_1 = this;
        this.i = new Inflate(function(dat, final) {
          _this_1.ondata(null, dat, final);
        });
      }
      UnzipInflate2.prototype.push = function(data, final) {
        try {
          this.i.push(data, final);
        } catch (e) {
          this.ondata(e, data, final);
        }
      };
      UnzipInflate2.compression = 8;
      return UnzipInflate2;
    }();
    AsyncUnzipInflate = function() {
      function AsyncUnzipInflate2(_, sz) {
        var _this_1 = this;
        if (sz < 32e4) {
          this.i = new Inflate(function(dat, final) {
            _this_1.ondata(null, dat, final);
          });
        } else {
          this.i = new AsyncInflate(function(err, dat, final) {
            _this_1.ondata(err, dat, final);
          });
          this.terminate = this.i.terminate;
        }
      }
      AsyncUnzipInflate2.prototype.push = function(data, final) {
        if (this.i.terminate)
          data = slc(data, 0);
        this.i.push(data, final);
      };
      AsyncUnzipInflate2.compression = 8;
      return AsyncUnzipInflate2;
    }();
    Unzip = function() {
      function Unzip2(cb) {
        this.onfile = cb;
        this.k = [];
        this.o = {
          0: UnzipPassThrough
        };
        this.p = et;
      }
      Unzip2.prototype.push = function(chunk, final) {
        var _this_1 = this;
        if (!this.onfile)
          throw "no callback";
        if (!this.p)
          throw "stream finished";
        if (this.c > 0) {
          var len = Math.min(this.c, chunk.length);
          var toAdd = chunk.subarray(0, len);
          this.c -= len;
          if (this.d)
            this.d.push(toAdd, !this.c);
          else
            this.k[0].push(toAdd);
          chunk = chunk.subarray(len);
          if (chunk.length)
            return this.push(chunk, final);
        } else {
          var f = 0, i = 0, is = void 0, buf = void 0;
          if (!this.p.length)
            buf = chunk;
          else if (!chunk.length)
            buf = this.p;
          else {
            buf = new u8(this.p.length + chunk.length);
            buf.set(this.p), buf.set(chunk, this.p.length);
          }
          var l = buf.length, oc = this.c, add = oc && this.d;
          var _loop_2 = function() {
            var _a2;
            var sig = b4(buf, i);
            if (sig == 67324752) {
              f = 1, is = i;
              this_1.d = null;
              this_1.c = 0;
              var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);
              if (l > i + 30 + fnl + es) {
                var chks_2 = [];
                this_1.k.unshift(chks_2);
                f = 2;
                var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);
                var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);
                if (sc_1 == 4294967295) {
                  _a2 = dd ? [-2] : z64e(buf, i), sc_1 = _a2[0], su_1 = _a2[1];
                } else if (dd)
                  sc_1 = -1;
                i += es;
                this_1.c = sc_1;
                var d_1;
                var file_1 = {
                  name: fn_1,
                  compression: cmp_1,
                  start: function() {
                    if (!file_1.ondata)
                      throw "no callback";
                    if (!sc_1)
                      file_1.ondata(null, et, true);
                    else {
                      var ctr = _this_1.o[cmp_1];
                      if (!ctr)
                        throw "unknown compression type " + cmp_1;
                      d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);
                      d_1.ondata = function(err, dat3, final2) {
                        file_1.ondata(err, dat3, final2);
                      };
                      for (var _i = 0, chks_3 = chks_2; _i < chks_3.length; _i++) {
                        var dat2 = chks_3[_i];
                        d_1.push(dat2, false);
                      }
                      if (_this_1.k[0] == chks_2 && _this_1.c)
                        _this_1.d = d_1;
                      else
                        d_1.push(et, true);
                    }
                  },
                  terminate: function() {
                    if (d_1 && d_1.terminate)
                      d_1.terminate();
                  }
                };
                if (sc_1 >= 0)
                  file_1.size = sc_1, file_1.originalSize = su_1;
                this_1.onfile(file_1);
              }
              return "break";
            } else if (oc) {
              if (sig == 134695760) {
                is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;
                return "break";
              } else if (sig == 33639248) {
                is = i -= 4, f = 3, this_1.c = 0;
                return "break";
              }
            }
          };
          var this_1 = this;
          for (; i < l - 4; ++i) {
            var state_1 = _loop_2();
            if (state_1 === "break")
              break;
          }
          this.p = et;
          if (oc < 0) {
            var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 134695760 && 4)) : buf.subarray(0, i);
            if (add)
              add.push(dat, !!f);
            else
              this.k[+(f == 2)].push(dat);
          }
          if (f & 2)
            return this.push(buf.subarray(i), final);
          this.p = buf.subarray(i);
        }
        if (final) {
          if (this.c)
            throw "invalid zip file";
          this.p = null;
        }
      };
      Unzip2.prototype.register = function(decoder) {
        this.o[decoder.compression] = decoder;
      };
      return Unzip2;
    }();
  }
});

// node_modules/three/examples/jsm/curves/NURBSUtils.js
function findSpan(p, u, U) {
  const n = U.length - p - 1;
  if (u >= U[n]) {
    return n - 1;
  }
  if (u <= U[p]) {
    return p;
  }
  let low = p;
  let high = n;
  let mid = Math.floor((low + high) / 2);
  while (u < U[mid] || u >= U[mid + 1]) {
    if (u < U[mid]) {
      high = mid;
    } else {
      low = mid;
    }
    mid = Math.floor((low + high) / 2);
  }
  return mid;
}
function calcBasisFunctions(span, u, p, U) {
  const N = [];
  const left = [];
  const right = [];
  N[0] = 1;
  for (let j = 1; j <= p; ++j) {
    left[j] = u - U[span + 1 - j];
    right[j] = U[span + j] - u;
    let saved = 0;
    for (let r = 0; r < j; ++r) {
      const rv = right[r + 1];
      const lv = left[j - r];
      const temp = N[r] / (rv + lv);
      N[r] = saved + rv * temp;
      saved = lv * temp;
    }
    N[j] = saved;
  }
  return N;
}
function calcBSplinePoint(p, U, P, u) {
  const span = findSpan(p, u, U);
  const N = calcBasisFunctions(span, u, p, U);
  const C = new Vector4(0, 0, 0, 0);
  for (let j = 0; j <= p; ++j) {
    const point = P[span - p + j];
    const Nj = N[j];
    const wNj = point.w * Nj;
    C.x += point.x * wNj;
    C.y += point.y * wNj;
    C.z += point.z * wNj;
    C.w += point.w * Nj;
  }
  return C;
}
function calcBasisFunctionDerivatives(span, u, p, n, U) {
  const zeroArr = [];
  for (let i = 0; i <= p; ++i)
    zeroArr[i] = 0;
  const ders = [];
  for (let i = 0; i <= n; ++i)
    ders[i] = zeroArr.slice(0);
  const ndu = [];
  for (let i = 0; i <= p; ++i)
    ndu[i] = zeroArr.slice(0);
  ndu[0][0] = 1;
  const left = zeroArr.slice(0);
  const right = zeroArr.slice(0);
  for (let j = 1; j <= p; ++j) {
    left[j] = u - U[span + 1 - j];
    right[j] = U[span + j] - u;
    let saved = 0;
    for (let r2 = 0; r2 < j; ++r2) {
      const rv = right[r2 + 1];
      const lv = left[j - r2];
      ndu[j][r2] = rv + lv;
      const temp = ndu[r2][j - 1] / ndu[j][r2];
      ndu[r2][j] = saved + rv * temp;
      saved = lv * temp;
    }
    ndu[j][j] = saved;
  }
  for (let j = 0; j <= p; ++j) {
    ders[0][j] = ndu[j][p];
  }
  for (let r2 = 0; r2 <= p; ++r2) {
    let s1 = 0;
    let s2 = 1;
    const a = [];
    for (let i = 0; i <= p; ++i) {
      a[i] = zeroArr.slice(0);
    }
    a[0][0] = 1;
    for (let k = 1; k <= n; ++k) {
      let d = 0;
      const rk = r2 - k;
      const pk = p - k;
      if (r2 >= k) {
        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];
        d = a[s2][0] * ndu[rk][pk];
      }
      const j1 = rk >= -1 ? 1 : -rk;
      const j2 = r2 - 1 <= pk ? k - 1 : p - r2;
      for (let j3 = j1; j3 <= j2; ++j3) {
        a[s2][j3] = (a[s1][j3] - a[s1][j3 - 1]) / ndu[pk + 1][rk + j3];
        d += a[s2][j3] * ndu[rk + j3][pk];
      }
      if (r2 <= pk) {
        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r2];
        d += a[s2][k] * ndu[r2][pk];
      }
      ders[k][r2] = d;
      const j = s1;
      s1 = s2;
      s2 = j;
    }
  }
  let r = p;
  for (let k = 1; k <= n; ++k) {
    for (let j = 0; j <= p; ++j) {
      ders[k][j] *= r;
    }
    r *= p - k;
  }
  return ders;
}
function calcBSplineDerivatives(p, U, P, u, nd) {
  const du = nd < p ? nd : p;
  const CK = [];
  const span = findSpan(p, u, U);
  const nders = calcBasisFunctionDerivatives(span, u, p, du, U);
  const Pw = [];
  for (let i = 0; i < P.length; ++i) {
    const point = P[i].clone();
    const w = point.w;
    point.x *= w;
    point.y *= w;
    point.z *= w;
    Pw[i] = point;
  }
  for (let k = 0; k <= du; ++k) {
    const point = Pw[span - p].clone().multiplyScalar(nders[k][0]);
    for (let j = 1; j <= p; ++j) {
      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));
    }
    CK[k] = point;
  }
  for (let k = du + 1; k <= nd + 1; ++k) {
    CK[k] = new Vector4(0, 0, 0);
  }
  return CK;
}
function calcKoverI(k, i) {
  let nom = 1;
  for (let j = 2; j <= k; ++j) {
    nom *= j;
  }
  let denom = 1;
  for (let j = 2; j <= i; ++j) {
    denom *= j;
  }
  for (let j = 2; j <= k - i; ++j) {
    denom *= j;
  }
  return nom / denom;
}
function calcRationalCurveDerivatives(Pders) {
  const nd = Pders.length;
  const Aders = [];
  const wders = [];
  for (let i = 0; i < nd; ++i) {
    const point = Pders[i];
    Aders[i] = new Vector3(point.x, point.y, point.z);
    wders[i] = point.w;
  }
  const CK = [];
  for (let k = 0; k < nd; ++k) {
    const v = Aders[k].clone();
    for (let i = 1; i <= k; ++i) {
      v.sub(CK[k - i].clone().multiplyScalar(calcKoverI(k, i) * wders[i]));
    }
    CK[k] = v.divideScalar(wders[0]);
  }
  return CK;
}
function calcNURBSDerivatives(p, U, P, u, nd) {
  const Pders = calcBSplineDerivatives(p, U, P, u, nd);
  return calcRationalCurveDerivatives(Pders);
}
var init_NURBSUtils = __esm({
  "node_modules/three/examples/jsm/curves/NURBSUtils.js"() {
    init_three_module();
  }
});

// node_modules/three/examples/jsm/curves/NURBSCurve.js
var NURBSCurve;
var init_NURBSCurve = __esm({
  "node_modules/three/examples/jsm/curves/NURBSCurve.js"() {
    init_three_module();
    init_NURBSUtils();
    NURBSCurve = class extends Curve {
      constructor(degree, knots, controlPoints, startKnot, endKnot) {
        super();
        this.degree = degree;
        this.knots = knots;
        this.controlPoints = [];
        this.startKnot = startKnot || 0;
        this.endKnot = endKnot || this.knots.length - 1;
        for (let i = 0; i < controlPoints.length; ++i) {
          const point = controlPoints[i];
          this.controlPoints[i] = new Vector4(point.x, point.y, point.z, point.w);
        }
      }
      getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        const u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]);
        const hpoint = calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);
        if (hpoint.w !== 1) {
          hpoint.divideScalar(hpoint.w);
        }
        return point.set(hpoint.x, hpoint.y, hpoint.z);
      }
      getTangent(t, optionalTarget = new Vector3()) {
        const tangent = optionalTarget;
        const u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);
        const ders = calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);
        tangent.copy(ders[1]).normalize();
        return tangent;
      }
    };
  }
});

// node_modules/three/examples/jsm/loaders/FBXLoader.js
var FBXLoader_exports = {};
__export(FBXLoader_exports, {
  FBXLoader: () => FBXLoader
});
function isFbxFormatBinary(buffer) {
  const CORRECT = "Kaydara FBX Binary  \0";
  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);
}
function isFbxFormatASCII(text) {
  const CORRECT = ["K", "a", "y", "d", "a", "r", "a", "\\", "F", "B", "X", "\\", "B", "i", "n", "a", "r", "y", "\\", "\\"];
  let cursor = 0;
  function read(offset) {
    const result = text[offset - 1];
    text = text.slice(cursor + offset);
    cursor++;
    return result;
  }
  for (let i = 0; i < CORRECT.length; ++i) {
    const num = read(1);
    if (num === CORRECT[i]) {
      return false;
    }
  }
  return true;
}
function getFbxVersion(text) {
  const versionRegExp = /FBXVersion: (\d+)/;
  const match = text.match(versionRegExp);
  if (match) {
    const version = parseInt(match[1]);
    return version;
  }
  throw new Error("THREE.FBXLoader: Cannot find the version number for the file given.");
}
function convertFBXTimeToSeconds(time) {
  return time / 46186158e3;
}
function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
  let index;
  switch (infoObject.mappingType) {
    case "ByPolygonVertex":
      index = polygonVertexIndex;
      break;
    case "ByPolygon":
      index = polygonIndex;
      break;
    case "ByVertice":
      index = vertexIndex;
      break;
    case "AllSame":
      index = infoObject.indices[0];
      break;
    default:
      console.warn("THREE.FBXLoader: unknown attribute mapping type " + infoObject.mappingType);
  }
  if (infoObject.referenceType === "IndexToDirect")
    index = infoObject.indices[index];
  const from = index * infoObject.dataSize;
  const to = from + infoObject.dataSize;
  return slice(dataArray, infoObject.buffer, from, to);
}
function generateTransform(transformData) {
  const lTranslationM = new Matrix4();
  const lPreRotationM = new Matrix4();
  const lRotationM = new Matrix4();
  const lPostRotationM = new Matrix4();
  const lScalingM = new Matrix4();
  const lScalingPivotM = new Matrix4();
  const lScalingOffsetM = new Matrix4();
  const lRotationOffsetM = new Matrix4();
  const lRotationPivotM = new Matrix4();
  const lParentGX = new Matrix4();
  const lParentLX = new Matrix4();
  const lGlobalT = new Matrix4();
  const inheritType = transformData.inheritType ? transformData.inheritType : 0;
  if (transformData.translation)
    lTranslationM.setPosition(tempVec.fromArray(transformData.translation));
  if (transformData.preRotation) {
    const array = transformData.preRotation.map(MathUtils.degToRad);
    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);
    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
  }
  if (transformData.rotation) {
    const array = transformData.rotation.map(MathUtils.degToRad);
    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);
    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
  }
  if (transformData.postRotation) {
    const array = transformData.postRotation.map(MathUtils.degToRad);
    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);
    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
    lPostRotationM.invert();
  }
  if (transformData.scale)
    lScalingM.scale(tempVec.fromArray(transformData.scale));
  if (transformData.scalingOffset)
    lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));
  if (transformData.scalingPivot)
    lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));
  if (transformData.rotationOffset)
    lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));
  if (transformData.rotationPivot)
    lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));
  if (transformData.parentMatrixWorld) {
    lParentLX.copy(transformData.parentMatrix);
    lParentGX.copy(transformData.parentMatrixWorld);
  }
  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);
  const lParentGRM = new Matrix4();
  lParentGRM.extractRotation(lParentGX);
  const lParentTM = new Matrix4();
  lParentTM.copyPosition(lParentGX);
  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);
  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);
  const lLSM = lScalingM;
  const lGlobalRS = new Matrix4();
  if (inheritType === 0) {
    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);
  } else if (inheritType === 1) {
    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);
  } else {
    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));
    const lParentLSM_inv = lParentLSM.clone().invert();
    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);
    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);
  }
  const lRotationPivotM_inv = lRotationPivotM.clone().invert();
  const lScalingPivotM_inv = lScalingPivotM.clone().invert();
  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);
  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);
  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);
  lGlobalT.copyPosition(lGlobalTranslation);
  lTransform = lGlobalT.clone().multiply(lGlobalRS);
  lTransform.premultiply(lParentGX.invert());
  return lTransform;
}
function getEulerOrder(order) {
  order = order || 0;
  const enums = [
    "ZYX",
    // -> XYZ extrinsic
    "YZX",
    // -> XZY extrinsic
    "XZY",
    // -> YZX extrinsic
    "ZXY",
    // -> YXZ extrinsic
    "YXZ",
    // -> ZXY extrinsic
    "XYZ"
    // -> ZYX extrinsic
    //'SphericXYZ', // not possible to support
  ];
  if (order === 6) {
    console.warn("THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.");
    return enums[0];
  }
  return enums[order];
}
function parseNumberArray(value) {
  const array = value.split(",").map(function(val) {
    return parseFloat(val);
  });
  return array;
}
function convertArrayBufferToString(buffer, from, to) {
  if (from === void 0)
    from = 0;
  if (to === void 0)
    to = buffer.byteLength;
  return new TextDecoder().decode(new Uint8Array(buffer, from, to));
}
function append(a, b) {
  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {
    a[j] = b[i];
  }
}
function slice(a, b, from, to) {
  for (let i = from, j = 0; i < to; i++, j++) {
    a[j] = b[i];
  }
  return a;
}
function inject(a1, index, a2) {
  return a1.slice(0, index).concat(a2).concat(a1.slice(index));
}
var fbxTree, connections, sceneGraph, FBXLoader, FBXTreeParser, GeometryParser, AnimationParser, TextParser, BinaryParser, BinaryReader, FBXTree, dataArray, tempEuler, tempVec;
var init_FBXLoader = __esm({
  "node_modules/three/examples/jsm/loaders/FBXLoader.js"() {
    init_three_module();
    init_fflate_module();
    init_NURBSCurve();
    FBXLoader = class extends Loader {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const path = scope.path === "" ? LoaderUtils.extractUrlBase(url) : scope.path;
        const loader = new FileLoader(this.manager);
        loader.setPath(scope.path);
        loader.setResponseType("arraybuffer");
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(buffer) {
          try {
            onLoad(scope.parse(buffer, path));
          } catch (e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }, onProgress, onError);
      }
      parse(FBXBuffer, path) {
        if (isFbxFormatBinary(FBXBuffer)) {
          fbxTree = new BinaryParser().parse(FBXBuffer);
        } else {
          const FBXText = convertArrayBufferToString(FBXBuffer);
          if (!isFbxFormatASCII(FBXText)) {
            throw new Error("THREE.FBXLoader: Unknown format.");
          }
          if (getFbxVersion(FBXText) < 7e3) {
            throw new Error("THREE.FBXLoader: FBX version not supported, FileVersion: " + getFbxVersion(FBXText));
          }
          fbxTree = new TextParser().parse(FBXText);
        }
        const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
        return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);
      }
    };
    FBXTreeParser = class {
      constructor(textureLoader, manager) {
        this.textureLoader = textureLoader;
        this.manager = manager;
      }
      parse() {
        connections = this.parseConnections();
        const images = this.parseImages();
        const textures = this.parseTextures(images);
        const materials = this.parseMaterials(textures);
        const deformers = this.parseDeformers();
        const geometryMap = new GeometryParser().parse(deformers);
        this.parseScene(deformers, geometryMap, materials);
        return sceneGraph;
      }
      // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )
      // and details the connection type
      parseConnections() {
        const connectionMap = /* @__PURE__ */ new Map();
        if ("Connections" in fbxTree) {
          const rawConnections = fbxTree.Connections.connections;
          rawConnections.forEach(function(rawConnection) {
            const fromID = rawConnection[0];
            const toID = rawConnection[1];
            const relationship = rawConnection[2];
            if (!connectionMap.has(fromID)) {
              connectionMap.set(fromID, {
                parents: [],
                children: []
              });
            }
            const parentRelationship = { ID: toID, relationship };
            connectionMap.get(fromID).parents.push(parentRelationship);
            if (!connectionMap.has(toID)) {
              connectionMap.set(toID, {
                parents: [],
                children: []
              });
            }
            const childRelationship = { ID: fromID, relationship };
            connectionMap.get(toID).children.push(childRelationship);
          });
        }
        return connectionMap;
      }
      // Parse FBXTree.Objects.Video for embedded image data
      // These images are connected to textures in FBXTree.Objects.Textures
      // via FBXTree.Connections.
      parseImages() {
        const images = {};
        const blobs = {};
        if ("Video" in fbxTree.Objects) {
          const videoNodes = fbxTree.Objects.Video;
          for (const nodeID in videoNodes) {
            const videoNode = videoNodes[nodeID];
            const id = parseInt(nodeID);
            images[id] = videoNode.RelativeFilename || videoNode.Filename;
            if ("Content" in videoNode) {
              const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;
              const base64Content = typeof videoNode.Content === "string" && videoNode.Content !== "";
              if (arrayBufferContent || base64Content) {
                const image = this.parseImage(videoNodes[nodeID]);
                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;
              }
            }
          }
        }
        for (const id in images) {
          const filename = images[id];
          if (blobs[filename] !== void 0)
            images[id] = blobs[filename];
          else
            images[id] = images[id].split("\\").pop();
        }
        return images;
      }
      // Parse embedded image data in FBXTree.Video.Content
      parseImage(videoNode) {
        const content = videoNode.Content;
        const fileName = videoNode.RelativeFilename || videoNode.Filename;
        const extension = fileName.slice(fileName.lastIndexOf(".") + 1).toLowerCase();
        let type;
        switch (extension) {
          case "bmp":
            type = "image/bmp";
            break;
          case "jpg":
          case "jpeg":
            type = "image/jpeg";
            break;
          case "png":
            type = "image/png";
            break;
          case "tif":
            type = "image/tiff";
            break;
          case "tga":
            if (this.manager.getHandler(".tga") === null) {
              console.warn("FBXLoader: TGA loader not found, skipping ", fileName);
            }
            type = "image/tga";
            break;
          default:
            console.warn('FBXLoader: Image type "' + extension + '" is not supported.');
            return;
        }
        if (typeof content === "string") {
          return "data:" + type + ";base64," + content;
        } else {
          const array = new Uint8Array(content);
          return window.URL.createObjectURL(new Blob([array], { type }));
        }
      }
      // Parse nodes in FBXTree.Objects.Texture
      // These contain details such as UV scaling, cropping, rotation etc and are connected
      // to images in FBXTree.Objects.Video
      parseTextures(images) {
        const textureMap = /* @__PURE__ */ new Map();
        if ("Texture" in fbxTree.Objects) {
          const textureNodes = fbxTree.Objects.Texture;
          for (const nodeID in textureNodes) {
            const texture = this.parseTexture(textureNodes[nodeID], images);
            textureMap.set(parseInt(nodeID), texture);
          }
        }
        return textureMap;
      }
      // Parse individual node in FBXTree.Objects.Texture
      parseTexture(textureNode, images) {
        const texture = this.loadTexture(textureNode, images);
        texture.ID = textureNode.id;
        texture.name = textureNode.attrName;
        const wrapModeU = textureNode.WrapModeU;
        const wrapModeV = textureNode.WrapModeV;
        const valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;
        const valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;
        texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;
        texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;
        if ("Scaling" in textureNode) {
          const values = textureNode.Scaling.value;
          texture.repeat.x = values[0];
          texture.repeat.y = values[1];
        }
        if ("Translation" in textureNode) {
          const values = textureNode.Translation.value;
          texture.offset.x = values[0];
          texture.offset.y = values[1];
        }
        return texture;
      }
      // load a texture specified as a blob or data URI, or via an external URL using TextureLoader
      loadTexture(textureNode, images) {
        let fileName;
        const currentPath = this.textureLoader.path;
        const children = connections.get(textureNode.id).children;
        if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {
          fileName = images[children[0].ID];
          if (fileName.indexOf("blob:") === 0 || fileName.indexOf("data:") === 0) {
            this.textureLoader.setPath(void 0);
          }
        }
        let texture;
        const extension = textureNode.FileName.slice(-3).toLowerCase();
        if (extension === "tga") {
          const loader = this.manager.getHandler(".tga");
          if (loader === null) {
            console.warn("FBXLoader: TGA loader not found, creating placeholder texture for", textureNode.RelativeFilename);
            texture = new Texture();
          } else {
            loader.setPath(this.textureLoader.path);
            texture = loader.load(fileName);
          }
        } else if (extension === "psd") {
          console.warn("FBXLoader: PSD textures are not supported, creating placeholder texture for", textureNode.RelativeFilename);
          texture = new Texture();
        } else {
          texture = this.textureLoader.load(fileName);
        }
        this.textureLoader.setPath(currentPath);
        return texture;
      }
      // Parse nodes in FBXTree.Objects.Material
      parseMaterials(textureMap) {
        const materialMap = /* @__PURE__ */ new Map();
        if ("Material" in fbxTree.Objects) {
          const materialNodes = fbxTree.Objects.Material;
          for (const nodeID in materialNodes) {
            const material = this.parseMaterial(materialNodes[nodeID], textureMap);
            if (material !== null)
              materialMap.set(parseInt(nodeID), material);
          }
        }
        return materialMap;
      }
      // Parse single node in FBXTree.Objects.Material
      // Materials are connected to texture maps in FBXTree.Objects.Textures
      // FBX format currently only supports Lambert and Phong shading models
      parseMaterial(materialNode, textureMap) {
        const ID = materialNode.id;
        const name = materialNode.attrName;
        let type = materialNode.ShadingModel;
        if (typeof type === "object") {
          type = type.value;
        }
        if (!connections.has(ID))
          return null;
        const parameters = this.parseParameters(materialNode, textureMap, ID);
        let material;
        switch (type.toLowerCase()) {
          case "phong":
            material = new MeshPhongMaterial();
            break;
          case "lambert":
            material = new MeshLambertMaterial();
            break;
          default:
            console.warn('THREE.FBXLoader: unknown material type "%s". Defaulting to MeshPhongMaterial.', type);
            material = new MeshPhongMaterial();
            break;
        }
        material.setValues(parameters);
        material.name = name;
        return material;
      }
      // Parse FBX material and return parameters suitable for a three.js material
      // Also parse the texture map and return any textures associated with the material
      parseParameters(materialNode, textureMap, ID) {
        const parameters = {};
        if (materialNode.BumpFactor) {
          parameters.bumpScale = materialNode.BumpFactor.value;
        }
        if (materialNode.Diffuse) {
          parameters.color = new Color().fromArray(materialNode.Diffuse.value).convertSRGBToLinear();
        } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === "Color" || materialNode.DiffuseColor.type === "ColorRGB")) {
          parameters.color = new Color().fromArray(materialNode.DiffuseColor.value).convertSRGBToLinear();
        }
        if (materialNode.DisplacementFactor) {
          parameters.displacementScale = materialNode.DisplacementFactor.value;
        }
        if (materialNode.Emissive) {
          parameters.emissive = new Color().fromArray(materialNode.Emissive.value).convertSRGBToLinear();
        } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === "Color" || materialNode.EmissiveColor.type === "ColorRGB")) {
          parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value).convertSRGBToLinear();
        }
        if (materialNode.EmissiveFactor) {
          parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);
        }
        if (materialNode.Opacity) {
          parameters.opacity = parseFloat(materialNode.Opacity.value);
        }
        if (parameters.opacity < 1) {
          parameters.transparent = true;
        }
        if (materialNode.ReflectionFactor) {
          parameters.reflectivity = materialNode.ReflectionFactor.value;
        }
        if (materialNode.Shininess) {
          parameters.shininess = materialNode.Shininess.value;
        }
        if (materialNode.Specular) {
          parameters.specular = new Color().fromArray(materialNode.Specular.value).convertSRGBToLinear();
        } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === "Color") {
          parameters.specular = new Color().fromArray(materialNode.SpecularColor.value).convertSRGBToLinear();
        }
        const scope = this;
        connections.get(ID).children.forEach(function(child) {
          const type = child.relationship;
          switch (type) {
            case "Bump":
              parameters.bumpMap = scope.getTexture(textureMap, child.ID);
              break;
            case "Maya|TEX_ao_map":
              parameters.aoMap = scope.getTexture(textureMap, child.ID);
              break;
            case "DiffuseColor":
            case "Maya|TEX_color_map":
              parameters.map = scope.getTexture(textureMap, child.ID);
              if (parameters.map !== void 0) {
                parameters.map.encoding = sRGBEncoding;
              }
              break;
            case "DisplacementColor":
              parameters.displacementMap = scope.getTexture(textureMap, child.ID);
              break;
            case "EmissiveColor":
              parameters.emissiveMap = scope.getTexture(textureMap, child.ID);
              if (parameters.emissiveMap !== void 0) {
                parameters.emissiveMap.encoding = sRGBEncoding;
              }
              break;
            case "NormalMap":
            case "Maya|TEX_normal_map":
              parameters.normalMap = scope.getTexture(textureMap, child.ID);
              break;
            case "ReflectionColor":
              parameters.envMap = scope.getTexture(textureMap, child.ID);
              if (parameters.envMap !== void 0) {
                parameters.envMap.mapping = EquirectangularReflectionMapping;
                parameters.envMap.encoding = sRGBEncoding;
              }
              break;
            case "SpecularColor":
              parameters.specularMap = scope.getTexture(textureMap, child.ID);
              if (parameters.specularMap !== void 0) {
                parameters.specularMap.encoding = sRGBEncoding;
              }
              break;
            case "TransparentColor":
            case "TransparencyFactor":
              parameters.alphaMap = scope.getTexture(textureMap, child.ID);
              parameters.transparent = true;
              break;
            case "AmbientColor":
            case "ShininessExponent":
            case "SpecularFactor":
            case "VectorDisplacementColor":
            default:
              console.warn("THREE.FBXLoader: %s map is not supported in three.js, skipping texture.", type);
              break;
          }
        });
        return parameters;
      }
      // get a texture from the textureMap for use by a material.
      getTexture(textureMap, id) {
        if ("LayeredTexture" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {
          console.warn("THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.");
          id = connections.get(id).children[0].ID;
        }
        return textureMap.get(id);
      }
      // Parse nodes in FBXTree.Objects.Deformer
      // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here
      // Generates map of Skeleton-like objects for use later when generating and binding skeletons.
      parseDeformers() {
        const skeletons = {};
        const morphTargets = {};
        if ("Deformer" in fbxTree.Objects) {
          const DeformerNodes = fbxTree.Objects.Deformer;
          for (const nodeID in DeformerNodes) {
            const deformerNode = DeformerNodes[nodeID];
            const relationships = connections.get(parseInt(nodeID));
            if (deformerNode.attrType === "Skin") {
              const skeleton = this.parseSkeleton(relationships, DeformerNodes);
              skeleton.ID = nodeID;
              if (relationships.parents.length > 1)
                console.warn("THREE.FBXLoader: skeleton attached to more than one geometry is not supported.");
              skeleton.geometryID = relationships.parents[0].ID;
              skeletons[nodeID] = skeleton;
            } else if (deformerNode.attrType === "BlendShape") {
              const morphTarget = {
                id: nodeID
              };
              morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);
              morphTarget.id = nodeID;
              if (relationships.parents.length > 1)
                console.warn("THREE.FBXLoader: morph target attached to more than one geometry is not supported.");
              morphTargets[nodeID] = morphTarget;
            }
          }
        }
        return {
          skeletons,
          morphTargets
        };
      }
      // Parse single nodes in FBXTree.Objects.Deformer
      // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'
      // Each skin node represents a skeleton and each cluster node represents a bone
      parseSkeleton(relationships, deformerNodes) {
        const rawBones = [];
        relationships.children.forEach(function(child) {
          const boneNode = deformerNodes[child.ID];
          if (boneNode.attrType !== "Cluster")
            return;
          const rawBone = {
            ID: child.ID,
            indices: [],
            weights: [],
            transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)
            // transform: new Matrix4().fromArray( boneNode.Transform.a ),
            // linkMode: boneNode.Mode,
          };
          if ("Indexes" in boneNode) {
            rawBone.indices = boneNode.Indexes.a;
            rawBone.weights = boneNode.Weights.a;
          }
          rawBones.push(rawBone);
        });
        return {
          rawBones,
          bones: []
        };
      }
      // The top level morph deformer node has type "BlendShape" and sub nodes have type "BlendShapeChannel"
      parseMorphTargets(relationships, deformerNodes) {
        const rawMorphTargets = [];
        for (let i = 0; i < relationships.children.length; i++) {
          const child = relationships.children[i];
          const morphTargetNode = deformerNodes[child.ID];
          const rawMorphTarget = {
            name: morphTargetNode.attrName,
            initialWeight: morphTargetNode.DeformPercent,
            id: morphTargetNode.id,
            fullWeights: morphTargetNode.FullWeights.a
          };
          if (morphTargetNode.attrType !== "BlendShapeChannel")
            return;
          rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function(child2) {
            return child2.relationship === void 0;
          })[0].ID;
          rawMorphTargets.push(rawMorphTarget);
        }
        return rawMorphTargets;
      }
      // create the main Group() to be returned by the loader
      parseScene(deformers, geometryMap, materialMap) {
        sceneGraph = new Group();
        const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);
        const modelNodes = fbxTree.Objects.Model;
        const scope = this;
        modelMap.forEach(function(model) {
          const modelNode = modelNodes[model.ID];
          scope.setLookAtProperties(model, modelNode);
          const parentConnections = connections.get(model.ID).parents;
          parentConnections.forEach(function(connection) {
            const parent = modelMap.get(connection.ID);
            if (parent !== void 0)
              parent.add(model);
          });
          if (model.parent === null) {
            sceneGraph.add(model);
          }
        });
        this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);
        this.createAmbientLight();
        sceneGraph.traverse(function(node) {
          if (node.userData.transformData) {
            if (node.parent) {
              node.userData.transformData.parentMatrix = node.parent.matrix;
              node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;
            }
            const transform = generateTransform(node.userData.transformData);
            node.applyMatrix4(transform);
            node.updateWorldMatrix();
          }
        });
        const animations = new AnimationParser().parse();
        if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {
          sceneGraph.children[0].animations = animations;
          sceneGraph = sceneGraph.children[0];
        }
        sceneGraph.animations = animations;
      }
      // parse nodes in FBXTree.Objects.Model
      parseModels(skeletons, geometryMap, materialMap) {
        const modelMap = /* @__PURE__ */ new Map();
        const modelNodes = fbxTree.Objects.Model;
        for (const nodeID in modelNodes) {
          const id = parseInt(nodeID);
          const node = modelNodes[nodeID];
          const relationships = connections.get(id);
          let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);
          if (!model) {
            switch (node.attrType) {
              case "Camera":
                model = this.createCamera(relationships);
                break;
              case "Light":
                model = this.createLight(relationships);
                break;
              case "Mesh":
                model = this.createMesh(relationships, geometryMap, materialMap);
                break;
              case "NurbsCurve":
                model = this.createCurve(relationships, geometryMap);
                break;
              case "LimbNode":
              case "Root":
                model = new Bone();
                break;
              case "Null":
              default:
                model = new Group();
                break;
            }
            model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : "";
            model.ID = id;
          }
          this.getTransformData(model, node);
          modelMap.set(id, model);
        }
        return modelMap;
      }
      buildSkeleton(relationships, skeletons, id, name) {
        let bone = null;
        relationships.parents.forEach(function(parent) {
          for (const ID in skeletons) {
            const skeleton = skeletons[ID];
            skeleton.rawBones.forEach(function(rawBone, i) {
              if (rawBone.ID === parent.ID) {
                const subBone = bone;
                bone = new Bone();
                bone.matrixWorld.copy(rawBone.transformLink);
                bone.name = name ? PropertyBinding.sanitizeNodeName(name) : "";
                bone.ID = id;
                skeleton.bones[i] = bone;
                if (subBone !== null) {
                  bone.add(subBone);
                }
              }
            });
          }
        });
        return bone;
      }
      // create a PerspectiveCamera or OrthographicCamera
      createCamera(relationships) {
        let model;
        let cameraAttribute;
        relationships.children.forEach(function(child) {
          const attr = fbxTree.Objects.NodeAttribute[child.ID];
          if (attr !== void 0) {
            cameraAttribute = attr;
          }
        });
        if (cameraAttribute === void 0) {
          model = new Object3D();
        } else {
          let type = 0;
          if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {
            type = 1;
          }
          let nearClippingPlane = 1;
          if (cameraAttribute.NearPlane !== void 0) {
            nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;
          }
          let farClippingPlane = 1e3;
          if (cameraAttribute.FarPlane !== void 0) {
            farClippingPlane = cameraAttribute.FarPlane.value / 1e3;
          }
          let width = window.innerWidth;
          let height = window.innerHeight;
          if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {
            width = cameraAttribute.AspectWidth.value;
            height = cameraAttribute.AspectHeight.value;
          }
          const aspect = width / height;
          let fov = 45;
          if (cameraAttribute.FieldOfView !== void 0) {
            fov = cameraAttribute.FieldOfView.value;
          }
          const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;
          switch (type) {
            case 0:
              model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);
              if (focalLength !== null)
                model.setFocalLength(focalLength);
              break;
            case 1:
              model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);
              break;
            default:
              console.warn("THREE.FBXLoader: Unknown camera type " + type + ".");
              model = new Object3D();
              break;
          }
        }
        return model;
      }
      // Create a DirectionalLight, PointLight or SpotLight
      createLight(relationships) {
        let model;
        let lightAttribute;
        relationships.children.forEach(function(child) {
          const attr = fbxTree.Objects.NodeAttribute[child.ID];
          if (attr !== void 0) {
            lightAttribute = attr;
          }
        });
        if (lightAttribute === void 0) {
          model = new Object3D();
        } else {
          let type;
          if (lightAttribute.LightType === void 0) {
            type = 0;
          } else {
            type = lightAttribute.LightType.value;
          }
          let color = 16777215;
          if (lightAttribute.Color !== void 0) {
            color = new Color().fromArray(lightAttribute.Color.value).convertSRGBToLinear();
          }
          let intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;
          if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {
            intensity = 0;
          }
          let distance = 0;
          if (lightAttribute.FarAttenuationEnd !== void 0) {
            if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {
              distance = 0;
            } else {
              distance = lightAttribute.FarAttenuationEnd.value;
            }
          }
          const decay = 1;
          switch (type) {
            case 0:
              model = new PointLight(color, intensity, distance, decay);
              break;
            case 1:
              model = new DirectionalLight(color, intensity);
              break;
            case 2:
              let angle = Math.PI / 3;
              if (lightAttribute.InnerAngle !== void 0) {
                angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);
              }
              let penumbra = 0;
              if (lightAttribute.OuterAngle !== void 0) {
                penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);
                penumbra = Math.max(penumbra, 1);
              }
              model = new SpotLight(color, intensity, distance, angle, penumbra, decay);
              break;
            default:
              console.warn("THREE.FBXLoader: Unknown light type " + lightAttribute.LightType.value + ", defaulting to a PointLight.");
              model = new PointLight(color, intensity);
              break;
          }
          if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {
            model.castShadow = true;
          }
        }
        return model;
      }
      createMesh(relationships, geometryMap, materialMap) {
        let model;
        let geometry = null;
        let material = null;
        const materials = [];
        relationships.children.forEach(function(child) {
          if (geometryMap.has(child.ID)) {
            geometry = geometryMap.get(child.ID);
          }
          if (materialMap.has(child.ID)) {
            materials.push(materialMap.get(child.ID));
          }
        });
        if (materials.length > 1) {
          material = materials;
        } else if (materials.length > 0) {
          material = materials[0];
        } else {
          material = new MeshPhongMaterial({ color: 13421772 });
          materials.push(material);
        }
        if ("color" in geometry.attributes) {
          materials.forEach(function(material2) {
            material2.vertexColors = true;
          });
        }
        if (geometry.FBX_Deformer) {
          model = new SkinnedMesh(geometry, material);
          model.normalizeSkinWeights();
        } else {
          model = new Mesh(geometry, material);
        }
        return model;
      }
      createCurve(relationships, geometryMap) {
        const geometry = relationships.children.reduce(function(geo, child) {
          if (geometryMap.has(child.ID))
            geo = geometryMap.get(child.ID);
          return geo;
        }, null);
        const material = new LineBasicMaterial({ color: 3342591, linewidth: 1 });
        return new Line(geometry, material);
      }
      // parse the model node for transform data
      getTransformData(model, modelNode) {
        const transformData = {};
        if ("InheritType" in modelNode)
          transformData.inheritType = parseInt(modelNode.InheritType.value);
        if ("RotationOrder" in modelNode)
          transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);
        else
          transformData.eulerOrder = "ZYX";
        if ("Lcl_Translation" in modelNode)
          transformData.translation = modelNode.Lcl_Translation.value;
        if ("PreRotation" in modelNode)
          transformData.preRotation = modelNode.PreRotation.value;
        if ("Lcl_Rotation" in modelNode)
          transformData.rotation = modelNode.Lcl_Rotation.value;
        if ("PostRotation" in modelNode)
          transformData.postRotation = modelNode.PostRotation.value;
        if ("Lcl_Scaling" in modelNode)
          transformData.scale = modelNode.Lcl_Scaling.value;
        if ("ScalingOffset" in modelNode)
          transformData.scalingOffset = modelNode.ScalingOffset.value;
        if ("ScalingPivot" in modelNode)
          transformData.scalingPivot = modelNode.ScalingPivot.value;
        if ("RotationOffset" in modelNode)
          transformData.rotationOffset = modelNode.RotationOffset.value;
        if ("RotationPivot" in modelNode)
          transformData.rotationPivot = modelNode.RotationPivot.value;
        model.userData.transformData = transformData;
      }
      setLookAtProperties(model, modelNode) {
        if ("LookAtProperty" in modelNode) {
          const children = connections.get(model.ID).children;
          children.forEach(function(child) {
            if (child.relationship === "LookAtProperty") {
              const lookAtTarget = fbxTree.Objects.Model[child.ID];
              if ("Lcl_Translation" in lookAtTarget) {
                const pos = lookAtTarget.Lcl_Translation.value;
                if (model.target !== void 0) {
                  model.target.position.fromArray(pos);
                  sceneGraph.add(model.target);
                } else {
                  model.lookAt(new Vector3().fromArray(pos));
                }
              }
            }
          });
        }
      }
      bindSkeleton(skeletons, geometryMap, modelMap) {
        const bindMatrices = this.parsePoseNodes();
        for (const ID in skeletons) {
          const skeleton = skeletons[ID];
          const parents = connections.get(parseInt(skeleton.ID)).parents;
          parents.forEach(function(parent) {
            if (geometryMap.has(parent.ID)) {
              const geoID = parent.ID;
              const geoRelationships = connections.get(geoID);
              geoRelationships.parents.forEach(function(geoConnParent) {
                if (modelMap.has(geoConnParent.ID)) {
                  const model = modelMap.get(geoConnParent.ID);
                  model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);
                }
              });
            }
          });
        }
      }
      parsePoseNodes() {
        const bindMatrices = {};
        if ("Pose" in fbxTree.Objects) {
          const BindPoseNode = fbxTree.Objects.Pose;
          for (const nodeID in BindPoseNode) {
            if (BindPoseNode[nodeID].attrType === "BindPose" && BindPoseNode[nodeID].NbPoseNodes > 0) {
              const poseNodes = BindPoseNode[nodeID].PoseNode;
              if (Array.isArray(poseNodes)) {
                poseNodes.forEach(function(poseNode) {
                  bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);
                });
              } else {
                bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);
              }
            }
          }
        }
        return bindMatrices;
      }
      // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light
      createAmbientLight() {
        if ("GlobalSettings" in fbxTree && "AmbientColor" in fbxTree.GlobalSettings) {
          const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;
          const r = ambientColor[0];
          const g = ambientColor[1];
          const b = ambientColor[2];
          if (r !== 0 || g !== 0 || b !== 0) {
            const color = new Color(r, g, b).convertSRGBToLinear();
            sceneGraph.add(new AmbientLight(color, 1));
          }
        }
      }
    };
    GeometryParser = class {
      constructor() {
        this.negativeMaterialIndices = false;
      }
      // Parse nodes in FBXTree.Objects.Geometry
      parse(deformers) {
        const geometryMap = /* @__PURE__ */ new Map();
        if ("Geometry" in fbxTree.Objects) {
          const geoNodes = fbxTree.Objects.Geometry;
          for (const nodeID in geoNodes) {
            const relationships = connections.get(parseInt(nodeID));
            const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);
            geometryMap.set(parseInt(nodeID), geo);
          }
        }
        if (this.negativeMaterialIndices === true) {
          console.warn("THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.");
        }
        return geometryMap;
      }
      // Parse single node in FBXTree.Objects.Geometry
      parseGeometry(relationships, geoNode, deformers) {
        switch (geoNode.attrType) {
          case "Mesh":
            return this.parseMeshGeometry(relationships, geoNode, deformers);
            break;
          case "NurbsCurve":
            return this.parseNurbsGeometry(geoNode);
            break;
        }
      }
      // Parse single node mesh geometry in FBXTree.Objects.Geometry
      parseMeshGeometry(relationships, geoNode, deformers) {
        const skeletons = deformers.skeletons;
        const morphTargets = [];
        const modelNodes = relationships.parents.map(function(parent) {
          return fbxTree.Objects.Model[parent.ID];
        });
        if (modelNodes.length === 0)
          return;
        const skeleton = relationships.children.reduce(function(skeleton2, child) {
          if (skeletons[child.ID] !== void 0)
            skeleton2 = skeletons[child.ID];
          return skeleton2;
        }, null);
        relationships.children.forEach(function(child) {
          if (deformers.morphTargets[child.ID] !== void 0) {
            morphTargets.push(deformers.morphTargets[child.ID]);
          }
        });
        const modelNode = modelNodes[0];
        const transformData = {};
        if ("RotationOrder" in modelNode)
          transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);
        if ("InheritType" in modelNode)
          transformData.inheritType = parseInt(modelNode.InheritType.value);
        if ("GeometricTranslation" in modelNode)
          transformData.translation = modelNode.GeometricTranslation.value;
        if ("GeometricRotation" in modelNode)
          transformData.rotation = modelNode.GeometricRotation.value;
        if ("GeometricScaling" in modelNode)
          transformData.scale = modelNode.GeometricScaling.value;
        const transform = generateTransform(transformData);
        return this.genGeometry(geoNode, skeleton, morphTargets, transform);
      }
      // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry
      genGeometry(geoNode, skeleton, morphTargets, preTransform) {
        const geo = new BufferGeometry();
        if (geoNode.attrName)
          geo.name = geoNode.attrName;
        const geoInfo = this.parseGeoNode(geoNode, skeleton);
        const buffers = this.genBuffers(geoInfo);
        const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);
        positionAttribute.applyMatrix4(preTransform);
        geo.setAttribute("position", positionAttribute);
        if (buffers.colors.length > 0) {
          geo.setAttribute("color", new Float32BufferAttribute(buffers.colors, 3));
        }
        if (skeleton) {
          geo.setAttribute("skinIndex", new Uint16BufferAttribute(buffers.weightsIndices, 4));
          geo.setAttribute("skinWeight", new Float32BufferAttribute(buffers.vertexWeights, 4));
          geo.FBX_Deformer = skeleton;
        }
        if (buffers.normal.length > 0) {
          const normalMatrix = new Matrix3().getNormalMatrix(preTransform);
          const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);
          normalAttribute.applyNormalMatrix(normalMatrix);
          geo.setAttribute("normal", normalAttribute);
        }
        buffers.uvs.forEach(function(uvBuffer, i) {
          let name = "uv" + (i + 1).toString();
          if (i === 0) {
            name = "uv";
          }
          geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));
        });
        if (geoInfo.material && geoInfo.material.mappingType !== "AllSame") {
          let prevMaterialIndex = buffers.materialIndex[0];
          let startIndex = 0;
          buffers.materialIndex.forEach(function(currentIndex, i) {
            if (currentIndex !== prevMaterialIndex) {
              geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);
              prevMaterialIndex = currentIndex;
              startIndex = i;
            }
          });
          if (geo.groups.length > 0) {
            const lastGroup = geo.groups[geo.groups.length - 1];
            const lastIndex = lastGroup.start + lastGroup.count;
            if (lastIndex !== buffers.materialIndex.length) {
              geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);
            }
          }
          if (geo.groups.length === 0) {
            geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);
          }
        }
        this.addMorphTargets(geo, geoNode, morphTargets, preTransform);
        return geo;
      }
      parseGeoNode(geoNode, skeleton) {
        const geoInfo = {};
        geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];
        geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];
        if (geoNode.LayerElementColor) {
          geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);
        }
        if (geoNode.LayerElementMaterial) {
          geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);
        }
        if (geoNode.LayerElementNormal) {
          geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);
        }
        if (geoNode.LayerElementUV) {
          geoInfo.uv = [];
          let i = 0;
          while (geoNode.LayerElementUV[i]) {
            if (geoNode.LayerElementUV[i].UV) {
              geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));
            }
            i++;
          }
        }
        geoInfo.weightTable = {};
        if (skeleton !== null) {
          geoInfo.skeleton = skeleton;
          skeleton.rawBones.forEach(function(rawBone, i) {
            rawBone.indices.forEach(function(index, j) {
              if (geoInfo.weightTable[index] === void 0)
                geoInfo.weightTable[index] = [];
              geoInfo.weightTable[index].push({
                id: i,
                weight: rawBone.weights[j]
              });
            });
          });
        }
        return geoInfo;
      }
      genBuffers(geoInfo) {
        const buffers = {
          vertex: [],
          normal: [],
          colors: [],
          uvs: [],
          materialIndex: [],
          vertexWeights: [],
          weightsIndices: []
        };
        let polygonIndex = 0;
        let faceLength = 0;
        let displayedWeightsWarning = false;
        let facePositionIndexes = [];
        let faceNormals = [];
        let faceColors = [];
        let faceUVs = [];
        let faceWeights = [];
        let faceWeightIndices = [];
        const scope = this;
        geoInfo.vertexIndices.forEach(function(vertexIndex, polygonVertexIndex) {
          let materialIndex;
          let endOfFace = false;
          if (vertexIndex < 0) {
            vertexIndex = vertexIndex ^ -1;
            endOfFace = true;
          }
          let weightIndices = [];
          let weights = [];
          facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);
          if (geoInfo.color) {
            const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);
            faceColors.push(data[0], data[1], data[2]);
          }
          if (geoInfo.skeleton) {
            if (geoInfo.weightTable[vertexIndex] !== void 0) {
              geoInfo.weightTable[vertexIndex].forEach(function(wt) {
                weights.push(wt.weight);
                weightIndices.push(wt.id);
              });
            }
            if (weights.length > 4) {
              if (!displayedWeightsWarning) {
                console.warn("THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.");
                displayedWeightsWarning = true;
              }
              const wIndex = [0, 0, 0, 0];
              const Weight = [0, 0, 0, 0];
              weights.forEach(function(weight, weightIndex) {
                let currentWeight = weight;
                let currentIndex = weightIndices[weightIndex];
                Weight.forEach(function(comparedWeight, comparedWeightIndex, comparedWeightArray) {
                  if (currentWeight > comparedWeight) {
                    comparedWeightArray[comparedWeightIndex] = currentWeight;
                    currentWeight = comparedWeight;
                    const tmp = wIndex[comparedWeightIndex];
                    wIndex[comparedWeightIndex] = currentIndex;
                    currentIndex = tmp;
                  }
                });
              });
              weightIndices = wIndex;
              weights = Weight;
            }
            while (weights.length < 4) {
              weights.push(0);
              weightIndices.push(0);
            }
            for (let i = 0; i < 4; ++i) {
              faceWeights.push(weights[i]);
              faceWeightIndices.push(weightIndices[i]);
            }
          }
          if (geoInfo.normal) {
            const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);
            faceNormals.push(data[0], data[1], data[2]);
          }
          if (geoInfo.material && geoInfo.material.mappingType !== "AllSame") {
            materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];
            if (materialIndex < 0) {
              scope.negativeMaterialIndices = true;
              materialIndex = 0;
            }
          }
          if (geoInfo.uv) {
            geoInfo.uv.forEach(function(uv, i) {
              const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);
              if (faceUVs[i] === void 0) {
                faceUVs[i] = [];
              }
              faceUVs[i].push(data[0]);
              faceUVs[i].push(data[1]);
            });
          }
          faceLength++;
          if (endOfFace) {
            if (faceLength > 4)
              console.warn("THREE.FBXLoader: Polygons with more than four sides are not supported. Make sure to triangulate the geometry during export.");
            scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);
            polygonIndex++;
            faceLength = 0;
            facePositionIndexes = [];
            faceNormals = [];
            faceColors = [];
            faceUVs = [];
            faceWeights = [];
            faceWeightIndices = [];
          }
        });
        return buffers;
      }
      // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris
      genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {
        for (let i = 2; i < faceLength; i++) {
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);
          if (geoInfo.skeleton) {
            buffers.vertexWeights.push(faceWeights[0]);
            buffers.vertexWeights.push(faceWeights[1]);
            buffers.vertexWeights.push(faceWeights[2]);
            buffers.vertexWeights.push(faceWeights[3]);
            buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);
            buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);
            buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);
            buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);
            buffers.vertexWeights.push(faceWeights[i * 4]);
            buffers.vertexWeights.push(faceWeights[i * 4 + 1]);
            buffers.vertexWeights.push(faceWeights[i * 4 + 2]);
            buffers.vertexWeights.push(faceWeights[i * 4 + 3]);
            buffers.weightsIndices.push(faceWeightIndices[0]);
            buffers.weightsIndices.push(faceWeightIndices[1]);
            buffers.weightsIndices.push(faceWeightIndices[2]);
            buffers.weightsIndices.push(faceWeightIndices[3]);
            buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);
            buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);
            buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);
            buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);
            buffers.weightsIndices.push(faceWeightIndices[i * 4]);
            buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);
            buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);
            buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);
          }
          if (geoInfo.color) {
            buffers.colors.push(faceColors[0]);
            buffers.colors.push(faceColors[1]);
            buffers.colors.push(faceColors[2]);
            buffers.colors.push(faceColors[(i - 1) * 3]);
            buffers.colors.push(faceColors[(i - 1) * 3 + 1]);
            buffers.colors.push(faceColors[(i - 1) * 3 + 2]);
            buffers.colors.push(faceColors[i * 3]);
            buffers.colors.push(faceColors[i * 3 + 1]);
            buffers.colors.push(faceColors[i * 3 + 2]);
          }
          if (geoInfo.material && geoInfo.material.mappingType !== "AllSame") {
            buffers.materialIndex.push(materialIndex);
            buffers.materialIndex.push(materialIndex);
            buffers.materialIndex.push(materialIndex);
          }
          if (geoInfo.normal) {
            buffers.normal.push(faceNormals[0]);
            buffers.normal.push(faceNormals[1]);
            buffers.normal.push(faceNormals[2]);
            buffers.normal.push(faceNormals[(i - 1) * 3]);
            buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);
            buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);
            buffers.normal.push(faceNormals[i * 3]);
            buffers.normal.push(faceNormals[i * 3 + 1]);
            buffers.normal.push(faceNormals[i * 3 + 2]);
          }
          if (geoInfo.uv) {
            geoInfo.uv.forEach(function(uv, j) {
              if (buffers.uvs[j] === void 0)
                buffers.uvs[j] = [];
              buffers.uvs[j].push(faceUVs[j][0]);
              buffers.uvs[j].push(faceUVs[j][1]);
              buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);
              buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);
              buffers.uvs[j].push(faceUVs[j][i * 2]);
              buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);
            });
          }
        }
      }
      addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {
        if (morphTargets.length === 0)
          return;
        parentGeo.morphTargetsRelative = true;
        parentGeo.morphAttributes.position = [];
        const scope = this;
        morphTargets.forEach(function(morphTarget) {
          morphTarget.rawTargets.forEach(function(rawTarget) {
            const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];
            if (morphGeoNode !== void 0) {
              scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);
            }
          });
        });
      }
      // a morph geometry node is similar to a standard  node, and the node is also contained
      // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal
      // and a special attribute Index defining which vertices of the original geometry are affected
      // Normal and position attributes only have data for the vertices that are affected by the morph
      genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {
        const vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];
        const morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];
        const indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];
        const length = parentGeo.attributes.position.count * 3;
        const morphPositions = new Float32Array(length);
        for (let i = 0; i < indices.length; i++) {
          const morphIndex = indices[i] * 3;
          morphPositions[morphIndex] = morphPositionsSparse[i * 3];
          morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];
          morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];
        }
        const morphGeoInfo = {
          vertexIndices,
          vertexPositions: morphPositions
        };
        const morphBuffers = this.genBuffers(morphGeoInfo);
        const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);
        positionAttribute.name = name || morphGeoNode.attrName;
        positionAttribute.applyMatrix4(preTransform);
        parentGeo.morphAttributes.position.push(positionAttribute);
      }
      // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists
      parseNormals(NormalNode) {
        const mappingType = NormalNode.MappingInformationType;
        const referenceType = NormalNode.ReferenceInformationType;
        const buffer = NormalNode.Normals.a;
        let indexBuffer = [];
        if (referenceType === "IndexToDirect") {
          if ("NormalIndex" in NormalNode) {
            indexBuffer = NormalNode.NormalIndex.a;
          } else if ("NormalsIndex" in NormalNode) {
            indexBuffer = NormalNode.NormalsIndex.a;
          }
        }
        return {
          dataSize: 3,
          buffer,
          indices: indexBuffer,
          mappingType,
          referenceType
        };
      }
      // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists
      parseUVs(UVNode) {
        const mappingType = UVNode.MappingInformationType;
        const referenceType = UVNode.ReferenceInformationType;
        const buffer = UVNode.UV.a;
        let indexBuffer = [];
        if (referenceType === "IndexToDirect") {
          indexBuffer = UVNode.UVIndex.a;
        }
        return {
          dataSize: 2,
          buffer,
          indices: indexBuffer,
          mappingType,
          referenceType
        };
      }
      // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists
      parseVertexColors(ColorNode) {
        const mappingType = ColorNode.MappingInformationType;
        const referenceType = ColorNode.ReferenceInformationType;
        const buffer = ColorNode.Colors.a;
        let indexBuffer = [];
        if (referenceType === "IndexToDirect") {
          indexBuffer = ColorNode.ColorIndex.a;
        }
        for (let i = 0, c = new Color(); i < buffer.length; i += 4) {
          c.fromArray(buffer, i).convertSRGBToLinear().toArray(buffer, i);
        }
        return {
          dataSize: 4,
          buffer,
          indices: indexBuffer,
          mappingType,
          referenceType
        };
      }
      // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists
      parseMaterialIndices(MaterialNode) {
        const mappingType = MaterialNode.MappingInformationType;
        const referenceType = MaterialNode.ReferenceInformationType;
        if (mappingType === "NoMappingInformation") {
          return {
            dataSize: 1,
            buffer: [0],
            indices: [0],
            mappingType: "AllSame",
            referenceType
          };
        }
        const materialIndexBuffer = MaterialNode.Materials.a;
        const materialIndices = [];
        for (let i = 0; i < materialIndexBuffer.length; ++i) {
          materialIndices.push(i);
        }
        return {
          dataSize: 1,
          buffer: materialIndexBuffer,
          indices: materialIndices,
          mappingType,
          referenceType
        };
      }
      // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry
      parseNurbsGeometry(geoNode) {
        const order = parseInt(geoNode.Order);
        if (isNaN(order)) {
          console.error("THREE.FBXLoader: Invalid Order %s given for geometry ID: %s", geoNode.Order, geoNode.id);
          return new BufferGeometry();
        }
        const degree = order - 1;
        const knots = geoNode.KnotVector.a;
        const controlPoints = [];
        const pointsValues = geoNode.Points.a;
        for (let i = 0, l = pointsValues.length; i < l; i += 4) {
          controlPoints.push(new Vector4().fromArray(pointsValues, i));
        }
        let startKnot, endKnot;
        if (geoNode.Form === "Closed") {
          controlPoints.push(controlPoints[0]);
        } else if (geoNode.Form === "Periodic") {
          startKnot = degree;
          endKnot = knots.length - 1 - startKnot;
          for (let i = 0; i < degree; ++i) {
            controlPoints.push(controlPoints[i]);
          }
        }
        const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);
        const points = curve.getPoints(controlPoints.length * 12);
        return new BufferGeometry().setFromPoints(points);
      }
    };
    AnimationParser = class {
      // take raw animation clips and turn them into three.js animation clips
      parse() {
        const animationClips = [];
        const rawClips = this.parseClips();
        if (rawClips !== void 0) {
          for (const key in rawClips) {
            const rawClip = rawClips[key];
            const clip = this.addClip(rawClip);
            animationClips.push(clip);
          }
        }
        return animationClips;
      }
      parseClips() {
        if (fbxTree.Objects.AnimationCurve === void 0)
          return void 0;
        const curveNodesMap = this.parseAnimationCurveNodes();
        this.parseAnimationCurves(curveNodesMap);
        const layersMap = this.parseAnimationLayers(curveNodesMap);
        const rawClips = this.parseAnimStacks(layersMap);
        return rawClips;
      }
      // parse nodes in FBXTree.Objects.AnimationCurveNode
      // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )
      // and is referenced by an AnimationLayer
      parseAnimationCurveNodes() {
        const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;
        const curveNodesMap = /* @__PURE__ */ new Map();
        for (const nodeID in rawCurveNodes) {
          const rawCurveNode = rawCurveNodes[nodeID];
          if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {
            const curveNode = {
              id: rawCurveNode.id,
              attr: rawCurveNode.attrName,
              curves: {}
            };
            curveNodesMap.set(curveNode.id, curveNode);
          }
        }
        return curveNodesMap;
      }
      // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to
      // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated
      // axis ( e.g. times and values of x rotation)
      parseAnimationCurves(curveNodesMap) {
        const rawCurves = fbxTree.Objects.AnimationCurve;
        for (const nodeID in rawCurves) {
          const animationCurve = {
            id: rawCurves[nodeID].id,
            times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),
            values: rawCurves[nodeID].KeyValueFloat.a
          };
          const relationships = connections.get(animationCurve.id);
          if (relationships !== void 0) {
            const animationCurveID = relationships.parents[0].ID;
            const animationCurveRelationship = relationships.parents[0].relationship;
            if (animationCurveRelationship.match(/X/)) {
              curveNodesMap.get(animationCurveID).curves["x"] = animationCurve;
            } else if (animationCurveRelationship.match(/Y/)) {
              curveNodesMap.get(animationCurveID).curves["y"] = animationCurve;
            } else if (animationCurveRelationship.match(/Z/)) {
              curveNodesMap.get(animationCurveID).curves["z"] = animationCurve;
            } else if (animationCurveRelationship.match(/DeformPercent/) && curveNodesMap.has(animationCurveID)) {
              curveNodesMap.get(animationCurveID).curves["morph"] = animationCurve;
            }
          }
        }
      }
      // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references
      // to various AnimationCurveNodes and is referenced by an AnimationStack node
      // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack
      parseAnimationLayers(curveNodesMap) {
        const rawLayers = fbxTree.Objects.AnimationLayer;
        const layersMap = /* @__PURE__ */ new Map();
        for (const nodeID in rawLayers) {
          const layerCurveNodes = [];
          const connection = connections.get(parseInt(nodeID));
          if (connection !== void 0) {
            const children = connection.children;
            children.forEach(function(child, i) {
              if (curveNodesMap.has(child.ID)) {
                const curveNode = curveNodesMap.get(child.ID);
                if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {
                  if (layerCurveNodes[i] === void 0) {
                    const modelID = connections.get(child.ID).parents.filter(function(parent) {
                      return parent.relationship !== void 0;
                    })[0].ID;
                    if (modelID !== void 0) {
                      const rawModel = fbxTree.Objects.Model[modelID.toString()];
                      if (rawModel === void 0) {
                        console.warn("THREE.FBXLoader: Encountered a unused curve.", child);
                        return;
                      }
                      const node = {
                        modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : "",
                        ID: rawModel.id,
                        initialPosition: [0, 0, 0],
                        initialRotation: [0, 0, 0],
                        initialScale: [1, 1, 1]
                      };
                      sceneGraph.traverse(function(child2) {
                        if (child2.ID === rawModel.id) {
                          node.transform = child2.matrix;
                          if (child2.userData.transformData)
                            node.eulerOrder = child2.userData.transformData.eulerOrder;
                        }
                      });
                      if (!node.transform)
                        node.transform = new Matrix4();
                      if ("PreRotation" in rawModel)
                        node.preRotation = rawModel.PreRotation.value;
                      if ("PostRotation" in rawModel)
                        node.postRotation = rawModel.PostRotation.value;
                      layerCurveNodes[i] = node;
                    }
                  }
                  if (layerCurveNodes[i])
                    layerCurveNodes[i][curveNode.attr] = curveNode;
                } else if (curveNode.curves.morph !== void 0) {
                  if (layerCurveNodes[i] === void 0) {
                    const deformerID = connections.get(child.ID).parents.filter(function(parent) {
                      return parent.relationship !== void 0;
                    })[0].ID;
                    const morpherID = connections.get(deformerID).parents[0].ID;
                    const geoID = connections.get(morpherID).parents[0].ID;
                    const modelID = connections.get(geoID).parents[0].ID;
                    const rawModel = fbxTree.Objects.Model[modelID];
                    const node = {
                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : "",
                      morphName: fbxTree.Objects.Deformer[deformerID].attrName
                    };
                    layerCurveNodes[i] = node;
                  }
                  layerCurveNodes[i][curveNode.attr] = curveNode;
                }
              }
            });
            layersMap.set(parseInt(nodeID), layerCurveNodes);
          }
        }
        return layersMap;
      }
      // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation
      // hierarchy. Each Stack node will be used to create a AnimationClip
      parseAnimStacks(layersMap) {
        const rawStacks = fbxTree.Objects.AnimationStack;
        const rawClips = {};
        for (const nodeID in rawStacks) {
          const children = connections.get(parseInt(nodeID)).children;
          if (children.length > 1) {
            console.warn("THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.");
          }
          const layer = layersMap.get(children[0].ID);
          rawClips[nodeID] = {
            name: rawStacks[nodeID].attrName,
            layer
          };
        }
        return rawClips;
      }
      addClip(rawClip) {
        let tracks = [];
        const scope = this;
        rawClip.layer.forEach(function(rawTracks) {
          tracks = tracks.concat(scope.generateTracks(rawTracks));
        });
        return new AnimationClip(rawClip.name, -1, tracks);
      }
      generateTracks(rawTracks) {
        const tracks = [];
        let initialPosition = new Vector3();
        let initialRotation = new Quaternion();
        let initialScale = new Vector3();
        if (rawTracks.transform)
          rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);
        initialPosition = initialPosition.toArray();
        initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();
        initialScale = initialScale.toArray();
        if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {
          const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, "position");
          if (positionTrack !== void 0)
            tracks.push(positionTrack);
        }
        if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {
          const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);
          if (rotationTrack !== void 0)
            tracks.push(rotationTrack);
        }
        if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {
          const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, "scale");
          if (scaleTrack !== void 0)
            tracks.push(scaleTrack);
        }
        if (rawTracks.DeformPercent !== void 0) {
          const morphTrack = this.generateMorphTrack(rawTracks);
          if (morphTrack !== void 0)
            tracks.push(morphTrack);
        }
        return tracks;
      }
      generateVectorTrack(modelName, curves, initialValue, type) {
        const times = this.getTimesForAllAxes(curves);
        const values = this.getKeyframeTrackValues(times, curves, initialValue);
        return new VectorKeyframeTrack(modelName + "." + type, times, values);
      }
      generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {
        if (curves.x !== void 0) {
          this.interpolateRotations(curves.x);
          curves.x.values = curves.x.values.map(MathUtils.degToRad);
        }
        if (curves.y !== void 0) {
          this.interpolateRotations(curves.y);
          curves.y.values = curves.y.values.map(MathUtils.degToRad);
        }
        if (curves.z !== void 0) {
          this.interpolateRotations(curves.z);
          curves.z.values = curves.z.values.map(MathUtils.degToRad);
        }
        const times = this.getTimesForAllAxes(curves);
        const values = this.getKeyframeTrackValues(times, curves, initialValue);
        if (preRotation !== void 0) {
          preRotation = preRotation.map(MathUtils.degToRad);
          preRotation.push(eulerOrder);
          preRotation = new Euler().fromArray(preRotation);
          preRotation = new Quaternion().setFromEuler(preRotation);
        }
        if (postRotation !== void 0) {
          postRotation = postRotation.map(MathUtils.degToRad);
          postRotation.push(eulerOrder);
          postRotation = new Euler().fromArray(postRotation);
          postRotation = new Quaternion().setFromEuler(postRotation).invert();
        }
        const quaternion = new Quaternion();
        const euler = new Euler();
        const quaternionValues = [];
        for (let i = 0; i < values.length; i += 3) {
          euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);
          quaternion.setFromEuler(euler);
          if (preRotation !== void 0)
            quaternion.premultiply(preRotation);
          if (postRotation !== void 0)
            quaternion.multiply(postRotation);
          quaternion.toArray(quaternionValues, i / 3 * 4);
        }
        return new QuaternionKeyframeTrack(modelName + ".quaternion", times, quaternionValues);
      }
      generateMorphTrack(rawTracks) {
        const curves = rawTracks.DeformPercent.curves.morph;
        const values = curves.values.map(function(val) {
          return val / 100;
        });
        const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];
        return new NumberKeyframeTrack(rawTracks.modelName + ".morphTargetInfluences[" + morphNum + "]", curves.times, values);
      }
      // For all animated objects, times are defined separately for each axis
      // Here we'll combine the times into one sorted array without duplicates
      getTimesForAllAxes(curves) {
        let times = [];
        if (curves.x !== void 0)
          times = times.concat(curves.x.times);
        if (curves.y !== void 0)
          times = times.concat(curves.y.times);
        if (curves.z !== void 0)
          times = times.concat(curves.z.times);
        times = times.sort(function(a, b) {
          return a - b;
        });
        if (times.length > 1) {
          let targetIndex = 1;
          let lastValue = times[0];
          for (let i = 1; i < times.length; i++) {
            const currentValue = times[i];
            if (currentValue !== lastValue) {
              times[targetIndex] = currentValue;
              lastValue = currentValue;
              targetIndex++;
            }
          }
          times = times.slice(0, targetIndex);
        }
        return times;
      }
      getKeyframeTrackValues(times, curves, initialValue) {
        const prevValue = initialValue;
        const values = [];
        let xIndex = -1;
        let yIndex = -1;
        let zIndex = -1;
        times.forEach(function(time) {
          if (curves.x)
            xIndex = curves.x.times.indexOf(time);
          if (curves.y)
            yIndex = curves.y.times.indexOf(time);
          if (curves.z)
            zIndex = curves.z.times.indexOf(time);
          if (xIndex !== -1) {
            const xValue = curves.x.values[xIndex];
            values.push(xValue);
            prevValue[0] = xValue;
          } else {
            values.push(prevValue[0]);
          }
          if (yIndex !== -1) {
            const yValue = curves.y.values[yIndex];
            values.push(yValue);
            prevValue[1] = yValue;
          } else {
            values.push(prevValue[1]);
          }
          if (zIndex !== -1) {
            const zValue = curves.z.values[zIndex];
            values.push(zValue);
            prevValue[2] = zValue;
          } else {
            values.push(prevValue[2]);
          }
        });
        return values;
      }
      // Rotations are defined as Euler angles which can have values  of any size
      // These will be converted to quaternions which don't support values greater than
      // PI, so we'll interpolate large rotations
      interpolateRotations(curve) {
        for (let i = 1; i < curve.values.length; i++) {
          const initialValue = curve.values[i - 1];
          const valuesSpan = curve.values[i] - initialValue;
          const absoluteSpan = Math.abs(valuesSpan);
          if (absoluteSpan >= 180) {
            const numSubIntervals = absoluteSpan / 180;
            const step = valuesSpan / numSubIntervals;
            let nextValue = initialValue + step;
            const initialTime = curve.times[i - 1];
            const timeSpan = curve.times[i] - initialTime;
            const interval = timeSpan / numSubIntervals;
            let nextTime = initialTime + interval;
            const interpolatedTimes = [];
            const interpolatedValues = [];
            while (nextTime < curve.times[i]) {
              interpolatedTimes.push(nextTime);
              nextTime += interval;
              interpolatedValues.push(nextValue);
              nextValue += step;
            }
            curve.times = inject(curve.times, i, interpolatedTimes);
            curve.values = inject(curve.values, i, interpolatedValues);
          }
        }
      }
    };
    TextParser = class {
      getPrevNode() {
        return this.nodeStack[this.currentIndent - 2];
      }
      getCurrentNode() {
        return this.nodeStack[this.currentIndent - 1];
      }
      getCurrentProp() {
        return this.currentProp;
      }
      pushStack(node) {
        this.nodeStack.push(node);
        this.currentIndent += 1;
      }
      popStack() {
        this.nodeStack.pop();
        this.currentIndent -= 1;
      }
      setCurrentProp(val, name) {
        this.currentProp = val;
        this.currentPropName = name;
      }
      parse(text) {
        this.currentIndent = 0;
        this.allNodes = new FBXTree();
        this.nodeStack = [];
        this.currentProp = [];
        this.currentPropName = "";
        const scope = this;
        const split = text.split(/[\r\n]+/);
        split.forEach(function(line, i) {
          const matchComment = line.match(/^[\s\t]*;/);
          const matchEmpty = line.match(/^[\s\t]*$/);
          if (matchComment || matchEmpty)
            return;
          const matchBeginning = line.match("^\\t{" + scope.currentIndent + "}(\\w+):(.*){", "");
          const matchProperty = line.match("^\\t{" + scope.currentIndent + "}(\\w+):[\\s\\t\\r\\n](.*)");
          const matchEnd = line.match("^\\t{" + (scope.currentIndent - 1) + "}}");
          if (matchBeginning) {
            scope.parseNodeBegin(line, matchBeginning);
          } else if (matchProperty) {
            scope.parseNodeProperty(line, matchProperty, split[++i]);
          } else if (matchEnd) {
            scope.popStack();
          } else if (line.match(/^[^\s\t}]/)) {
            scope.parseNodePropertyContinued(line);
          }
        });
        return this.allNodes;
      }
      parseNodeBegin(line, property) {
        const nodeName = property[1].trim().replace(/^"/, "").replace(/"$/, "");
        const nodeAttrs = property[2].split(",").map(function(attr) {
          return attr.trim().replace(/^"/, "").replace(/"$/, "");
        });
        const node = { name: nodeName };
        const attrs = this.parseNodeAttr(nodeAttrs);
        const currentNode = this.getCurrentNode();
        if (this.currentIndent === 0) {
          this.allNodes.add(nodeName, node);
        } else {
          if (nodeName in currentNode) {
            if (nodeName === "PoseNode") {
              currentNode.PoseNode.push(node);
            } else if (currentNode[nodeName].id !== void 0) {
              currentNode[nodeName] = {};
              currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];
            }
            if (attrs.id !== "")
              currentNode[nodeName][attrs.id] = node;
          } else if (typeof attrs.id === "number") {
            currentNode[nodeName] = {};
            currentNode[nodeName][attrs.id] = node;
          } else if (nodeName !== "Properties70") {
            if (nodeName === "PoseNode")
              currentNode[nodeName] = [node];
            else
              currentNode[nodeName] = node;
          }
        }
        if (typeof attrs.id === "number")
          node.id = attrs.id;
        if (attrs.name !== "")
          node.attrName = attrs.name;
        if (attrs.type !== "")
          node.attrType = attrs.type;
        this.pushStack(node);
      }
      parseNodeAttr(attrs) {
        let id = attrs[0];
        if (attrs[0] !== "") {
          id = parseInt(attrs[0]);
          if (isNaN(id)) {
            id = attrs[0];
          }
        }
        let name = "", type = "";
        if (attrs.length > 1) {
          name = attrs[1].replace(/^(\w+)::/, "");
          type = attrs[2];
        }
        return { id, name, type };
      }
      parseNodeProperty(line, property, contentLine) {
        let propName = property[1].replace(/^"/, "").replace(/"$/, "").trim();
        let propValue = property[2].replace(/^"/, "").replace(/"$/, "").trim();
        if (propName === "Content" && propValue === ",") {
          propValue = contentLine.replace(/"/g, "").replace(/,$/, "").trim();
        }
        const currentNode = this.getCurrentNode();
        const parentName = currentNode.name;
        if (parentName === "Properties70") {
          this.parseNodeSpecialProperty(line, propName, propValue);
          return;
        }
        if (propName === "C") {
          const connProps = propValue.split(",").slice(1);
          const from = parseInt(connProps[0]);
          const to = parseInt(connProps[1]);
          let rest = propValue.split(",").slice(3);
          rest = rest.map(function(elem) {
            return elem.trim().replace(/^"/, "");
          });
          propName = "connections";
          propValue = [from, to];
          append(propValue, rest);
          if (currentNode[propName] === void 0) {
            currentNode[propName] = [];
          }
        }
        if (propName === "Node")
          currentNode.id = propValue;
        if (propName in currentNode && Array.isArray(currentNode[propName])) {
          currentNode[propName].push(propValue);
        } else {
          if (propName !== "a")
            currentNode[propName] = propValue;
          else
            currentNode.a = propValue;
        }
        this.setCurrentProp(currentNode, propName);
        if (propName === "a" && propValue.slice(-1) !== ",") {
          currentNode.a = parseNumberArray(propValue);
        }
      }
      parseNodePropertyContinued(line) {
        const currentNode = this.getCurrentNode();
        currentNode.a += line;
        if (line.slice(-1) !== ",") {
          currentNode.a = parseNumberArray(currentNode.a);
        }
      }
      // parse "Property70"
      parseNodeSpecialProperty(line, propName, propValue) {
        const props = propValue.split('",').map(function(prop) {
          return prop.trim().replace(/^\"/, "").replace(/\s/, "_");
        });
        const innerPropName = props[0];
        const innerPropType1 = props[1];
        const innerPropType2 = props[2];
        const innerPropFlag = props[3];
        let innerPropValue = props[4];
        switch (innerPropType1) {
          case "int":
          case "enum":
          case "bool":
          case "ULongLong":
          case "double":
          case "Number":
          case "FieldOfView":
            innerPropValue = parseFloat(innerPropValue);
            break;
          case "Color":
          case "ColorRGB":
          case "Vector3D":
          case "Lcl_Translation":
          case "Lcl_Rotation":
          case "Lcl_Scaling":
            innerPropValue = parseNumberArray(innerPropValue);
            break;
        }
        this.getPrevNode()[innerPropName] = {
          "type": innerPropType1,
          "type2": innerPropType2,
          "flag": innerPropFlag,
          "value": innerPropValue
        };
        this.setCurrentProp(this.getPrevNode(), innerPropName);
      }
    };
    BinaryParser = class {
      parse(buffer) {
        const reader = new BinaryReader(buffer);
        reader.skip(23);
        const version = reader.getUint32();
        if (version < 6400) {
          throw new Error("THREE.FBXLoader: FBX version not supported, FileVersion: " + version);
        }
        const allNodes = new FBXTree();
        while (!this.endOfContent(reader)) {
          const node = this.parseNode(reader, version);
          if (node !== null)
            allNodes.add(node.name, node);
        }
        return allNodes;
      }
      // Check if reader has reached the end of content.
      endOfContent(reader) {
        if (reader.size() % 16 === 0) {
          return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();
        } else {
          return reader.getOffset() + 160 + 16 >= reader.size();
        }
      }
      // recursively parse nodes until the end of the file is reached
      parseNode(reader, version) {
        const node = {};
        const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();
        const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();
        version >= 7500 ? reader.getUint64() : reader.getUint32();
        const nameLen = reader.getUint8();
        const name = reader.getString(nameLen);
        if (endOffset === 0)
          return null;
        const propertyList = [];
        for (let i = 0; i < numProperties; i++) {
          propertyList.push(this.parseProperty(reader));
        }
        const id = propertyList.length > 0 ? propertyList[0] : "";
        const attrName = propertyList.length > 1 ? propertyList[1] : "";
        const attrType = propertyList.length > 2 ? propertyList[2] : "";
        node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;
        while (endOffset > reader.getOffset()) {
          const subNode = this.parseNode(reader, version);
          if (subNode !== null)
            this.parseSubNode(name, node, subNode);
        }
        node.propertyList = propertyList;
        if (typeof id === "number")
          node.id = id;
        if (attrName !== "")
          node.attrName = attrName;
        if (attrType !== "")
          node.attrType = attrType;
        if (name !== "")
          node.name = name;
        return node;
      }
      parseSubNode(name, node, subNode) {
        if (subNode.singleProperty === true) {
          const value = subNode.propertyList[0];
          if (Array.isArray(value)) {
            node[subNode.name] = subNode;
            subNode.a = value;
          } else {
            node[subNode.name] = value;
          }
        } else if (name === "Connections" && subNode.name === "C") {
          const array = [];
          subNode.propertyList.forEach(function(property, i) {
            if (i !== 0)
              array.push(property);
          });
          if (node.connections === void 0) {
            node.connections = [];
          }
          node.connections.push(array);
        } else if (subNode.name === "Properties70") {
          const keys = Object.keys(subNode);
          keys.forEach(function(key) {
            node[key] = subNode[key];
          });
        } else if (name === "Properties70" && subNode.name === "P") {
          let innerPropName = subNode.propertyList[0];
          let innerPropType1 = subNode.propertyList[1];
          const innerPropType2 = subNode.propertyList[2];
          const innerPropFlag = subNode.propertyList[3];
          let innerPropValue;
          if (innerPropName.indexOf("Lcl ") === 0)
            innerPropName = innerPropName.replace("Lcl ", "Lcl_");
          if (innerPropType1.indexOf("Lcl ") === 0)
            innerPropType1 = innerPropType1.replace("Lcl ", "Lcl_");
          if (innerPropType1 === "Color" || innerPropType1 === "ColorRGB" || innerPropType1 === "Vector" || innerPropType1 === "Vector3D" || innerPropType1.indexOf("Lcl_") === 0) {
            innerPropValue = [
              subNode.propertyList[4],
              subNode.propertyList[5],
              subNode.propertyList[6]
            ];
          } else {
            innerPropValue = subNode.propertyList[4];
          }
          node[innerPropName] = {
            "type": innerPropType1,
            "type2": innerPropType2,
            "flag": innerPropFlag,
            "value": innerPropValue
          };
        } else if (node[subNode.name] === void 0) {
          if (typeof subNode.id === "number") {
            node[subNode.name] = {};
            node[subNode.name][subNode.id] = subNode;
          } else {
            node[subNode.name] = subNode;
          }
        } else {
          if (subNode.name === "PoseNode") {
            if (!Array.isArray(node[subNode.name])) {
              node[subNode.name] = [node[subNode.name]];
            }
            node[subNode.name].push(subNode);
          } else if (node[subNode.name][subNode.id] === void 0) {
            node[subNode.name][subNode.id] = subNode;
          }
        }
      }
      parseProperty(reader) {
        const type = reader.getString(1);
        let length;
        switch (type) {
          case "C":
            return reader.getBoolean();
          case "D":
            return reader.getFloat64();
          case "F":
            return reader.getFloat32();
          case "I":
            return reader.getInt32();
          case "L":
            return reader.getInt64();
          case "R":
            length = reader.getUint32();
            return reader.getArrayBuffer(length);
          case "S":
            length = reader.getUint32();
            return reader.getString(length);
          case "Y":
            return reader.getInt16();
          case "b":
          case "c":
          case "d":
          case "f":
          case "i":
          case "l":
            const arrayLength = reader.getUint32();
            const encoding = reader.getUint32();
            const compressedLength = reader.getUint32();
            if (encoding === 0) {
              switch (type) {
                case "b":
                case "c":
                  return reader.getBooleanArray(arrayLength);
                case "d":
                  return reader.getFloat64Array(arrayLength);
                case "f":
                  return reader.getFloat32Array(arrayLength);
                case "i":
                  return reader.getInt32Array(arrayLength);
                case "l":
                  return reader.getInt64Array(arrayLength);
              }
            }
            const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));
            const reader2 = new BinaryReader(data.buffer);
            switch (type) {
              case "b":
              case "c":
                return reader2.getBooleanArray(arrayLength);
              case "d":
                return reader2.getFloat64Array(arrayLength);
              case "f":
                return reader2.getFloat32Array(arrayLength);
              case "i":
                return reader2.getInt32Array(arrayLength);
              case "l":
                return reader2.getInt64Array(arrayLength);
            }
            break;
          default:
            throw new Error("THREE.FBXLoader: Unknown property type " + type);
        }
      }
    };
    BinaryReader = class {
      constructor(buffer, littleEndian) {
        this.dv = new DataView(buffer);
        this.offset = 0;
        this.littleEndian = littleEndian !== void 0 ? littleEndian : true;
        this._textDecoder = new TextDecoder();
      }
      getOffset() {
        return this.offset;
      }
      size() {
        return this.dv.buffer.byteLength;
      }
      skip(length) {
        this.offset += length;
      }
      // seems like true/false representation depends on exporter.
      // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)
      // then sees LSB.
      getBoolean() {
        return (this.getUint8() & 1) === 1;
      }
      getBooleanArray(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getBoolean());
        }
        return a;
      }
      getUint8() {
        const value = this.dv.getUint8(this.offset);
        this.offset += 1;
        return value;
      }
      getInt16() {
        const value = this.dv.getInt16(this.offset, this.littleEndian);
        this.offset += 2;
        return value;
      }
      getInt32() {
        const value = this.dv.getInt32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      getInt32Array(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getInt32());
        }
        return a;
      }
      getUint32() {
        const value = this.dv.getUint32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      // JavaScript doesn't support 64-bit integer so calculate this here
      // 1 << 32 will return 1 so using multiply operation instead here.
      // There's a possibility that this method returns wrong value if the value
      // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.
      // TODO: safely handle 64-bit integer
      getInt64() {
        let low, high;
        if (this.littleEndian) {
          low = this.getUint32();
          high = this.getUint32();
        } else {
          high = this.getUint32();
          low = this.getUint32();
        }
        if (high & 2147483648) {
          high = ~high & 4294967295;
          low = ~low & 4294967295;
          if (low === 4294967295)
            high = high + 1 & 4294967295;
          low = low + 1 & 4294967295;
          return -(high * 4294967296 + low);
        }
        return high * 4294967296 + low;
      }
      getInt64Array(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getInt64());
        }
        return a;
      }
      // Note: see getInt64() comment
      getUint64() {
        let low, high;
        if (this.littleEndian) {
          low = this.getUint32();
          high = this.getUint32();
        } else {
          high = this.getUint32();
          low = this.getUint32();
        }
        return high * 4294967296 + low;
      }
      getFloat32() {
        const value = this.dv.getFloat32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      getFloat32Array(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getFloat32());
        }
        return a;
      }
      getFloat64() {
        const value = this.dv.getFloat64(this.offset, this.littleEndian);
        this.offset += 8;
        return value;
      }
      getFloat64Array(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getFloat64());
        }
        return a;
      }
      getArrayBuffer(size) {
        const value = this.dv.buffer.slice(this.offset, this.offset + size);
        this.offset += size;
        return value;
      }
      getString(size) {
        const start = this.offset;
        let a = new Uint8Array(this.dv.buffer, start, size);
        this.skip(size);
        const nullByte = a.indexOf(0);
        if (nullByte >= 0)
          a = new Uint8Array(this.dv.buffer, start, nullByte);
        return this._textDecoder.decode(a);
      }
    };
    FBXTree = class {
      add(key, val) {
        this[key] = val;
      }
    };
    dataArray = [];
    tempEuler = new Euler();
    tempVec = new Vector3();
  }
});

// node_modules/react-model-viewer/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-model-viewer/dist/index.js"(exports, module) {
    !function(e, t) {
      if ("object" == typeof exports && "object" == typeof module)
        module.exports = t(require_react(), require_three(), (init_OrbitControls(), __toCommonJS(OrbitControls_exports)), (init_GLTFLoader(), __toCommonJS(GLTFLoader_exports)), (init_OBJLoader(), __toCommonJS(OBJLoader_exports)), (init_ColladaLoader(), __toCommonJS(ColladaLoader_exports)), (init_FBXLoader(), __toCommonJS(FBXLoader_exports)));
      else if ("function" == typeof define && define.amd)
        define(["react", "three", "three/examples/jsm/controls/OrbitControls", "three/examples/jsm/loaders/GLTFLoader", "three/examples/jsm/loaders/OBJLoader", "three/examples/jsm/loaders/ColladaLoader", "three/examples/jsm/loaders/FBXLoader"], t);
      else {
        var n = "object" == typeof exports ? t(require_react(), require_three(), (init_OrbitControls(), __toCommonJS(OrbitControls_exports)), (init_GLTFLoader(), __toCommonJS(GLTFLoader_exports)), (init_OBJLoader(), __toCommonJS(OBJLoader_exports)), (init_ColladaLoader(), __toCommonJS(ColladaLoader_exports)), (init_FBXLoader(), __toCommonJS(FBXLoader_exports))) : t(e.react, e.three, e["three/examples/jsm/controls/OrbitControls"], e["three/examples/jsm/loaders/GLTFLoader"], e["three/examples/jsm/loaders/OBJLoader"], e["three/examples/jsm/loaders/ColladaLoader"], e["three/examples/jsm/loaders/FBXLoader"]);
        for (var r in n)
          ("object" == typeof exports ? exports : e)[r] = n[r];
      }
    }(window, function(e, t, n, r, i, o, a) {
      return function(e2) {
        var t2 = {};
        function n2(r2) {
          if (t2[r2])
            return t2[r2].exports;
          var i2 = t2[r2] = { i: r2, l: false, exports: {} };
          return e2[r2].call(i2.exports, i2, i2.exports, n2), i2.l = true, i2.exports;
        }
        return n2.m = e2, n2.c = t2, n2.d = function(e3, t3, r2) {
          n2.o(e3, t3) || Object.defineProperty(e3, t3, { enumerable: true, get: r2 });
        }, n2.r = function(e3) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
        }, n2.t = function(e3, t3) {
          if (1 & t3 && (e3 = n2(e3)), 8 & t3)
            return e3;
          if (4 & t3 && "object" == typeof e3 && e3 && e3.__esModule)
            return e3;
          var r2 = /* @__PURE__ */ Object.create(null);
          if (n2.r(r2), Object.defineProperty(r2, "default", { enumerable: true, value: e3 }), 2 & t3 && "string" != typeof e3)
            for (var i2 in e3)
              n2.d(r2, i2, function(t4) {
                return e3[t4];
              }.bind(null, i2));
          return r2;
        }, n2.n = function(e3) {
          var t3 = e3 && e3.__esModule ? function() {
            return e3.default;
          } : function() {
            return e3;
          };
          return n2.d(t3, "a", t3), t3;
        }, n2.o = function(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }, n2.p = "/", n2(n2.s = 118);
      }([function(t2, n2) {
        t2.exports = e;
      }, function(e2, t2, n2) {
        e2.exports = n2(116)();
      }, function(e2, n2) {
        e2.exports = t;
      }, function(e2, t2, n2) {
        (function(t3) {
          var n3 = "object", r2 = function(e3) {
            return e3 && e3.Math == Math && e3;
          };
          e2.exports = r2(typeof globalThis == n3 && globalThis) || r2(typeof window == n3 && window) || r2(typeof self == n3 && self) || r2(typeof t3 == n3 && t3) || Function("return this")();
        }).call(this, n2(49));
      }, function(e2, t2) {
        e2.exports = function(e3) {
          try {
            return !!e3();
          } catch (e4) {
            return true;
          }
        };
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(15).f, o2 = n2(9), a2 = n2(14), l = n2(34), u = n2(53), c = n2(89);
        e2.exports = function(e3, t3) {
          var n3, s, f, p, d, h = e3.target, m = e3.global, v = e3.stat;
          if (n3 = m ? r2 : v ? r2[h] || l(h, {}) : (r2[h] || {}).prototype)
            for (s in t3) {
              if (p = t3[s], f = e3.noTargetGet ? (d = i2(n3, s)) && d.value : n3[s], !c(m ? s : h + (v ? "." : "#") + s, e3.forced) && void 0 !== f) {
                if (typeof p == typeof f)
                  continue;
                u(p, f);
              }
              (e3.sham || f && f.sham) && o2(p, "sham", true), a2(n3, s, p, e3);
            }
        };
      }, function(e2, t2, n2) {
        var r2 = n2(4);
        e2.exports = !r2(function() {
          return 7 != Object.defineProperty({}, "a", { get: function() {
            return 7;
          } }).a;
        });
      }, function(e2, t2) {
        var n2 = {}.hasOwnProperty;
        e2.exports = function(e3, t3) {
          return n2.call(e3, t3);
        };
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(17), o2 = n2(35), a2 = n2(58), l = r2.Symbol, u = i2("wks");
        e2.exports = function(e3) {
          return u[e3] || (u[e3] = a2 && l[e3] || (a2 ? l : o2)("Symbol." + e3));
        };
      }, function(e2, t2, n2) {
        var r2 = n2(6), i2 = n2(10), o2 = n2(16);
        e2.exports = r2 ? function(e3, t3, n3) {
          return i2.f(e3, t3, o2(1, n3));
        } : function(e3, t3, n3) {
          return e3[t3] = n3, e3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(6), i2 = n2(50), o2 = n2(13), a2 = n2(24), l = Object.defineProperty;
        t2.f = r2 ? l : function(e3, t3, n3) {
          if (o2(e3), t3 = a2(t3, true), o2(n3), i2)
            try {
              return l(e3, t3, n3);
            } catch (e4) {
            }
          if ("get" in n3 || "set" in n3)
            throw TypeError("Accessors not supported");
          return "value" in n3 && (e3[t3] = n3.value), e3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(32), i2 = n2(23);
        e2.exports = function(e3) {
          return r2(i2(e3));
        };
      }, function(e2, t2) {
        e2.exports = function(e3) {
          return "object" == typeof e3 ? null !== e3 : "function" == typeof e3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(12);
        e2.exports = function(e3) {
          if (!r2(e3))
            throw TypeError(String(e3) + " is not an object");
          return e3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(17), o2 = n2(9), a2 = n2(7), l = n2(34), u = n2(52), c = n2(26), s = c.get, f = c.enforce, p = String(u).split("toString");
        i2("inspectSource", function(e3) {
          return u.call(e3);
        }), (e2.exports = function(e3, t3, n3, i3) {
          var u2 = !!i3 && !!i3.unsafe, c2 = !!i3 && !!i3.enumerable, s2 = !!i3 && !!i3.noTargetGet;
          "function" == typeof n3 && ("string" != typeof t3 || a2(n3, "name") || o2(n3, "name", t3), f(n3).source = p.join("string" == typeof t3 ? t3 : "")), e3 !== r2 ? (u2 ? !s2 && e3[t3] && (c2 = true) : delete e3[t3], c2 ? e3[t3] = n3 : o2(e3, t3, n3)) : c2 ? e3[t3] = n3 : l(t3, n3);
        })(Function.prototype, "toString", function() {
          return "function" == typeof this && s(this).source || u.call(this);
        });
      }, function(e2, t2, n2) {
        var r2 = n2(6), i2 = n2(22), o2 = n2(16), a2 = n2(11), l = n2(24), u = n2(7), c = n2(50), s = Object.getOwnPropertyDescriptor;
        t2.f = r2 ? s : function(e3, t3) {
          if (e3 = a2(e3), t3 = l(t3, true), c)
            try {
              return s(e3, t3);
            } catch (e4) {
            }
          if (u(e3, t3))
            return o2(!i2.f.call(e3, t3), e3[t3]);
        };
      }, function(e2, t2) {
        e2.exports = function(e3, t3) {
          return { enumerable: !(1 & e3), configurable: !(2 & e3), writable: !(4 & e3), value: t3 };
        };
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(34), o2 = n2(25), a2 = r2["__core-js_shared__"] || i2("__core-js_shared__", {});
        (e2.exports = function(e3, t3) {
          return a2[e3] || (a2[e3] = void 0 !== t3 ? t3 : {});
        })("versions", []).push({ version: "3.1.3", mode: o2 ? "pure" : "global", copyright: "© 2019 Denis Pushkarev (zloirock.ru)" });
      }, function(e2, t2, n2) {
        var r2 = n2(55), i2 = n2(37);
        e2.exports = Object.keys || function(e3) {
          return r2(e3, i2);
        };
      }, function(e2, t2, n2) {
        var r2 = n2(23);
        e2.exports = function(e3) {
          return Object(r2(e3));
        };
      }, function(e2, t2, n2) {
        "use strict";
        e2.exports = n2(114);
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(5), i2 = n2(3), o2 = n2(7), a2 = n2(58), l = n2(6), u = n2(25), c = n2(14), s = n2(28), f = n2(4), p = n2(17), d = n2(38), h = n2(35), m = n2(8), v = n2(59), b = n2(60), y = n2(91), g = n2(61), x = n2(13), w = n2(12), E = n2(19), O = n2(11), T = n2(24), S = n2(16), _ = n2(39), k = n2(36), j = n2(94), P = n2(15), C = n2(10), z = n2(22), I = n2(9), M = n2(18), N = n2(30), L = n2(27), R = n2(26), A = L("hidden"), U = R.set, F = R.getterFor("Symbol"), D = P.f, W = C.f, B = j.f, H = i2.Symbol, q = i2.JSON, Q = q && q.stringify, V = m("toPrimitive"), G = z.f, $ = p("symbol-registry"), K = p("symbols"), X = p("op-symbols"), Y = p("wks"), J = Object.prototype, Z = i2.QObject, ee = !Z || !Z.prototype || !Z.prototype.findChild, te2 = l && f(function() {
          return 7 != _(W({}, "a", { get: function() {
            return W(this, "a", { value: 7 }).a;
          } })).a;
        }) ? function(e3, t3, n3) {
          var r3 = D(J, t3);
          r3 && delete J[t3], W(e3, t3, n3), r3 && e3 !== J && W(J, t3, r3);
        } : W, ne = function(e3, t3) {
          var n3 = K[e3] = _(H.prototype);
          return U(n3, { type: "Symbol", tag: e3, description: t3 }), l || (n3.description = t3), n3;
        }, re = a2 && "symbol" == typeof H.iterator ? function(e3) {
          return "symbol" == typeof e3;
        } : function(e3) {
          return Object(e3) instanceof H;
        }, ie = function(e3, t3, n3) {
          return e3 === J && ie(X, t3, n3), x(e3), t3 = T(t3, true), x(n3), o2(K, t3) ? (n3.enumerable ? (o2(e3, A) && e3[A][t3] && (e3[A][t3] = false), n3 = _(n3, { enumerable: S(0, false) })) : (o2(e3, A) || W(e3, A, S(1, {})), e3[A][t3] = true), te2(e3, t3, n3)) : W(e3, t3, n3);
        }, oe = function(e3, t3) {
          x(e3);
          for (var n3, r3 = y(t3 = O(t3)), i3 = 0, o3 = r3.length; o3 > i3; )
            ie(e3, n3 = r3[i3++], t3[n3]);
          return e3;
        }, ae = function(e3) {
          var t3 = G.call(this, e3 = T(e3, true));
          return !(this === J && o2(K, e3) && !o2(X, e3)) && (!(t3 || !o2(this, e3) || !o2(K, e3) || o2(this, A) && this[A][e3]) || t3);
        }, le = function(e3, t3) {
          if (e3 = O(e3), t3 = T(t3, true), e3 !== J || !o2(K, t3) || o2(X, t3)) {
            var n3 = D(e3, t3);
            return !n3 || !o2(K, t3) || o2(e3, A) && e3[A][t3] || (n3.enumerable = true), n3;
          }
        }, ue = function(e3) {
          for (var t3, n3 = B(O(e3)), r3 = [], i3 = 0; n3.length > i3; )
            o2(K, t3 = n3[i3++]) || o2(s, t3) || r3.push(t3);
          return r3;
        }, ce = function(e3) {
          for (var t3, n3 = e3 === J, r3 = B(n3 ? X : O(e3)), i3 = [], a3 = 0; r3.length > a3; )
            !o2(K, t3 = r3[a3++]) || n3 && !o2(J, t3) || i3.push(K[t3]);
          return i3;
        };
        a2 || (c((H = function() {
          if (this instanceof H)
            throw TypeError("Symbol is not a constructor");
          var e3 = void 0 === arguments[0] ? void 0 : String(arguments[0]), t3 = h(e3), n3 = function(e4) {
            this === J && n3.call(X, e4), o2(this, A) && o2(this[A], t3) && (this[A][t3] = false), te2(this, t3, S(1, e4));
          };
          return l && ee && te2(J, t3, { configurable: true, set: n3 }), ne(t3, e3);
        }).prototype, "toString", function() {
          return F(this).tag;
        }), z.f = ae, C.f = ie, P.f = le, k.f = j.f = ue, N.f = ce, l && (W(H.prototype, "description", { configurable: true, get: function() {
          return F(this).description;
        } }), u || c(J, "propertyIsEnumerable", ae, { unsafe: true })), v.f = function(e3) {
          return ne(m(e3), e3);
        }), r2({ global: true, wrap: true, forced: !a2, sham: !a2 }, { Symbol: H });
        for (var se = M(Y), fe = 0; se.length > fe; )
          b(se[fe++]);
        r2({ target: "Symbol", stat: true, forced: !a2 }, { for: function(e3) {
          return o2($, e3 += "") ? $[e3] : $[e3] = H(e3);
        }, keyFor: function(e3) {
          if (!re(e3))
            throw TypeError(e3 + " is not a symbol");
          for (var t3 in $)
            if ($[t3] === e3)
              return t3;
        }, useSetter: function() {
          ee = true;
        }, useSimple: function() {
          ee = false;
        } }), r2({ target: "Object", stat: true, forced: !a2, sham: !l }, { create: function(e3, t3) {
          return void 0 === t3 ? _(e3) : oe(_(e3), t3);
        }, defineProperty: ie, defineProperties: oe, getOwnPropertyDescriptor: le }), r2({ target: "Object", stat: true, forced: !a2 }, { getOwnPropertyNames: ue, getOwnPropertySymbols: ce }), r2({ target: "Object", stat: true, forced: f(function() {
          N.f(1);
        }) }, { getOwnPropertySymbols: function(e3) {
          return N.f(E(e3));
        } }), q && r2({ target: "JSON", stat: true, forced: !a2 || f(function() {
          var e3 = H();
          return "[null]" != Q([e3]) || "{}" != Q({ a: e3 }) || "{}" != Q(Object(e3));
        }) }, { stringify: function(e3) {
          for (var t3, n3, r3 = [e3], i3 = 1; arguments.length > i3; )
            r3.push(arguments[i3++]);
          if (n3 = t3 = r3[1], (w(t3) || void 0 !== e3) && !re(e3))
            return g(t3) || (t3 = function(e4, t4) {
              if ("function" == typeof n3 && (t4 = n3.call(this, e4, t4)), !re(t4))
                return t4;
            }), r3[1] = t3, Q.apply(q, r3);
        } }), H.prototype[V] || I(H.prototype, V, H.prototype.valueOf), d(H, "Symbol"), s[A] = true;
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = {}.propertyIsEnumerable, i2 = Object.getOwnPropertyDescriptor, o2 = i2 && !r2.call({ 1: 2 }, 1);
        t2.f = o2 ? function(e3) {
          var t3 = i2(this, e3);
          return !!t3 && t3.enumerable;
        } : r2;
      }, function(e2, t2) {
        e2.exports = function(e3) {
          if (null == e3)
            throw TypeError("Can't call method on " + e3);
          return e3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(12);
        e2.exports = function(e3, t3) {
          if (!r2(e3))
            return e3;
          var n3, i2;
          if (t3 && "function" == typeof (n3 = e3.toString) && !r2(i2 = n3.call(e3)))
            return i2;
          if ("function" == typeof (n3 = e3.valueOf) && !r2(i2 = n3.call(e3)))
            return i2;
          if (!t3 && "function" == typeof (n3 = e3.toString) && !r2(i2 = n3.call(e3)))
            return i2;
          throw TypeError("Can't convert object to primitive value");
        };
      }, function(e2, t2) {
        e2.exports = false;
      }, function(e2, t2, n2) {
        var r2, i2, o2, a2 = n2(87), l = n2(3), u = n2(12), c = n2(9), s = n2(7), f = n2(27), p = n2(28), d = l.WeakMap;
        if (a2) {
          var h = new d(), m = h.get, v = h.has, b = h.set;
          r2 = function(e3, t3) {
            return b.call(h, e3, t3), t3;
          }, i2 = function(e3) {
            return m.call(h, e3) || {};
          }, o2 = function(e3) {
            return v.call(h, e3);
          };
        } else {
          var y = f("state");
          p[y] = true, r2 = function(e3, t3) {
            return c(e3, y, t3), t3;
          }, i2 = function(e3) {
            return s(e3, y) ? e3[y] : {};
          }, o2 = function(e3) {
            return s(e3, y);
          };
        }
        e2.exports = { set: r2, get: i2, has: o2, enforce: function(e3) {
          return o2(e3) ? i2(e3) : r2(e3, {});
        }, getterFor: function(e3) {
          return function(t3) {
            var n3;
            if (!u(t3) || (n3 = i2(t3)).type !== e3)
              throw TypeError("Incompatible receiver, " + e3 + " required");
            return n3;
          };
        } };
      }, function(e2, t2, n2) {
        var r2 = n2(17), i2 = n2(35), o2 = r2("keys");
        e2.exports = function(e3) {
          return o2[e3] || (o2[e3] = i2(e3));
        };
      }, function(e2, t2) {
        e2.exports = {};
      }, function(e2, t2) {
        var n2 = Math.ceil, r2 = Math.floor;
        e2.exports = function(e3) {
          return isNaN(e3 = +e3) ? 0 : (e3 > 0 ? r2 : n2)(e3);
        };
      }, function(e2, t2) {
        t2.f = Object.getOwnPropertySymbols;
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(11), i2 = n2(98), o2 = n2(43), a2 = n2(26), l = n2(68), u = a2.set, c = a2.getterFor("Array Iterator");
        e2.exports = l(Array, "Array", function(e3, t3) {
          u(this, { type: "Array Iterator", target: r2(e3), index: 0, kind: t3 });
        }, function() {
          var e3 = c(this), t3 = e3.target, n3 = e3.kind, r3 = e3.index++;
          return !t3 || r3 >= t3.length ? (e3.target = void 0, { value: void 0, done: true }) : "keys" == n3 ? { value: r3, done: false } : "values" == n3 ? { value: t3[r3], done: false } : { value: [r3, t3[r3]], done: false };
        }, "values"), o2.Arguments = o2.Array, i2("keys"), i2("values"), i2("entries");
      }, function(e2, t2, n2) {
        var r2 = n2(4), i2 = n2(33), o2 = "".split;
        e2.exports = r2(function() {
          return !Object("z").propertyIsEnumerable(0);
        }) ? function(e3) {
          return "String" == i2(e3) ? o2.call(e3, "") : Object(e3);
        } : Object;
      }, function(e2, t2) {
        var n2 = {}.toString;
        e2.exports = function(e3) {
          return n2.call(e3).slice(8, -1);
        };
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(9);
        e2.exports = function(e3, t3) {
          try {
            i2(r2, e3, t3);
          } catch (n3) {
            r2[e3] = t3;
          }
          return t3;
        };
      }, function(e2, t2) {
        var n2 = 0, r2 = Math.random();
        e2.exports = function(e3) {
          return "Symbol(".concat(void 0 === e3 ? "" : e3, ")_", (++n2 + r2).toString(36));
        };
      }, function(e2, t2, n2) {
        var r2 = n2(55), i2 = n2(37).concat("length", "prototype");
        t2.f = Object.getOwnPropertyNames || function(e3) {
          return r2(e3, i2);
        };
      }, function(e2, t2) {
        e2.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
      }, function(e2, t2, n2) {
        var r2 = n2(10).f, i2 = n2(7), o2 = n2(8)("toStringTag");
        e2.exports = function(e3, t3, n3) {
          e3 && !i2(e3 = n3 ? e3 : e3.prototype, o2) && r2(e3, o2, { configurable: true, value: t3 });
        };
      }, function(e2, t2, n2) {
        var r2 = n2(13), i2 = n2(92), o2 = n2(37), a2 = n2(28), l = n2(93), u = n2(51), c = n2(27)("IE_PROTO"), s = function() {
        }, f = function() {
          var e3, t3 = u("iframe"), n3 = o2.length;
          for (t3.style.display = "none", l.appendChild(t3), t3.src = String("javascript:"), (e3 = t3.contentWindow.document).open(), e3.write("<script>document.F=Object<\/script>"), e3.close(), f = e3.F; n3--; )
            delete f.prototype[o2[n3]];
          return f();
        };
        e2.exports = Object.create || function(e3, t3) {
          var n3;
          return null !== e3 ? (s.prototype = r2(e3), n3 = new s(), s.prototype = null, n3[c] = e3) : n3 = f(), void 0 === t3 ? n3 : i2(n3, t3);
        }, a2[c] = true;
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(5), i2 = n2(6), o2 = n2(3), a2 = n2(7), l = n2(12), u = n2(10).f, c = n2(53), s = o2.Symbol;
        if (i2 && "function" == typeof s && (!("description" in s.prototype) || void 0 !== s().description)) {
          var f = {}, p = function() {
            var e3 = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]), t3 = this instanceof p ? new s(e3) : void 0 === e3 ? s() : s(e3);
            return "" === e3 && (f[t3] = true), t3;
          };
          c(p, s);
          var d = p.prototype = s.prototype;
          d.constructor = p;
          var h = d.toString, m = "Symbol(test)" == String(s("test")), v = /^Symbol\((.*)\)[^)]+$/;
          u(d, "description", { configurable: true, get: function() {
            var e3 = l(this) ? this.valueOf() : this, t3 = h.call(e3);
            if (a2(f, e3))
              return "";
            var n3 = m ? t3.slice(7, -1) : t3.replace(v, "$1");
            return "" === n3 ? void 0 : n3;
          } }), r2({ global: true, forced: true }, { Symbol: p });
        }
      }, function(e2, t2, n2) {
        n2(60)("iterator");
      }, function(e2, t2, n2) {
        var r2 = n2(95), i2 = n2(32), o2 = n2(19), a2 = n2(57), l = n2(97);
        e2.exports = function(e3, t3) {
          var n3 = 1 == e3, u = 2 == e3, c = 3 == e3, s = 4 == e3, f = 6 == e3, p = 5 == e3 || f, d = t3 || l;
          return function(t4, l2, h) {
            for (var m, v, b = o2(t4), y = i2(b), g = r2(l2, h, 3), x = a2(y.length), w = 0, E = n3 ? d(t4, x) : u ? d(t4, 0) : void 0; x > w; w++)
              if ((p || w in y) && (v = g(m = y[w], w, b), e3)) {
                if (n3)
                  E[w] = v;
                else if (v)
                  switch (e3) {
                    case 3:
                      return true;
                    case 5:
                      return m;
                    case 6:
                      return w;
                    case 2:
                      E.push(m);
                  }
                else if (s)
                  return false;
              }
            return f ? -1 : c || s ? s : E;
          };
        };
      }, function(e2, t2) {
        e2.exports = {};
      }, function(e2, t2, n2) {
        var r2 = n2(14), i2 = Date.prototype, o2 = i2.toString, a2 = i2.getTime;
        /* @__PURE__ */ new Date(NaN) + "" != "Invalid Date" && r2(i2, "toString", function() {
          var e3 = a2.call(this);
          return e3 == e3 ? o2.call(this) : "Invalid Date";
        });
      }, function(e2, t2, n2) {
        var r2 = n2(14), i2 = n2(106), o2 = Object.prototype;
        i2 !== o2.toString && r2(o2, "toString", i2, { unsafe: true });
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(14), i2 = n2(13), o2 = n2(4), a2 = n2(108), l = /./.toString, u = RegExp.prototype, c = o2(function() {
          return "/a/b" != l.call({ source: "a", flags: "b" });
        }), s = "toString" != l.name;
        (c || s) && r2(RegExp.prototype, "toString", function() {
          var e3 = i2(this), t3 = String(e3.source), n3 = e3.flags;
          return "/" + t3 + "/" + String(void 0 === n3 && e3 instanceof RegExp && !("flags" in u) ? a2.call(e3) : n3);
        }, { unsafe: true });
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(109), i2 = n2(26), o2 = n2(68), a2 = i2.set, l = i2.getterFor("String Iterator");
        o2(String, "String", function(e3) {
          a2(this, { type: "String Iterator", string: String(e3), index: 0 });
        }, function() {
          var e3, t3 = l(this), n3 = t3.string, i3 = t3.index;
          return i3 >= n3.length ? { value: void 0, done: true } : (e3 = r2(n3, i3, true), t3.index += e3.length, { value: e3, done: false });
        });
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(77), o2 = n2(31), a2 = n2(9), l = n2(8), u = l("iterator"), c = l("toStringTag"), s = o2.values;
        for (var f in i2) {
          var p = r2[f], d = p && p.prototype;
          if (d) {
            if (d[u] !== s)
              try {
                a2(d, u, s);
              } catch (e3) {
                d[u] = s;
              }
            if (d[c] || a2(d, c, f), i2[f]) {
              for (var h in o2)
                if (d[h] !== o2[h])
                  try {
                    a2(d, h, o2[h]);
                  } catch (e3) {
                    d[h] = o2[h];
                  }
            }
          }
        }
      }, function(e2, t2) {
        var n2;
        n2 = function() {
          return this;
        }();
        try {
          n2 = n2 || new Function("return this")();
        } catch (e3) {
          "object" == typeof window && (n2 = window);
        }
        e2.exports = n2;
      }, function(e2, t2, n2) {
        var r2 = n2(6), i2 = n2(4), o2 = n2(51);
        e2.exports = !r2 && !i2(function() {
          return 7 != Object.defineProperty(o2("div"), "a", { get: function() {
            return 7;
          } }).a;
        });
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(12), o2 = r2.document, a2 = i2(o2) && i2(o2.createElement);
        e2.exports = function(e3) {
          return a2 ? o2.createElement(e3) : {};
        };
      }, function(e2, t2, n2) {
        var r2 = n2(17);
        e2.exports = r2("native-function-to-string", Function.toString);
      }, function(e2, t2, n2) {
        var r2 = n2(7), i2 = n2(54), o2 = n2(15), a2 = n2(10);
        e2.exports = function(e3, t3) {
          for (var n3 = i2(t3), l = a2.f, u = o2.f, c = 0; c < n3.length; c++) {
            var s = n3[c];
            r2(e3, s) || l(e3, s, u(t3, s));
          }
        };
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(36), o2 = n2(30), a2 = n2(13), l = r2.Reflect;
        e2.exports = l && l.ownKeys || function(e3) {
          var t3 = i2.f(a2(e3)), n3 = o2.f;
          return n3 ? t3.concat(n3(e3)) : t3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(7), i2 = n2(11), o2 = n2(56), a2 = n2(28), l = o2(false);
        e2.exports = function(e3, t3) {
          var n3, o3 = i2(e3), u = 0, c = [];
          for (n3 in o3)
            !r2(a2, n3) && r2(o3, n3) && c.push(n3);
          for (; t3.length > u; )
            r2(o3, n3 = t3[u++]) && (~l(c, n3) || c.push(n3));
          return c;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(11), i2 = n2(57), o2 = n2(88);
        e2.exports = function(e3) {
          return function(t3, n3, a2) {
            var l, u = r2(t3), c = i2(u.length), s = o2(a2, c);
            if (e3 && n3 != n3) {
              for (; c > s; )
                if ((l = u[s++]) != l)
                  return true;
            } else
              for (; c > s; s++)
                if ((e3 || s in u) && u[s] === n3)
                  return e3 || s || 0;
            return !e3 && -1;
          };
        };
      }, function(e2, t2, n2) {
        var r2 = n2(29), i2 = Math.min;
        e2.exports = function(e3) {
          return e3 > 0 ? i2(r2(e3), 9007199254740991) : 0;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(4);
        e2.exports = !!Object.getOwnPropertySymbols && !r2(function() {
          return !String(Symbol());
        });
      }, function(e2, t2, n2) {
        t2.f = n2(8);
      }, function(e2, t2, n2) {
        var r2 = n2(90), i2 = n2(7), o2 = n2(59), a2 = n2(10).f;
        e2.exports = function(e3) {
          var t3 = r2.Symbol || (r2.Symbol = {});
          i2(t3, e3) || a2(t3, e3, { value: o2.f(e3) });
        };
      }, function(e2, t2, n2) {
        var r2 = n2(33);
        e2.exports = Array.isArray || function(e3) {
          return "Array" == r2(e3);
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(5), i2 = n2(42), o2 = n2(63), a2 = i2(2);
        r2({ target: "Array", proto: true, forced: !o2("filter") }, { filter: function(e3) {
          return a2(this, e3, arguments[1]);
        } });
      }, function(e2, t2, n2) {
        var r2 = n2(4), i2 = n2(8)("species");
        e2.exports = function(e3) {
          return !r2(function() {
            var t3 = [];
            return (t3.constructor = {})[i2] = function() {
              return { foo: 1 };
            }, 1 !== t3[e3](Boolean).foo;
          });
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(5), i2 = n2(65);
        r2({ target: "Array", proto: true, forced: [].forEach != i2 }, { forEach: i2 });
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(42), i2 = n2(66), o2 = r2(0), a2 = i2("forEach");
        e2.exports = a2 ? function(e3) {
          return o2(this, e3, arguments[1]);
        } : [].forEach;
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(4);
        e2.exports = function(e3, t3) {
          var n3 = [][e3];
          return !n3 || !r2(function() {
            n3.call(null, t3 || function() {
              throw 1;
            }, 1);
          });
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(5), i2 = n2(66), o2 = n2(56)(false), a2 = [].indexOf, l = !!a2 && 1 / [1].indexOf(1, -0) < 0, u = i2("indexOf");
        r2({ target: "Array", proto: true, forced: l || u }, { indexOf: function(e3) {
          return l ? a2.apply(this, arguments) || 0 : o2(this, e3, arguments[1]);
        } });
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(5), i2 = n2(99), o2 = n2(70), a2 = n2(101), l = n2(38), u = n2(9), c = n2(14), s = n2(8), f = n2(25), p = n2(43), d = n2(69), h = d.IteratorPrototype, m = d.BUGGY_SAFARI_ITERATORS, v = s("iterator"), b = function() {
          return this;
        };
        e2.exports = function(e3, t3, n3, s2, d2, y, g) {
          i2(n3, t3, s2);
          var x, w, E, O = function(e4) {
            if (e4 === d2 && j)
              return j;
            if (!m && e4 in _)
              return _[e4];
            switch (e4) {
              case "keys":
              case "values":
              case "entries":
                return function() {
                  return new n3(this, e4);
                };
            }
            return function() {
              return new n3(this);
            };
          }, T = t3 + " Iterator", S = false, _ = e3.prototype, k = _[v] || _["@@iterator"] || d2 && _[d2], j = !m && k || O(d2), P = "Array" == t3 && _.entries || k;
          if (P && (x = o2(P.call(new e3())), h !== Object.prototype && x.next && (f || o2(x) === h || (a2 ? a2(x, h) : "function" != typeof x[v] && u(x, v, b)), l(x, T, true, true), f && (p[T] = b))), "values" == d2 && k && "values" !== k.name && (S = true, j = function() {
            return k.call(this);
          }), f && !g || _[v] === j || u(_, v, j), p[t3] = j, d2)
            if (w = { values: O("values"), keys: y ? j : O("keys"), entries: O("entries") }, g)
              for (E in w)
                !m && !S && E in _ || c(_, E, w[E]);
            else
              r2({ target: t3, proto: true, forced: m || S }, w);
          return w;
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2, i2, o2, a2 = n2(70), l = n2(9), u = n2(7), c = n2(8), s = n2(25), f = c("iterator"), p = false;
        [].keys && ("next" in (o2 = [].keys()) ? (i2 = a2(a2(o2))) !== Object.prototype && (r2 = i2) : p = true), null == r2 && (r2 = {}), s || u(r2, f) || l(r2, f, function() {
          return this;
        }), e2.exports = { IteratorPrototype: r2, BUGGY_SAFARI_ITERATORS: p };
      }, function(e2, t2, n2) {
        var r2 = n2(7), i2 = n2(19), o2 = n2(27), a2 = n2(100), l = o2("IE_PROTO"), u = Object.prototype;
        e2.exports = a2 ? Object.getPrototypeOf : function(e3) {
          return e3 = i2(e3), r2(e3, l) ? e3[l] : "function" == typeof e3.constructor && e3 instanceof e3.constructor ? e3.constructor.prototype : e3 instanceof Object ? u : null;
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(5), i2 = n2(42), o2 = n2(63), a2 = i2(1);
        r2({ target: "Array", proto: true, forced: !o2("map") }, { map: function(e3) {
          return a2(this, e3, arguments[1]);
        } });
      }, function(e2, t2, n2) {
        var r2 = n2(5), i2 = n2(104);
        r2({ target: "Object", stat: true, forced: Object.assign !== i2 }, { assign: i2 });
      }, function(e2, t2, n2) {
        var r2 = n2(5), i2 = n2(4), o2 = n2(11), a2 = n2(15).f, l = n2(6), u = i2(function() {
          a2(1);
        });
        r2({ target: "Object", stat: true, forced: !l || u, sham: !l }, { getOwnPropertyDescriptor: function(e3, t3) {
          return a2(o2(e3), t3);
        } });
      }, function(e2, t2, n2) {
        var r2 = n2(5), i2 = n2(6), o2 = n2(54), a2 = n2(11), l = n2(15), u = n2(105);
        r2({ target: "Object", stat: true, sham: !i2 }, { getOwnPropertyDescriptors: function(e3) {
          for (var t3, n3, r3 = a2(e3), i3 = l.f, c = o2(r3), s = {}, f = 0; c.length > f; )
            void 0 !== (n3 = i3(r3, t3 = c[f++])) && u(s, t3, n3);
          return s;
        } });
      }, function(e2, t2, n2) {
        var r2 = n2(5), i2 = n2(19), o2 = n2(18);
        r2({ target: "Object", stat: true, forced: n2(4)(function() {
          o2(1);
        }) }, { keys: function(e3) {
          return o2(i2(e3));
        } });
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(77), o2 = n2(65), a2 = n2(9);
        for (var l in i2) {
          var u = r2[l], c = u && u.prototype;
          if (c && c.forEach !== o2)
            try {
              a2(c, "forEach", o2);
            } catch (e3) {
              c.forEach = o2;
            }
        }
      }, function(e2, t2) {
        e2.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
      }, function(e2, t2) {
        e2.exports = n;
      }, function(e2, t2) {
        e2.exports = r;
      }, function(e2, t2) {
        e2.exports = i;
      }, function(e2, t2) {
        e2.exports = o;
      }, function(e2, t2) {
        e2.exports = a;
      }, function(e2, t2, n2) {
        "use strict";
        e2.exports = n2(112);
      }, function(e2, t2) {
        function n2() {
        }
        n2.prototype = { on: function(e3, t3, n3) {
          var r2 = this.e || (this.e = {});
          return (r2[e3] || (r2[e3] = [])).push({ fn: t3, ctx: n3 }), this;
        }, once: function(e3, t3, n3) {
          var r2 = this;
          function i2() {
            r2.off(e3, i2), t3.apply(n3, arguments);
          }
          return i2._ = t3, this.on(e3, i2, n3);
        }, emit: function(e3) {
          for (var t3 = [].slice.call(arguments, 1), n3 = ((this.e || (this.e = {}))[e3] || []).slice(), r2 = 0, i2 = n3.length; r2 < i2; r2++)
            n3[r2].fn.apply(n3[r2].ctx, t3);
          return this;
        }, off: function(e3, t3) {
          var n3 = this.e || (this.e = {}), r2 = n3[e3], i2 = [];
          if (r2 && t3)
            for (var o2 = 0, a2 = r2.length; o2 < a2; o2++)
              r2[o2].fn !== t3 && r2[o2].fn._ !== t3 && i2.push(r2[o2]);
          return i2.length ? n3[e3] = i2 : delete n3[e3], this;
        } }, e2.exports = n2, e2.exports.TinyEmitter = n2;
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = this && this.__values || function(e3) {
          var t3 = "function" == typeof Symbol && e3[Symbol.iterator], n3 = 0;
          return t3 ? t3.call(e3) : { next: function() {
            return e3 && n3 >= e3.length && (e3 = void 0), { value: e3 && e3[n3++], done: !e3 };
          } };
        }, i2 = this && this.__read || function(e3, t3) {
          var n3 = "function" == typeof Symbol && e3[Symbol.iterator];
          if (!n3)
            return e3;
          var r3, i3, o3 = n3.call(e3), a3 = [];
          try {
            for (; (void 0 === t3 || t3-- > 0) && !(r3 = o3.next()).done; )
              a3.push(r3.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              r3 && !r3.done && (n3 = o3.return) && n3.call(o3);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a3;
        }, o2 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        }, a2 = n2(115), l = [];
        e2.exports = function(e3, t3, n3) {
          var i3, u;
          void 0 === n3 && (n3 = 0);
          try {
            for (var c = r2(l), s = c.next(); !s.done; s = c.next()) {
              var f = s.value;
              if (a2(t3, f.inputs)) {
                if (Object.prototype.hasOwnProperty.call(f, "error"))
                  throw f.error;
                if (Object.prototype.hasOwnProperty.call(f, "response"))
                  return f.response;
                throw f.promise;
              }
            }
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              s && !s.done && (u = c.return) && u.call(c);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          var p = { promise: e3.apply(void 0, o2(t3)).then(function(e4) {
            p.response = e4;
          }).catch(function(e4) {
            p.error = e4;
          }).then(function() {
            n3 > 0 && setTimeout(function() {
              var e4 = l.indexOf(p);
              -1 !== e4 && l.splice(e4, 1);
            }, n3);
          }), inputs: t3 };
          throw l.push(p), p.promise;
        };
      }, function(e2, t2, n2) {
        "use strict";
        (function(e3) {
          var n3 = function() {
            if ("undefined" != typeof Map)
              return Map;
            function e4(e5, t3) {
              var n4 = -1;
              return e5.some(function(e6, r3) {
                return e6[0] === t3 && (n4 = r3, true);
              }), n4;
            }
            return function() {
              function t3() {
                this.__entries__ = [];
              }
              return Object.defineProperty(t3.prototype, "size", { get: function() {
                return this.__entries__.length;
              }, enumerable: true, configurable: true }), t3.prototype.get = function(t4) {
                var n4 = e4(this.__entries__, t4), r3 = this.__entries__[n4];
                return r3 && r3[1];
              }, t3.prototype.set = function(t4, n4) {
                var r3 = e4(this.__entries__, t4);
                ~r3 ? this.__entries__[r3][1] = n4 : this.__entries__.push([t4, n4]);
              }, t3.prototype.delete = function(t4) {
                var n4 = this.__entries__, r3 = e4(n4, t4);
                ~r3 && n4.splice(r3, 1);
              }, t3.prototype.has = function(t4) {
                return !!~e4(this.__entries__, t4);
              }, t3.prototype.clear = function() {
                this.__entries__.splice(0);
              }, t3.prototype.forEach = function(e5, t4) {
                void 0 === t4 && (t4 = null);
                for (var n4 = 0, r3 = this.__entries__; n4 < r3.length; n4++) {
                  var i3 = r3[n4];
                  e5.call(t4, i3[1], i3[0]);
                }
              }, t3;
            }();
          }(), r2 = "undefined" != typeof window && "undefined" != typeof document && window.document === document, i2 = void 0 !== e3 && e3.Math === Math ? e3 : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(), o2 = "function" == typeof requestAnimationFrame ? requestAnimationFrame.bind(i2) : function(e4) {
            return setTimeout(function() {
              return e4(Date.now());
            }, 1e3 / 60);
          }, a2 = 2;
          var l = 20, u = ["top", "right", "bottom", "left", "width", "height", "size", "weight"], c = "undefined" != typeof MutationObserver, s = function() {
            function e4() {
              this.connected_ = false, this.mutationEventsAdded_ = false, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = function(e5, t3) {
                var n4 = false, r3 = false, i3 = 0;
                function l2() {
                  n4 && (n4 = false, e5()), r3 && c2();
                }
                function u2() {
                  o2(l2);
                }
                function c2() {
                  var e6 = Date.now();
                  if (n4) {
                    if (e6 - i3 < a2)
                      return;
                    r3 = true;
                  } else
                    n4 = true, r3 = false, setTimeout(u2, t3);
                  i3 = e6;
                }
                return c2;
              }(this.refresh.bind(this), l);
            }
            return e4.prototype.addObserver = function(e5) {
              ~this.observers_.indexOf(e5) || this.observers_.push(e5), this.connected_ || this.connect_();
            }, e4.prototype.removeObserver = function(e5) {
              var t3 = this.observers_, n4 = t3.indexOf(e5);
              ~n4 && t3.splice(n4, 1), !t3.length && this.connected_ && this.disconnect_();
            }, e4.prototype.refresh = function() {
              this.updateObservers_() && this.refresh();
            }, e4.prototype.updateObservers_ = function() {
              var e5 = this.observers_.filter(function(e6) {
                return e6.gatherActive(), e6.hasActive();
              });
              return e5.forEach(function(e6) {
                return e6.broadcastActive();
              }), e5.length > 0;
            }, e4.prototype.connect_ = function() {
              r2 && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), c ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, { attributes: true, childList: true, characterData: true, subtree: true })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = true), this.connected_ = true);
            }, e4.prototype.disconnect_ = function() {
              r2 && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = false, this.connected_ = false);
            }, e4.prototype.onTransitionEnd_ = function(e5) {
              var t3 = e5.propertyName, n4 = void 0 === t3 ? "" : t3;
              u.some(function(e6) {
                return !!~n4.indexOf(e6);
              }) && this.refresh();
            }, e4.getInstance = function() {
              return this.instance_ || (this.instance_ = new e4()), this.instance_;
            }, e4.instance_ = null, e4;
          }(), f = function(e4, t3) {
            for (var n4 = 0, r3 = Object.keys(t3); n4 < r3.length; n4++) {
              var i3 = r3[n4];
              Object.defineProperty(e4, i3, { value: t3[i3], enumerable: false, writable: false, configurable: true });
            }
            return e4;
          }, p = function(e4) {
            return e4 && e4.ownerDocument && e4.ownerDocument.defaultView || i2;
          }, d = g(0, 0, 0, 0);
          function h(e4) {
            return parseFloat(e4) || 0;
          }
          function m(e4) {
            for (var t3 = [], n4 = 1; n4 < arguments.length; n4++)
              t3[n4 - 1] = arguments[n4];
            return t3.reduce(function(t4, n5) {
              return t4 + h(e4["border-" + n5 + "-width"]);
            }, 0);
          }
          function v(e4) {
            var t3 = e4.clientWidth, n4 = e4.clientHeight;
            if (!t3 && !n4)
              return d;
            var r3 = p(e4).getComputedStyle(e4), i3 = function(e5) {
              for (var t4 = {}, n5 = 0, r4 = ["top", "right", "bottom", "left"]; n5 < r4.length; n5++) {
                var i4 = r4[n5], o4 = e5["padding-" + i4];
                t4[i4] = h(o4);
              }
              return t4;
            }(r3), o3 = i3.left + i3.right, a3 = i3.top + i3.bottom, l2 = h(r3.width), u2 = h(r3.height);
            if ("border-box" === r3.boxSizing && (Math.round(l2 + o3) !== t3 && (l2 -= m(r3, "left", "right") + o3), Math.round(u2 + a3) !== n4 && (u2 -= m(r3, "top", "bottom") + a3)), !function(e5) {
              return e5 === p(e5).document.documentElement;
            }(e4)) {
              var c2 = Math.round(l2 + o3) - t3, s2 = Math.round(u2 + a3) - n4;
              1 !== Math.abs(c2) && (l2 -= c2), 1 !== Math.abs(s2) && (u2 -= s2);
            }
            return g(i3.left, i3.top, l2, u2);
          }
          var b = "undefined" != typeof SVGGraphicsElement ? function(e4) {
            return e4 instanceof p(e4).SVGGraphicsElement;
          } : function(e4) {
            return e4 instanceof p(e4).SVGElement && "function" == typeof e4.getBBox;
          };
          function y(e4) {
            return r2 ? b(e4) ? function(e5) {
              var t3 = e5.getBBox();
              return g(0, 0, t3.width, t3.height);
            }(e4) : v(e4) : d;
          }
          function g(e4, t3, n4, r3) {
            return { x: e4, y: t3, width: n4, height: r3 };
          }
          var x = function() {
            function e4(e5) {
              this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = g(0, 0, 0, 0), this.target = e5;
            }
            return e4.prototype.isActive = function() {
              var e5 = y(this.target);
              return this.contentRect_ = e5, e5.width !== this.broadcastWidth || e5.height !== this.broadcastHeight;
            }, e4.prototype.broadcastRect = function() {
              var e5 = this.contentRect_;
              return this.broadcastWidth = e5.width, this.broadcastHeight = e5.height, e5;
            }, e4;
          }(), w = function(e4, t3) {
            var n4, r3, i3, o3, a3, l2, u2, c2 = (r3 = (n4 = t3).x, i3 = n4.y, o3 = n4.width, a3 = n4.height, l2 = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object, u2 = Object.create(l2.prototype), f(u2, { x: r3, y: i3, width: o3, height: a3, top: i3, right: r3 + o3, bottom: a3 + i3, left: r3 }), u2);
            f(this, { target: e4, contentRect: c2 });
          }, E = function() {
            function e4(e5, t3, r3) {
              if (this.activeObservations_ = [], this.observations_ = new n3(), "function" != typeof e5)
                throw new TypeError("The callback provided as parameter 1 is not a function.");
              this.callback_ = e5, this.controller_ = t3, this.callbackCtx_ = r3;
            }
            return e4.prototype.observe = function(e5) {
              if (!arguments.length)
                throw new TypeError("1 argument required, but only 0 present.");
              if ("undefined" != typeof Element && Element instanceof Object) {
                if (!(e5 instanceof p(e5).Element))
                  throw new TypeError('parameter 1 is not of type "Element".');
                var t3 = this.observations_;
                t3.has(e5) || (t3.set(e5, new x(e5)), this.controller_.addObserver(this), this.controller_.refresh());
              }
            }, e4.prototype.unobserve = function(e5) {
              if (!arguments.length)
                throw new TypeError("1 argument required, but only 0 present.");
              if ("undefined" != typeof Element && Element instanceof Object) {
                if (!(e5 instanceof p(e5).Element))
                  throw new TypeError('parameter 1 is not of type "Element".');
                var t3 = this.observations_;
                t3.has(e5) && (t3.delete(e5), t3.size || this.controller_.removeObserver(this));
              }
            }, e4.prototype.disconnect = function() {
              this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
            }, e4.prototype.gatherActive = function() {
              var e5 = this;
              this.clearActive(), this.observations_.forEach(function(t3) {
                t3.isActive() && e5.activeObservations_.push(t3);
              });
            }, e4.prototype.broadcastActive = function() {
              if (this.hasActive()) {
                var e5 = this.callbackCtx_, t3 = this.activeObservations_.map(function(e6) {
                  return new w(e6.target, e6.broadcastRect());
                });
                this.callback_.call(e5, t3, e5), this.clearActive();
              }
            }, e4.prototype.clearActive = function() {
              this.activeObservations_.splice(0);
            }, e4.prototype.hasActive = function() {
              return this.activeObservations_.length > 0;
            }, e4;
          }(), O = "undefined" != typeof WeakMap ? /* @__PURE__ */ new WeakMap() : new n3(), T = function e4(t3) {
            if (!(this instanceof e4))
              throw new TypeError("Cannot call a class as a function.");
            if (!arguments.length)
              throw new TypeError("1 argument required, but only 0 present.");
            var n4 = s.getInstance(), r3 = new E(t3, n4, this);
            O.set(this, r3);
          };
          ["observe", "unobserve", "disconnect"].forEach(function(e4) {
            T.prototype[e4] = function() {
              var t3;
              return (t3 = O.get(this))[e4].apply(t3, arguments);
            };
          });
          var S = void 0 !== i2.ResizeObserver ? i2.ResizeObserver : T;
          t2.a = S;
        }).call(this, n2(49));
      }, function(e2, t2, n2) {
        var r2 = n2(3), i2 = n2(52), o2 = r2.WeakMap;
        e2.exports = "function" == typeof o2 && /native code/.test(i2.call(o2));
      }, function(e2, t2, n2) {
        var r2 = n2(29), i2 = Math.max, o2 = Math.min;
        e2.exports = function(e3, t3) {
          var n3 = r2(e3);
          return n3 < 0 ? i2(n3 + t3, 0) : o2(n3, t3);
        };
      }, function(e2, t2, n2) {
        var r2 = n2(4), i2 = /#|\.prototype\./, o2 = function(e3, t3) {
          var n3 = l[a2(e3)];
          return n3 == c || n3 != u && ("function" == typeof t3 ? r2(t3) : !!t3);
        }, a2 = o2.normalize = function(e3) {
          return String(e3).replace(i2, ".").toLowerCase();
        }, l = o2.data = {}, u = o2.NATIVE = "N", c = o2.POLYFILL = "P";
        e2.exports = o2;
      }, function(e2, t2, n2) {
        e2.exports = n2(3);
      }, function(e2, t2, n2) {
        var r2 = n2(18), i2 = n2(30), o2 = n2(22);
        e2.exports = function(e3) {
          var t3 = r2(e3), n3 = i2.f;
          if (n3)
            for (var a2, l = n3(e3), u = o2.f, c = 0; l.length > c; )
              u.call(e3, a2 = l[c++]) && t3.push(a2);
          return t3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(6), i2 = n2(10), o2 = n2(13), a2 = n2(18);
        e2.exports = r2 ? Object.defineProperties : function(e3, t3) {
          o2(e3);
          for (var n3, r3 = a2(t3), l = r3.length, u = 0; l > u; )
            i2.f(e3, n3 = r3[u++], t3[n3]);
          return e3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(3).document;
        e2.exports = r2 && r2.documentElement;
      }, function(e2, t2, n2) {
        var r2 = n2(11), i2 = n2(36).f, o2 = {}.toString, a2 = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        e2.exports.f = function(e3) {
          return a2 && "[object Window]" == o2.call(e3) ? function(e4) {
            try {
              return i2(e4);
            } catch (e5) {
              return a2.slice();
            }
          }(e3) : i2(r2(e3));
        };
      }, function(e2, t2, n2) {
        var r2 = n2(96);
        e2.exports = function(e3, t3, n3) {
          if (r2(e3), void 0 === t3)
            return e3;
          switch (n3) {
            case 0:
              return function() {
                return e3.call(t3);
              };
            case 1:
              return function(n4) {
                return e3.call(t3, n4);
              };
            case 2:
              return function(n4, r3) {
                return e3.call(t3, n4, r3);
              };
            case 3:
              return function(n4, r3, i2) {
                return e3.call(t3, n4, r3, i2);
              };
          }
          return function() {
            return e3.apply(t3, arguments);
          };
        };
      }, function(e2, t2) {
        e2.exports = function(e3) {
          if ("function" != typeof e3)
            throw TypeError(String(e3) + " is not a function");
          return e3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(12), i2 = n2(61), o2 = n2(8)("species");
        e2.exports = function(e3, t3) {
          var n3;
          return i2(e3) && ("function" != typeof (n3 = e3.constructor) || n3 !== Array && !i2(n3.prototype) ? r2(n3) && null === (n3 = n3[o2]) && (n3 = void 0) : n3 = void 0), new (void 0 === n3 ? Array : n3)(0 === t3 ? 0 : t3);
        };
      }, function(e2, t2, n2) {
        var r2 = n2(8), i2 = n2(39), o2 = n2(9), a2 = r2("unscopables"), l = Array.prototype;
        null == l[a2] && o2(l, a2, i2(null)), e2.exports = function(e3) {
          l[a2][e3] = true;
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(69).IteratorPrototype, i2 = n2(39), o2 = n2(16), a2 = n2(38), l = n2(43), u = function() {
          return this;
        };
        e2.exports = function(e3, t3, n3) {
          var c = t3 + " Iterator";
          return e3.prototype = i2(r2, { next: o2(1, n3) }), a2(e3, c, false, true), l[c] = u, e3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(4);
        e2.exports = !r2(function() {
          function e3() {
          }
          return e3.prototype.constructor = null, Object.getPrototypeOf(new e3()) !== e3.prototype;
        });
      }, function(e2, t2, n2) {
        var r2 = n2(102);
        e2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var e3, t3 = false, n3 = {};
          try {
            (e3 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(n3, []), t3 = n3 instanceof Array;
          } catch (e4) {
          }
          return function(n4, i2) {
            return r2(n4, i2), t3 ? e3.call(n4, i2) : n4.__proto__ = i2, n4;
          };
        }() : void 0);
      }, function(e2, t2, n2) {
        var r2 = n2(12), i2 = n2(13);
        e2.exports = function(e3, t3) {
          if (i2(e3), !r2(t3) && null !== t3)
            throw TypeError("Can't set " + String(t3) + " as a prototype");
        };
      }, function(e2, t2, n2) {
        var r2 = n2(6), i2 = n2(10).f, o2 = Function.prototype, a2 = o2.toString, l = /^\s*function ([^ (]*)/;
        !r2 || "name" in o2 || i2(o2, "name", { configurable: true, get: function() {
          try {
            return a2.call(this).match(l)[1];
          } catch (e3) {
            return "";
          }
        } });
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(6), i2 = n2(4), o2 = n2(18), a2 = n2(30), l = n2(22), u = n2(19), c = n2(32), s = Object.assign;
        e2.exports = !s || i2(function() {
          var e3 = {}, t3 = {}, n3 = Symbol();
          return e3[n3] = 7, "abcdefghijklmnopqrst".split("").forEach(function(e4) {
            t3[e4] = e4;
          }), 7 != s({}, e3)[n3] || "abcdefghijklmnopqrst" != o2(s({}, t3)).join("");
        }) ? function(e3, t3) {
          for (var n3 = u(e3), i3 = arguments.length, s2 = 1, f = a2.f, p = l.f; i3 > s2; )
            for (var d, h = c(arguments[s2++]), m = f ? o2(h).concat(f(h)) : o2(h), v = m.length, b = 0; v > b; )
              d = m[b++], r2 && !p.call(h, d) || (n3[d] = h[d]);
          return n3;
        } : s;
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(24), i2 = n2(10), o2 = n2(16);
        e2.exports = function(e3, t3, n3) {
          var a2 = r2(t3);
          a2 in e3 ? i2.f(e3, a2, o2(0, n3)) : e3[a2] = n3;
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(107), i2 = {};
        i2[n2(8)("toStringTag")] = "z", e2.exports = "[object z]" !== String(i2) ? function() {
          return "[object " + r2(this) + "]";
        } : i2.toString;
      }, function(e2, t2, n2) {
        var r2 = n2(33), i2 = n2(8)("toStringTag"), o2 = "Arguments" == r2(function() {
          return arguments;
        }());
        e2.exports = function(e3) {
          var t3, n3, a2;
          return void 0 === e3 ? "Undefined" : null === e3 ? "Null" : "string" == typeof (n3 = function(e4, t4) {
            try {
              return e4[t4];
            } catch (e5) {
            }
          }(t3 = Object(e3), i2)) ? n3 : o2 ? r2(t3) : "Object" == (a2 = r2(t3)) && "function" == typeof t3.callee ? "Arguments" : a2;
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(13);
        e2.exports = function() {
          var e3 = r2(this), t3 = "";
          return e3.global && (t3 += "g"), e3.ignoreCase && (t3 += "i"), e3.multiline && (t3 += "m"), e3.unicode && (t3 += "u"), e3.sticky && (t3 += "y"), t3;
        };
      }, function(e2, t2, n2) {
        var r2 = n2(29), i2 = n2(23);
        e2.exports = function(e3, t3, n3) {
          var o2, a2, l = String(i2(e3)), u = r2(t3), c = l.length;
          return u < 0 || u >= c ? n3 ? "" : void 0 : (o2 = l.charCodeAt(u)) < 55296 || o2 > 56319 || u + 1 === c || (a2 = l.charCodeAt(u + 1)) < 56320 || a2 > 57343 ? n3 ? l.charAt(u) : o2 : n3 ? l.slice(u, u + 2) : a2 - 56320 + (o2 - 55296 << 10) + 65536;
        };
      }, function(e2, t2, n2) {
        n2(5)({ target: "String", proto: true }, { repeat: n2(111) });
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(29), i2 = n2(23);
        e2.exports = "".repeat || function(e3) {
          var t3 = String(i2(this)), n3 = "", o2 = r2(e3);
          if (o2 < 0 || o2 == 1 / 0)
            throw RangeError("Wrong number of repetitions");
          for (; o2 > 0; (o2 >>>= 1) && (t3 += t3))
            1 & o2 && (n3 += t3);
          return n3;
        };
      }, function(e2, t2, n2) {
        e2.exports = function t3(r2) {
          "use strict";
          var i2 = n2(113), o2 = n2(0), a2 = n2(20);
          function l(e3) {
            for (var t4 = "https://reactjs.org/docs/error-decoder.html?invariant=" + e3, n3 = 1; n3 < arguments.length; n3++)
              t4 += "&args[]=" + encodeURIComponent(arguments[n3]);
            return "Minified React error #" + e3 + "; visit " + t4 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
          }
          var u = o2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          u.hasOwnProperty("ReactCurrentDispatcher") || (u.ReactCurrentDispatcher = { current: null }), u.hasOwnProperty("ReactCurrentBatchConfig") || (u.ReactCurrentBatchConfig = { suspense: null });
          var c = "function" == typeof Symbol && Symbol.for, s = c ? Symbol.for("react.element") : 60103, f = c ? Symbol.for("react.portal") : 60106, p = c ? Symbol.for("react.fragment") : 60107, d = c ? Symbol.for("react.strict_mode") : 60108, h = c ? Symbol.for("react.profiler") : 60114, m = c ? Symbol.for("react.provider") : 60109, v = c ? Symbol.for("react.context") : 60110, b = c ? Symbol.for("react.concurrent_mode") : 60111, y = c ? Symbol.for("react.forward_ref") : 60112, g = c ? Symbol.for("react.suspense") : 60113, x = c ? Symbol.for("react.suspense_list") : 60120, w = c ? Symbol.for("react.memo") : 60115, E = c ? Symbol.for("react.lazy") : 60116;
          c && Symbol.for("react.fundamental"), c && Symbol.for("react.responder"), c && Symbol.for("react.scope");
          var O = "function" == typeof Symbol && Symbol.iterator;
          function T(e3) {
            return null === e3 || "object" != typeof e3 ? null : "function" == typeof (e3 = O && e3[O] || e3["@@iterator"]) ? e3 : null;
          }
          function S(e3) {
            if (null == e3)
              return null;
            if ("function" == typeof e3)
              return e3.displayName || e3.name || null;
            if ("string" == typeof e3)
              return e3;
            switch (e3) {
              case p:
                return "Fragment";
              case f:
                return "Portal";
              case h:
                return "Profiler";
              case d:
                return "StrictMode";
              case g:
                return "Suspense";
              case x:
                return "SuspenseList";
            }
            if ("object" == typeof e3)
              switch (e3.$$typeof) {
                case v:
                  return "Context.Consumer";
                case m:
                  return "Context.Provider";
                case y:
                  var t4 = e3.render;
                  return t4 = t4.displayName || t4.name || "", e3.displayName || ("" !== t4 ? "ForwardRef(" + t4 + ")" : "ForwardRef");
                case w:
                  return S(e3.type);
                case E:
                  if (e3 = 1 === e3._status ? e3._result : null)
                    return S(e3);
              }
            return null;
          }
          function _(e3) {
            var t4 = e3, n3 = e3;
            if (e3.alternate)
              for (; t4.return; )
                t4 = t4.return;
            else {
              e3 = t4;
              do {
                0 != (1026 & (t4 = e3).effectTag) && (n3 = t4.return), e3 = t4.return;
              } while (e3);
            }
            return 3 === t4.tag ? n3 : null;
          }
          function k(e3) {
            if (_(e3) !== e3)
              throw Error(l(188));
          }
          function j(e3) {
            var t4 = e3.alternate;
            if (!t4) {
              if (null === (t4 = _(e3)))
                throw Error(l(188));
              return t4 !== e3 ? null : e3;
            }
            for (var n3 = e3, r3 = t4; ; ) {
              var i3 = n3.return;
              if (null === i3)
                break;
              var o3 = i3.alternate;
              if (null === o3) {
                if (null !== (r3 = i3.return)) {
                  n3 = r3;
                  continue;
                }
                break;
              }
              if (i3.child === o3.child) {
                for (o3 = i3.child; o3; ) {
                  if (o3 === n3)
                    return k(i3), e3;
                  if (o3 === r3)
                    return k(i3), t4;
                  o3 = o3.sibling;
                }
                throw Error(l(188));
              }
              if (n3.return !== r3.return)
                n3 = i3, r3 = o3;
              else {
                for (var a3 = false, u2 = i3.child; u2; ) {
                  if (u2 === n3) {
                    a3 = true, n3 = i3, r3 = o3;
                    break;
                  }
                  if (u2 === r3) {
                    a3 = true, r3 = i3, n3 = o3;
                    break;
                  }
                  u2 = u2.sibling;
                }
                if (!a3) {
                  for (u2 = o3.child; u2; ) {
                    if (u2 === n3) {
                      a3 = true, n3 = o3, r3 = i3;
                      break;
                    }
                    if (u2 === r3) {
                      a3 = true, r3 = o3, n3 = i3;
                      break;
                    }
                    u2 = u2.sibling;
                  }
                  if (!a3)
                    throw Error(l(189));
                }
              }
              if (n3.alternate !== r3)
                throw Error(l(190));
            }
            if (3 !== n3.tag)
              throw Error(l(188));
            return n3.stateNode.current === n3 ? e3 : t4;
          }
          function P(e3) {
            if (!(e3 = j(e3)))
              return null;
            for (var t4 = e3; ; ) {
              if (5 === t4.tag || 6 === t4.tag)
                return t4;
              if (t4.child)
                t4.child.return = t4, t4 = t4.child;
              else {
                if (t4 === e3)
                  break;
                for (; !t4.sibling; ) {
                  if (!t4.return || t4.return === e3)
                    return null;
                  t4 = t4.return;
                }
                t4.sibling.return = t4.return, t4 = t4.sibling;
              }
            }
            return null;
          }
          var C = r2.getPublicInstance, z = r2.getRootHostContext, I = r2.getChildHostContext, M = r2.prepareForCommit, N = r2.resetAfterCommit, L = r2.createInstance, R = r2.appendInitialChild, A = r2.finalizeInitialChildren, U = r2.prepareUpdate, F = r2.shouldSetTextContent, D = r2.shouldDeprioritizeSubtree, W = r2.createTextInstance, B = r2.setTimeout, H = r2.clearTimeout, q = r2.noTimeout, Q = r2.isPrimaryRenderer, V = r2.supportsMutation, G = r2.supportsPersistence, $ = r2.supportsHydration, K = r2.appendChild, X = r2.appendChildToContainer, Y = r2.commitTextUpdate, J = r2.commitMount, Z = r2.commitUpdate, ee = r2.insertBefore, te2 = r2.insertInContainerBefore, ne = r2.removeChild, re = r2.removeChildFromContainer, ie = r2.resetTextContent, oe = r2.hideInstance, ae = r2.hideTextInstance, le = r2.unhideInstance, ue = r2.unhideTextInstance, ce = r2.cloneInstance, se = r2.createContainerChildSet, fe = r2.appendChildToContainerChildSet, pe = r2.finalizeContainerChildren, de = r2.replaceContainerChildren, he = r2.cloneHiddenInstance, me = r2.cloneHiddenTextInstance, ve = r2.canHydrateInstance, be = r2.canHydrateTextInstance, ye = r2.isSuspenseInstancePending, ge = r2.isSuspenseInstanceFallback, xe = r2.getNextHydratableSibling, we = r2.getFirstHydratableChild, Ee = r2.hydrateInstance, Oe = r2.hydrateTextInstance, Te = r2.getNextHydratableInstanceAfterSuspenseInstance, Se = r2.commitHydratedContainer, _e = r2.commitHydratedSuspenseInstance, ke = /^(.*)[\\\/]/;
          function je(e3) {
            var t4 = "";
            do {
              e:
                switch (e3.tag) {
                  case 3:
                  case 4:
                  case 6:
                  case 7:
                  case 10:
                  case 9:
                    var n3 = "";
                    break e;
                  default:
                    var r3 = e3._debugOwner, i3 = e3._debugSource, o3 = S(e3.type);
                    n3 = null, r3 && (n3 = S(r3.type)), r3 = o3, o3 = "", i3 ? o3 = " (at " + i3.fileName.replace(ke, "") + ":" + i3.lineNumber + ")" : n3 && (o3 = " (created by " + n3 + ")"), n3 = "\n    in " + (r3 || "Unknown") + o3;
                }
              t4 += n3, e3 = e3.return;
            } while (e3);
            return t4;
          }
          /* @__PURE__ */ new Set();
          var Pe = [], Ce = -1;
          function ze(e3) {
            0 > Ce || (e3.current = Pe[Ce], Pe[Ce] = null, Ce--);
          }
          function Ie(e3, t4) {
            Pe[++Ce] = e3.current, e3.current = t4;
          }
          var Me = {}, Ne = { current: Me }, Le = { current: false }, Re = Me;
          function Ae(e3, t4) {
            var n3 = e3.type.contextTypes;
            if (!n3)
              return Me;
            var r3 = e3.stateNode;
            if (r3 && r3.__reactInternalMemoizedUnmaskedChildContext === t4)
              return r3.__reactInternalMemoizedMaskedChildContext;
            var i3, o3 = {};
            for (i3 in n3)
              o3[i3] = t4[i3];
            return r3 && ((e3 = e3.stateNode).__reactInternalMemoizedUnmaskedChildContext = t4, e3.__reactInternalMemoizedMaskedChildContext = o3), o3;
          }
          function Ue(e3) {
            return null != (e3 = e3.childContextTypes);
          }
          function Fe(e3) {
            ze(Le), ze(Ne);
          }
          function De(e3) {
            ze(Le), ze(Ne);
          }
          function We(e3, t4, n3) {
            if (Ne.current !== Me)
              throw Error(l(168));
            Ie(Ne, t4), Ie(Le, n3);
          }
          function Be(e3, t4, n3) {
            var r3 = e3.stateNode;
            if (e3 = t4.childContextTypes, "function" != typeof r3.getChildContext)
              return n3;
            for (var o3 in r3 = r3.getChildContext())
              if (!(o3 in e3))
                throw Error(l(108, S(t4) || "Unknown", o3));
            return i2({}, n3, {}, r3);
          }
          function He(e3) {
            var t4 = e3.stateNode;
            return t4 = t4 && t4.__reactInternalMemoizedMergedChildContext || Me, Re = Ne.current, Ie(Ne, t4), Ie(Le, Le.current), true;
          }
          function qe(e3, t4, n3) {
            var r3 = e3.stateNode;
            if (!r3)
              throw Error(l(169));
            n3 ? (t4 = Be(e3, t4, Re), r3.__reactInternalMemoizedMergedChildContext = t4, ze(Le), ze(Ne), Ie(Ne, t4)) : ze(Le), Ie(Le, n3);
          }
          var Qe = a2.unstable_runWithPriority, Ve = a2.unstable_scheduleCallback, Ge = a2.unstable_cancelCallback, $e = a2.unstable_shouldYield, Ke = a2.unstable_requestPaint, Xe = a2.unstable_now, Ye = a2.unstable_getCurrentPriorityLevel, Je = a2.unstable_ImmediatePriority, Ze = a2.unstable_UserBlockingPriority, et2 = a2.unstable_NormalPriority, tt = a2.unstable_LowPriority, nt = a2.unstable_IdlePriority, rt = {}, it = void 0 !== Ke ? Ke : function() {
          }, ot = null, at = null, lt = false, ut = Xe(), ct = 1e4 > ut ? Xe : function() {
            return Xe() - ut;
          };
          function st() {
            switch (Ye()) {
              case Je:
                return 99;
              case Ze:
                return 98;
              case et2:
                return 97;
              case tt:
                return 96;
              case nt:
                return 95;
              default:
                throw Error(l(332));
            }
          }
          function ft(e3) {
            switch (e3) {
              case 99:
                return Je;
              case 98:
                return Ze;
              case 97:
                return et2;
              case 96:
                return tt;
              case 95:
                return nt;
              default:
                throw Error(l(332));
            }
          }
          function pt(e3, t4) {
            return e3 = ft(e3), Qe(e3, t4);
          }
          function dt(e3, t4, n3) {
            return e3 = ft(e3), Ve(e3, t4, n3);
          }
          function ht(e3) {
            return null === ot ? (ot = [e3], at = Ve(Je, vt)) : ot.push(e3), rt;
          }
          function mt() {
            if (null !== at) {
              var e3 = at;
              at = null, Ge(e3);
            }
            vt();
          }
          function vt() {
            if (!lt && null !== ot) {
              lt = true;
              var e3 = 0;
              try {
                var t4 = ot;
                pt(99, function() {
                  for (; e3 < t4.length; e3++) {
                    var n3 = t4[e3];
                    do {
                      n3 = n3(true);
                    } while (null !== n3);
                  }
                }), ot = null;
              } catch (t5) {
                throw null !== ot && (ot = ot.slice(e3 + 1)), Ve(Je, mt), t5;
              } finally {
                lt = false;
              }
            }
          }
          var bt = 3;
          function yt(e3, t4, n3) {
            return 1073741821 - (1 + ((1073741821 - e3 + t4 / 10) / (n3 /= 10) | 0)) * n3;
          }
          var gt = "function" == typeof Object.is ? Object.is : function(e3, t4) {
            return e3 === t4 && (0 !== e3 || 1 / e3 == 1 / t4) || e3 != e3 && t4 != t4;
          }, xt = Object.prototype.hasOwnProperty;
          function wt(e3, t4) {
            if (gt(e3, t4))
              return true;
            if ("object" != typeof e3 || null === e3 || "object" != typeof t4 || null === t4)
              return false;
            var n3 = Object.keys(e3), r3 = Object.keys(t4);
            if (n3.length !== r3.length)
              return false;
            for (r3 = 0; r3 < n3.length; r3++)
              if (!xt.call(t4, n3[r3]) || !gt(e3[n3[r3]], t4[n3[r3]]))
                return false;
            return true;
          }
          function Et(e3, t4) {
            if (e3 && e3.defaultProps)
              for (var n3 in t4 = i2({}, t4), e3 = e3.defaultProps)
                void 0 === t4[n3] && (t4[n3] = e3[n3]);
            return t4;
          }
          var Ot = { current: null }, Tt = null, St = null, _t = null;
          function kt() {
            _t = St = Tt = null;
          }
          function jt(e3, t4) {
            var n3 = e3.type._context;
            Q ? (Ie(Ot, n3._currentValue), n3._currentValue = t4) : (Ie(Ot, n3._currentValue2), n3._currentValue2 = t4);
          }
          function Pt(e3) {
            var t4 = Ot.current;
            ze(Ot), e3 = e3.type._context, Q ? e3._currentValue = t4 : e3._currentValue2 = t4;
          }
          function Ct(e3, t4) {
            for (; null !== e3; ) {
              var n3 = e3.alternate;
              if (e3.childExpirationTime < t4)
                e3.childExpirationTime = t4, null !== n3 && n3.childExpirationTime < t4 && (n3.childExpirationTime = t4);
              else {
                if (!(null !== n3 && n3.childExpirationTime < t4))
                  break;
                n3.childExpirationTime = t4;
              }
              e3 = e3.return;
            }
          }
          function zt(e3, t4) {
            Tt = e3, _t = St = null, null !== (e3 = e3.dependencies) && null !== e3.firstContext && (e3.expirationTime >= t4 && (pr = true), e3.firstContext = null);
          }
          function It(e3, t4) {
            if (_t !== e3 && false !== t4 && 0 !== t4)
              if ("number" == typeof t4 && 1073741823 !== t4 || (_t = e3, t4 = 1073741823), t4 = { context: e3, observedBits: t4, next: null }, null === St) {
                if (null === Tt)
                  throw Error(l(308));
                St = t4, Tt.dependencies = { expirationTime: 0, firstContext: t4, responders: null };
              } else
                St = St.next = t4;
            return Q ? e3._currentValue : e3._currentValue2;
          }
          var Mt = false;
          function Nt(e3) {
            return { baseState: e3, firstUpdate: null, lastUpdate: null, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null };
          }
          function Lt(e3) {
            return { baseState: e3.baseState, firstUpdate: e3.firstUpdate, lastUpdate: e3.lastUpdate, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null };
          }
          function Rt(e3, t4) {
            return { expirationTime: e3, suspenseConfig: t4, tag: 0, payload: null, callback: null, next: null, nextEffect: null };
          }
          function At(e3, t4) {
            null === e3.lastUpdate ? e3.firstUpdate = e3.lastUpdate = t4 : (e3.lastUpdate.next = t4, e3.lastUpdate = t4);
          }
          function Ut(e3, t4) {
            var n3 = e3.alternate;
            if (null === n3) {
              var r3 = e3.updateQueue, i3 = null;
              null === r3 && (r3 = e3.updateQueue = Nt(e3.memoizedState));
            } else
              r3 = e3.updateQueue, i3 = n3.updateQueue, null === r3 ? null === i3 ? (r3 = e3.updateQueue = Nt(e3.memoizedState), i3 = n3.updateQueue = Nt(n3.memoizedState)) : r3 = e3.updateQueue = Lt(i3) : null === i3 && (i3 = n3.updateQueue = Lt(r3));
            null === i3 || r3 === i3 ? At(r3, t4) : null === r3.lastUpdate || null === i3.lastUpdate ? (At(r3, t4), At(i3, t4)) : (At(r3, t4), i3.lastUpdate = t4);
          }
          function Ft(e3, t4) {
            var n3 = e3.updateQueue;
            null === (n3 = null === n3 ? e3.updateQueue = Nt(e3.memoizedState) : Dt(e3, n3)).lastCapturedUpdate ? n3.firstCapturedUpdate = n3.lastCapturedUpdate = t4 : (n3.lastCapturedUpdate.next = t4, n3.lastCapturedUpdate = t4);
          }
          function Dt(e3, t4) {
            var n3 = e3.alternate;
            return null !== n3 && t4 === n3.updateQueue && (t4 = e3.updateQueue = Lt(t4)), t4;
          }
          function Wt(e3, t4, n3, r3, o3, a3) {
            switch (n3.tag) {
              case 1:
                return "function" == typeof (e3 = n3.payload) ? e3.call(a3, r3, o3) : e3;
              case 3:
                e3.effectTag = -4097 & e3.effectTag | 64;
              case 0:
                if (null == (o3 = "function" == typeof (e3 = n3.payload) ? e3.call(a3, r3, o3) : e3))
                  break;
                return i2({}, r3, o3);
              case 2:
                Mt = true;
            }
            return r3;
          }
          function Bt(e3, t4, n3, r3, i3) {
            Mt = false;
            for (var o3 = (t4 = Dt(e3, t4)).baseState, a3 = null, l2 = 0, u2 = t4.firstUpdate, c2 = o3; null !== u2; ) {
              var s2 = u2.expirationTime;
              s2 < i3 ? (null === a3 && (a3 = u2, o3 = c2), l2 < s2 && (l2 = s2)) : (Ki(s2, u2.suspenseConfig), c2 = Wt(e3, 0, u2, c2, n3, r3), null !== u2.callback && (e3.effectTag |= 32, u2.nextEffect = null, null === t4.lastEffect ? t4.firstEffect = t4.lastEffect = u2 : (t4.lastEffect.nextEffect = u2, t4.lastEffect = u2))), u2 = u2.next;
            }
            for (s2 = null, u2 = t4.firstCapturedUpdate; null !== u2; ) {
              var f2 = u2.expirationTime;
              f2 < i3 ? (null === s2 && (s2 = u2, null === a3 && (o3 = c2)), l2 < f2 && (l2 = f2)) : (c2 = Wt(e3, 0, u2, c2, n3, r3), null !== u2.callback && (e3.effectTag |= 32, u2.nextEffect = null, null === t4.lastCapturedEffect ? t4.firstCapturedEffect = t4.lastCapturedEffect = u2 : (t4.lastCapturedEffect.nextEffect = u2, t4.lastCapturedEffect = u2))), u2 = u2.next;
            }
            null === a3 && (t4.lastUpdate = null), null === s2 ? t4.lastCapturedUpdate = null : e3.effectTag |= 32, null === a3 && null === s2 && (o3 = c2), t4.baseState = o3, t4.firstUpdate = a3, t4.firstCapturedUpdate = s2, Xi(l2), e3.expirationTime = l2, e3.memoizedState = c2;
          }
          function Ht(e3, t4, n3) {
            null !== t4.firstCapturedUpdate && (null !== t4.lastUpdate && (t4.lastUpdate.next = t4.firstCapturedUpdate, t4.lastUpdate = t4.lastCapturedUpdate), t4.firstCapturedUpdate = t4.lastCapturedUpdate = null), qt(t4.firstEffect, n3), t4.firstEffect = t4.lastEffect = null, qt(t4.firstCapturedEffect, n3), t4.firstCapturedEffect = t4.lastCapturedEffect = null;
          }
          function qt(e3, t4) {
            for (; null !== e3; ) {
              var n3 = e3.callback;
              if (null !== n3) {
                e3.callback = null;
                var r3 = t4;
                if ("function" != typeof n3)
                  throw Error(l(191, n3));
                n3.call(r3);
              }
              e3 = e3.nextEffect;
            }
          }
          var Qt = u.ReactCurrentBatchConfig, Vt = new o2.Component().refs;
          function Gt(e3, t4, n3, r3) {
            n3 = null == (n3 = n3(r3, t4 = e3.memoizedState)) ? t4 : i2({}, t4, n3), e3.memoizedState = n3, null !== (r3 = e3.updateQueue) && 0 === e3.expirationTime && (r3.baseState = n3);
          }
          var $t = { isMounted: function(e3) {
            return !!(e3 = e3._reactInternalFiber) && _(e3) === e3;
          }, enqueueSetState: function(e3, t4, n3) {
            e3 = e3._reactInternalFiber;
            var r3 = Ui(), i3 = Qt.suspense;
            (i3 = Rt(r3 = Fi(r3, e3, i3), i3)).payload = t4, null != n3 && (i3.callback = n3), Ut(e3, i3), Di(e3, r3);
          }, enqueueReplaceState: function(e3, t4, n3) {
            e3 = e3._reactInternalFiber;
            var r3 = Ui(), i3 = Qt.suspense;
            (i3 = Rt(r3 = Fi(r3, e3, i3), i3)).tag = 1, i3.payload = t4, null != n3 && (i3.callback = n3), Ut(e3, i3), Di(e3, r3);
          }, enqueueForceUpdate: function(e3, t4) {
            e3 = e3._reactInternalFiber;
            var n3 = Ui(), r3 = Qt.suspense;
            (r3 = Rt(n3 = Fi(n3, e3, r3), r3)).tag = 2, null != t4 && (r3.callback = t4), Ut(e3, r3), Di(e3, n3);
          } };
          function Kt(e3, t4, n3, r3, i3, o3, a3) {
            return "function" == typeof (e3 = e3.stateNode).shouldComponentUpdate ? e3.shouldComponentUpdate(r3, o3, a3) : !t4.prototype || !t4.prototype.isPureReactComponent || (!wt(n3, r3) || !wt(i3, o3));
          }
          function Xt(e3, t4, n3) {
            var r3 = false, i3 = Me, o3 = t4.contextType;
            return "object" == typeof o3 && null !== o3 ? o3 = It(o3) : (i3 = Ue(t4) ? Re : Ne.current, o3 = (r3 = null != (r3 = t4.contextTypes)) ? Ae(e3, i3) : Me), t4 = new t4(n3, o3), e3.memoizedState = null !== t4.state && void 0 !== t4.state ? t4.state : null, t4.updater = $t, e3.stateNode = t4, t4._reactInternalFiber = e3, r3 && ((e3 = e3.stateNode).__reactInternalMemoizedUnmaskedChildContext = i3, e3.__reactInternalMemoizedMaskedChildContext = o3), t4;
          }
          function Yt(e3, t4, n3, r3) {
            e3 = t4.state, "function" == typeof t4.componentWillReceiveProps && t4.componentWillReceiveProps(n3, r3), "function" == typeof t4.UNSAFE_componentWillReceiveProps && t4.UNSAFE_componentWillReceiveProps(n3, r3), t4.state !== e3 && $t.enqueueReplaceState(t4, t4.state, null);
          }
          function Jt(e3, t4, n3, r3) {
            var i3 = e3.stateNode;
            i3.props = n3, i3.state = e3.memoizedState, i3.refs = Vt;
            var o3 = t4.contextType;
            "object" == typeof o3 && null !== o3 ? i3.context = It(o3) : (o3 = Ue(t4) ? Re : Ne.current, i3.context = Ae(e3, o3)), null !== (o3 = e3.updateQueue) && (Bt(e3, o3, n3, i3, r3), i3.state = e3.memoizedState), "function" == typeof (o3 = t4.getDerivedStateFromProps) && (Gt(e3, t4, o3, n3), i3.state = e3.memoizedState), "function" == typeof t4.getDerivedStateFromProps || "function" == typeof i3.getSnapshotBeforeUpdate || "function" != typeof i3.UNSAFE_componentWillMount && "function" != typeof i3.componentWillMount || (t4 = i3.state, "function" == typeof i3.componentWillMount && i3.componentWillMount(), "function" == typeof i3.UNSAFE_componentWillMount && i3.UNSAFE_componentWillMount(), t4 !== i3.state && $t.enqueueReplaceState(i3, i3.state, null), null !== (o3 = e3.updateQueue) && (Bt(e3, o3, n3, i3, r3), i3.state = e3.memoizedState)), "function" == typeof i3.componentDidMount && (e3.effectTag |= 4);
          }
          var Zt = Array.isArray;
          function en(e3, t4, n3) {
            if (null !== (e3 = n3.ref) && "function" != typeof e3 && "object" != typeof e3) {
              if (n3._owner) {
                if (n3 = n3._owner) {
                  if (1 !== n3.tag)
                    throw Error(l(309));
                  var r3 = n3.stateNode;
                }
                if (!r3)
                  throw Error(l(147, e3));
                var i3 = "" + e3;
                return null !== t4 && null !== t4.ref && "function" == typeof t4.ref && t4.ref._stringRef === i3 ? t4.ref : ((t4 = function(e4) {
                  var t5 = r3.refs;
                  t5 === Vt && (t5 = r3.refs = {}), null === e4 ? delete t5[i3] : t5[i3] = e4;
                })._stringRef = i3, t4);
              }
              if ("string" != typeof e3)
                throw Error(l(284));
              if (!n3._owner)
                throw Error(l(290, e3));
            }
            return e3;
          }
          function tn(e3, t4) {
            if ("textarea" !== e3.type)
              throw Error(l(31, "[object Object]" === Object.prototype.toString.call(t4) ? "object with keys {" + Object.keys(t4).join(", ") + "}" : t4, ""));
          }
          function nn(e3) {
            function t4(t5, n4) {
              if (e3) {
                var r4 = t5.lastEffect;
                null !== r4 ? (r4.nextEffect = n4, t5.lastEffect = n4) : t5.firstEffect = t5.lastEffect = n4, n4.nextEffect = null, n4.effectTag = 8;
              }
            }
            function n3(n4, r4) {
              if (!e3)
                return null;
              for (; null !== r4; )
                t4(n4, r4), r4 = r4.sibling;
              return null;
            }
            function r3(e4, t5) {
              for (e4 = /* @__PURE__ */ new Map(); null !== t5; )
                null !== t5.key ? e4.set(t5.key, t5) : e4.set(t5.index, t5), t5 = t5.sibling;
              return e4;
            }
            function i3(e4, t5, n4) {
              return (e4 = mo(e4, t5)).index = 0, e4.sibling = null, e4;
            }
            function o3(t5, n4, r4) {
              return t5.index = r4, e3 ? null !== (r4 = t5.alternate) ? (r4 = r4.index) < n4 ? (t5.effectTag = 2, n4) : r4 : (t5.effectTag = 2, n4) : n4;
            }
            function a3(t5) {
              return e3 && null === t5.alternate && (t5.effectTag = 2), t5;
            }
            function u2(e4, t5, n4, r4) {
              return null === t5 || 6 !== t5.tag ? ((t5 = yo(n4, e4.mode, r4)).return = e4, t5) : ((t5 = i3(t5, n4)).return = e4, t5);
            }
            function c2(e4, t5, n4, r4) {
              return null !== t5 && t5.elementType === n4.type ? ((r4 = i3(t5, n4.props)).ref = en(e4, t5, n4), r4.return = e4, r4) : ((r4 = vo(n4.type, n4.key, n4.props, null, e4.mode, r4)).ref = en(e4, t5, n4), r4.return = e4, r4);
            }
            function d2(e4, t5, n4, r4) {
              return null === t5 || 4 !== t5.tag || t5.stateNode.containerInfo !== n4.containerInfo || t5.stateNode.implementation !== n4.implementation ? ((t5 = go(n4, e4.mode, r4)).return = e4, t5) : ((t5 = i3(t5, n4.children || [])).return = e4, t5);
            }
            function h2(e4, t5, n4, r4, o4) {
              return null === t5 || 7 !== t5.tag ? ((t5 = bo(n4, e4.mode, r4, o4)).return = e4, t5) : ((t5 = i3(t5, n4)).return = e4, t5);
            }
            function m2(e4, t5, n4) {
              if ("string" == typeof t5 || "number" == typeof t5)
                return (t5 = yo("" + t5, e4.mode, n4)).return = e4, t5;
              if ("object" == typeof t5 && null !== t5) {
                switch (t5.$$typeof) {
                  case s:
                    return (n4 = vo(t5.type, t5.key, t5.props, null, e4.mode, n4)).ref = en(e4, null, t5), n4.return = e4, n4;
                  case f:
                    return (t5 = go(t5, e4.mode, n4)).return = e4, t5;
                }
                if (Zt(t5) || T(t5))
                  return (t5 = bo(t5, e4.mode, n4, null)).return = e4, t5;
                tn(e4, t5);
              }
              return null;
            }
            function v2(e4, t5, n4, r4) {
              var i4 = null !== t5 ? t5.key : null;
              if ("string" == typeof n4 || "number" == typeof n4)
                return null !== i4 ? null : u2(e4, t5, "" + n4, r4);
              if ("object" == typeof n4 && null !== n4) {
                switch (n4.$$typeof) {
                  case s:
                    return n4.key === i4 ? n4.type === p ? h2(e4, t5, n4.props.children, r4, i4) : c2(e4, t5, n4, r4) : null;
                  case f:
                    return n4.key === i4 ? d2(e4, t5, n4, r4) : null;
                }
                if (Zt(n4) || T(n4))
                  return null !== i4 ? null : h2(e4, t5, n4, r4, null);
                tn(e4, n4);
              }
              return null;
            }
            function b3(e4, t5, n4, r4, i4) {
              if ("string" == typeof r4 || "number" == typeof r4)
                return u2(t5, e4 = e4.get(n4) || null, "" + r4, i4);
              if ("object" == typeof r4 && null !== r4) {
                switch (r4.$$typeof) {
                  case s:
                    return e4 = e4.get(null === r4.key ? n4 : r4.key) || null, r4.type === p ? h2(t5, e4, r4.props.children, i4, r4.key) : c2(t5, e4, r4, i4);
                  case f:
                    return d2(t5, e4 = e4.get(null === r4.key ? n4 : r4.key) || null, r4, i4);
                }
                if (Zt(r4) || T(r4))
                  return h2(t5, e4 = e4.get(n4) || null, r4, i4, null);
                tn(t5, r4);
              }
              return null;
            }
            function y2(i4, a4, l2, u3) {
              for (var c3 = null, s2 = null, f2 = a4, p2 = a4 = 0, d3 = null; null !== f2 && p2 < l2.length; p2++) {
                f2.index > p2 ? (d3 = f2, f2 = null) : d3 = f2.sibling;
                var h3 = v2(i4, f2, l2[p2], u3);
                if (null === h3) {
                  null === f2 && (f2 = d3);
                  break;
                }
                e3 && f2 && null === h3.alternate && t4(i4, f2), a4 = o3(h3, a4, p2), null === s2 ? c3 = h3 : s2.sibling = h3, s2 = h3, f2 = d3;
              }
              if (p2 === l2.length)
                return n3(i4, f2), c3;
              if (null === f2) {
                for (; p2 < l2.length; p2++)
                  null !== (f2 = m2(i4, l2[p2], u3)) && (a4 = o3(f2, a4, p2), null === s2 ? c3 = f2 : s2.sibling = f2, s2 = f2);
                return c3;
              }
              for (f2 = r3(i4, f2); p2 < l2.length; p2++)
                null !== (d3 = b3(f2, i4, p2, l2[p2], u3)) && (e3 && null !== d3.alternate && f2.delete(null === d3.key ? p2 : d3.key), a4 = o3(d3, a4, p2), null === s2 ? c3 = d3 : s2.sibling = d3, s2 = d3);
              return e3 && f2.forEach(function(e4) {
                return t4(i4, e4);
              }), c3;
            }
            function g2(i4, a4, u3, c3) {
              var s2 = T(u3);
              if ("function" != typeof s2)
                throw Error(l(150));
              if (null == (u3 = s2.call(u3)))
                throw Error(l(151));
              for (var f2 = s2 = null, p2 = a4, d3 = a4 = 0, h3 = null, y3 = u3.next(); null !== p2 && !y3.done; d3++, y3 = u3.next()) {
                p2.index > d3 ? (h3 = p2, p2 = null) : h3 = p2.sibling;
                var g3 = v2(i4, p2, y3.value, c3);
                if (null === g3) {
                  null === p2 && (p2 = h3);
                  break;
                }
                e3 && p2 && null === g3.alternate && t4(i4, p2), a4 = o3(g3, a4, d3), null === f2 ? s2 = g3 : f2.sibling = g3, f2 = g3, p2 = h3;
              }
              if (y3.done)
                return n3(i4, p2), s2;
              if (null === p2) {
                for (; !y3.done; d3++, y3 = u3.next())
                  null !== (y3 = m2(i4, y3.value, c3)) && (a4 = o3(y3, a4, d3), null === f2 ? s2 = y3 : f2.sibling = y3, f2 = y3);
                return s2;
              }
              for (p2 = r3(i4, p2); !y3.done; d3++, y3 = u3.next())
                null !== (y3 = b3(p2, i4, d3, y3.value, c3)) && (e3 && null !== y3.alternate && p2.delete(null === y3.key ? d3 : y3.key), a4 = o3(y3, a4, d3), null === f2 ? s2 = y3 : f2.sibling = y3, f2 = y3);
              return e3 && p2.forEach(function(e4) {
                return t4(i4, e4);
              }), s2;
            }
            return function(e4, r4, o4, u3) {
              var c3 = "object" == typeof o4 && null !== o4 && o4.type === p && null === o4.key;
              c3 && (o4 = o4.props.children);
              var d3 = "object" == typeof o4 && null !== o4;
              if (d3)
                switch (o4.$$typeof) {
                  case s:
                    e: {
                      for (d3 = o4.key, c3 = r4; null !== c3; ) {
                        if (c3.key === d3) {
                          if (7 === c3.tag ? o4.type === p : c3.elementType === o4.type) {
                            n3(e4, c3.sibling), (r4 = i3(c3, o4.type === p ? o4.props.children : o4.props)).ref = en(e4, c3, o4), r4.return = e4, e4 = r4;
                            break e;
                          }
                          n3(e4, c3);
                          break;
                        }
                        t4(e4, c3), c3 = c3.sibling;
                      }
                      o4.type === p ? ((r4 = bo(o4.props.children, e4.mode, u3, o4.key)).return = e4, e4 = r4) : ((u3 = vo(o4.type, o4.key, o4.props, null, e4.mode, u3)).ref = en(e4, r4, o4), u3.return = e4, e4 = u3);
                    }
                    return a3(e4);
                  case f:
                    e: {
                      for (c3 = o4.key; null !== r4; ) {
                        if (r4.key === c3) {
                          if (4 === r4.tag && r4.stateNode.containerInfo === o4.containerInfo && r4.stateNode.implementation === o4.implementation) {
                            n3(e4, r4.sibling), (r4 = i3(r4, o4.children || [])).return = e4, e4 = r4;
                            break e;
                          }
                          n3(e4, r4);
                          break;
                        }
                        t4(e4, r4), r4 = r4.sibling;
                      }
                      (r4 = go(o4, e4.mode, u3)).return = e4, e4 = r4;
                    }
                    return a3(e4);
                }
              if ("string" == typeof o4 || "number" == typeof o4)
                return o4 = "" + o4, null !== r4 && 6 === r4.tag ? (n3(e4, r4.sibling), (r4 = i3(r4, o4)).return = e4, e4 = r4) : (n3(e4, r4), (r4 = yo(o4, e4.mode, u3)).return = e4, e4 = r4), a3(e4);
              if (Zt(o4))
                return y2(e4, r4, o4, u3);
              if (T(o4))
                return g2(e4, r4, o4, u3);
              if (d3 && tn(e4, o4), void 0 === o4 && !c3)
                switch (e4.tag) {
                  case 1:
                  case 0:
                    throw e4 = e4.type, Error(l(152, e4.displayName || e4.name || "Component"));
                }
              return n3(e4, r4);
            };
          }
          var rn = nn(true), on = nn(false), an = {}, ln2 = { current: an }, un = { current: an }, cn = { current: an };
          function sn(e3) {
            if (e3 === an)
              throw Error(l(174));
            return e3;
          }
          function fn(e3, t4) {
            Ie(cn, t4), Ie(un, e3), Ie(ln2, an), t4 = z(t4), ze(ln2), Ie(ln2, t4);
          }
          function pn(e3) {
            ze(ln2), ze(un), ze(cn);
          }
          function dn(e3) {
            var t4 = sn(cn.current), n3 = sn(ln2.current);
            n3 !== (t4 = I(n3, e3.type, t4)) && (Ie(un, e3), Ie(ln2, t4));
          }
          function hn(e3) {
            un.current === e3 && (ze(ln2), ze(un));
          }
          var mn = { current: 0 };
          function vn(e3) {
            for (var t4 = e3; null !== t4; ) {
              if (13 === t4.tag) {
                var n3 = t4.memoizedState;
                if (null !== n3 && (null === (n3 = n3.dehydrated) || ye(n3) || ge(n3)))
                  return t4;
              } else if (19 === t4.tag && void 0 !== t4.memoizedProps.revealOrder) {
                if (0 != (64 & t4.effectTag))
                  return t4;
              } else if (null !== t4.child) {
                t4.child.return = t4, t4 = t4.child;
                continue;
              }
              if (t4 === e3)
                break;
              for (; null === t4.sibling; ) {
                if (null === t4.return || t4.return === e3)
                  return null;
                t4 = t4.return;
              }
              t4.sibling.return = t4.return, t4 = t4.sibling;
            }
            return null;
          }
          function bn(e3, t4) {
            return { responder: e3, props: t4 };
          }
          var yn = u.ReactCurrentDispatcher, gn = u.ReactCurrentBatchConfig, xn = 0, wn = null, En = null, On = null, Tn = null, Sn = null, _n = null, kn = 0, jn = null, Pn = 0, Cn = false, zn = null, In = 0;
          function Mn() {
            throw Error(l(321));
          }
          function Nn(e3, t4) {
            if (null === t4)
              return false;
            for (var n3 = 0; n3 < t4.length && n3 < e3.length; n3++)
              if (!gt(e3[n3], t4[n3]))
                return false;
            return true;
          }
          function Ln(e3, t4, n3, r3, i3, o3) {
            if (xn = o3, wn = t4, On = null !== e3 ? e3.memoizedState : null, yn.current = null === On ? er : tr, t4 = n3(r3, i3), Cn) {
              do {
                Cn = false, In += 1, On = null !== e3 ? e3.memoizedState : null, _n = Tn, jn = Sn = En = null, yn.current = tr, t4 = n3(r3, i3);
              } while (Cn);
              zn = null, In = 0;
            }
            if (yn.current = Zn, (e3 = wn).memoizedState = Tn, e3.expirationTime = kn, e3.updateQueue = jn, e3.effectTag |= Pn, e3 = null !== En && null !== En.next, xn = 0, _n = Sn = Tn = On = En = wn = null, kn = 0, jn = null, Pn = 0, e3)
              throw Error(l(300));
            return t4;
          }
          function Rn() {
            yn.current = Zn, xn = 0, _n = Sn = Tn = On = En = wn = null, kn = 0, jn = null, Pn = 0, Cn = false, zn = null, In = 0;
          }
          function An() {
            var e3 = { memoizedState: null, baseState: null, queue: null, baseUpdate: null, next: null };
            return null === Sn ? Tn = Sn = e3 : Sn = Sn.next = e3, Sn;
          }
          function Un() {
            if (null !== _n)
              _n = (Sn = _n).next, On = null !== (En = On) ? En.next : null;
            else {
              if (null === On)
                throw Error(l(310));
              var e3 = { memoizedState: (En = On).memoizedState, baseState: En.baseState, queue: En.queue, baseUpdate: En.baseUpdate, next: null };
              Sn = null === Sn ? Tn = e3 : Sn.next = e3, On = En.next;
            }
            return Sn;
          }
          function Fn(e3, t4) {
            return "function" == typeof t4 ? t4(e3) : t4;
          }
          function Dn(e3) {
            var t4 = Un(), n3 = t4.queue;
            if (null === n3)
              throw Error(l(311));
            if (n3.lastRenderedReducer = e3, 0 < In) {
              var r3 = n3.dispatch;
              if (null !== zn) {
                var i3 = zn.get(n3);
                if (void 0 !== i3) {
                  zn.delete(n3);
                  var o3 = t4.memoizedState;
                  do {
                    o3 = e3(o3, i3.action), i3 = i3.next;
                  } while (null !== i3);
                  return gt(o3, t4.memoizedState) || (pr = true), t4.memoizedState = o3, t4.baseUpdate === n3.last && (t4.baseState = o3), n3.lastRenderedState = o3, [o3, r3];
                }
              }
              return [t4.memoizedState, r3];
            }
            r3 = n3.last;
            var a3 = t4.baseUpdate;
            if (o3 = t4.baseState, null !== a3 ? (null !== r3 && (r3.next = null), r3 = a3.next) : r3 = null !== r3 ? r3.next : null, null !== r3) {
              var u2 = i3 = null, c2 = r3, s2 = false;
              do {
                var f2 = c2.expirationTime;
                f2 < xn ? (s2 || (s2 = true, u2 = a3, i3 = o3), f2 > kn && Xi(kn = f2)) : (Ki(f2, c2.suspenseConfig), o3 = c2.eagerReducer === e3 ? c2.eagerState : e3(o3, c2.action)), a3 = c2, c2 = c2.next;
              } while (null !== c2 && c2 !== r3);
              s2 || (u2 = a3, i3 = o3), gt(o3, t4.memoizedState) || (pr = true), t4.memoizedState = o3, t4.baseUpdate = u2, t4.baseState = i3, n3.lastRenderedState = o3;
            }
            return [t4.memoizedState, n3.dispatch];
          }
          function Wn(e3) {
            var t4 = An();
            return "function" == typeof e3 && (e3 = e3()), t4.memoizedState = t4.baseState = e3, e3 = (e3 = t4.queue = { last: null, dispatch: null, lastRenderedReducer: Fn, lastRenderedState: e3 }).dispatch = Jn.bind(null, wn, e3), [t4.memoizedState, e3];
          }
          function Bn(e3) {
            return Dn(Fn);
          }
          function Hn(e3, t4, n3, r3) {
            return e3 = { tag: e3, create: t4, destroy: n3, deps: r3, next: null }, null === jn ? (jn = { lastEffect: null }).lastEffect = e3.next = e3 : null === (t4 = jn.lastEffect) ? jn.lastEffect = e3.next = e3 : (n3 = t4.next, t4.next = e3, e3.next = n3, jn.lastEffect = e3), e3;
          }
          function qn(e3, t4, n3, r3) {
            var i3 = An();
            Pn |= e3, i3.memoizedState = Hn(t4, n3, void 0, void 0 === r3 ? null : r3);
          }
          function Qn(e3, t4, n3, r3) {
            var i3 = Un();
            r3 = void 0 === r3 ? null : r3;
            var o3 = void 0;
            if (null !== En) {
              var a3 = En.memoizedState;
              if (o3 = a3.destroy, null !== r3 && Nn(r3, a3.deps))
                return void Hn(0, n3, o3, r3);
            }
            Pn |= e3, i3.memoizedState = Hn(t4, n3, o3, r3);
          }
          function Vn(e3, t4) {
            return qn(516, 192, e3, t4);
          }
          function Gn(e3, t4) {
            return Qn(516, 192, e3, t4);
          }
          function $n(e3, t4) {
            return "function" == typeof t4 ? (e3 = e3(), t4(e3), function() {
              t4(null);
            }) : null != t4 ? (e3 = e3(), t4.current = e3, function() {
              t4.current = null;
            }) : void 0;
          }
          function Kn() {
          }
          function Xn(e3, t4) {
            return An().memoizedState = [e3, void 0 === t4 ? null : t4], e3;
          }
          function Yn(e3, t4) {
            var n3 = Un();
            t4 = void 0 === t4 ? null : t4;
            var r3 = n3.memoizedState;
            return null !== r3 && null !== t4 && Nn(t4, r3[1]) ? r3[0] : (n3.memoizedState = [e3, t4], e3);
          }
          function Jn(e3, t4, n3) {
            if (!(25 > In))
              throw Error(l(301));
            var r3 = e3.alternate;
            if (e3 === wn || null !== r3 && r3 === wn)
              if (Cn = true, e3 = { expirationTime: xn, suspenseConfig: null, action: n3, eagerReducer: null, eagerState: null, next: null }, null === zn && (zn = /* @__PURE__ */ new Map()), void 0 === (n3 = zn.get(t4)))
                zn.set(t4, e3);
              else {
                for (t4 = n3; null !== t4.next; )
                  t4 = t4.next;
                t4.next = e3;
              }
            else {
              var i3 = Ui(), o3 = Qt.suspense;
              o3 = { expirationTime: i3 = Fi(i3, e3, o3), suspenseConfig: o3, action: n3, eagerReducer: null, eagerState: null, next: null };
              var a3 = t4.last;
              if (null === a3)
                o3.next = o3;
              else {
                var u2 = a3.next;
                null !== u2 && (o3.next = u2), a3.next = o3;
              }
              if (t4.last = o3, 0 === e3.expirationTime && (null === r3 || 0 === r3.expirationTime) && null !== (r3 = t4.lastRenderedReducer))
                try {
                  var c2 = t4.lastRenderedState, s2 = r3(c2, n3);
                  if (o3.eagerReducer = r3, o3.eagerState = s2, gt(s2, c2))
                    return;
                } catch (e4) {
                }
              Di(e3, i3);
            }
          }
          var Zn = { readContext: It, useCallback: Mn, useContext: Mn, useEffect: Mn, useImperativeHandle: Mn, useLayoutEffect: Mn, useMemo: Mn, useReducer: Mn, useRef: Mn, useState: Mn, useDebugValue: Mn, useResponder: Mn, useDeferredValue: Mn, useTransition: Mn }, er = { readContext: It, useCallback: Xn, useContext: It, useEffect: Vn, useImperativeHandle: function(e3, t4, n3) {
            return n3 = null != n3 ? n3.concat([e3]) : null, qn(4, 36, $n.bind(null, t4, e3), n3);
          }, useLayoutEffect: function(e3, t4) {
            return qn(4, 36, e3, t4);
          }, useMemo: function(e3, t4) {
            var n3 = An();
            return t4 = void 0 === t4 ? null : t4, e3 = e3(), n3.memoizedState = [e3, t4], e3;
          }, useReducer: function(e3, t4, n3) {
            var r3 = An();
            return t4 = void 0 !== n3 ? n3(t4) : t4, r3.memoizedState = r3.baseState = t4, e3 = (e3 = r3.queue = { last: null, dispatch: null, lastRenderedReducer: e3, lastRenderedState: t4 }).dispatch = Jn.bind(null, wn, e3), [r3.memoizedState, e3];
          }, useRef: function(e3) {
            return e3 = { current: e3 }, An().memoizedState = e3;
          }, useState: Wn, useDebugValue: Kn, useResponder: bn, useDeferredValue: function(e3, t4) {
            var n3 = Wn(e3), r3 = n3[0], i3 = n3[1];
            return Vn(function() {
              a2.unstable_next(function() {
                var n4 = gn.suspense;
                gn.suspense = void 0 === t4 ? null : t4;
                try {
                  i3(e3);
                } finally {
                  gn.suspense = n4;
                }
              });
            }, [e3, t4]), r3;
          }, useTransition: function(e3) {
            var t4 = Wn(false), n3 = t4[0], r3 = t4[1];
            return [Xn(function(t5) {
              r3(true), a2.unstable_next(function() {
                var n4 = gn.suspense;
                gn.suspense = void 0 === e3 ? null : e3;
                try {
                  r3(false), t5();
                } finally {
                  gn.suspense = n4;
                }
              });
            }, [e3, n3]), n3];
          } }, tr = { readContext: It, useCallback: Yn, useContext: It, useEffect: Gn, useImperativeHandle: function(e3, t4, n3) {
            return n3 = null != n3 ? n3.concat([e3]) : null, Qn(4, 36, $n.bind(null, t4, e3), n3);
          }, useLayoutEffect: function(e3, t4) {
            return Qn(4, 36, e3, t4);
          }, useMemo: function(e3, t4) {
            var n3 = Un();
            t4 = void 0 === t4 ? null : t4;
            var r3 = n3.memoizedState;
            return null !== r3 && null !== t4 && Nn(t4, r3[1]) ? r3[0] : (e3 = e3(), n3.memoizedState = [e3, t4], e3);
          }, useReducer: Dn, useRef: function() {
            return Un().memoizedState;
          }, useState: Bn, useDebugValue: Kn, useResponder: bn, useDeferredValue: function(e3, t4) {
            var n3 = Bn(), r3 = n3[0], i3 = n3[1];
            return Gn(function() {
              a2.unstable_next(function() {
                var n4 = gn.suspense;
                gn.suspense = void 0 === t4 ? null : t4;
                try {
                  i3(e3);
                } finally {
                  gn.suspense = n4;
                }
              });
            }, [e3, t4]), r3;
          }, useTransition: function(e3) {
            var t4 = Bn(), n3 = t4[0], r3 = t4[1];
            return [Yn(function(t5) {
              r3(true), a2.unstable_next(function() {
                var n4 = gn.suspense;
                gn.suspense = void 0 === e3 ? null : e3;
                try {
                  r3(false), t5();
                } finally {
                  gn.suspense = n4;
                }
              });
            }, [e3, n3]), n3];
          } }, nr = null, rr = null, ir = false;
          function or(e3, t4) {
            var n3 = po(5, null, null, 0);
            n3.elementType = "DELETED", n3.type = "DELETED", n3.stateNode = t4, n3.return = e3, n3.effectTag = 8, null !== e3.lastEffect ? (e3.lastEffect.nextEffect = n3, e3.lastEffect = n3) : e3.firstEffect = e3.lastEffect = n3;
          }
          function ar(e3, t4) {
            switch (e3.tag) {
              case 5:
                return null !== (t4 = ve(t4, e3.type, e3.pendingProps)) && (e3.stateNode = t4, true);
              case 6:
                return null !== (t4 = be(t4, e3.pendingProps)) && (e3.stateNode = t4, true);
              case 13:
              default:
                return false;
            }
          }
          function lr(e3) {
            if (ir) {
              var t4 = rr;
              if (t4) {
                var n3 = t4;
                if (!ar(e3, t4)) {
                  if (!(t4 = xe(n3)) || !ar(e3, t4))
                    return e3.effectTag = -1025 & e3.effectTag | 2, ir = false, void (nr = e3);
                  or(nr, n3);
                }
                nr = e3, rr = we(t4);
              } else
                e3.effectTag = -1025 & e3.effectTag | 2, ir = false, nr = e3;
            }
          }
          function ur(e3) {
            for (e3 = e3.return; null !== e3 && 5 !== e3.tag && 3 !== e3.tag && 13 !== e3.tag; )
              e3 = e3.return;
            nr = e3;
          }
          function cr(e3) {
            if (!$ || e3 !== nr)
              return false;
            if (!ir)
              return ur(e3), ir = true, false;
            var t4 = e3.type;
            if (5 !== e3.tag || "head" !== t4 && "body" !== t4 && !F(t4, e3.memoizedProps))
              for (t4 = rr; t4; )
                or(e3, t4), t4 = xe(t4);
            if (ur(e3), 13 === e3.tag) {
              if (!$)
                throw Error(l(316));
              if (!(e3 = null !== (e3 = e3.memoizedState) ? e3.dehydrated : null))
                throw Error(l(317));
              rr = Te(e3);
            } else
              rr = nr ? xe(e3.stateNode) : null;
            return true;
          }
          function sr() {
            $ && (rr = nr = null, ir = false);
          }
          var fr = u.ReactCurrentOwner, pr = false;
          function dr(e3, t4, n3, r3) {
            t4.child = null === e3 ? on(t4, null, n3, r3) : rn(t4, e3.child, n3, r3);
          }
          function hr(e3, t4, n3, r3, i3) {
            n3 = n3.render;
            var o3 = t4.ref;
            return zt(t4, i3), r3 = Ln(e3, t4, n3, r3, o3, i3), null === e3 || pr ? (t4.effectTag |= 1, dr(e3, t4, r3, i3), t4.child) : (t4.updateQueue = e3.updateQueue, t4.effectTag &= -517, e3.expirationTime <= i3 && (e3.expirationTime = 0), zr(e3, t4, i3));
          }
          function mr(e3, t4, n3, r3, i3, o3) {
            if (null === e3) {
              var a3 = n3.type;
              return "function" != typeof a3 || ho(a3) || void 0 !== a3.defaultProps || null !== n3.compare || void 0 !== n3.defaultProps ? ((e3 = vo(n3.type, null, r3, null, t4.mode, o3)).ref = t4.ref, e3.return = t4, t4.child = e3) : (t4.tag = 15, t4.type = a3, vr(e3, t4, a3, r3, i3, o3));
            }
            return a3 = e3.child, i3 < o3 && (i3 = a3.memoizedProps, (n3 = null !== (n3 = n3.compare) ? n3 : wt)(i3, r3) && e3.ref === t4.ref) ? zr(e3, t4, o3) : (t4.effectTag |= 1, (e3 = mo(a3, r3)).ref = t4.ref, e3.return = t4, t4.child = e3);
          }
          function vr(e3, t4, n3, r3, i3, o3) {
            return null !== e3 && wt(e3.memoizedProps, r3) && e3.ref === t4.ref && (pr = false, i3 < o3) ? zr(e3, t4, o3) : yr(e3, t4, n3, r3, o3);
          }
          function br(e3, t4) {
            var n3 = t4.ref;
            (null === e3 && null !== n3 || null !== e3 && e3.ref !== n3) && (t4.effectTag |= 128);
          }
          function yr(e3, t4, n3, r3, i3) {
            var o3 = Ue(n3) ? Re : Ne.current;
            return o3 = Ae(t4, o3), zt(t4, i3), n3 = Ln(e3, t4, n3, r3, o3, i3), null === e3 || pr ? (t4.effectTag |= 1, dr(e3, t4, n3, i3), t4.child) : (t4.updateQueue = e3.updateQueue, t4.effectTag &= -517, e3.expirationTime <= i3 && (e3.expirationTime = 0), zr(e3, t4, i3));
          }
          function gr(e3, t4, n3, r3, i3) {
            if (Ue(n3)) {
              var o3 = true;
              He(t4);
            } else
              o3 = false;
            if (zt(t4, i3), null === t4.stateNode)
              null !== e3 && (e3.alternate = null, t4.alternate = null, t4.effectTag |= 2), Xt(t4, n3, r3), Jt(t4, n3, r3, i3), r3 = true;
            else if (null === e3) {
              var a3 = t4.stateNode, l2 = t4.memoizedProps;
              a3.props = l2;
              var u2 = a3.context, c2 = n3.contextType;
              "object" == typeof c2 && null !== c2 ? c2 = It(c2) : c2 = Ae(t4, c2 = Ue(n3) ? Re : Ne.current);
              var s2 = n3.getDerivedStateFromProps, f2 = "function" == typeof s2 || "function" == typeof a3.getSnapshotBeforeUpdate;
              f2 || "function" != typeof a3.UNSAFE_componentWillReceiveProps && "function" != typeof a3.componentWillReceiveProps || (l2 !== r3 || u2 !== c2) && Yt(t4, a3, r3, c2), Mt = false;
              var p2 = t4.memoizedState;
              u2 = a3.state = p2;
              var d2 = t4.updateQueue;
              null !== d2 && (Bt(t4, d2, r3, a3, i3), u2 = t4.memoizedState), l2 !== r3 || p2 !== u2 || Le.current || Mt ? ("function" == typeof s2 && (Gt(t4, n3, s2, r3), u2 = t4.memoizedState), (l2 = Mt || Kt(t4, n3, l2, r3, p2, u2, c2)) ? (f2 || "function" != typeof a3.UNSAFE_componentWillMount && "function" != typeof a3.componentWillMount || ("function" == typeof a3.componentWillMount && a3.componentWillMount(), "function" == typeof a3.UNSAFE_componentWillMount && a3.UNSAFE_componentWillMount()), "function" == typeof a3.componentDidMount && (t4.effectTag |= 4)) : ("function" == typeof a3.componentDidMount && (t4.effectTag |= 4), t4.memoizedProps = r3, t4.memoizedState = u2), a3.props = r3, a3.state = u2, a3.context = c2, r3 = l2) : ("function" == typeof a3.componentDidMount && (t4.effectTag |= 4), r3 = false);
            } else
              a3 = t4.stateNode, l2 = t4.memoizedProps, a3.props = t4.type === t4.elementType ? l2 : Et(t4.type, l2), u2 = a3.context, "object" == typeof (c2 = n3.contextType) && null !== c2 ? c2 = It(c2) : c2 = Ae(t4, c2 = Ue(n3) ? Re : Ne.current), (f2 = "function" == typeof (s2 = n3.getDerivedStateFromProps) || "function" == typeof a3.getSnapshotBeforeUpdate) || "function" != typeof a3.UNSAFE_componentWillReceiveProps && "function" != typeof a3.componentWillReceiveProps || (l2 !== r3 || u2 !== c2) && Yt(t4, a3, r3, c2), Mt = false, u2 = t4.memoizedState, p2 = a3.state = u2, null !== (d2 = t4.updateQueue) && (Bt(t4, d2, r3, a3, i3), p2 = t4.memoizedState), l2 !== r3 || u2 !== p2 || Le.current || Mt ? ("function" == typeof s2 && (Gt(t4, n3, s2, r3), p2 = t4.memoizedState), (s2 = Mt || Kt(t4, n3, l2, r3, u2, p2, c2)) ? (f2 || "function" != typeof a3.UNSAFE_componentWillUpdate && "function" != typeof a3.componentWillUpdate || ("function" == typeof a3.componentWillUpdate && a3.componentWillUpdate(r3, p2, c2), "function" == typeof a3.UNSAFE_componentWillUpdate && a3.UNSAFE_componentWillUpdate(r3, p2, c2)), "function" == typeof a3.componentDidUpdate && (t4.effectTag |= 4), "function" == typeof a3.getSnapshotBeforeUpdate && (t4.effectTag |= 256)) : ("function" != typeof a3.componentDidUpdate || l2 === e3.memoizedProps && u2 === e3.memoizedState || (t4.effectTag |= 4), "function" != typeof a3.getSnapshotBeforeUpdate || l2 === e3.memoizedProps && u2 === e3.memoizedState || (t4.effectTag |= 256), t4.memoizedProps = r3, t4.memoizedState = p2), a3.props = r3, a3.state = p2, a3.context = c2, r3 = s2) : ("function" != typeof a3.componentDidUpdate || l2 === e3.memoizedProps && u2 === e3.memoizedState || (t4.effectTag |= 4), "function" != typeof a3.getSnapshotBeforeUpdate || l2 === e3.memoizedProps && u2 === e3.memoizedState || (t4.effectTag |= 256), r3 = false);
            return xr(e3, t4, n3, r3, o3, i3);
          }
          function xr(e3, t4, n3, r3, i3, o3) {
            br(e3, t4);
            var a3 = 0 != (64 & t4.effectTag);
            if (!r3 && !a3)
              return i3 && qe(t4, n3, false), zr(e3, t4, o3);
            r3 = t4.stateNode, fr.current = t4;
            var l2 = a3 && "function" != typeof n3.getDerivedStateFromError ? null : r3.render();
            return t4.effectTag |= 1, null !== e3 && a3 ? (t4.child = rn(t4, e3.child, null, o3), t4.child = rn(t4, null, l2, o3)) : dr(e3, t4, l2, o3), t4.memoizedState = r3.state, i3 && qe(t4, n3, true), t4.child;
          }
          function wr(e3) {
            var t4 = e3.stateNode;
            t4.pendingContext ? We(0, t4.pendingContext, t4.pendingContext !== t4.context) : t4.context && We(0, t4.context, false), fn(e3, t4.containerInfo);
          }
          var Er, Or, Tr, Sr, _r = { dehydrated: null, retryTime: 0 };
          function kr(e3, t4, n3) {
            var r3, i3 = t4.mode, o3 = t4.pendingProps, a3 = mn.current, l2 = false;
            if ((r3 = 0 != (64 & t4.effectTag)) || (r3 = 0 != (2 & a3) && (null === e3 || null !== e3.memoizedState)), r3 ? (l2 = true, t4.effectTag &= -65) : null !== e3 && null === e3.memoizedState || void 0 === o3.fallback || true === o3.unstable_avoidThisFallback || (a3 |= 1), Ie(mn, 1 & a3), null === e3) {
              if (void 0 !== o3.fallback && lr(t4), l2) {
                if (l2 = o3.fallback, (o3 = bo(null, i3, 0, null)).return = t4, 0 == (2 & t4.mode))
                  for (e3 = null !== t4.memoizedState ? t4.child.child : t4.child, o3.child = e3; null !== e3; )
                    e3.return = o3, e3 = e3.sibling;
                return (n3 = bo(l2, i3, n3, null)).return = t4, o3.sibling = n3, t4.memoizedState = _r, t4.child = o3, n3;
              }
              return i3 = o3.children, t4.memoizedState = null, t4.child = on(t4, null, i3, n3);
            }
            if (null !== e3.memoizedState) {
              if (i3 = (e3 = e3.child).sibling, l2) {
                if (o3 = o3.fallback, (n3 = mo(e3, e3.pendingProps)).return = t4, 0 == (2 & t4.mode) && (l2 = null !== t4.memoizedState ? t4.child.child : t4.child) !== e3.child)
                  for (n3.child = l2; null !== l2; )
                    l2.return = n3, l2 = l2.sibling;
                return (i3 = mo(i3, o3, i3.expirationTime)).return = t4, n3.sibling = i3, n3.childExpirationTime = 0, t4.memoizedState = _r, t4.child = n3, i3;
              }
              return n3 = rn(t4, e3.child, o3.children, n3), t4.memoizedState = null, t4.child = n3;
            }
            if (e3 = e3.child, l2) {
              if (l2 = o3.fallback, (o3 = bo(null, i3, 0, null)).return = t4, o3.child = e3, null !== e3 && (e3.return = o3), 0 == (2 & t4.mode))
                for (e3 = null !== t4.memoizedState ? t4.child.child : t4.child, o3.child = e3; null !== e3; )
                  e3.return = o3, e3 = e3.sibling;
              return (n3 = bo(l2, i3, n3, null)).return = t4, o3.sibling = n3, n3.effectTag |= 2, o3.childExpirationTime = 0, t4.memoizedState = _r, t4.child = o3, n3;
            }
            return t4.memoizedState = null, t4.child = rn(t4, e3, o3.children, n3);
          }
          function jr(e3, t4) {
            e3.expirationTime < t4 && (e3.expirationTime = t4);
            var n3 = e3.alternate;
            null !== n3 && n3.expirationTime < t4 && (n3.expirationTime = t4), Ct(e3.return, t4);
          }
          function Pr(e3, t4, n3, r3, i3, o3) {
            var a3 = e3.memoizedState;
            null === a3 ? e3.memoizedState = { isBackwards: t4, rendering: null, last: r3, tail: n3, tailExpiration: 0, tailMode: i3, lastEffect: o3 } : (a3.isBackwards = t4, a3.rendering = null, a3.last = r3, a3.tail = n3, a3.tailExpiration = 0, a3.tailMode = i3, a3.lastEffect = o3);
          }
          function Cr(e3, t4, n3) {
            var r3 = t4.pendingProps, i3 = r3.revealOrder, o3 = r3.tail;
            if (dr(e3, t4, r3.children, n3), 0 != (2 & (r3 = mn.current)))
              r3 = 1 & r3 | 2, t4.effectTag |= 64;
            else {
              if (null !== e3 && 0 != (64 & e3.effectTag))
                e:
                  for (e3 = t4.child; null !== e3; ) {
                    if (13 === e3.tag)
                      null !== e3.memoizedState && jr(e3, n3);
                    else if (19 === e3.tag)
                      jr(e3, n3);
                    else if (null !== e3.child) {
                      e3.child.return = e3, e3 = e3.child;
                      continue;
                    }
                    if (e3 === t4)
                      break e;
                    for (; null === e3.sibling; ) {
                      if (null === e3.return || e3.return === t4)
                        break e;
                      e3 = e3.return;
                    }
                    e3.sibling.return = e3.return, e3 = e3.sibling;
                  }
              r3 &= 1;
            }
            if (Ie(mn, r3), 0 == (2 & t4.mode))
              t4.memoizedState = null;
            else
              switch (i3) {
                case "forwards":
                  for (n3 = t4.child, i3 = null; null !== n3; )
                    null !== (e3 = n3.alternate) && null === vn(e3) && (i3 = n3), n3 = n3.sibling;
                  null === (n3 = i3) ? (i3 = t4.child, t4.child = null) : (i3 = n3.sibling, n3.sibling = null), Pr(t4, false, i3, n3, o3, t4.lastEffect);
                  break;
                case "backwards":
                  for (n3 = null, i3 = t4.child, t4.child = null; null !== i3; ) {
                    if (null !== (e3 = i3.alternate) && null === vn(e3)) {
                      t4.child = i3;
                      break;
                    }
                    e3 = i3.sibling, i3.sibling = n3, n3 = i3, i3 = e3;
                  }
                  Pr(t4, true, n3, null, o3, t4.lastEffect);
                  break;
                case "together":
                  Pr(t4, false, null, null, void 0, t4.lastEffect);
                  break;
                default:
                  t4.memoizedState = null;
              }
            return t4.child;
          }
          function zr(e3, t4, n3) {
            null !== e3 && (t4.dependencies = e3.dependencies);
            var r3 = t4.expirationTime;
            if (0 !== r3 && Xi(r3), t4.childExpirationTime < n3)
              return null;
            if (null !== e3 && t4.child !== e3.child)
              throw Error(l(153));
            if (null !== t4.child) {
              for (n3 = mo(e3 = t4.child, e3.pendingProps, e3.expirationTime), t4.child = n3, n3.return = t4; null !== e3.sibling; )
                e3 = e3.sibling, (n3 = n3.sibling = mo(e3, e3.pendingProps, e3.expirationTime)).return = t4;
              n3.sibling = null;
            }
            return t4.child;
          }
          function Ir(e3) {
            e3.effectTag |= 4;
          }
          if (V)
            Er = function(e3, t4) {
              for (var n3 = t4.child; null !== n3; ) {
                if (5 === n3.tag || 6 === n3.tag)
                  R(e3, n3.stateNode);
                else if (4 !== n3.tag && null !== n3.child) {
                  n3.child.return = n3, n3 = n3.child;
                  continue;
                }
                if (n3 === t4)
                  break;
                for (; null === n3.sibling; ) {
                  if (null === n3.return || n3.return === t4)
                    return;
                  n3 = n3.return;
                }
                n3.sibling.return = n3.return, n3 = n3.sibling;
              }
            }, Or = function() {
            }, Tr = function(e3, t4, n3, r3, i3) {
              if ((e3 = e3.memoizedProps) !== r3) {
                var o3 = t4.stateNode, a3 = sn(ln2.current);
                n3 = U(o3, n3, e3, r3, i3, a3), (t4.updateQueue = n3) && Ir(t4);
              }
            }, Sr = function(e3, t4, n3, r3) {
              n3 !== r3 && Ir(t4);
            };
          else if (G) {
            Er = function(e3, t4, n3, r3) {
              for (var i3 = t4.child; null !== i3; ) {
                if (5 === i3.tag) {
                  var o3 = i3.stateNode;
                  n3 && r3 && (o3 = he(o3, i3.type, i3.memoizedProps, i3)), R(e3, o3);
                } else if (6 === i3.tag)
                  o3 = i3.stateNode, n3 && r3 && (o3 = me(o3, i3.memoizedProps, i3)), R(e3, o3);
                else if (4 !== i3.tag) {
                  if (13 === i3.tag && 0 != (4 & i3.effectTag) && (o3 = null !== i3.memoizedState)) {
                    var a3 = i3.child;
                    if (null !== a3 && (null !== a3.child && (a3.child.return = a3, Er(e3, a3, true, o3)), null !== (o3 = a3.sibling))) {
                      o3.return = i3, i3 = o3;
                      continue;
                    }
                  }
                  if (null !== i3.child) {
                    i3.child.return = i3, i3 = i3.child;
                    continue;
                  }
                }
                if (i3 === t4)
                  break;
                for (; null === i3.sibling; ) {
                  if (null === i3.return || i3.return === t4)
                    return;
                  i3 = i3.return;
                }
                i3.sibling.return = i3.return, i3 = i3.sibling;
              }
            };
            var Mr = function(e3, t4, n3, r3) {
              for (var i3 = t4.child; null !== i3; ) {
                if (5 === i3.tag) {
                  var o3 = i3.stateNode;
                  n3 && r3 && (o3 = he(o3, i3.type, i3.memoizedProps, i3)), fe(e3, o3);
                } else if (6 === i3.tag)
                  o3 = i3.stateNode, n3 && r3 && (o3 = me(o3, i3.memoizedProps, i3)), fe(e3, o3);
                else if (4 !== i3.tag) {
                  if (13 === i3.tag && 0 != (4 & i3.effectTag) && (o3 = null !== i3.memoizedState)) {
                    var a3 = i3.child;
                    if (null !== a3 && (null !== a3.child && (a3.child.return = a3, Mr(e3, a3, true, o3)), null !== (o3 = a3.sibling))) {
                      o3.return = i3, i3 = o3;
                      continue;
                    }
                  }
                  if (null !== i3.child) {
                    i3.child.return = i3, i3 = i3.child;
                    continue;
                  }
                }
                if (i3 === t4)
                  break;
                for (; null === i3.sibling; ) {
                  if (null === i3.return || i3.return === t4)
                    return;
                  i3 = i3.return;
                }
                i3.sibling.return = i3.return, i3 = i3.sibling;
              }
            };
            Or = function(e3) {
              var t4 = e3.stateNode;
              if (null !== e3.firstEffect) {
                var n3 = t4.containerInfo, r3 = se(n3);
                Mr(r3, e3, false, false), t4.pendingChildren = r3, Ir(e3), pe(n3, r3);
              }
            }, Tr = function(e3, t4, n3, r3, i3) {
              var o3 = e3.stateNode, a3 = e3.memoizedProps;
              if ((e3 = null === t4.firstEffect) && a3 === r3)
                t4.stateNode = o3;
              else {
                var l2 = t4.stateNode, u2 = sn(ln2.current), c2 = null;
                a3 !== r3 && (c2 = U(l2, n3, a3, r3, i3, u2)), e3 && null === c2 ? t4.stateNode = o3 : (o3 = ce(o3, c2, n3, a3, r3, t4, e3, l2), A(o3, n3, r3, i3, u2) && Ir(t4), t4.stateNode = o3, e3 ? Ir(t4) : Er(o3, t4, false, false));
              }
            }, Sr = function(e3, t4, n3, r3) {
              n3 !== r3 && (e3 = sn(cn.current), n3 = sn(ln2.current), t4.stateNode = W(r3, e3, n3, t4), Ir(t4));
            };
          } else
            Or = function() {
            }, Tr = function() {
            }, Sr = function() {
            };
          function Nr(e3, t4) {
            switch (e3.tailMode) {
              case "hidden":
                t4 = e3.tail;
                for (var n3 = null; null !== t4; )
                  null !== t4.alternate && (n3 = t4), t4 = t4.sibling;
                null === n3 ? e3.tail = null : n3.sibling = null;
                break;
              case "collapsed":
                n3 = e3.tail;
                for (var r3 = null; null !== n3; )
                  null !== n3.alternate && (r3 = n3), n3 = n3.sibling;
                null === r3 ? t4 || null === e3.tail ? e3.tail = null : e3.tail.sibling = null : r3.sibling = null;
            }
          }
          function Lr(e3) {
            switch (e3.tag) {
              case 1:
                Ue(e3.type) && Fe();
                var t4 = e3.effectTag;
                return 4096 & t4 ? (e3.effectTag = -4097 & t4 | 64, e3) : null;
              case 3:
                if (pn(), De(), 0 != (64 & (t4 = e3.effectTag)))
                  throw Error(l(285));
                return e3.effectTag = -4097 & t4 | 64, e3;
              case 5:
                return hn(e3), null;
              case 13:
                return ze(mn), 4096 & (t4 = e3.effectTag) ? (e3.effectTag = -4097 & t4 | 64, e3) : null;
              case 19:
                return ze(mn), null;
              case 4:
                return pn(), null;
              case 10:
                return Pt(e3), null;
              default:
                return null;
            }
          }
          function Rr(e3, t4) {
            return { value: e3, source: t4, stack: je(t4) };
          }
          var Ar = "function" == typeof WeakSet ? WeakSet : Set;
          function Ur(e3, t4) {
            var n3 = t4.source, r3 = t4.stack;
            null === r3 && null !== n3 && (r3 = je(n3)), null !== n3 && S(n3.type), t4 = t4.value, null !== e3 && 1 === e3.tag && S(e3.type);
            try {
              console.error(t4);
            } catch (e4) {
              setTimeout(function() {
                throw e4;
              });
            }
          }
          function Fr(e3) {
            var t4 = e3.ref;
            if (null !== t4)
              if ("function" == typeof t4)
                try {
                  t4(null);
                } catch (t5) {
                  lo(e3, t5);
                }
              else
                t4.current = null;
          }
          function Dr(e3, t4) {
            switch (t4.tag) {
              case 0:
              case 11:
              case 15:
                Wr(2, 0, t4);
                break;
              case 1:
                if (256 & t4.effectTag && null !== e3) {
                  var n3 = e3.memoizedProps, r3 = e3.memoizedState;
                  t4 = (e3 = t4.stateNode).getSnapshotBeforeUpdate(t4.elementType === t4.type ? n3 : Et(t4.type, n3), r3), e3.__reactInternalSnapshotBeforeUpdate = t4;
                }
                break;
              case 3:
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(l(163));
            }
          }
          function Wr(e3, t4, n3) {
            if (null !== (n3 = null !== (n3 = n3.updateQueue) ? n3.lastEffect : null)) {
              var r3 = n3 = n3.next;
              do {
                if (0 != (r3.tag & e3)) {
                  var i3 = r3.destroy;
                  r3.destroy = void 0, void 0 !== i3 && i3();
                }
                0 != (r3.tag & t4) && (i3 = r3.create, r3.destroy = i3()), r3 = r3.next;
              } while (r3 !== n3);
            }
          }
          function Br(e3, t4, n3) {
            switch ("function" == typeof so && so(t4), t4.tag) {
              case 0:
              case 11:
              case 14:
              case 15:
                if (null !== (e3 = t4.updateQueue) && null !== (e3 = e3.lastEffect)) {
                  var r3 = e3.next;
                  pt(97 < n3 ? 97 : n3, function() {
                    var e4 = r3;
                    do {
                      var n4 = e4.destroy;
                      if (void 0 !== n4) {
                        var i3 = t4;
                        try {
                          n4();
                        } catch (e5) {
                          lo(i3, e5);
                        }
                      }
                      e4 = e4.next;
                    } while (e4 !== r3);
                  });
                }
                break;
              case 1:
                Fr(t4), "function" == typeof (n3 = t4.stateNode).componentWillUnmount && function(e4, t5) {
                  try {
                    t5.props = e4.memoizedProps, t5.state = e4.memoizedState, t5.componentWillUnmount();
                  } catch (t6) {
                    lo(e4, t6);
                  }
                }(t4, n3);
                break;
              case 5:
                Fr(t4);
                break;
              case 4:
                V ? Gr(e3, t4, n3) : G && function(e4) {
                  if (G) {
                    e4 = e4.stateNode.containerInfo;
                    var t5 = se(e4);
                    de(e4, t5);
                  }
                }(t4);
            }
          }
          function Hr(e3, t4, n3) {
            for (var r3 = t4; ; )
              if (Br(e3, r3, n3), null === r3.child || V && 4 === r3.tag) {
                if (r3 === t4)
                  break;
                for (; null === r3.sibling; ) {
                  if (null === r3.return || r3.return === t4)
                    return;
                  r3 = r3.return;
                }
                r3.sibling.return = r3.return, r3 = r3.sibling;
              } else
                r3.child.return = r3, r3 = r3.child;
          }
          function qr(e3) {
            var t4 = e3.alternate;
            e3.return = null, e3.child = null, e3.memoizedState = null, e3.updateQueue = null, e3.dependencies = null, e3.alternate = null, e3.firstEffect = null, e3.lastEffect = null, e3.pendingProps = null, e3.memoizedProps = null, null !== t4 && qr(t4);
          }
          function Qr(e3) {
            return 5 === e3.tag || 3 === e3.tag || 4 === e3.tag;
          }
          function Vr(e3) {
            if (V) {
              e: {
                for (var t4 = e3.return; null !== t4; ) {
                  if (Qr(t4)) {
                    var n3 = t4;
                    break e;
                  }
                  t4 = t4.return;
                }
                throw Error(l(160));
              }
              switch (t4 = n3.stateNode, n3.tag) {
                case 5:
                  var r3 = false;
                  break;
                case 3:
                case 4:
                  t4 = t4.containerInfo, r3 = true;
                  break;
                default:
                  throw Error(l(161));
              }
              16 & n3.effectTag && (ie(t4), n3.effectTag &= -17);
              e:
                t:
                  for (n3 = e3; ; ) {
                    for (; null === n3.sibling; ) {
                      if (null === n3.return || Qr(n3.return)) {
                        n3 = null;
                        break e;
                      }
                      n3 = n3.return;
                    }
                    for (n3.sibling.return = n3.return, n3 = n3.sibling; 5 !== n3.tag && 6 !== n3.tag && 18 !== n3.tag; ) {
                      if (2 & n3.effectTag)
                        continue t;
                      if (null === n3.child || 4 === n3.tag)
                        continue t;
                      n3.child.return = n3, n3 = n3.child;
                    }
                    if (!(2 & n3.effectTag)) {
                      n3 = n3.stateNode;
                      break e;
                    }
                  }
              for (var i3 = e3; ; ) {
                var o3 = 5 === i3.tag || 6 === i3.tag;
                if (o3)
                  o3 = o3 ? i3.stateNode : i3.stateNode.instance, n3 ? r3 ? te2(t4, o3, n3) : ee(t4, o3, n3) : r3 ? X(t4, o3) : K(t4, o3);
                else if (4 !== i3.tag && null !== i3.child) {
                  i3.child.return = i3, i3 = i3.child;
                  continue;
                }
                if (i3 === e3)
                  break;
                for (; null === i3.sibling; ) {
                  if (null === i3.return || i3.return === e3)
                    return;
                  i3 = i3.return;
                }
                i3.sibling.return = i3.return, i3 = i3.sibling;
              }
            }
          }
          function Gr(e3, t4, n3) {
            for (var r3, i3, o3 = t4, a3 = false; ; ) {
              if (!a3) {
                a3 = o3.return;
                e:
                  for (; ; ) {
                    if (null === a3)
                      throw Error(l(160));
                    switch (r3 = a3.stateNode, a3.tag) {
                      case 5:
                        i3 = false;
                        break e;
                      case 3:
                      case 4:
                        r3 = r3.containerInfo, i3 = true;
                        break e;
                    }
                    a3 = a3.return;
                  }
                a3 = true;
              }
              if (5 === o3.tag || 6 === o3.tag)
                Hr(e3, o3, n3), i3 ? re(r3, o3.stateNode) : ne(r3, o3.stateNode);
              else if (4 === o3.tag) {
                if (null !== o3.child) {
                  r3 = o3.stateNode.containerInfo, i3 = true, o3.child.return = o3, o3 = o3.child;
                  continue;
                }
              } else if (Br(e3, o3, n3), null !== o3.child) {
                o3.child.return = o3, o3 = o3.child;
                continue;
              }
              if (o3 === t4)
                break;
              for (; null === o3.sibling; ) {
                if (null === o3.return || o3.return === t4)
                  return;
                4 === (o3 = o3.return).tag && (a3 = false);
              }
              o3.sibling.return = o3.return, o3 = o3.sibling;
            }
          }
          function $r(e3, t4) {
            if (V)
              switch (t4.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Wr(4, 8, t4);
                  break;
                case 1:
                  break;
                case 5:
                  var n3 = t4.stateNode;
                  if (null != n3) {
                    var r3 = t4.memoizedProps;
                    e3 = null !== e3 ? e3.memoizedProps : r3;
                    var i3 = t4.type, o3 = t4.updateQueue;
                    t4.updateQueue = null, null !== o3 && Z(n3, o3, i3, e3, r3, t4);
                  }
                  break;
                case 6:
                  if (null === t4.stateNode)
                    throw Error(l(162));
                  n3 = t4.memoizedProps, Y(t4.stateNode, null !== e3 ? e3.memoizedProps : n3, n3);
                  break;
                case 3:
                  $ && ((t4 = t4.stateNode).hydrate && (t4.hydrate = false, Se(t4.containerInfo)));
                  break;
                case 12:
                  break;
                case 13:
                  Kr(t4), Xr(t4);
                  break;
                case 19:
                  Xr(t4);
                  break;
                case 17:
                case 20:
                case 21:
                  break;
                default:
                  throw Error(l(163));
              }
            else {
              switch (t4.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  return void Wr(4, 8, t4);
                case 12:
                  return;
                case 13:
                  return Kr(t4), void Xr(t4);
                case 19:
                  return void Xr(t4);
                case 3:
                  $ && ((n3 = t4.stateNode).hydrate && (n3.hydrate = false, Se(n3.containerInfo)));
              }
              e:
                if (G)
                  switch (t4.tag) {
                    case 1:
                    case 5:
                    case 6:
                    case 20:
                      break e;
                    case 3:
                    case 4:
                      t4 = t4.stateNode, de(t4.containerInfo, t4.pendingChildren);
                      break e;
                    default:
                      throw Error(l(163));
                  }
            }
          }
          function Kr(e3) {
            var t4 = e3;
            if (null === e3.memoizedState)
              var n3 = false;
            else
              n3 = true, t4 = e3.child, Si = ct();
            if (V && null !== t4) {
              e:
                if (e3 = t4, V)
                  for (t4 = e3; ; ) {
                    if (5 === t4.tag) {
                      var r3 = t4.stateNode;
                      n3 ? oe(r3) : le(t4.stateNode, t4.memoizedProps);
                    } else if (6 === t4.tag)
                      r3 = t4.stateNode, n3 ? ae(r3) : ue(r3, t4.memoizedProps);
                    else {
                      if (13 === t4.tag && null !== t4.memoizedState && null === t4.memoizedState.dehydrated) {
                        (r3 = t4.child.sibling).return = t4, t4 = r3;
                        continue;
                      }
                      if (null !== t4.child) {
                        t4.child.return = t4, t4 = t4.child;
                        continue;
                      }
                    }
                    if (t4 === e3)
                      break e;
                    for (; null === t4.sibling; ) {
                      if (null === t4.return || t4.return === e3)
                        break e;
                      t4 = t4.return;
                    }
                    t4.sibling.return = t4.return, t4 = t4.sibling;
                  }
            }
          }
          function Xr(e3) {
            var t4 = e3.updateQueue;
            if (null !== t4) {
              e3.updateQueue = null;
              var n3 = e3.stateNode;
              null === n3 && (n3 = e3.stateNode = new Ar()), t4.forEach(function(t5) {
                var r3 = function(e4, t6) {
                  var n4 = e4.stateNode;
                  null !== n4 && n4.delete(t6), 0 == (t6 = 0) && (t6 = Fi(t6 = Ui(), e4, null)), null !== (e4 = Wi(e4, t6)) && Hi(e4);
                }.bind(null, e3, t5);
                n3.has(t5) || (n3.add(t5), t5.then(r3, r3));
              });
            }
          }
          var Yr = "function" == typeof WeakMap ? WeakMap : Map;
          function Jr(e3, t4, n3) {
            (n3 = Rt(n3, null)).tag = 3, n3.payload = { element: null };
            var r3 = t4.value;
            return n3.callback = function() {
              ji || (ji = true, Pi = r3), Ur(e3, t4);
            }, n3;
          }
          function Zr(e3, t4, n3) {
            (n3 = Rt(n3, null)).tag = 3;
            var r3 = e3.type.getDerivedStateFromError;
            if ("function" == typeof r3) {
              var i3 = t4.value;
              n3.payload = function() {
                return Ur(e3, t4), r3(i3);
              };
            }
            var o3 = e3.stateNode;
            return null !== o3 && "function" == typeof o3.componentDidCatch && (n3.callback = function() {
              "function" != typeof r3 && (null === Ci ? Ci = /* @__PURE__ */ new Set([this]) : Ci.add(this), Ur(e3, t4));
              var n4 = t4.stack;
              this.componentDidCatch(t4.value, { componentStack: null !== n4 ? n4 : "" });
            }), n3;
          }
          var ei, ti = Math.ceil, ni = u.ReactCurrentDispatcher, ri = u.ReactCurrentOwner, ii = 0, oi = 8, ai = 16, li = 32, ui = 0, ci = 1, si = 2, fi = 3, pi = 4, di = 5, hi = ii, mi = null, vi = null, bi = 0, yi = ui, gi = null, xi = 1073741823, wi = 1073741823, Ei = null, Oi = 0, Ti = false, Si = 0, _i = 500, ki = null, ji = false, Pi = null, Ci = null, zi = false, Ii = null, Mi = 90, Ni = null, Li = 0, Ri = null, Ai = 0;
          function Ui() {
            return (hi & (ai | li)) !== ii ? 1073741821 - (ct() / 10 | 0) : 0 !== Ai ? Ai : Ai = 1073741821 - (ct() / 10 | 0);
          }
          function Fi(e3, t4, n3) {
            if (0 == (2 & (t4 = t4.mode)))
              return 1073741823;
            var r3 = st();
            if (0 == (4 & t4))
              return 99 === r3 ? 1073741823 : 1073741822;
            if ((hi & ai) !== ii)
              return bi;
            if (null !== n3)
              e3 = yt(e3, 0 | n3.timeoutMs || 5e3, 250);
            else
              switch (r3) {
                case 99:
                  e3 = 1073741823;
                  break;
                case 98:
                  e3 = yt(e3, 150, 100);
                  break;
                case 97:
                case 96:
                  e3 = yt(e3, 5e3, 250);
                  break;
                case 95:
                  e3 = 2;
                  break;
                default:
                  throw Error(l(326));
              }
            return null !== mi && e3 === bi && --e3, e3;
          }
          function Di(e3, t4) {
            if (50 < Li)
              throw Li = 0, Ri = null, Error(l(185));
            if (null !== (e3 = Wi(e3, t4))) {
              var n3 = st();
              1073741823 === t4 ? (hi & oi) !== ii && (hi & (ai | li)) === ii ? qi(e3) : (Hi(e3), hi === ii && mt()) : Hi(e3), (4 & hi) === ii || 98 !== n3 && 99 !== n3 || (null === Ni ? Ni = /* @__PURE__ */ new Map([[e3, t4]]) : (void 0 === (n3 = Ni.get(e3)) || n3 > t4) && Ni.set(e3, t4));
            }
          }
          function Wi(e3, t4) {
            e3.expirationTime < t4 && (e3.expirationTime = t4);
            var n3 = e3.alternate;
            null !== n3 && n3.expirationTime < t4 && (n3.expirationTime = t4);
            var r3 = e3.return, i3 = null;
            if (null === r3 && 3 === e3.tag)
              i3 = e3.stateNode;
            else
              for (; null !== r3; ) {
                if (n3 = r3.alternate, r3.childExpirationTime < t4 && (r3.childExpirationTime = t4), null !== n3 && n3.childExpirationTime < t4 && (n3.childExpirationTime = t4), null === r3.return && 3 === r3.tag) {
                  i3 = r3.stateNode;
                  break;
                }
                r3 = r3.return;
              }
            return null !== i3 && (mi === i3 && (Xi(t4), yi === pi && Eo(i3, bi)), Oo(i3, t4)), i3;
          }
          function Bi(e3) {
            var t4 = e3.lastExpiredTime;
            return 0 !== t4 ? t4 : wo(e3, t4 = e3.firstPendingTime) ? (t4 = e3.lastPingedTime) > (e3 = e3.nextKnownPendingLevel) ? t4 : e3 : t4;
          }
          function Hi(e3) {
            if (0 !== e3.lastExpiredTime)
              e3.callbackExpirationTime = 1073741823, e3.callbackPriority = 99, e3.callbackNode = ht(qi.bind(null, e3));
            else {
              var t4 = Bi(e3), n3 = e3.callbackNode;
              if (0 === t4)
                null !== n3 && (e3.callbackNode = null, e3.callbackExpirationTime = 0, e3.callbackPriority = 90);
              else {
                var r3 = Ui();
                if (1073741823 === t4 ? r3 = 99 : 1 === t4 || 2 === t4 ? r3 = 95 : r3 = 0 >= (r3 = 10 * (1073741821 - t4) - 10 * (1073741821 - r3)) ? 99 : 250 >= r3 ? 98 : 5250 >= r3 ? 97 : 95, null !== n3) {
                  var i3 = e3.callbackPriority;
                  if (e3.callbackExpirationTime === t4 && i3 >= r3)
                    return;
                  n3 !== rt && Ge(n3);
                }
                e3.callbackExpirationTime = t4, e3.callbackPriority = r3, t4 = 1073741823 === t4 ? ht(qi.bind(null, e3)) : dt(r3, function e4(t5, n4) {
                  Ai = 0;
                  if (n4)
                    return n4 = Ui(), To(t5, n4), Hi(t5), null;
                  var r4 = Bi(t5);
                  if (0 !== r4) {
                    if (n4 = t5.callbackNode, (hi & (ai | li)) !== ii)
                      throw Error(l(327));
                    if (io(), t5 === mi && r4 === bi || Vi(t5, r4), null !== vi) {
                      var i4 = hi;
                      hi |= ai;
                      for (var o3 = $i(); ; )
                        try {
                          Ji();
                          break;
                        } catch (e5) {
                          Gi(t5, e5);
                        }
                      if (kt(), hi = i4, ni.current = o3, yi === ci)
                        throw n4 = gi, Vi(t5, r4), Eo(t5, r4), Hi(t5), n4;
                      if (null === vi)
                        switch (o3 = t5.finishedWork = t5.current.alternate, t5.finishedExpirationTime = r4, i4 = yi, mi = null, i4) {
                          case ui:
                          case ci:
                            throw Error(l(345));
                          case si:
                            To(t5, 2 < r4 ? 2 : r4);
                            break;
                          case fi:
                            if (Eo(t5, r4), i4 = t5.lastSuspendedTime, r4 === i4 && (t5.nextKnownPendingLevel = to(o3)), 1073741823 === xi && 10 < (o3 = Si + _i - ct())) {
                              if (Ti) {
                                var a3 = t5.lastPingedTime;
                                if (0 === a3 || a3 >= r4) {
                                  t5.lastPingedTime = r4, Vi(t5, r4);
                                  break;
                                }
                              }
                              if (0 !== (a3 = Bi(t5)) && a3 !== r4)
                                break;
                              if (0 !== i4 && i4 !== r4) {
                                t5.lastPingedTime = i4;
                                break;
                              }
                              t5.timeoutHandle = B(no.bind(null, t5), o3);
                              break;
                            }
                            no(t5);
                            break;
                          case pi:
                            if (Eo(t5, r4), i4 = t5.lastSuspendedTime, r4 === i4 && (t5.nextKnownPendingLevel = to(o3)), Ti && (0 === (o3 = t5.lastPingedTime) || o3 >= r4)) {
                              t5.lastPingedTime = r4, Vi(t5, r4);
                              break;
                            }
                            if (0 !== (o3 = Bi(t5)) && o3 !== r4)
                              break;
                            if (0 !== i4 && i4 !== r4) {
                              t5.lastPingedTime = i4;
                              break;
                            }
                            if (1073741823 !== wi ? i4 = 10 * (1073741821 - wi) - ct() : 1073741823 === xi ? i4 = 0 : (i4 = 10 * (1073741821 - xi) - 5e3, o3 = ct(), r4 = 10 * (1073741821 - r4) - o3, 0 > (i4 = o3 - i4) && (i4 = 0), i4 = (120 > i4 ? 120 : 480 > i4 ? 480 : 1080 > i4 ? 1080 : 1920 > i4 ? 1920 : 3e3 > i4 ? 3e3 : 4320 > i4 ? 4320 : 1960 * ti(i4 / 1960)) - i4, r4 < i4 && (i4 = r4)), 10 < i4) {
                              t5.timeoutHandle = B(no.bind(null, t5), i4);
                              break;
                            }
                            no(t5);
                            break;
                          case di:
                            if (1073741823 !== xi && null !== Ei) {
                              a3 = xi;
                              var u2 = Ei;
                              if (0 >= (i4 = 0 | u2.busyMinDurationMs) ? i4 = 0 : (o3 = 0 | u2.busyDelayMs, a3 = ct() - (10 * (1073741821 - a3) - (0 | u2.timeoutMs || 5e3)), i4 = a3 <= o3 ? 0 : o3 + i4 - a3), 10 < i4) {
                                Eo(t5, r4), t5.timeoutHandle = B(no.bind(null, t5), i4);
                                break;
                              }
                            }
                            no(t5);
                            break;
                          default:
                            throw Error(l(329));
                        }
                      if (Hi(t5), t5.callbackNode === n4)
                        return e4.bind(null, t5);
                    }
                  }
                  return null;
                }.bind(null, e3), { timeout: 10 * (1073741821 - t4) - ct() }), e3.callbackNode = t4;
              }
            }
          }
          function qi(e3) {
            var t4 = e3.lastExpiredTime;
            if (t4 = 0 !== t4 ? t4 : 1073741823, e3.finishedExpirationTime === t4)
              no(e3);
            else {
              if ((hi & (ai | li)) !== ii)
                throw Error(l(327));
              if (io(), e3 === mi && t4 === bi || Vi(e3, t4), null !== vi) {
                var n3 = hi;
                hi |= ai;
                for (var r3 = $i(); ; )
                  try {
                    Yi();
                    break;
                  } catch (t5) {
                    Gi(e3, t5);
                  }
                if (kt(), hi = n3, ni.current = r3, yi === ci)
                  throw n3 = gi, Vi(e3, t4), Eo(e3, t4), Hi(e3), n3;
                if (null !== vi)
                  throw Error(l(261));
                e3.finishedWork = e3.current.alternate, e3.finishedExpirationTime = t4, mi = null, no(e3), Hi(e3);
              }
            }
            return null;
          }
          function Qi(e3, t4) {
            if ((hi & (ai | li)) !== ii)
              throw Error(l(187));
            var n3 = hi;
            hi |= 1;
            try {
              return pt(99, e3.bind(null, t4));
            } finally {
              hi = n3, mt();
            }
          }
          function Vi(e3, t4) {
            e3.finishedWork = null, e3.finishedExpirationTime = 0;
            var n3 = e3.timeoutHandle;
            if (n3 !== q && (e3.timeoutHandle = q, H(n3)), null !== vi)
              for (n3 = vi.return; null !== n3; ) {
                var r3 = n3;
                switch (r3.tag) {
                  case 1:
                    var i3 = r3.type.childContextTypes;
                    null != i3 && Fe();
                    break;
                  case 3:
                    pn(), De();
                    break;
                  case 5:
                    hn(r3);
                    break;
                  case 4:
                    pn();
                    break;
                  case 13:
                  case 19:
                    ze(mn);
                    break;
                  case 10:
                    Pt(r3);
                }
                n3 = n3.return;
              }
            mi = e3, vi = mo(e3.current, null), bi = t4, yi = ui, gi = null, wi = xi = 1073741823, Ei = null, Oi = 0, Ti = false;
          }
          function Gi(e3, t4) {
            for (; ; ) {
              try {
                if (kt(), Rn(), null === vi || null === vi.return)
                  return yi = ci, gi = t4, null;
                e: {
                  var n3 = e3, r3 = vi.return, i3 = vi, o3 = t4;
                  if (t4 = bi, i3.effectTag |= 2048, i3.firstEffect = i3.lastEffect = null, null !== o3 && "object" == typeof o3 && "function" == typeof o3.then) {
                    var a3 = o3, l2 = 0 != (1 & mn.current), u2 = r3;
                    do {
                      var c2;
                      if (c2 = 13 === u2.tag) {
                        var s2 = u2.memoizedState;
                        if (null !== s2)
                          c2 = null !== s2.dehydrated;
                        else {
                          var f2 = u2.memoizedProps;
                          c2 = void 0 !== f2.fallback && (true !== f2.unstable_avoidThisFallback || !l2);
                        }
                      }
                      if (c2) {
                        var p2 = u2.updateQueue;
                        if (null === p2) {
                          var d2 = /* @__PURE__ */ new Set();
                          d2.add(a3), u2.updateQueue = d2;
                        } else
                          p2.add(a3);
                        if (0 == (2 & u2.mode)) {
                          if (u2.effectTag |= 64, i3.effectTag &= -2981, 1 === i3.tag)
                            if (null === i3.alternate)
                              i3.tag = 17;
                            else {
                              var h2 = Rt(1073741823, null);
                              h2.tag = 2, Ut(i3, h2);
                            }
                          i3.expirationTime = 1073741823;
                          break e;
                        }
                        o3 = void 0, i3 = t4;
                        var m2 = n3.pingCache;
                        if (null === m2 ? (m2 = n3.pingCache = new Yr(), o3 = /* @__PURE__ */ new Set(), m2.set(a3, o3)) : void 0 === (o3 = m2.get(a3)) && (o3 = /* @__PURE__ */ new Set(), m2.set(a3, o3)), !o3.has(i3)) {
                          o3.add(i3);
                          var v2 = uo.bind(null, n3, a3, i3);
                          a3.then(v2, v2);
                        }
                        u2.effectTag |= 4096, u2.expirationTime = t4;
                        break e;
                      }
                      u2 = u2.return;
                    } while (null !== u2);
                    o3 = Error((S(i3.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + je(i3));
                  }
                  yi !== di && (yi = si), o3 = Rr(o3, i3), u2 = r3;
                  do {
                    switch (u2.tag) {
                      case 3:
                        a3 = o3, u2.effectTag |= 4096, u2.expirationTime = t4, Ft(u2, Jr(u2, a3, t4));
                        break e;
                      case 1:
                        a3 = o3;
                        var b3 = u2.type, y2 = u2.stateNode;
                        if (0 == (64 & u2.effectTag) && ("function" == typeof b3.getDerivedStateFromError || null !== y2 && "function" == typeof y2.componentDidCatch && (null === Ci || !Ci.has(y2)))) {
                          u2.effectTag |= 4096, u2.expirationTime = t4, Ft(u2, Zr(u2, a3, t4));
                          break e;
                        }
                    }
                    u2 = u2.return;
                  } while (null !== u2);
                }
                vi = eo(vi);
              } catch (e4) {
                t4 = e4;
                continue;
              }
              break;
            }
          }
          function $i() {
            var e3 = ni.current;
            return ni.current = Zn, null === e3 ? Zn : e3;
          }
          function Ki(e3, t4) {
            e3 < xi && 2 < e3 && (xi = e3), null !== t4 && e3 < wi && 2 < e3 && (wi = e3, Ei = t4);
          }
          function Xi(e3) {
            e3 > Oi && (Oi = e3);
          }
          function Yi() {
            for (; null !== vi; )
              vi = Zi(vi);
          }
          function Ji() {
            for (; null !== vi && !$e(); )
              vi = Zi(vi);
          }
          function Zi(e3) {
            var t4 = ei(e3.alternate, e3, bi);
            return e3.memoizedProps = e3.pendingProps, null === t4 && (t4 = eo(e3)), ri.current = null, t4;
          }
          function eo(e3) {
            vi = e3;
            do {
              var t4 = vi.alternate;
              if (e3 = vi.return, 0 == (2048 & vi.effectTag)) {
                e: {
                  var n3 = t4, r3 = bi, i3 = (t4 = vi).pendingProps;
                  switch (t4.tag) {
                    case 2:
                    case 16:
                      break;
                    case 15:
                    case 0:
                      break;
                    case 1:
                      Ue(t4.type) && Fe();
                      break;
                    case 3:
                      pn(), De(), (i3 = t4.stateNode).pendingContext && (i3.context = i3.pendingContext, i3.pendingContext = null), (null === n3 || null === n3.child) && cr(t4) && Ir(t4), Or(t4);
                      break;
                    case 5:
                      hn(t4);
                      var o3 = sn(cn.current);
                      if (r3 = t4.type, null !== n3 && null != t4.stateNode)
                        Tr(n3, t4, r3, i3, o3), n3.ref !== t4.ref && (t4.effectTag |= 128);
                      else if (i3) {
                        if (n3 = sn(ln2.current), cr(t4)) {
                          if (i3 = t4, !$)
                            throw Error(l(175));
                          n3 = Ee(i3.stateNode, i3.type, i3.memoizedProps, o3, n3, i3), i3.updateQueue = n3, (n3 = null !== n3) && Ir(t4);
                        } else {
                          var a3 = L(r3, i3, o3, n3, t4);
                          Er(a3, t4, false, false), t4.stateNode = a3, A(a3, r3, i3, o3, n3) && Ir(t4);
                        }
                        null !== t4.ref && (t4.effectTag |= 128);
                      } else if (null === t4.stateNode)
                        throw Error(l(166));
                      break;
                    case 6:
                      if (n3 && null != t4.stateNode)
                        Sr(n3, t4, n3.memoizedProps, i3);
                      else {
                        if ("string" != typeof i3 && null === t4.stateNode)
                          throw Error(l(166));
                        if (n3 = sn(cn.current), o3 = sn(ln2.current), cr(t4)) {
                          if (n3 = t4, !$)
                            throw Error(l(176));
                          (n3 = Oe(n3.stateNode, n3.memoizedProps, n3)) && Ir(t4);
                        } else
                          t4.stateNode = W(i3, n3, o3, t4);
                      }
                      break;
                    case 11:
                      break;
                    case 13:
                      if (ze(mn), i3 = t4.memoizedState, 0 != (64 & t4.effectTag)) {
                        t4.expirationTime = r3;
                        break e;
                      }
                      i3 = null !== i3, o3 = false, null === n3 ? void 0 !== t4.memoizedProps.fallback && cr(t4) : (o3 = null !== (r3 = n3.memoizedState), i3 || null === r3 || null !== (r3 = n3.child.sibling) && (null !== (a3 = t4.firstEffect) ? (t4.firstEffect = r3, r3.nextEffect = a3) : (t4.firstEffect = t4.lastEffect = r3, r3.nextEffect = null), r3.effectTag = 8)), i3 && !o3 && 0 != (2 & t4.mode) && (null === n3 && true !== t4.memoizedProps.unstable_avoidThisFallback || 0 != (1 & mn.current) ? yi === ui && (yi = fi) : (yi !== ui && yi !== fi || (yi = pi), 0 !== Oi && null !== mi && (Eo(mi, bi), Oo(mi, Oi)))), G && i3 && (t4.effectTag |= 4), V && (i3 || o3) && (t4.effectTag |= 4);
                      break;
                    case 7:
                    case 8:
                    case 12:
                      break;
                    case 4:
                      pn(), Or(t4);
                      break;
                    case 10:
                      Pt(t4);
                      break;
                    case 9:
                    case 14:
                      break;
                    case 17:
                      Ue(t4.type) && Fe();
                      break;
                    case 19:
                      if (ze(mn), null === (i3 = t4.memoizedState))
                        break;
                      if (o3 = 0 != (64 & t4.effectTag), null === (a3 = i3.rendering)) {
                        if (o3)
                          Nr(i3, false);
                        else if (yi !== ui || null !== n3 && 0 != (64 & n3.effectTag))
                          for (n3 = t4.child; null !== n3; ) {
                            if (null !== (a3 = vn(n3))) {
                              for (t4.effectTag |= 64, Nr(i3, false), null !== (n3 = a3.updateQueue) && (t4.updateQueue = n3, t4.effectTag |= 4), null === i3.lastEffect && (t4.firstEffect = null), t4.lastEffect = i3.lastEffect, n3 = r3, i3 = t4.child; null !== i3; )
                                r3 = n3, (o3 = i3).effectTag &= 2, o3.nextEffect = null, o3.firstEffect = null, o3.lastEffect = null, null === (a3 = o3.alternate) ? (o3.childExpirationTime = 0, o3.expirationTime = r3, o3.child = null, o3.memoizedProps = null, o3.memoizedState = null, o3.updateQueue = null, o3.dependencies = null) : (o3.childExpirationTime = a3.childExpirationTime, o3.expirationTime = a3.expirationTime, o3.child = a3.child, o3.memoizedProps = a3.memoizedProps, o3.memoizedState = a3.memoizedState, o3.updateQueue = a3.updateQueue, r3 = a3.dependencies, o3.dependencies = null === r3 ? null : { expirationTime: r3.expirationTime, firstContext: r3.firstContext, responders: r3.responders }), i3 = i3.sibling;
                              Ie(mn, 1 & mn.current | 2), t4 = t4.child;
                              break e;
                            }
                            n3 = n3.sibling;
                          }
                      } else {
                        if (!o3)
                          if (null !== (n3 = vn(a3))) {
                            if (t4.effectTag |= 64, o3 = true, null !== (n3 = n3.updateQueue) && (t4.updateQueue = n3, t4.effectTag |= 4), Nr(i3, true), null === i3.tail && "hidden" === i3.tailMode) {
                              null !== (t4 = t4.lastEffect = i3.lastEffect) && (t4.nextEffect = null);
                              break;
                            }
                          } else
                            ct() > i3.tailExpiration && 1 < r3 && (t4.effectTag |= 64, o3 = true, Nr(i3, false), t4.expirationTime = t4.childExpirationTime = r3 - 1);
                        i3.isBackwards ? (a3.sibling = t4.child, t4.child = a3) : (null !== (n3 = i3.last) ? n3.sibling = a3 : t4.child = a3, i3.last = a3);
                      }
                      if (null !== i3.tail) {
                        0 === i3.tailExpiration && (i3.tailExpiration = ct() + 500), n3 = i3.tail, i3.rendering = n3, i3.tail = n3.sibling, i3.lastEffect = t4.lastEffect, n3.sibling = null, i3 = mn.current, Ie(mn, i3 = o3 ? 1 & i3 | 2 : 1 & i3), t4 = n3;
                        break e;
                      }
                      break;
                    case 20:
                    case 21:
                      break;
                    default:
                      throw Error(l(156, t4.tag));
                  }
                  t4 = null;
                }
                if (n3 = vi, 1 === bi || 1 !== n3.childExpirationTime) {
                  for (i3 = 0, o3 = n3.child; null !== o3; )
                    (r3 = o3.expirationTime) > i3 && (i3 = r3), (a3 = o3.childExpirationTime) > i3 && (i3 = a3), o3 = o3.sibling;
                  n3.childExpirationTime = i3;
                }
                if (null !== t4)
                  return t4;
                null !== e3 && 0 == (2048 & e3.effectTag) && (null === e3.firstEffect && (e3.firstEffect = vi.firstEffect), null !== vi.lastEffect && (null !== e3.lastEffect && (e3.lastEffect.nextEffect = vi.firstEffect), e3.lastEffect = vi.lastEffect), 1 < vi.effectTag && (null !== e3.lastEffect ? e3.lastEffect.nextEffect = vi : e3.firstEffect = vi, e3.lastEffect = vi));
              } else {
                if (null !== (t4 = Lr(vi)))
                  return t4.effectTag &= 2047, t4;
                null !== e3 && (e3.firstEffect = e3.lastEffect = null, e3.effectTag |= 2048);
              }
              if (null !== (t4 = vi.sibling))
                return t4;
              vi = e3;
            } while (null !== vi);
            return yi === ui && (yi = di), null;
          }
          function to(e3) {
            var t4 = e3.expirationTime;
            return t4 > (e3 = e3.childExpirationTime) ? t4 : e3;
          }
          function no(e3) {
            var t4 = st();
            return pt(99, function(e4, t5) {
              if (io(), (hi & (ai | li)) !== ii)
                throw Error(l(327));
              var n3 = e4.finishedWork, r3 = e4.finishedExpirationTime;
              if (null === n3)
                return null;
              if (e4.finishedWork = null, e4.finishedExpirationTime = 0, n3 === e4.current)
                throw Error(l(177));
              e4.callbackNode = null, e4.callbackExpirationTime = 0, e4.callbackPriority = 90, e4.nextKnownPendingLevel = 0;
              var i3 = to(n3);
              if (e4.firstPendingTime = i3, r3 <= e4.lastSuspendedTime ? e4.firstSuspendedTime = e4.lastSuspendedTime = e4.nextKnownPendingLevel = 0 : r3 <= e4.firstSuspendedTime && (e4.firstSuspendedTime = r3 - 1), r3 <= e4.lastPingedTime && (e4.lastPingedTime = 0), r3 <= e4.lastExpiredTime && (e4.lastExpiredTime = 0), e4 === mi && (vi = mi = null, bi = 0), 1 < n3.effectTag ? null !== n3.lastEffect ? (n3.lastEffect.nextEffect = n3, i3 = n3.firstEffect) : i3 = n3 : i3 = n3.firstEffect, null !== i3) {
                var o3 = hi;
                hi |= li, ri.current = null, M(e4.containerInfo), ki = i3;
                do {
                  try {
                    ro();
                  } catch (e5) {
                    if (null === ki)
                      throw Error(l(330));
                    lo(ki, e5), ki = ki.nextEffect;
                  }
                } while (null !== ki);
                ki = i3;
                do {
                  try {
                    for (var a3 = e4, u2 = t5; null !== ki; ) {
                      var c2 = ki.effectTag;
                      if (16 & c2 && V && ie(ki.stateNode), 128 & c2) {
                        var s2 = ki.alternate;
                        if (null !== s2) {
                          var f2 = s2.ref;
                          null !== f2 && ("function" == typeof f2 ? f2(null) : f2.current = null);
                        }
                      }
                      switch (1038 & c2) {
                        case 2:
                          Vr(ki), ki.effectTag &= -3;
                          break;
                        case 6:
                          Vr(ki), ki.effectTag &= -3, $r(ki.alternate, ki);
                          break;
                        case 1024:
                          ki.effectTag &= -1025;
                          break;
                        case 1028:
                          ki.effectTag &= -1025, $r(ki.alternate, ki);
                          break;
                        case 4:
                          $r(ki.alternate, ki);
                          break;
                        case 8:
                          var p2 = a3, d2 = ki, h2 = u2;
                          V ? Gr(p2, d2, h2) : Hr(p2, d2, h2), qr(d2);
                      }
                      ki = ki.nextEffect;
                    }
                  } catch (e5) {
                    if (null === ki)
                      throw Error(l(330));
                    lo(ki, e5), ki = ki.nextEffect;
                  }
                } while (null !== ki);
                N(e4.containerInfo), e4.current = n3, ki = i3;
                do {
                  try {
                    for (c2 = r3; null !== ki; ) {
                      var m2 = ki.effectTag;
                      if (36 & m2) {
                        var v2 = ki.alternate;
                        switch (f2 = c2, (s2 = ki).tag) {
                          case 0:
                          case 11:
                          case 15:
                            Wr(16, 32, s2);
                            break;
                          case 1:
                            var b3 = s2.stateNode;
                            if (4 & s2.effectTag)
                              if (null === v2)
                                b3.componentDidMount();
                              else {
                                var y2 = s2.elementType === s2.type ? v2.memoizedProps : Et(s2.type, v2.memoizedProps);
                                b3.componentDidUpdate(y2, v2.memoizedState, b3.__reactInternalSnapshotBeforeUpdate);
                              }
                            var g2 = s2.updateQueue;
                            null !== g2 && Ht(0, g2, b3);
                            break;
                          case 3:
                            var x2 = s2.updateQueue;
                            if (null !== x2) {
                              if (a3 = null, null !== s2.child)
                                switch (s2.child.tag) {
                                  case 5:
                                    a3 = C(s2.child.stateNode);
                                    break;
                                  case 1:
                                    a3 = s2.child.stateNode;
                                }
                              Ht(0, x2, a3);
                            }
                            break;
                          case 5:
                            var w2 = s2.stateNode;
                            null === v2 && 4 & s2.effectTag && J(w2, s2.type, s2.memoizedProps, s2);
                            break;
                          case 6:
                          case 4:
                          case 12:
                            break;
                          case 13:
                            if ($ && null === s2.memoizedState) {
                              var E2 = s2.alternate;
                              if (null !== E2) {
                                var O2 = E2.memoizedState;
                                if (null !== O2) {
                                  var T2 = O2.dehydrated;
                                  null !== T2 && _e(T2);
                                }
                              }
                            }
                            break;
                          case 19:
                          case 17:
                          case 20:
                          case 21:
                            break;
                          default:
                            throw Error(l(163));
                        }
                      }
                      if (128 & m2) {
                        s2 = void 0;
                        var S2 = ki.ref;
                        if (null !== S2) {
                          var _2 = ki.stateNode;
                          switch (ki.tag) {
                            case 5:
                              s2 = C(_2);
                              break;
                            default:
                              s2 = _2;
                          }
                          "function" == typeof S2 ? S2(s2) : S2.current = s2;
                        }
                      }
                      ki = ki.nextEffect;
                    }
                  } catch (e5) {
                    if (null === ki)
                      throw Error(l(330));
                    lo(ki, e5), ki = ki.nextEffect;
                  }
                } while (null !== ki);
                ki = null, it(), hi = o3;
              } else
                e4.current = n3;
              if (zi)
                zi = false, Ii = e4, Mi = t5;
              else
                for (ki = i3; null !== ki; )
                  t5 = ki.nextEffect, ki.nextEffect = null, ki = t5;
              if (0 === (t5 = e4.firstPendingTime) && (Ci = null), 1073741823 === t5 ? e4 === Ri ? Li++ : (Li = 0, Ri = e4) : Li = 0, "function" == typeof co && co(n3.stateNode, r3), Hi(e4), ji)
                throw ji = false, e4 = Pi, Pi = null, e4;
              return (hi & oi) !== ii ? null : (mt(), null);
            }.bind(null, e3, t4)), null;
          }
          function ro() {
            for (; null !== ki; ) {
              var e3 = ki.effectTag;
              0 != (256 & e3) && Dr(ki.alternate, ki), 0 == (512 & e3) || zi || (zi = true, dt(97, function() {
                return io(), null;
              })), ki = ki.nextEffect;
            }
          }
          function io() {
            if (90 !== Mi) {
              var e3 = 97 < Mi ? 97 : Mi;
              return Mi = 90, pt(e3, oo);
            }
          }
          function oo() {
            if (null === Ii)
              return false;
            var e3 = Ii;
            if (Ii = null, (hi & (ai | li)) !== ii)
              throw Error(l(331));
            var t4 = hi;
            for (hi |= li, e3 = e3.current.firstEffect; null !== e3; ) {
              try {
                var n3 = e3;
                if (0 != (512 & n3.effectTag))
                  switch (n3.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Wr(128, 0, n3), Wr(0, 64, n3);
                  }
              } catch (t5) {
                if (null === e3)
                  throw Error(l(330));
                lo(e3, t5);
              }
              n3 = e3.nextEffect, e3.nextEffect = null, e3 = n3;
            }
            return hi = t4, mt(), true;
          }
          function ao(e3, t4, n3) {
            Ut(e3, t4 = Jr(e3, t4 = Rr(n3, t4), 1073741823)), null !== (e3 = Wi(e3, 1073741823)) && Hi(e3);
          }
          function lo(e3, t4) {
            if (3 === e3.tag)
              ao(e3, e3, t4);
            else
              for (var n3 = e3.return; null !== n3; ) {
                if (3 === n3.tag) {
                  ao(n3, e3, t4);
                  break;
                }
                if (1 === n3.tag) {
                  var r3 = n3.stateNode;
                  if ("function" == typeof n3.type.getDerivedStateFromError || "function" == typeof r3.componentDidCatch && (null === Ci || !Ci.has(r3))) {
                    Ut(n3, e3 = Zr(n3, e3 = Rr(t4, e3), 1073741823)), null !== (n3 = Wi(n3, 1073741823)) && Hi(n3);
                    break;
                  }
                }
                n3 = n3.return;
              }
          }
          function uo(e3, t4, n3) {
            var r3 = e3.pingCache;
            null !== r3 && r3.delete(t4), mi === e3 && bi === n3 ? yi === pi || yi === fi && 1073741823 === xi && ct() - Si < _i ? Vi(e3, bi) : Ti = true : wo(e3, n3) && (0 !== (t4 = e3.lastPingedTime) && t4 < n3 || (e3.lastPingedTime = n3, e3.finishedExpirationTime === n3 && (e3.finishedExpirationTime = 0, e3.finishedWork = null), Hi(e3)));
          }
          ei = function(e3, t4, n3) {
            var r3 = t4.expirationTime;
            if (null !== e3) {
              var i3 = t4.pendingProps;
              if (e3.memoizedProps !== i3 || Le.current)
                pr = true;
              else {
                if (r3 < n3) {
                  switch (pr = false, t4.tag) {
                    case 3:
                      wr(t4), sr();
                      break;
                    case 5:
                      if (dn(t4), 4 & t4.mode && 1 !== n3 && D(t4.type, i3))
                        return t4.expirationTime = t4.childExpirationTime = 1, null;
                      break;
                    case 1:
                      Ue(t4.type) && He(t4);
                      break;
                    case 4:
                      fn(t4, t4.stateNode.containerInfo);
                      break;
                    case 10:
                      jt(t4, t4.memoizedProps.value);
                      break;
                    case 13:
                      if (null !== t4.memoizedState)
                        return 0 !== (r3 = t4.child.childExpirationTime) && r3 >= n3 ? kr(e3, t4, n3) : (Ie(mn, 1 & mn.current), null !== (t4 = zr(e3, t4, n3)) ? t4.sibling : null);
                      Ie(mn, 1 & mn.current);
                      break;
                    case 19:
                      if (r3 = t4.childExpirationTime >= n3, 0 != (64 & e3.effectTag)) {
                        if (r3)
                          return Cr(e3, t4, n3);
                        t4.effectTag |= 64;
                      }
                      if (null !== (i3 = t4.memoizedState) && (i3.rendering = null, i3.tail = null), Ie(mn, mn.current), !r3)
                        return null;
                  }
                  return zr(e3, t4, n3);
                }
                pr = false;
              }
            } else
              pr = false;
            switch (t4.expirationTime = 0, t4.tag) {
              case 2:
                if (r3 = t4.type, null !== e3 && (e3.alternate = null, t4.alternate = null, t4.effectTag |= 2), e3 = t4.pendingProps, i3 = Ae(t4, Ne.current), zt(t4, n3), i3 = Ln(null, t4, r3, e3, i3, n3), t4.effectTag |= 1, "object" == typeof i3 && null !== i3 && "function" == typeof i3.render && void 0 === i3.$$typeof) {
                  if (t4.tag = 1, Rn(), Ue(r3)) {
                    var o3 = true;
                    He(t4);
                  } else
                    o3 = false;
                  t4.memoizedState = null !== i3.state && void 0 !== i3.state ? i3.state : null;
                  var a3 = r3.getDerivedStateFromProps;
                  "function" == typeof a3 && Gt(t4, r3, a3, e3), i3.updater = $t, t4.stateNode = i3, i3._reactInternalFiber = t4, Jt(t4, r3, e3, n3), t4 = xr(null, t4, r3, true, o3, n3);
                } else
                  t4.tag = 0, dr(null, t4, i3, n3), t4 = t4.child;
                return t4;
              case 16:
                if (i3 = t4.elementType, null !== e3 && (e3.alternate = null, t4.alternate = null, t4.effectTag |= 2), e3 = t4.pendingProps, function(e4) {
                  if (-1 === e4._status) {
                    e4._status = 0;
                    var t5 = e4._ctor;
                    t5 = t5(), e4._result = t5, t5.then(function(t6) {
                      0 === e4._status && (t6 = t6.default, e4._status = 1, e4._result = t6);
                    }, function(t6) {
                      0 === e4._status && (e4._status = 2, e4._result = t6);
                    });
                  }
                }(i3), 1 !== i3._status)
                  throw i3._result;
                switch (i3 = i3._result, t4.type = i3, o3 = t4.tag = function(e4) {
                  if ("function" == typeof e4)
                    return ho(e4) ? 1 : 0;
                  if (null != e4) {
                    if ((e4 = e4.$$typeof) === y)
                      return 11;
                    if (e4 === w)
                      return 14;
                  }
                  return 2;
                }(i3), e3 = Et(i3, e3), o3) {
                  case 0:
                    t4 = yr(null, t4, i3, e3, n3);
                    break;
                  case 1:
                    t4 = gr(null, t4, i3, e3, n3);
                    break;
                  case 11:
                    t4 = hr(null, t4, i3, e3, n3);
                    break;
                  case 14:
                    t4 = mr(null, t4, i3, Et(i3.type, e3), r3, n3);
                    break;
                  default:
                    throw Error(l(306, i3, ""));
                }
                return t4;
              case 0:
                return r3 = t4.type, i3 = t4.pendingProps, yr(e3, t4, r3, i3 = t4.elementType === r3 ? i3 : Et(r3, i3), n3);
              case 1:
                return r3 = t4.type, i3 = t4.pendingProps, gr(e3, t4, r3, i3 = t4.elementType === r3 ? i3 : Et(r3, i3), n3);
              case 3:
                if (wr(t4), null === (r3 = t4.updateQueue))
                  throw Error(l(282));
                if (i3 = null !== (i3 = t4.memoizedState) ? i3.element : null, Bt(t4, r3, t4.pendingProps, null, n3), (r3 = t4.memoizedState.element) === i3)
                  sr(), t4 = zr(e3, t4, n3);
                else {
                  if ((i3 = t4.stateNode.hydrate) && ($ ? (rr = we(t4.stateNode.containerInfo), nr = t4, i3 = ir = true) : i3 = false), i3)
                    for (n3 = on(t4, null, r3, n3), t4.child = n3; n3; )
                      n3.effectTag = -3 & n3.effectTag | 1024, n3 = n3.sibling;
                  else
                    dr(e3, t4, r3, n3), sr();
                  t4 = t4.child;
                }
                return t4;
              case 5:
                return dn(t4), null === e3 && lr(t4), r3 = t4.type, i3 = t4.pendingProps, o3 = null !== e3 ? e3.memoizedProps : null, a3 = i3.children, F(r3, i3) ? a3 = null : null !== o3 && F(r3, o3) && (t4.effectTag |= 16), br(e3, t4), 4 & t4.mode && 1 !== n3 && D(r3, i3) ? (t4.expirationTime = t4.childExpirationTime = 1, t4 = null) : (dr(e3, t4, a3, n3), t4 = t4.child), t4;
              case 6:
                return null === e3 && lr(t4), null;
              case 13:
                return kr(e3, t4, n3);
              case 4:
                return fn(t4, t4.stateNode.containerInfo), r3 = t4.pendingProps, null === e3 ? t4.child = rn(t4, null, r3, n3) : dr(e3, t4, r3, n3), t4.child;
              case 11:
                return r3 = t4.type, i3 = t4.pendingProps, hr(e3, t4, r3, i3 = t4.elementType === r3 ? i3 : Et(r3, i3), n3);
              case 7:
                return dr(e3, t4, t4.pendingProps, n3), t4.child;
              case 8:
              case 12:
                return dr(e3, t4, t4.pendingProps.children, n3), t4.child;
              case 10:
                e: {
                  if (r3 = t4.type._context, i3 = t4.pendingProps, a3 = t4.memoizedProps, jt(t4, o3 = i3.value), null !== a3) {
                    var u2 = a3.value;
                    if (0 === (o3 = gt(u2, o3) ? 0 : 0 | ("function" == typeof r3._calculateChangedBits ? r3._calculateChangedBits(u2, o3) : 1073741823))) {
                      if (a3.children === i3.children && !Le.current) {
                        t4 = zr(e3, t4, n3);
                        break e;
                      }
                    } else
                      for (null !== (u2 = t4.child) && (u2.return = t4); null !== u2; ) {
                        var c2 = u2.dependencies;
                        if (null !== c2) {
                          a3 = u2.child;
                          for (var s2 = c2.firstContext; null !== s2; ) {
                            if (s2.context === r3 && 0 != (s2.observedBits & o3)) {
                              1 === u2.tag && ((s2 = Rt(n3, null)).tag = 2, Ut(u2, s2)), u2.expirationTime < n3 && (u2.expirationTime = n3), null !== (s2 = u2.alternate) && s2.expirationTime < n3 && (s2.expirationTime = n3), Ct(u2.return, n3), c2.expirationTime < n3 && (c2.expirationTime = n3);
                              break;
                            }
                            s2 = s2.next;
                          }
                        } else
                          a3 = 10 === u2.tag && u2.type === t4.type ? null : u2.child;
                        if (null !== a3)
                          a3.return = u2;
                        else
                          for (a3 = u2; null !== a3; ) {
                            if (a3 === t4) {
                              a3 = null;
                              break;
                            }
                            if (null !== (u2 = a3.sibling)) {
                              u2.return = a3.return, a3 = u2;
                              break;
                            }
                            a3 = a3.return;
                          }
                        u2 = a3;
                      }
                  }
                  dr(e3, t4, i3.children, n3), t4 = t4.child;
                }
                return t4;
              case 9:
                return i3 = t4.type, r3 = (o3 = t4.pendingProps).children, zt(t4, n3), r3 = r3(i3 = It(i3, o3.unstable_observedBits)), t4.effectTag |= 1, dr(e3, t4, r3, n3), t4.child;
              case 14:
                return o3 = Et(i3 = t4.type, t4.pendingProps), mr(e3, t4, i3, o3 = Et(i3.type, o3), r3, n3);
              case 15:
                return vr(e3, t4, t4.type, t4.pendingProps, r3, n3);
              case 17:
                return r3 = t4.type, i3 = t4.pendingProps, i3 = t4.elementType === r3 ? i3 : Et(r3, i3), null !== e3 && (e3.alternate = null, t4.alternate = null, t4.effectTag |= 2), t4.tag = 1, Ue(r3) ? (e3 = true, He(t4)) : e3 = false, zt(t4, n3), Xt(t4, r3, i3), Jt(t4, r3, i3, n3), xr(null, t4, r3, true, e3, n3);
              case 19:
                return Cr(e3, t4, n3);
            }
            throw Error(l(156, t4.tag));
          };
          var co = null, so = null;
          function fo(e3, t4, n3, r3) {
            this.tag = e3, this.key = n3, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = t4, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = r3, this.effectTag = 0, this.lastEffect = this.firstEffect = this.nextEffect = null, this.childExpirationTime = this.expirationTime = 0, this.alternate = null;
          }
          function po(e3, t4, n3, r3) {
            return new fo(e3, t4, n3, r3);
          }
          function ho(e3) {
            return !(!(e3 = e3.prototype) || !e3.isReactComponent);
          }
          function mo(e3, t4) {
            var n3 = e3.alternate;
            return null === n3 ? ((n3 = po(e3.tag, t4, e3.key, e3.mode)).elementType = e3.elementType, n3.type = e3.type, n3.stateNode = e3.stateNode, n3.alternate = e3, e3.alternate = n3) : (n3.pendingProps = t4, n3.effectTag = 0, n3.nextEffect = null, n3.firstEffect = null, n3.lastEffect = null), n3.childExpirationTime = e3.childExpirationTime, n3.expirationTime = e3.expirationTime, n3.child = e3.child, n3.memoizedProps = e3.memoizedProps, n3.memoizedState = e3.memoizedState, n3.updateQueue = e3.updateQueue, t4 = e3.dependencies, n3.dependencies = null === t4 ? null : { expirationTime: t4.expirationTime, firstContext: t4.firstContext, responders: t4.responders }, n3.sibling = e3.sibling, n3.index = e3.index, n3.ref = e3.ref, n3;
          }
          function vo(e3, t4, n3, r3, i3, o3) {
            var a3 = 2;
            if (r3 = e3, "function" == typeof e3)
              ho(e3) && (a3 = 1);
            else if ("string" == typeof e3)
              a3 = 5;
            else
              e:
                switch (e3) {
                  case p:
                    return bo(n3.children, i3, o3, t4);
                  case b:
                    a3 = 8, i3 |= 7;
                    break;
                  case d:
                    a3 = 8, i3 |= 1;
                    break;
                  case h:
                    return (e3 = po(12, n3, t4, 8 | i3)).elementType = h, e3.type = h, e3.expirationTime = o3, e3;
                  case g:
                    return (e3 = po(13, n3, t4, i3)).type = g, e3.elementType = g, e3.expirationTime = o3, e3;
                  case x:
                    return (e3 = po(19, n3, t4, i3)).elementType = x, e3.expirationTime = o3, e3;
                  default:
                    if ("object" == typeof e3 && null !== e3)
                      switch (e3.$$typeof) {
                        case m:
                          a3 = 10;
                          break e;
                        case v:
                          a3 = 9;
                          break e;
                        case y:
                          a3 = 11;
                          break e;
                        case w:
                          a3 = 14;
                          break e;
                        case E:
                          a3 = 16, r3 = null;
                          break e;
                      }
                    throw Error(l(130, null == e3 ? e3 : typeof e3, ""));
                }
            return (t4 = po(a3, n3, t4, i3)).elementType = e3, t4.type = r3, t4.expirationTime = o3, t4;
          }
          function bo(e3, t4, n3, r3) {
            return (e3 = po(7, e3, r3, t4)).expirationTime = n3, e3;
          }
          function yo(e3, t4, n3) {
            return (e3 = po(6, e3, null, t4)).expirationTime = n3, e3;
          }
          function go(e3, t4, n3) {
            return (t4 = po(4, null !== e3.children ? e3.children : [], e3.key, t4)).expirationTime = n3, t4.stateNode = { containerInfo: e3.containerInfo, pendingChildren: null, implementation: e3.implementation }, t4;
          }
          function xo(e3, t4, n3) {
            this.tag = t4, this.current = null, this.containerInfo = e3, this.pingCache = this.pendingChildren = null, this.finishedExpirationTime = 0, this.finishedWork = null, this.timeoutHandle = q, this.pendingContext = this.context = null, this.hydrate = n3, this.callbackNode = null, this.callbackPriority = 90, this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
          }
          function wo(e3, t4) {
            var n3 = e3.firstSuspendedTime;
            return e3 = e3.lastSuspendedTime, 0 !== n3 && n3 >= t4 && e3 <= t4;
          }
          function Eo(e3, t4) {
            var n3 = e3.firstSuspendedTime, r3 = e3.lastSuspendedTime;
            n3 < t4 && (e3.firstSuspendedTime = t4), (r3 > t4 || 0 === n3) && (e3.lastSuspendedTime = t4), t4 <= e3.lastPingedTime && (e3.lastPingedTime = 0), t4 <= e3.lastExpiredTime && (e3.lastExpiredTime = 0);
          }
          function Oo(e3, t4) {
            t4 > e3.firstPendingTime && (e3.firstPendingTime = t4);
            var n3 = e3.firstSuspendedTime;
            0 !== n3 && (t4 >= n3 ? e3.firstSuspendedTime = e3.lastSuspendedTime = e3.nextKnownPendingLevel = 0 : t4 >= e3.lastSuspendedTime && (e3.lastSuspendedTime = t4 + 1), t4 > e3.nextKnownPendingLevel && (e3.nextKnownPendingLevel = t4));
          }
          function To(e3, t4) {
            var n3 = e3.lastExpiredTime;
            (0 === n3 || n3 > t4) && (e3.lastExpiredTime = t4);
          }
          function So(e3) {
            var t4 = e3._reactInternalFiber;
            if (void 0 === t4) {
              if ("function" == typeof e3.render)
                throw Error(l(188));
              throw Error(l(268, Object.keys(e3)));
            }
            return null === (e3 = P(t4)) ? null : e3.stateNode;
          }
          function _o(e3, t4) {
            null !== (e3 = e3.memoizedState) && null !== e3.dehydrated && e3.retryTime < t4 && (e3.retryTime = t4);
          }
          function ko(e3, t4) {
            _o(e3, t4), (e3 = e3.alternate) && _o(e3, t4);
          }
          var jo = { createContainer: function(e3, t4, n3) {
            return e3 = new xo(e3, t4, n3), t4 = po(3, null, null, 2 === t4 ? 7 : 1 === t4 ? 3 : 0), e3.current = t4, t4.stateNode = e3;
          }, updateContainer: function(e3, t4, n3, r3) {
            var i3 = t4.current, o3 = Ui(), a3 = Qt.suspense;
            o3 = Fi(o3, i3, a3);
            e:
              if (n3) {
                t: {
                  if (_(n3 = n3._reactInternalFiber) !== n3 || 1 !== n3.tag)
                    throw Error(l(170));
                  var u2 = n3;
                  do {
                    switch (u2.tag) {
                      case 3:
                        u2 = u2.stateNode.context;
                        break t;
                      case 1:
                        if (Ue(u2.type)) {
                          u2 = u2.stateNode.__reactInternalMemoizedMergedChildContext;
                          break t;
                        }
                    }
                    u2 = u2.return;
                  } while (null !== u2);
                  throw Error(l(171));
                }
                if (1 === n3.tag) {
                  var c2 = n3.type;
                  if (Ue(c2)) {
                    n3 = Be(n3, c2, u2);
                    break e;
                  }
                }
                n3 = u2;
              } else
                n3 = Me;
            return null === t4.context ? t4.context = n3 : t4.pendingContext = n3, (t4 = Rt(o3, a3)).payload = { element: e3 }, null !== (r3 = void 0 === r3 ? null : r3) && (t4.callback = r3), Ut(i3, t4), Di(i3, o3), o3;
          }, batchedEventUpdates: function(e3, t4) {
            var n3 = hi;
            hi |= 2;
            try {
              return e3(t4);
            } finally {
              (hi = n3) === ii && mt();
            }
          }, batchedUpdates: function(e3, t4) {
            var n3 = hi;
            hi |= 1;
            try {
              return e3(t4);
            } finally {
              (hi = n3) === ii && mt();
            }
          }, unbatchedUpdates: function(e3, t4) {
            var n3 = hi;
            hi &= -2, hi |= oi;
            try {
              return e3(t4);
            } finally {
              (hi = n3) === ii && mt();
            }
          }, deferredUpdates: function(e3) {
            return pt(97, e3);
          }, syncUpdates: function(e3, t4, n3, r3) {
            return pt(99, e3.bind(null, t4, n3, r3));
          }, discreteUpdates: function(e3, t4, n3, r3) {
            var i3 = hi;
            hi |= 4;
            try {
              return pt(98, e3.bind(null, t4, n3, r3));
            } finally {
              (hi = i3) === ii && mt();
            }
          }, flushDiscreteUpdates: function() {
            (hi & (1 | ai | li)) === ii && (function() {
              if (null !== Ni) {
                var e3 = Ni;
                Ni = null, e3.forEach(function(e4, t4) {
                  To(t4, e4), Hi(t4);
                }), mt();
              }
            }(), io());
          }, flushControlled: function(e3) {
            var t4 = hi;
            hi |= 1;
            try {
              pt(99, e3);
            } finally {
              (hi = t4) === ii && mt();
            }
          }, flushSync: Qi, flushPassiveEffects: io, IsThisRendererActing: { current: false }, getPublicRootInstance: function(e3) {
            if (!(e3 = e3.current).child)
              return null;
            switch (e3.child.tag) {
              case 5:
                return C(e3.child.stateNode);
              default:
                return e3.child.stateNode;
            }
          }, attemptSynchronousHydration: function(e3) {
            switch (e3.tag) {
              case 3:
                var t4 = e3.stateNode;
                t4.hydrate && function(e4, t5) {
                  To(e4, t5), Hi(e4), (hi & (ai | li)) === ii && mt();
                }(t4, t4.firstPendingTime);
                break;
              case 13:
                Qi(function() {
                  return Di(e3, 1073741823);
                }), t4 = yt(Ui(), 150, 100), ko(e3, t4);
            }
          }, attemptUserBlockingHydration: function(e3) {
            if (13 === e3.tag) {
              var t4 = yt(Ui(), 150, 100);
              Di(e3, t4), ko(e3, t4);
            }
          }, attemptContinuousHydration: function(e3) {
            if (13 === e3.tag) {
              Ui();
              var t4 = bt++;
              Di(e3, t4), ko(e3, t4);
            }
          }, attemptHydrationAtCurrentPriority: function(e3) {
            if (13 === e3.tag) {
              var t4 = Ui();
              Di(e3, t4 = Fi(t4, e3, null)), ko(e3, t4);
            }
          }, findHostInstance: So, findHostInstanceWithWarning: function(e3) {
            return So(e3);
          }, findHostInstanceWithNoPortals: function(e3) {
            return null === (e3 = function(e4) {
              if (!(e4 = j(e4)))
                return null;
              for (var t4 = e4; ; ) {
                if (5 === t4.tag || 6 === t4.tag)
                  return t4;
                if (t4.child && 4 !== t4.tag)
                  t4.child.return = t4, t4 = t4.child;
                else {
                  if (t4 === e4)
                    break;
                  for (; !t4.sibling; ) {
                    if (!t4.return || t4.return === e4)
                      return null;
                    t4 = t4.return;
                  }
                  t4.sibling.return = t4.return, t4 = t4.sibling;
                }
              }
              return null;
            }(e3)) ? null : 20 === e3.tag ? e3.stateNode.instance : e3.stateNode;
          }, shouldSuspend: function() {
            return false;
          }, injectIntoDevTools: function(e3) {
            var t4 = e3.findFiberByHostInstance;
            return function(e4) {
              if ("undefined" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
                return false;
              var t5 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
              if (t5.isDisabled || !t5.supportsFiber)
                return true;
              try {
                var n3 = t5.inject(e4);
                co = function(e5) {
                  try {
                    t5.onCommitFiberRoot(n3, e5, void 0, 64 == (64 & e5.current.effectTag));
                  } catch (e6) {
                  }
                }, so = function(e5) {
                  try {
                    t5.onCommitFiberUnmount(n3, e5);
                  } catch (e6) {
                  }
                };
              } catch (e5) {
              }
              return true;
            }(i2({}, e3, { overrideHookState: null, overrideProps: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: u.ReactCurrentDispatcher, findHostInstanceByFiber: function(e4) {
              return null === (e4 = P(e4)) ? null : e4.stateNode;
            }, findFiberByHostInstance: function(e4) {
              return t4 ? t4(e4) : null;
            }, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null }));
          } };
          e2.exports = jo.default || jo;
          var Po = e2.exports;
          return e2.exports = t3, Po;
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = Object.getOwnPropertySymbols, i2 = Object.prototype.hasOwnProperty, o2 = Object.prototype.propertyIsEnumerable;
        function a2(e3) {
          if (null == e3)
            throw new TypeError("Object.assign cannot be called with null or undefined");
          return Object(e3);
        }
        e2.exports = function() {
          try {
            if (!Object.assign)
              return false;
            var e3 = new String("abc");
            if (e3[5] = "de", "5" === Object.getOwnPropertyNames(e3)[0])
              return false;
            for (var t3 = {}, n3 = 0; n3 < 10; n3++)
              t3["_" + String.fromCharCode(n3)] = n3;
            if ("0123456789" !== Object.getOwnPropertyNames(t3).map(function(e4) {
              return t3[e4];
            }).join(""))
              return false;
            var r3 = {};
            return "abcdefghijklmnopqrst".split("").forEach(function(e4) {
              r3[e4] = e4;
            }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, r3)).join("");
          } catch (e4) {
            return false;
          }
        }() ? Object.assign : function(e3, t3) {
          for (var n3, l, u = a2(e3), c = 1; c < arguments.length; c++) {
            for (var s in n3 = Object(arguments[c]))
              i2.call(n3, s) && (u[s] = n3[s]);
            if (r2) {
              l = r2(n3);
              for (var f = 0; f < l.length; f++)
                o2.call(n3, l[f]) && (u[l[f]] = n3[l[f]]);
            }
          }
          return u;
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2, i2, o2, a2, l;
        if (Object.defineProperty(t2, "__esModule", { value: true }), "undefined" == typeof window || "function" != typeof MessageChannel) {
          var u = null, c = null, s = function() {
            if (null !== u)
              try {
                var e3 = t2.unstable_now();
                u(true, e3), u = null;
              } catch (e4) {
                throw setTimeout(s, 0), e4;
              }
          }, f = Date.now();
          t2.unstable_now = function() {
            return Date.now() - f;
          }, r2 = function(e3) {
            null !== u ? setTimeout(r2, 0, e3) : (u = e3, setTimeout(s, 0));
          }, i2 = function(e3, t3) {
            c = setTimeout(e3, t3);
          }, o2 = function() {
            clearTimeout(c);
          }, a2 = function() {
            return false;
          }, l = t2.unstable_forceFrameRate = function() {
          };
        } else {
          var p = window.performance, d = window.Date, h = window.setTimeout, m = window.clearTimeout, v = window.requestAnimationFrame, b = window.cancelAnimationFrame;
          if ("undefined" != typeof console && ("function" != typeof v && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"), "function" != typeof b && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")), "object" == typeof p && "function" == typeof p.now)
            t2.unstable_now = function() {
              return p.now();
            };
          else {
            var y = d.now();
            t2.unstable_now = function() {
              return d.now() - y;
            };
          }
          var g = false, x = null, w = -1, E = 5, O = 0;
          a2 = function() {
            return t2.unstable_now() >= O;
          }, l = function() {
          }, t2.unstable_forceFrameRate = function(e3) {
            0 > e3 || 125 < e3 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : E = 0 < e3 ? Math.floor(1e3 / e3) : 33.33;
          };
          var T = new MessageChannel(), S = T.port2;
          T.port1.onmessage = function() {
            if (null !== x) {
              var e3 = t2.unstable_now();
              O = e3 + E;
              try {
                x(true, e3) ? S.postMessage(null) : (g = false, x = null);
              } catch (e4) {
                throw S.postMessage(null), e4;
              }
            } else
              g = false;
          }, r2 = function(e3) {
            x = e3, g || (g = true, S.postMessage(null));
          }, i2 = function(e3, n3) {
            w = h(function() {
              e3(t2.unstable_now());
            }, n3);
          }, o2 = function() {
            m(w), w = -1;
          };
        }
        function _(e3, t3) {
          var n3 = e3.length;
          e3.push(t3);
          e:
            for (; ; ) {
              var r3 = Math.floor((n3 - 1) / 2), i3 = e3[r3];
              if (!(void 0 !== i3 && 0 < P(i3, t3)))
                break e;
              e3[r3] = t3, e3[n3] = i3, n3 = r3;
            }
        }
        function k(e3) {
          return void 0 === (e3 = e3[0]) ? null : e3;
        }
        function j(e3) {
          var t3 = e3[0];
          if (void 0 !== t3) {
            var n3 = e3.pop();
            if (n3 !== t3) {
              e3[0] = n3;
              e:
                for (var r3 = 0, i3 = e3.length; r3 < i3; ) {
                  var o3 = 2 * (r3 + 1) - 1, a3 = e3[o3], l2 = o3 + 1, u2 = e3[l2];
                  if (void 0 !== a3 && 0 > P(a3, n3))
                    void 0 !== u2 && 0 > P(u2, a3) ? (e3[r3] = u2, e3[l2] = n3, r3 = l2) : (e3[r3] = a3, e3[o3] = n3, r3 = o3);
                  else {
                    if (!(void 0 !== u2 && 0 > P(u2, n3)))
                      break e;
                    e3[r3] = u2, e3[l2] = n3, r3 = l2;
                  }
                }
            }
            return t3;
          }
          return null;
        }
        function P(e3, t3) {
          var n3 = e3.sortIndex - t3.sortIndex;
          return 0 !== n3 ? n3 : e3.id - t3.id;
        }
        var C = [], z = [], I = 1, M = null, N = 3, L = false, R = false, A = false;
        function U(e3) {
          for (var t3 = k(z); null !== t3; ) {
            if (null === t3.callback)
              j(z);
            else {
              if (!(t3.startTime <= e3))
                break;
              j(z), t3.sortIndex = t3.expirationTime, _(C, t3);
            }
            t3 = k(z);
          }
        }
        function F(e3) {
          if (A = false, U(e3), !R)
            if (null !== k(C))
              R = true, r2(D);
            else {
              var t3 = k(z);
              null !== t3 && i2(F, t3.startTime - e3);
            }
        }
        function D(e3, n3) {
          R = false, A && (A = false, o2()), L = true;
          var r3 = N;
          try {
            for (U(n3), M = k(C); null !== M && (!(M.expirationTime > n3) || e3 && !a2()); ) {
              var l2 = M.callback;
              if (null !== l2) {
                M.callback = null, N = M.priorityLevel;
                var u2 = l2(M.expirationTime <= n3);
                n3 = t2.unstable_now(), "function" == typeof u2 ? M.callback = u2 : M === k(C) && j(C), U(n3);
              } else
                j(C);
              M = k(C);
            }
            if (null !== M)
              var c2 = true;
            else {
              var s2 = k(z);
              null !== s2 && i2(F, s2.startTime - n3), c2 = false;
            }
            return c2;
          } finally {
            M = null, N = r3, L = false;
          }
        }
        function W(e3) {
          switch (e3) {
            case 1:
              return -1;
            case 2:
              return 250;
            case 5:
              return 1073741823;
            case 4:
              return 1e4;
            default:
              return 5e3;
          }
        }
        var B = l;
        t2.unstable_ImmediatePriority = 1, t2.unstable_UserBlockingPriority = 2, t2.unstable_NormalPriority = 3, t2.unstable_IdlePriority = 5, t2.unstable_LowPriority = 4, t2.unstable_runWithPriority = function(e3, t3) {
          switch (e3) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              e3 = 3;
          }
          var n3 = N;
          N = e3;
          try {
            return t3();
          } finally {
            N = n3;
          }
        }, t2.unstable_next = function(e3) {
          switch (N) {
            case 1:
            case 2:
            case 3:
              var t3 = 3;
              break;
            default:
              t3 = N;
          }
          var n3 = N;
          N = t3;
          try {
            return e3();
          } finally {
            N = n3;
          }
        }, t2.unstable_scheduleCallback = function(e3, n3, a3) {
          var l2 = t2.unstable_now();
          if ("object" == typeof a3 && null !== a3) {
            var u2 = a3.delay;
            u2 = "number" == typeof u2 && 0 < u2 ? l2 + u2 : l2, a3 = "number" == typeof a3.timeout ? a3.timeout : W(e3);
          } else
            a3 = W(e3), u2 = l2;
          return e3 = { id: I++, callback: n3, priorityLevel: e3, startTime: u2, expirationTime: a3 = u2 + a3, sortIndex: -1 }, u2 > l2 ? (e3.sortIndex = u2, _(z, e3), null === k(C) && e3 === k(z) && (A ? o2() : A = true, i2(F, u2 - l2))) : (e3.sortIndex = a3, _(C, e3), R || L || (R = true, r2(D))), e3;
        }, t2.unstable_cancelCallback = function(e3) {
          e3.callback = null;
        }, t2.unstable_wrapCallback = function(e3) {
          var t3 = N;
          return function() {
            var n3 = N;
            N = t3;
            try {
              return e3.apply(this, arguments);
            } finally {
              N = n3;
            }
          };
        }, t2.unstable_getCurrentPriorityLevel = function() {
          return N;
        }, t2.unstable_shouldYield = function() {
          var e3 = t2.unstable_now();
          U(e3);
          var n3 = k(C);
          return n3 !== M && null !== M && null !== n3 && null !== n3.callback && n3.startTime <= e3 && n3.expirationTime < M.expirationTime || a2();
        }, t2.unstable_requestPaint = B, t2.unstable_continueExecution = function() {
          R || L || (R = true, r2(D));
        }, t2.unstable_pauseExecution = function() {
        }, t2.unstable_getFirstCallbackNode = function() {
          return k(C);
        }, t2.unstable_Profiling = null;
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = Array.isArray, i2 = Object.keys, o2 = Object.prototype.hasOwnProperty;
        e2.exports = function e3(t3, n3) {
          if (t3 === n3)
            return true;
          if (t3 && n3 && "object" == typeof t3 && "object" == typeof n3) {
            var a2, l, u, c = r2(t3), s = r2(n3);
            if (c && s) {
              if ((l = t3.length) != n3.length)
                return false;
              for (a2 = l; 0 != a2--; )
                if (!e3(t3[a2], n3[a2]))
                  return false;
              return true;
            }
            if (c != s)
              return false;
            var f = t3 instanceof Date, p = n3 instanceof Date;
            if (f != p)
              return false;
            if (f && p)
              return t3.getTime() == n3.getTime();
            var d = t3 instanceof RegExp, h = n3 instanceof RegExp;
            if (d != h)
              return false;
            if (d && h)
              return t3.toString() == n3.toString();
            var m = i2(t3);
            if ((l = m.length) !== i2(n3).length)
              return false;
            for (a2 = l; 0 != a2--; )
              if (!o2.call(n3, m[a2]))
                return false;
            for (a2 = l; 0 != a2--; )
              if (!e3(t3[u = m[a2]], n3[u]))
                return false;
            return true;
          }
          return t3 != t3 && n3 != n3;
        };
      }, function(e2, t2, n2) {
        "use strict";
        var r2 = n2(117);
        function i2() {
        }
        function o2() {
        }
        o2.resetWarningCache = i2, e2.exports = function() {
          function e3(e4, t4, n4, i3, o3, a2) {
            if (a2 !== r2) {
              var l = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
              throw l.name = "Invariant Violation", l;
            }
          }
          function t3() {
            return e3;
          }
          e3.isRequired = e3;
          var n3 = { array: e3, bool: e3, func: e3, number: e3, object: e3, string: e3, symbol: e3, any: e3, arrayOf: t3, element: e3, elementType: e3, instanceOf: t3, node: e3, objectOf: t3, oneOf: t3, oneOfType: t3, shape: t3, exact: t3, checkPropTypes: o2, resetWarningCache: i2 };
          return n3.PropTypes = n3, n3;
        };
      }, function(e2, t2, n2) {
        "use strict";
        e2.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      }, function(e2, t2, n2) {
        "use strict";
        n2.r(t2);
        n2(21), n2(40), n2(41), n2(62), n2(64), n2(67), n2(31), n2(71), n2(44), n2(103), n2(72), n2(73), n2(74), n2(75), n2(45), n2(46), n2(47), n2(76), n2(48);
        var r2 = n2(2), i2 = n2(0), o2 = n2.n(i2);
        function a2(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = {}, o3 = Object.keys(e3);
          for (r3 = 0; r3 < o3.length; r3++)
            n3 = o3[r3], t3.indexOf(n3) >= 0 || (i3[n3] = e3[n3]);
          return i3;
        }
        function l() {
          return (l = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        var u = n2(83), c = n2.n(u), s = n2(20), f = n2(84), p = (n2(85), n2(86));
        function d(e3) {
          var t3 = function(e4, t4) {
            if ("object" != typeof e4 || null === e4)
              return e4;
            var n3 = e4[Symbol.toPrimitive];
            if (void 0 !== n3) {
              var r3 = n3.call(e4, t4 || "default");
              if ("object" != typeof r3)
                return r3;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return ("string" === t4 ? String : Number)(e4);
          }(e3, "string");
          return "symbol" == typeof t3 ? t3 : String(t3);
        }
        const h = /* @__PURE__ */ new Map(), m = {}, v = { obj: (e3) => e3 === Object(e3), str: (e3) => "string" == typeof e3, num: (e3) => "number" == typeof e3, und: (e3) => void 0 === e3, arr: (e3) => Array.isArray(e3), equ(e3, t3) {
          if (typeof e3 != typeof t3)
            return false;
          if (v.str(e3) || v.num(e3) || v.obj(e3))
            return e3 === t3;
          if (v.arr(e3) && e3 == t3)
            return true;
          let n3;
          for (n3 in e3)
            if (!(n3 in t3))
              return false;
          for (n3 in t3)
            if (e3[n3] !== t3[n3])
              return false;
          return !v.und(n3) || e3 === t3;
        } };
        let b = [];
        function y(e3, t3, n3 = 0, r3 = false) {
          r3 && b.forEach((e4) => e4(t3) && n3++);
          const i3 = e3.current.clock.getDelta();
          return e3.current.subscribers.forEach((t4) => t4.ref.current(e3.current, i3)), e3.current.frames = Math.max(0, e3.current.frames - 1), n3 += e3.current.invalidateFrameloop ? e3.current.frames : 1, e3.current.manual || e3.current.gl.render(e3.current.scene, e3.current.camera), n3;
        }
        let g = false;
        function x(e3) {
          g = true;
          let t3 = 0;
          if (b.forEach((n3) => n3(e3) && t3++), h.forEach((n3) => {
            const r3 = n3.containerInfo.__state;
            r3.current.active && r3.current.ready && (!r3.current.invalidateFrameloop || r3.current.frames > 0) && (t3 = y(r3, e3, t3));
          }), 0 !== t3)
            return requestAnimationFrame(x);
          g = false;
        }
        function w(e3 = true, t3 = 2) {
          if (true === e3)
            h.forEach((e4) => e4.containerInfo.__state.current.frames = t3);
          else if (e3 && e3.current) {
            if (e3.current.vr)
              return;
            e3.current.frames = t3;
          }
          g || (g = true, requestAnimationFrame(x));
        }
        let E = {};
        function O(e3, t3, n3 = {}, i3 = false) {
          const o3 = e3.__container, u2 = Object.keys(t3).filter((e4) => v.equ(t3[e4], n3[e4])), c2 = Object.keys(t3).filter((e4) => "function" == typeof t3[e4] && e4.startsWith("on")), s2 = i3 ? Object.keys(n3).filter((e4) => void 0 === t3[e4]) : [], f2 = [...u2, "children", "key", "ref"].reduce((e4, t4) => {
            return a2(e4, [t4].map(d));
          }, t3);
          if (s2.forEach((e4) => f2[e4] = void 0), Object.keys(f2).length > 0) {
            if (Object.entries(f2).forEach(([t4, n4]) => {
              if (!c2.includes(t4)) {
                let i4 = e3, o4 = i4[t4];
                if (t4.includes("-")) {
                  const n5 = t4.split("-");
                  if (!(o4 = n5.reduce((e4, t5) => e4[t5], e3)) || !o4.set) {
                    const [r3, ...o5] = n5.reverse();
                    i4 = o5.reverse().reduce((e4, t5) => e4[t5], e3), t4 = r3;
                  }
                }
                o4 && o4.set && (o4.copy || o4 instanceof r2.Layers) ? o4.copy && o4.constructor.name === n4.constructor.name ? o4.copy(n4) : Array.isArray(n4) ? o4.set(...n4) : o4.set(n4) : i4[t4] = n4, T(e3);
              }
            }), i3 && o3 && e3.raycast && e3.__handlers) {
              e3.__handlers = void 0;
              const t4 = o3.__interaction.indexOf(e3);
              t4 > -1 && o3.__interaction.splice(t4, 1);
            }
            c2.length && (o3 && e3.raycast && (1 === c2.length && "onUpdate" === c2[0] || o3.__interaction.push(e3)), e3.__handlers = c2.reduce((e4, n4) => l({}, e4, { [n4.charAt(2).toLowerCase() + n4.substr(3)]: t3[n4] }), {})), e3.parent && S(e3);
          }
        }
        function T(e3) {
          e3.__container && e3.__container.__state && w(e3.__container.__state);
        }
        function S(e3) {
          e3.__handlers && e3.__handlers.update && e3.__handlers.update(e3);
        }
        function _(e3, t3, n3, i3, o3) {
          let l2, { args: u2 = [] } = t3, c2 = a2(t3, ["args"]), s2 = "" + e3[0].toUpperCase() + e3.slice(1);
          if ("primitive" === e3)
            (l2 = c2.object).__instance = true;
          else {
            const e4 = E[s2] || r2[s2];
            l2 = v.arr(u2) ? new e4(...u2) : new e4(u2);
          }
          for (; n3.__container; )
            n3 = n3.__container;
          if (!h.has(n3)) {
            const e4 = (t4) => t4.return ? e4(t4.return) : t4.stateNode && t4.stateNode.containerInfo;
            n3 = e4(o3);
          }
          return l2.__objects = [], l2.__container = n3, O(l2, c2, {}), l2;
        }
        function k(e3, t3) {
          t3 && (t3.isObject3D ? e3.add(t3) : (e3.__objects.push(t3), t3.parent = e3, t3.attach ? e3[t3.attach] = t3 : t3.attachArray ? (v.arr(e3[t3.attachArray]) || (e3[t3.attachArray] = []), e3[t3.attachArray].push(t3)) : t3.attachObject && (v.obj(e3[t3.attachObject[0]]) || (e3[t3.attachObject[0]] = {}), e3[t3.attachObject[0]][t3.attachObject[1]] = t3)), S(t3), T(t3));
        }
        function j(e3, t3, n3) {
          if (t3) {
            if (t3.isObject3D) {
              t3.parent = e3, t3.dispatchEvent({ type: "added" });
              const r3 = e3.children.indexOf(n3);
              e3.children = [...e3.children.slice(0, r3), t3, ...e3.children.slice(r3)], S(t3);
            } else
              k(e3, t3);
            T(t3);
          }
        }
        function P(e3, t3, n3 = false) {
          if (e3) {
            (n3 ? [...e3] : e3).forEach((e4) => C(t3, e4));
          }
        }
        function C(e3, t3) {
          t3 && (t3.isObject3D ? e3.remove(t3) : (t3.parent = null, e3.__objects = e3.__objects.filter((e4) => e4 !== t3), t3.attach ? e3[t3.attach] = null : t3.attachArray ? e3[t3.attachArray] = e3[t3.attachArray].filter((e4) => e4 !== t3) : t3.attachObject && delete e3[t3.attachObject[0]][t3.attachObject[1]]), T(t3), Object(s.unstable_runWithPriority)(s.unstable_IdlePriority, () => {
            t3.__container && (t3.__container.__interaction = t3.__container.__interaction.filter((e4) => e4 !== t3)), P(t3.__objects, t3), P(t3.children, t3, true), t3.dispose && t3.dispose(), delete t3.__container, delete t3.__objects;
          }));
        }
        function z(e3, t3, n3, r3) {
          const i3 = e3.parent, o3 = _(t3, n3, e3.__container, 0, r3);
          C(i3, e3), k(i3, o3), [r3, r3.alternate].forEach((e4) => {
            null !== e4 && (e4.stateNode = o3, e4.ref && ("function" == typeof e4.ref ? e4.ref(o3) : e4.ref.current = o3));
          });
        }
        const I = c()({ now: s.unstable_now, createInstance: _, removeChild: C, appendChild: k, insertBefore: j, supportsMutation: true, isPrimaryRenderer: false, scheduleTimeout: "function" == typeof setTimeout ? setTimeout : void 0, cancelTimeout: "function" == typeof clearTimeout ? clearTimeout : void 0, appendInitialChild: k, appendChildToContainer: k, removeChildFromContainer: C, insertInContainerBefore: j, commitUpdate(e3, t3, n3, r3, i3, o3) {
          if (e3.__instance && i3.object && i3.object !== e3)
            z(e3, n3, i3, o3);
          else {
            const { args: t4 = [] } = i3, l2 = a2(i3, ["args"]), { args: u2 = [] } = r3, c2 = a2(r3, ["args"]);
            t4.some((e4, t5) => v.obj(e4) ? Object.entries(e4).some(([e5, n4]) => n4 !== u2[t5][e5]) : e4 !== u2[t5]) ? z(e3, n3, i3, o3) : O(e3, l2, c2, true);
          }
        }, hideInstance(e3) {
          e3.isObject3D && (e3.visible = false, T(e3));
        }, unhideInstance(e3, t3) {
          (e3.isObject3D && null == t3.visible || t3.visible) && (e3.visible = true, T(e3));
        }, getPublicInstance: (e3) => e3, getRootHostContext: () => m, getChildHostContext: () => m, createTextInstance() {
        }, finalizeInitialChildren: () => false, prepareUpdate: () => m, shouldDeprioritizeSubtree: () => false, prepareForCommit() {
        }, resetAfterCommit() {
        }, shouldSetTextContent: () => false });
        "function" == typeof Symbol && Symbol.for && Symbol.for("react.portal");
        function M(e3) {
          return e3.isOrthographicCamera;
        }
        function N(e3) {
          return e3.object.uuid + "/" + e3.index;
        }
        I.injectIntoDevTools({ bundleType: 0, version: "3.0.6", rendererPackageName: "react-three-fiber", findHostInstanceByFiber: I.findHostInstance });
        const L = Object(i2.createContext)({}), R = (e3) => {
          const { children: t3, gl: n3, camera: o3, orthographic: u2, raycaster: c2, size: s2, rayBounds: p2, pixelRatio: d2, vr: m2 = false, shadowMap: v2 = false, invalidateFrameloop: b3 = false, updateDefaultCamera: g2 = true, noEvents: x2 = false, onCreated: E2, onPointerMissed: T2 } = e3, [S2, _2] = Object(i2.useState)(false), [k2] = Object(i2.useState)(() => new r2.Vector2()), [j2] = Object(i2.useState)(() => {
            const e4 = new r2.Raycaster();
            if (c2) {
              O(e4, a2(c2, ["filter"]), {});
            }
            return e4;
          }), [P2] = Object(i2.useState)(() => {
            const e4 = new r2.Scene();
            return e4.__interaction = [], e4.__objects = [], e4;
          }), [C2, z2] = Object(i2.useState)(() => {
            const e4 = u2 ? new r2.OrthographicCamera(0, 0, 0, 0, 0.1, 1e3) : new r2.PerspectiveCamera(75, 0, 0.1, 1e3);
            return e4.position.z = 5, o3 && O(e4, o3, {}), e4;
          }), [R2] = Object(i2.useState)(() => new r2.Clock()), A2 = Object(i2.useRef)({ ready: false, active: true, manual: 0, vr: m2, noEvents: x2, invalidateFrameloop: false, frames: 0, aspect: 0, subscribers: [], camera: C2, scene: P2, raycaster: j2, mouse: k2, clock: R2, gl: n3, size: s2, viewport: { width: 0, height: 0, factor: 0 }, initialClick: [0, 0], initialHits: [], pointer: new f.TinyEmitter(), captured: void 0, subscribe: (e4, t4 = 0) => (t4 && A2.current.manual++, A2.current.subscribers.push({ ref: e4, priority: t4 }), A2.current.subscribers = A2.current.subscribers.sort((e5, t5) => e5.priority - t5.priority), () => {
            t4 && A2.current.manual--, A2.current.subscribers = A2.current.subscribers.filter((t5) => t5.ref !== e4);
          }), setDefaultCamera: (e4) => z2(e4), invalidate: () => w(A2), intersect: (e4) => V2(e4 || {}) });
          Object(i2.useLayoutEffect)(() => {
            A2.current.ready = S2, A2.current.size = s2, A2.current.camera = C2, A2.current.invalidateFrameloop = b3, A2.current.vr = m2, A2.current.gl = n3, A2.current.noEvents = x2;
          }, [b3, m2, x2, S2, s2, C2, n3]), Object(i2.useLayoutEffect)(() => void (d2 && n3.setPixelRatio(d2)), [d2]), Object(i2.useLayoutEffect)(() => {
            v2 && (n3.shadowMap.enabled = true, "object" == typeof v2 ? Object.assign(n3, v2) : n3.shadowMap.type = r2.PCFSoftShadowMap);
          }, [v2]), Object(i2.useLayoutEffect)(() => {
            if (A2.current.aspect = s2.width / s2.height, M(C2))
              A2.current.viewport = { width: s2.width, height: s2.height, factor: 1 };
            else {
              const e4 = new r2.Vector3(0, 0, 0), t4 = C2.position.distanceTo(e4), n4 = r2.Math.degToRad(C2.fov), i3 = 2 * Math.tan(n4 / 2) * t4, o4 = i3 * A2.current.aspect;
              A2.current.viewport = { width: o4, height: i3, factor: s2.width / o4 };
            }
            g2 && (M(C2) ? (C2.left = s2.width / -2, C2.right = s2.width / 2, C2.top = s2.height / 2, C2.bottom = s2.height / -2) : C2.aspect = A2.current.aspect, C2.updateProjectionMatrix(), C2.updateMatrixWorld()), n3.setSize(s2.width, s2.height), S2 && w(A2);
          }, [C2, s2, g2]);
          const U2 = Object(i2.useCallback)(() => {
            const e4 = () => _2(true);
            return Object(i2.useEffect)(() => {
              const t4 = E2 && E2(A2.current);
              t4 && t4.then ? t4.then(e4) : e4();
            }, []), null;
          }, []), F2 = Object(i2.useRef)();
          Object(i2.useLayoutEffect)(() => {
            const e4 = a2(A2.current, ["ready", "manual", "vr", "noEvents", "invalidateFrameloop", "frames", "subscribers", "captured", "initialClick", "initialHits"]);
            F2.current = e4;
          }, [s2, C2]), Object(i2.useLayoutEffect)(() => {
            !function(e4, t4, n4) {
              let r3 = h.get(t4);
              if (!r3) {
                t4.__state = n4;
                let e5 = r3 = I.createContainer(t4, false, false);
                h.set(t4, e5);
              }
              I.updateContainer(e4, r3, null, () => void 0), I.getPublicRootInstance(r3);
            }(Object(i2.createElement)(L.Provider, { value: F2.current }, "function" == typeof t3 ? t3(A2.current) : t3, Object(i2.createElement)(U2, null)), P2, A2);
          }, [S2, t3, F2.current]), Object(i2.useLayoutEffect)(() => {
            S2 && (A2.current.vr ? n3.vr && n3.setAnimationLoop ? (n3.vr.enabled = true, n3.setAnimationLoop((e4) => y(A2, e4, 0, true))) : console.warn("the gl instance does not support VR!") : w(A2));
          }, [S2]), Object(i2.useEffect)(() => () => {
            A2.current.gl && (A2.current.gl.forceContextLoss(), A2.current.gl.dispose(), A2.current.gl = void 0, function(e4) {
              const t4 = h.get(e4);
              t4 && I.updateContainer(null, t4, null, () => void h.delete(e4));
            }(A2.current.scene), A2.current.active = false);
          }, []);
          const D2 = Object(i2.useCallback)((e4) => {
            if (void 0 !== e4.clientX) {
              const { left: t4, right: n4, top: r3, bottom: i3 } = p2.current;
              k2.set((e4.clientX - t4) / (n4 - t4) * 2 - 1, -(e4.clientY - r3) / (i3 - r3) * 2 + 1), j2.setFromCamera(k2, A2.current.camera);
            }
          }, []), W2 = Object(i2.useCallback)((e4, t4 = true) => {
            if (A2.current.noEvents)
              return [];
            t4 && D2(e4);
            const n4 = /* @__PURE__ */ new Set(), r3 = [];
            let i3 = j2.intersectObjects(A2.current.scene.__interaction, true).filter((e5) => {
              const t5 = N(e5);
              return !n4.has(t5) && (n4.add(t5), true);
            });
            c2 && c2.filter && F2.current && (i3 = c2.filter(i3, F2.current));
            for (let e5 of i3) {
              let t5 = e5.object;
              for (; t5; ) {
                t5.__handlers && r3.push(l({}, e5, { eventObject: t5 })), t5 = t5.parent;
              }
            }
            return r3;
          }, []), B2 = Object(i2.useCallback)((e4) => {
            let t4 = e4.clientX - A2.current.initialClick[0], n4 = e4.clientY - A2.current.initialClick[1];
            return Math.round(Math.sqrt(t4 * t4 + n4 * n4));
          }, []), H2 = Object(i2.useCallback)((e4, t4) => {
            D2(e4);
            const n4 = A2.current.captured && "click" !== e4.type && "wheel" !== e4.type ? A2.current.captured : W2(e4, false);
            if (n4.length) {
              const i3 = new r2.Vector3(k2.x, k2.y, 0).unproject(A2.current.camera), o4 = "click" === e4.type ? B2(e4) : 0;
              for (let r3 of n4) {
                let n5 = { current: false };
                if (t4(l({}, e4, {}, r3, { stopped: n5, delta: o4, unprojectedPoint: i3, ray: j2.ray, stopPropagation: () => n5.current = true, sourceEvent: e4 })), true === n5.current)
                  break;
              }
            }
            return n4;
          }, []), q2 = Object(i2.useCallback)((e4) => (t4) => {
            A2.current.pointer.emit(e4, t4);
            const n4 = H2(t4, (t5) => {
              const n5 = t5.eventObject, r3 = n5.__handlers;
              r3 && r3[e4] && ("click" !== e4 || A2.current.initialHits.includes(n5)) && r3[e4](t5);
            });
            "pointerDown" === e4 && (A2.current.initialClick = [t4.clientX, t4.clientY], A2.current.initialHits = n4.map((e5) => e5.eventObject)), "click" === e4 && !n4.length && T2 && B2(t4) <= 2 && T2();
          }, [T2]), Q2 = /* @__PURE__ */ new Map(), V2 = Object(i2.useCallback)((e4) => {
            A2.current.pointer.emit("pointerMove", e4);
            const t4 = H2(e4, (e5) => {
              const t5 = e5.eventObject.__handlers;
              if (t5 && (t5.pointerMove && t5.pointerMove(e5), t5.pointerOver || t5.pointerEnter || t5.pointerOut || t5.pointerLeave)) {
                const n4 = N(e5), r3 = Q2.get(n4);
                r3 ? r3.stopped.current && e5.stopPropagation() : (Q2.set(n4, e5), t5.pointerOver && t5.pointerOver(l({}, e5, { type: "pointerover" })), t5.pointerEnter && t5.pointerEnter(l({}, e5, { type: "pointerEnter" })));
              }
            });
            return G2(e4, t4), t4;
          }, []), G2 = Object(i2.useCallback)((e4, t4) => {
            A2.current.pointer.emit("pointerCancel", e4), t4 || (t4 = H2(e4, () => null)), Array.from(Q2.values()).forEach((e5) => {
              if (t4 && (!t4.length || !t4.find((t5) => t5.eventObject === e5.eventObject))) {
                const t5 = e5.eventObject.__handlers;
                t5 && (t5.pointerOut && t5.pointerOut(l({}, e5, { type: "pointerout" })), t5.pointerLeave && t5.pointerLeave(l({}, e5, { type: "pointerleave" }))), Q2.delete(N(e5));
              }
            });
          }, []);
          return { onClick: q2("click"), onWheel: q2("wheel"), onPointerDown: q2("pointerDown"), onPointerUp: q2("pointerUp"), onPointerLeave: (e4) => G2(e4, []), onPointerMove: V2, onGotPointerCapture: (e4) => A2.current.captured = W2(e4, false), onLostPointerCapture: (e4) => (A2.current.captured = void 0, G2(e4)) };
        };
        function A(e3, t3) {
          return function(e4, t4 = 0) {
            const { subscribe: n3 } = Object(i2.useContext)(L), r3 = Object(i2.useRef)(e4);
            Object(i2.useLayoutEffect)(() => void (r3.current = e4), [e4]), Object(i2.useEffect)(() => {
              const e5 = n3(r3, t4);
              return () => e5();
            }, [t4]);
          }(e3, t3 ? 1 : 0);
        }
        const U = Object(i2.memo)((e3) => {
          let { setEvents: t3, canvas: n3 } = e3, o3 = a2(e3, ["setEvents", "canvas"]);
          const u2 = Object(i2.useMemo)(() => new r2.WebGLRenderer(l({ canvas: n3, antialias: true, alpha: true }, o3.gl)), []), c2 = R(l({}, o3, { gl: u2 }));
          return Object(i2.useEffect)(() => void t3(c2), [c2]), null;
        }), F = { position: "relative", width: "100%", height: "100%", overflow: "hidden" }, D = Object(i2.memo)((e3) => {
          const { style: t3 } = e3, n3 = a2(e3, ["children", "vr", "shadowMap", "orthographic", "invalidateFrameloop", "updateDefaultCamera", "noEvents", "gl", "camera", "raycaster", "pixelRatio", "style", "onCreated", "onPointerMissed"]), r3 = Object(i2.useRef)(), [o3, u2] = Object(i2.useState)({}), [c2, s2, f2] = function() {
            const e4 = Object(i2.useRef)(null), [t4, n4] = Object(i2.useState)({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), [r4] = Object(i2.useState)(() => new p.a(() => e4.current && n4(e4.current.getBoundingClientRect())));
            Object(i2.useEffect)(() => (e4.current && r4.observe(e4.current), () => r4.disconnect()), []);
            const o4 = Object(i2.useRef)(false), a3 = Object(i2.useMemo)(() => ({ _cache: t4, get current() {
              return o4.current && (o4.current = false, this._cache = e4.current.getBoundingClientRect()), this._cache;
            } }), [t4]);
            return Object(i2.useEffect)(() => {
              const t5 = (t6) => {
                o4.current || (o4.current = t6.target.contains(e4.current));
              };
              return window.addEventListener("scroll", t5, { capture: true, passive: true }), () => window.removeEventListener("scroll", t5, true);
            }, []), [e4, t4, a3];
          }();
          return "undefined" == typeof window ? Object(i2.createElement)("div", { style: l({}, F, {}, t3) }, Object(i2.createElement)("canvas", { style: { display: "block" } })) : Object(i2.createElement)("div", l({ ref: c2, style: l({}, F, {}, t3) }, o3, n3), Object(i2.createElement)("canvas", { ref: r3, style: { display: "block" } }), r3.current && Object(i2.createElement)(U, l({}, e3, { size: s2, rayBounds: f2, canvas: r3.current, setEvents: u2 })));
        });
        var W = n2(78), B = n2(1), H = n2.n(B);
        function q() {
          return (q = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function Q(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        var V = function(e3) {
          var t3 = e3.color, n3 = e3.size, r3 = Q(e3, ["color", "size"]);
          return o2.a.createElement("svg", q({ xmlns: "http://www.w3.org/2000/svg", width: n3, height: n3, viewBox: "0 0 24 24", fill: "none", stroke: t3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, r3), o2.a.createElement("circle", { cx: "12", cy: "12", r: "10" }), o2.a.createElement("polygon", { points: "10 8 16 12 10 16 10 8" }));
        };
        V.propTypes = { color: H.a.string, size: H.a.oneOfType([H.a.string, H.a.number]) }, V.defaultProps = { color: "currentColor", size: "24" };
        var G = V;
        function $() {
          return ($ = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function K(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        var X = function(e3) {
          var t3 = e3.color, n3 = e3.size, r3 = K(e3, ["color", "size"]);
          return o2.a.createElement("svg", $({ xmlns: "http://www.w3.org/2000/svg", width: n3, height: n3, viewBox: "0 0 24 24", fill: "none", stroke: t3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, r3), o2.a.createElement("circle", { cx: "12", cy: "12", r: "10" }), o2.a.createElement("line", { x1: "10", y1: "15", x2: "10", y2: "9" }), o2.a.createElement("line", { x1: "14", y1: "15", x2: "14", y2: "9" }));
        };
        X.propTypes = { color: H.a.string, size: H.a.oneOfType([H.a.string, H.a.number]) }, X.defaultProps = { color: "currentColor", size: "24" };
        var Y = X;
        function J() {
          return (J = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function Z(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        var ee = function(e3) {
          var t3 = e3.color, n3 = e3.size, r3 = Z(e3, ["color", "size"]);
          return o2.a.createElement("svg", J({ xmlns: "http://www.w3.org/2000/svg", width: n3, height: n3, viewBox: "0 0 24 24", fill: "none", stroke: t3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, r3), o2.a.createElement("circle", { cx: "12", cy: "12", r: "10" }), o2.a.createElement("line", { x1: "12", y1: "8", x2: "12", y2: "16" }), o2.a.createElement("line", { x1: "8", y1: "12", x2: "16", y2: "12" }));
        };
        ee.propTypes = { color: H.a.string, size: H.a.oneOfType([H.a.string, H.a.number]) }, ee.defaultProps = { color: "currentColor", size: "24" };
        var te2 = ee;
        function ne() {
          return (ne = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function re(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        var ie = function(e3) {
          var t3 = e3.color, n3 = e3.size, r3 = re(e3, ["color", "size"]);
          return o2.a.createElement("svg", ne({ xmlns: "http://www.w3.org/2000/svg", width: n3, height: n3, viewBox: "0 0 24 24", fill: "none", stroke: t3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, r3), o2.a.createElement("circle", { cx: "12", cy: "12", r: "10" }), o2.a.createElement("line", { x1: "8", y1: "12", x2: "16", y2: "12" }));
        };
        ie.propTypes = { color: H.a.string, size: H.a.oneOfType([H.a.string, H.a.number]) }, ie.defaultProps = { color: "currentColor", size: "24" };
        var oe = ie;
        function ae() {
          return (ae = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function le(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        var ue = function(e3) {
          var t3 = e3.color, n3 = e3.size, r3 = le(e3, ["color", "size"]);
          return o2.a.createElement("svg", ae({ xmlns: "http://www.w3.org/2000/svg", width: n3, height: n3, viewBox: "0 0 24 24", fill: "none", stroke: t3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, r3), o2.a.createElement("polyline", { points: "18 15 12 9 6 15" }));
        };
        ue.propTypes = { color: H.a.string, size: H.a.oneOfType([H.a.string, H.a.number]) }, ue.defaultProps = { color: "currentColor", size: "24" };
        var ce = ue;
        function se() {
          return (se = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function fe(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        var pe = function(e3) {
          var t3 = e3.color, n3 = e3.size, r3 = fe(e3, ["color", "size"]);
          return o2.a.createElement("svg", se({ xmlns: "http://www.w3.org/2000/svg", width: n3, height: n3, viewBox: "0 0 24 24", fill: "none", stroke: t3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, r3), o2.a.createElement("polyline", { points: "6 9 12 15 18 9" }));
        };
        pe.propTypes = { color: H.a.string, size: H.a.oneOfType([H.a.string, H.a.number]) }, pe.defaultProps = { color: "currentColor", size: "24" };
        var de = pe;
        function he() {
          return (he = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function me(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        var ve = function(e3) {
          var t3 = e3.color, n3 = e3.size, r3 = me(e3, ["color", "size"]);
          return o2.a.createElement("svg", he({ xmlns: "http://www.w3.org/2000/svg", width: n3, height: n3, viewBox: "0 0 24 24", fill: "none", stroke: t3, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, r3), o2.a.createElement("polyline", { points: "17 1 21 5 17 9" }), o2.a.createElement("path", { d: "M3 11V9a4 4 0 0 1 4-4h14" }), o2.a.createElement("polyline", { points: "7 23 3 19 7 15" }), o2.a.createElement("path", { d: "M21 13v2a4 4 0 0 1-4 4H3" }));
        };
        ve.propTypes = { color: H.a.string, size: H.a.oneOfType([H.a.string, H.a.number]) }, ve.defaultProps = { color: "currentColor", size: "24" };
        var be = ve, ye = n2(79), ge = n2(80), xe = n2(81), we = n2(82);
        function Ee(e3, t3) {
          return function(e4) {
            if (Array.isArray(e4))
              return e4;
          }(e3) || function(e4, t4) {
            if (!(Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)))
              return;
            var n3 = [], r3 = true, i3 = false, o3 = void 0;
            try {
              for (var a3, l2 = e4[Symbol.iterator](); !(r3 = (a3 = l2.next()).done) && (n3.push(a3.value), !t4 || n3.length !== t4); r3 = true)
                ;
            } catch (e5) {
              i3 = true, o3 = e5;
            } finally {
              try {
                r3 || null == l2.return || l2.return();
              } finally {
                if (i3)
                  throw o3;
              }
            }
            return n3;
          }(e3, t3) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }();
        }
        var Oe = new r2.LoadingManager();
        var Te = function(e3, t3) {
          var n3 = Object(i2.useMemo)(function() {
            return function(e4) {
              switch (e4) {
                case "gtlf":
                  return new ye.GLTFLoader(Oe);
                case "obj":
                  return new ge.OBJLoader(Oe);
                case "fbx":
                  return new we.FBXLoader(Oe);
                case "collada":
                  return new xe.ColladaLoader(Oe);
              }
            }(e3);
          }, [e3]), o3 = Ee(Object(i2.useState)(void 0), 2), a3 = o3[0], l2 = o3[1], u2 = Ee(Object(i2.useState)(void 0), 2), c2 = u2[0], s2 = u2[1], f2 = Ee(Object(i2.useState)(void 0), 2), p2 = f2[0], d2 = f2[1], h2 = Ee(Object(i2.useState)(0), 2), m2 = h2[0], v2 = h2[1];
          return Object(i2.useEffect)(function() {
            n3.load(t3, function(e4) {
              return l2(e4);
            }, function(e4) {
              var t4 = e4.loaded, n4 = e4.total;
              return v2(t4 / n4 * 100);
            }, function(e4) {
              return d2(e4);
            });
          }, [n3, t3]), Object(i2.useEffect)(function() {
            if (a3) {
              var e4 = new r2.Box3();
              e4.setFromObject(a3.scene);
              var t4 = new r2.Vector3();
              e4.getCenter(t4), s2(t4);
            }
          }, [a3]), { model: a3, modelCenter: c2, progress: m2, error: p2 };
        };
        n2(110);
        function Se(e3, t3) {
          return function(e4) {
            if (Array.isArray(e4))
              return e4;
          }(e3) || function(e4, t4) {
            if (!(Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)))
              return;
            var n3 = [], r3 = true, i3 = false, o3 = void 0;
            try {
              for (var a3, l2 = e4[Symbol.iterator](); !(r3 = (a3 = l2.next()).done) && (n3.push(a3.value), !t4 || n3.length !== t4); r3 = true)
                ;
            } catch (e5) {
              i3 = true, o3 = e5;
            } finally {
              try {
                r3 || null == l2.return || l2.return();
              } finally {
                if (i3)
                  throw o3;
              }
            }
            return n3;
          }(e3, t3) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }();
        }
        var _e = { once: r2.LoopOnce, repeat: r2.LoopRepeat }, ke = void 0;
        function je(e3, t3, n3) {
          var r3 = t3._clip.duration * (n3 / 100);
          t3.paused = false, t3.enabled = true, t3.time = 0, e3.time = 0, e3.update(r3);
        }
        function Pe() {
          cancelAnimationFrame(ke), ke = void 0;
        }
        var Ce = function(e3) {
          var t3 = e3.mixer, n3 = e3.progress, r3 = e3.animation, o3 = e3.timeScale, a3 = e3.loopMode, l2 = e3.playing, u2 = e3.setProgress, c2 = e3.setPlaying;
          Object(i2.useEffect)(function() {
            if (t3 && r3 && l2)
              return Pe(), t3.stopAllAction(), je(t3, r3, n3), r3.setEffectiveTimeScale(o3).setLoop(a3, 1 / 0).fadeIn(0).play(), function(e4, t4, n4, r4) {
                var i3 = 0;
                ke = requestAnimationFrame(function o4(a4) {
                  if (t4.paused)
                    return n4(false), r4(0), void (i3 = 0);
                  var l3 = i3 ? a4 - i3 : 0;
                  e4.update(l3 / 1e3), i3 = a4;
                  var u3 = t4._clip.duration, c3 = e4.time % u3;
                  r4(c3 / u3 * 100), ke = requestAnimationFrame(o4);
                });
              }(t3, r3, c2, u2), function() {
                Pe();
              };
          }, [t3, l2, r3]);
        }, ze = function(e3) {
          var t3 = Se(Object(i2.useState)(true), 2), n3 = t3[0], o3 = t3[1], a3 = Se(Object(i2.useState)(_e.repeat), 2), l2 = a3[0], u2 = a3[1], c2 = Se(Object(i2.useState)(1), 2), s2 = c2[0], f2 = c2[1], p2 = Se(Object(i2.useState)(0), 2), d2 = p2[0], h2 = p2[1], m2 = Se(Object(i2.useState)(0), 2), v2 = m2[0], b3 = m2[1], y2 = function(e4) {
            var t4 = e4 && (e4.animations || (e4.geometry || {}).animations) || [], n4 = Se(Object(i2.useState)(void 0), 2), o4 = n4[0], a4 = n4[1], l3 = Se(Object(i2.useState)([]), 2), u3 = l3[0], c3 = l3[1];
            return Object(i2.useEffect)(function() {
              if (e4) {
                var n5 = new r2.AnimationMixer(e4.scene), i3 = t4.map(function(e5) {
                  var t5 = n5.clipAction(e5);
                  return t5.clampWhenFinished = true, t5.enabled = true, t5;
                });
                a4(n5), c3(i3);
              }
            }, [e4]), [o4, u3];
          }(e3), g2 = Se(y2, 2), x2 = g2[0], w2 = g2[1], E2 = w2[v2];
          return Ce({ mixer: x2, progress: d2, animation: E2, playing: n3, loopMode: l2, timeScale: s2, setProgress: h2, setPlaying: o3 }), Object(i2.useEffect)(function() {
            E2 && E2.setLoop(l2, 1 / 0);
          }, [E2, l2]), Object(i2.useEffect)(function() {
            x2 && (x2.timeScale = s2);
          }, [x2, s2]), { progress: d2, loopMode: l2, setLoopMode: u2, timeScale: s2, setTimeScale: f2, animations: w2, animationIndex: v2, setAnimationIndex: function(e4) {
            Pe(), h2(0), je(x2, E2, 0), b3(e4);
          }, playing: n3, play: function() {
            o3(true);
          }, pause: function() {
            Pe(), o3(false);
          }, seek: function(e4) {
            Pe(), o3(false), h2(e4), je(x2, E2, e4);
          } };
        }, Ie = function(e3) {
          var t3 = e3.src, n3 = e3.type, r3 = e3.children, i3 = Te(n3, t3), o3 = i3.model, a3 = i3.modelCenter, l2 = i3.error, u2 = i3.progress, c2 = ze(o3);
          return r3({ model: o3, modelCenter: a3, modelProgress: u2, modelError: l2, animations: c2.animations, animationIndex: c2.animationIndex, playing: c2.playing, loopMode: c2.loopMode, timeScale: c2.timeScale, animationProgress: c2.progress, play: c2.play, pause: c2.pause, seek: c2.seek, setLoopMode: c2.setLoopMode, setTimeScale: c2.setTimeScale, setAnimationIndex: c2.setAnimationIndex });
        };
        function Me() {
          return (Me = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function Ne(e3, t3) {
          var n3 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var r3 = Object.getOwnPropertySymbols(e3);
            t3 && (r3 = r3.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), n3.push.apply(n3, r3);
          }
          return n3;
        }
        function Le(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var n3 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? Ne(n3, true).forEach(function(t4) {
              Re(e3, t4, n3[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : Ne(n3).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
            });
          }
          return e3;
        }
        function Re(e3, t3, n3) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[t3] = n3, e3;
        }
        function Ae(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        var Ue = function(e3) {
          var t3 = e3.children, n3 = e3.style, r3 = Ae(e3, ["children", "style"]);
          return i2.createElement("button", Me({}, r3, { style: Le({ background: "none", border: "none", margin: 0, padding: "0 8px", display: "flex", alignItems: "center", color: "#fff", cursor: "pointer" }, n3) }), t3);
        }, Fe = function(e3) {
          var t3 = e3.progress, n3 = e3.style, r3 = Ae(e3, ["progress", "style"]);
          return i2.createElement("progress", Me({ max: 100, value: t3, style: Le({ display: "block" }, n3) }, r3));
        }, De = function(e3) {
          var t3 = e3.children, n3 = e3.position, r3 = void 0 === n3 ? "static" : n3, o3 = e3.display, a3 = void 0 === o3 ? "flex" : o3, l2 = e3.direction, u2 = void 0 === l2 ? "row" : l2, c2 = e3.align, s2 = e3.justify, f2 = e3.top, p2 = e3.bottom, d2 = e3.left, h2 = e3.right, m2 = e3.width, v2 = e3.height, b3 = e3.style;
          return i2.createElement("div", { style: Le({ display: a3, position: r3, flexDirection: u2, alignItems: c2, justifyContent: s2, top: f2, bottom: p2, left: d2, right: h2, width: m2, height: v2 }, b3) }, t3);
        }, We = { whiteSpace: "nowrap", textOverflow: "ellipsis", overflow: "hidden" };
        function Be(e3, t3) {
          if (null == e3)
            return {};
          var n3, r3, i3 = function(e4, t4) {
            if (null == e4)
              return {};
            var n4, r4, i4 = {}, o4 = Object.keys(e4);
            for (r4 = 0; r4 < o4.length; r4++)
              n4 = o4[r4], t4.indexOf(n4) >= 0 || (i4[n4] = e4[n4]);
            return i4;
          }(e3, t3);
          if (Object.getOwnPropertySymbols) {
            var o3 = Object.getOwnPropertySymbols(e3);
            for (r3 = 0; r3 < o3.length; r3++)
              n3 = o3[r3], t3.indexOf(n3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, n3) && (i3[n3] = e3[n3]);
          }
          return i3;
        }
        function He(e3, t3) {
          var n3 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var r3 = Object.getOwnPropertySymbols(e3);
            t3 && (r3 = r3.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), n3.push.apply(n3, r3);
          }
          return n3;
        }
        function qe(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var n3 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? He(n3, true).forEach(function(t4) {
              Qe(e3, t4, n3[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : He(n3).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(n3, t4));
            });
          }
          return e3;
        }
        function Qe(e3, t3, n3) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[t3] = n3, e3;
        }
        function Ve(e3, t3) {
          return function(e4) {
            if (Array.isArray(e4))
              return e4;
          }(e3) || function(e4, t4) {
            if (!(Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)))
              return;
            var n3 = [], r3 = true, i3 = false, o3 = void 0;
            try {
              for (var a3, l2 = e4[Symbol.iterator](); !(r3 = (a3 = l2.next()).done) && (n3.push(a3.value), !t4 || n3.length !== t4); r3 = true)
                ;
            } catch (e5) {
              i3 = true, o3 = e5;
            } finally {
              try {
                r3 || null == l2.return || l2.return();
              } finally {
                if (i3)
                  throw o3;
              }
            }
            return n3;
          }(e3, t3) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }();
        }
        function Ge() {
          return (Ge = Object.assign || function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var n3 = arguments[t3];
              for (var r3 in n3)
                Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
            }
            return e3;
          }).apply(this, arguments);
        }
        function $e(e3) {
          var t3 = Object(i2.useRef)(), n3 = Object(i2.useContext)(L).camera;
          return A(function() {
            return t3.current && t3.current.update();
          }, false), i2.createElement("orbitControls", Ge({ ref: t3, args: [n3] }, e3));
        }
        ((e3) => void (E = l({}, E, {}, e3)))({ OrbitControls: W.OrbitControls });
        var Ke = function(e3) {
          var t3 = e3.progress;
          return i2.createElement("button", { style: { position: "absolute", left: "calc(".concat(t3, "% - 4px)"), padding: 0, height: "100%", width: "8px", border: "none", borderRadius: "3px", cursor: "pointer" } });
        }, Xe = function(e3) {
          var t3 = e3.playing, n3 = e3.play, r3 = e3.pause;
          return i2.createElement(Ue, { onClick: t3 ? r3 : n3 }, t3 ? i2.createElement(Y, { size: 16 }) : i2.createElement(G, { size: 16 }));
        }, Ye = function(e3) {
          var t3 = e3.timeScale, n3 = e3.setTimeScale;
          return i2.createElement(i2.Fragment, null, i2.createElement(Ue, { onClick: function() {
            n3(Math.max(0.25, t3 - 0.25));
          } }, i2.createElement(oe, { size: 16 })), i2.createElement(Ue, { onClick: function() {
            n3(Math.min(5, t3 + 0.25));
          } }, i2.createElement(te2, { size: 16 })));
        }, Je = function(e3) {
          var t3 = e3.loopMode, n3 = e3.setLoopMode;
          return i2.createElement(Ue, { onClick: function() {
            var e4 = t3 === r2.LoopRepeat ? r2.LoopOnce : r2.LoopRepeat;
            n3(e4);
          } }, i2.createElement(be, { size: 16, color: t3 === r2.LoopRepeat ? "currentColor" : "#bebebe" }));
        }, Ze = function(e3) {
          var t3 = e3.animations, n3 = e3.animationIndex, r3 = e3.setAnimationIndex, o3 = t3.length && t3[n3]._clip.name, a3 = Ve(Object(i2.useState)(false), 2), l2 = a3[0], u2 = a3[1];
          return i2.createElement(De, { position: "relative" }, l2 && i2.createElement(De, { position: "absolute", direction: "column", justify: "center", bottom: 0, right: 0, style: { marginBottom: "32px", background: "rgba(0, 0, 0, 0.5)", minHeight: "32px", padding: "4px" } }, t3.map(function(e4, t4) {
            return i2.createElement(Ue, { onClick: function() {
              r3(t4), u2(false);
            } }, e4._clip.name);
          })), i2.createElement(Ue, { onClick: function() {
            return u2(!l2);
          } }, i2.createElement("span", { style: qe({ width: "64px" }, We) }, o3), l2 ? i2.createElement(ce, { size: 16 }) : i2.createElement(de, { size: 16 })));
        }, et2 = function(e3) {
          var t3 = e3.animations, n3 = e3.animationIndex, r3 = e3.progress, o3 = e3.timeScale, a3 = e3.loopMode, l2 = e3.playing, u2 = e3.play, c2 = e3.pause, s2 = e3.seek, f2 = e3.setTimeScale, p2 = e3.setLoopMode, d2 = e3.setAnimationIndex;
          return i2.createElement(De, { width: "100%", style: { padding: "8px", background: "rgba(0, 0, 0, 0.5)" } }, i2.createElement(Xe, { play: u2, pause: c2, playing: l2 }), i2.createElement(Ye, { timeScale: o3, setTimeScale: f2 }), i2.createElement(Je, { loopMode: a3, setLoopMode: p2 }), i2.createElement(Ze, { animations: t3, animationIndex: n3, setAnimationIndex: d2 }), i2.createElement(De, { position: "relative", width: "100%", style: { marginLeft: "8px" } }, i2.createElement(Fe, { progress: r3, style: { width: "100%", cursor: "pointer" }, onClick: function(e4) {
            var t4 = e4.currentTarget.getBoundingClientRect().left, n4 = e4.currentTarget.offsetWidth, r4 = e4.clientX;
            s2((r4 - t4) / n4 * 100);
          } }), i2.createElement(Ke, { progress: r3 })));
        }, tt = function(e3) {
          var t3 = e3.src, n3 = e3.type, r3 = e3.aspect, o3 = Be(e3, ["src", "type", "aspect"]);
          return i2.createElement(Ie, { src: t3, type: n3 }, function(e4) {
            var t4 = e4.model, n4 = e4.modelCenter, a3 = e4.modelProgress, l2 = e4.modelError, u2 = e4.animations, c2 = e4.animationIndex, s2 = e4.playing, f2 = e4.loopMode, p2 = e4.timeScale, d2 = e4.animationProgress, h2 = e4.play, m2 = e4.pause, v2 = e4.seek, b3 = e4.setLoopMode, y2 = e4.setTimeScale, g2 = e4.setAnimationIndex;
            return i2.createElement(De, { position: "relative", align: "center", direction: "column", justify: "center" }, a3 < 100 && !l2 && i2.createElement(Fe, { progress: a3, style: { position: "absolute" } }), i2.createElement(De, { position: "relative", width: "100%", style: { paddingBottom: "".concat(r3[1] / r3[0] * 100, "%") } }, i2.createElement(De, { position: "absolute", top: 0, left: 0, width: "100%", height: "100%" }, i2.createElement(D, o3, i2.createElement($e, { camera: n4, enableDamping: true, enablePan: true, dampingFactor: 0.1, rotateSpeed: 0.1, maxPolarAngle: Math.PI / 2 }), i2.createElement("ambientLight", { intensity: 0.5 }), i2.createElement("spotLight", { intensity: 0.8, position: [250, 250, -250] }), i2.createElement("spotLight", { intensity: 0.8, position: [250, 250, 250] }), i2.createElement("spotLight", { intensity: 0.8, position: [-250, 250, 250] }), t4 && i2.createElement("primitive", { object: t4.scene || t4 })))), i2.createElement(et2, { progress: d2, playing: s2, animations: u2, animationIndex: c2, setAnimationIndex: g2, loopMode: f2, setLoopMode: b3, timeScale: p2, setTimeScale: y2, play: h2, pause: m2, seek: v2 }));
          });
        };
        tt.defaultProps = { aspect: [16, 9] };
        var nt = tt;
        t2.default = nt;
      }]);
    });
  }
});
export default require_dist();
/*! Bundled license information:

three/build/three.cjs:
  (**
   * @license
   * Copyright 2010-2023 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

three/examples/jsm/libs/fflate.module.js:
  (*!
  fflate - fast JavaScript compression/decompression
  <https://101arrowz.github.io/fflate>
  Licensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE
  version 0.6.9
  *)

react-model-viewer/dist/index.js:
  (** @license React v0.23.0
   * react-reconciler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
  (** @license React v0.17.0
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=react-model-viewer.js.map
